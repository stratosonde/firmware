
LoraWAN_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bf10  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  0801c050  0801c050  0001d050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801cb48  0801cb48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801cc20  0801cc20  0001e178  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  0801cc20  0801cc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801cc28  0801cc28  0001e178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801cc28  0801cc28  0001dc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801cc2c  0801cc2c  0001dc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000178  20000000  0801cc30  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001b70  20000178  0801cda8  0001e178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ce8  0801cda8  0001ece8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001e178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040f7d  00000000  00000000  0001e1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009b23  00000000  00000000  0005f11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003480  00000000  00000000  00068c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000284e  00000000  00000000  0006c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280d8  00000000  00000000  0006e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000420ce  00000000  00000000  000969ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce48c  00000000  00000000  000d8abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a6f48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dfdc  00000000  00000000  001a6f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001b4f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000178 	.word	0x20000178
 800015c:	00000000 	.word	0x00000000
 8000160:	0801c038 	.word	0x0801c038

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000017c 	.word	0x2000017c
 800017c:	0801c038 	.word	0x0801c038

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_f2iz>:
 8000924:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000928:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800092c:	d30f      	bcc.n	800094e <__aeabi_f2iz+0x2a>
 800092e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000932:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000936:	d90d      	bls.n	8000954 <__aeabi_f2iz+0x30>
 8000938:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800093c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000940:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000944:	fa23 f002 	lsr.w	r0, r3, r2
 8000948:	bf18      	it	ne
 800094a:	4240      	negne	r0, r0
 800094c:	4770      	bx	lr
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	4770      	bx	lr
 8000954:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000958:	d101      	bne.n	800095e <__aeabi_f2iz+0x3a>
 800095a:	0242      	lsls	r2, r0, #9
 800095c:	d105      	bne.n	800096a <__aeabi_f2iz+0x46>
 800095e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000962:	bf08      	it	eq
 8000964:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000968:	4770      	bx	lr
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	4770      	bx	lr

08000970 <__aeabi_uldivmod>:
 8000970:	b953      	cbnz	r3, 8000988 <__aeabi_uldivmod+0x18>
 8000972:	b94a      	cbnz	r2, 8000988 <__aeabi_uldivmod+0x18>
 8000974:	2900      	cmp	r1, #0
 8000976:	bf08      	it	eq
 8000978:	2800      	cmpeq	r0, #0
 800097a:	bf1c      	itt	ne
 800097c:	f04f 31ff 	movne.w	r1, #4294967295
 8000980:	f04f 30ff 	movne.w	r0, #4294967295
 8000984:	f000 b988 	b.w	8000c98 <__aeabi_idiv0>
 8000988:	f1ad 0c08 	sub.w	ip, sp, #8
 800098c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000990:	f000 f806 	bl	80009a0 <__udivmoddi4>
 8000994:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800099c:	b004      	add	sp, #16
 800099e:	4770      	bx	lr

080009a0 <__udivmoddi4>:
 80009a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a4:	9d08      	ldr	r5, [sp, #32]
 80009a6:	468e      	mov	lr, r1
 80009a8:	4604      	mov	r4, r0
 80009aa:	4688      	mov	r8, r1
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d14a      	bne.n	8000a46 <__udivmoddi4+0xa6>
 80009b0:	428a      	cmp	r2, r1
 80009b2:	4617      	mov	r7, r2
 80009b4:	d962      	bls.n	8000a7c <__udivmoddi4+0xdc>
 80009b6:	fab2 f682 	clz	r6, r2
 80009ba:	b14e      	cbz	r6, 80009d0 <__udivmoddi4+0x30>
 80009bc:	f1c6 0320 	rsb	r3, r6, #32
 80009c0:	fa01 f806 	lsl.w	r8, r1, r6
 80009c4:	fa20 f303 	lsr.w	r3, r0, r3
 80009c8:	40b7      	lsls	r7, r6
 80009ca:	ea43 0808 	orr.w	r8, r3, r8
 80009ce:	40b4      	lsls	r4, r6
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f fc87 	uxth.w	ip, r7
 80009d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80009dc:	0c23      	lsrs	r3, r4, #16
 80009de:	fb0e 8811 	mls	r8, lr, r1, r8
 80009e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e6:	fb01 f20c 	mul.w	r2, r1, ip
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d909      	bls.n	8000a02 <__udivmoddi4+0x62>
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80009f4:	f080 80ea 	bcs.w	8000bcc <__udivmoddi4+0x22c>
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f240 80e7 	bls.w	8000bcc <__udivmoddi4+0x22c>
 80009fe:	3902      	subs	r1, #2
 8000a00:	443b      	add	r3, r7
 8000a02:	1a9a      	subs	r2, r3, r2
 8000a04:	b2a3      	uxth	r3, r4
 8000a06:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a0a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a12:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a16:	459c      	cmp	ip, r3
 8000a18:	d909      	bls.n	8000a2e <__udivmoddi4+0x8e>
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a20:	f080 80d6 	bcs.w	8000bd0 <__udivmoddi4+0x230>
 8000a24:	459c      	cmp	ip, r3
 8000a26:	f240 80d3 	bls.w	8000bd0 <__udivmoddi4+0x230>
 8000a2a:	443b      	add	r3, r7
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a32:	eba3 030c 	sub.w	r3, r3, ip
 8000a36:	2100      	movs	r1, #0
 8000a38:	b11d      	cbz	r5, 8000a42 <__udivmoddi4+0xa2>
 8000a3a:	40f3      	lsrs	r3, r6
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d905      	bls.n	8000a56 <__udivmoddi4+0xb6>
 8000a4a:	b10d      	cbz	r5, 8000a50 <__udivmoddi4+0xb0>
 8000a4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a50:	2100      	movs	r1, #0
 8000a52:	4608      	mov	r0, r1
 8000a54:	e7f5      	b.n	8000a42 <__udivmoddi4+0xa2>
 8000a56:	fab3 f183 	clz	r1, r3
 8000a5a:	2900      	cmp	r1, #0
 8000a5c:	d146      	bne.n	8000aec <__udivmoddi4+0x14c>
 8000a5e:	4573      	cmp	r3, lr
 8000a60:	d302      	bcc.n	8000a68 <__udivmoddi4+0xc8>
 8000a62:	4282      	cmp	r2, r0
 8000a64:	f200 8105 	bhi.w	8000c72 <__udivmoddi4+0x2d2>
 8000a68:	1a84      	subs	r4, r0, r2
 8000a6a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a6e:	2001      	movs	r0, #1
 8000a70:	4690      	mov	r8, r2
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d0e5      	beq.n	8000a42 <__udivmoddi4+0xa2>
 8000a76:	e9c5 4800 	strd	r4, r8, [r5]
 8000a7a:	e7e2      	b.n	8000a42 <__udivmoddi4+0xa2>
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	f000 8090 	beq.w	8000ba2 <__udivmoddi4+0x202>
 8000a82:	fab2 f682 	clz	r6, r2
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	f040 80a4 	bne.w	8000bd4 <__udivmoddi4+0x234>
 8000a8c:	1a8a      	subs	r2, r1, r2
 8000a8e:	0c03      	lsrs	r3, r0, #16
 8000a90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a94:	b280      	uxth	r0, r0
 8000a96:	b2bc      	uxth	r4, r7
 8000a98:	2101      	movs	r1, #1
 8000a9a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a9e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa6:	fb04 f20c 	mul.w	r2, r4, ip
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x11e>
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ab4:	d202      	bcs.n	8000abc <__udivmoddi4+0x11c>
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	f200 80e0 	bhi.w	8000c7c <__udivmoddi4+0x2dc>
 8000abc:	46c4      	mov	ip, r8
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ac4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ac8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000acc:	fb02 f404 	mul.w	r4, r2, r4
 8000ad0:	429c      	cmp	r4, r3
 8000ad2:	d907      	bls.n	8000ae4 <__udivmoddi4+0x144>
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ada:	d202      	bcs.n	8000ae2 <__udivmoddi4+0x142>
 8000adc:	429c      	cmp	r4, r3
 8000ade:	f200 80ca 	bhi.w	8000c76 <__udivmoddi4+0x2d6>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	1b1b      	subs	r3, r3, r4
 8000ae6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000aea:	e7a5      	b.n	8000a38 <__udivmoddi4+0x98>
 8000aec:	f1c1 0620 	rsb	r6, r1, #32
 8000af0:	408b      	lsls	r3, r1
 8000af2:	fa22 f706 	lsr.w	r7, r2, r6
 8000af6:	431f      	orrs	r7, r3
 8000af8:	fa0e f401 	lsl.w	r4, lr, r1
 8000afc:	fa20 f306 	lsr.w	r3, r0, r6
 8000b00:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b04:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b08:	4323      	orrs	r3, r4
 8000b0a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b0e:	fa1f fc87 	uxth.w	ip, r7
 8000b12:	fbbe f0f9 	udiv	r0, lr, r9
 8000b16:	0c1c      	lsrs	r4, r3, #16
 8000b18:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b1c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b20:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x1a0>
 8000b2c:	193c      	adds	r4, r7, r4
 8000b2e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b32:	f080 809c 	bcs.w	8000c6e <__udivmoddi4+0x2ce>
 8000b36:	45a6      	cmp	lr, r4
 8000b38:	f240 8099 	bls.w	8000c6e <__udivmoddi4+0x2ce>
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	443c      	add	r4, r7
 8000b40:	eba4 040e 	sub.w	r4, r4, lr
 8000b44:	fa1f fe83 	uxth.w	lr, r3
 8000b48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b50:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b54:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b58:	45a4      	cmp	ip, r4
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x1ce>
 8000b5c:	193c      	adds	r4, r7, r4
 8000b5e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b62:	f080 8082 	bcs.w	8000c6a <__udivmoddi4+0x2ca>
 8000b66:	45a4      	cmp	ip, r4
 8000b68:	d97f      	bls.n	8000c6a <__udivmoddi4+0x2ca>
 8000b6a:	3b02      	subs	r3, #2
 8000b6c:	443c      	add	r4, r7
 8000b6e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b72:	eba4 040c 	sub.w	r4, r4, ip
 8000b76:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b7a:	4564      	cmp	r4, ip
 8000b7c:	4673      	mov	r3, lr
 8000b7e:	46e1      	mov	r9, ip
 8000b80:	d362      	bcc.n	8000c48 <__udivmoddi4+0x2a8>
 8000b82:	d05f      	beq.n	8000c44 <__udivmoddi4+0x2a4>
 8000b84:	b15d      	cbz	r5, 8000b9e <__udivmoddi4+0x1fe>
 8000b86:	ebb8 0203 	subs.w	r2, r8, r3
 8000b8a:	eb64 0409 	sbc.w	r4, r4, r9
 8000b8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b92:	fa22 f301 	lsr.w	r3, r2, r1
 8000b96:	431e      	orrs	r6, r3
 8000b98:	40cc      	lsrs	r4, r1
 8000b9a:	e9c5 6400 	strd	r6, r4, [r5]
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	e74f      	b.n	8000a42 <__udivmoddi4+0xa2>
 8000ba2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ba6:	0c01      	lsrs	r1, r0, #16
 8000ba8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bac:	b280      	uxth	r0, r0
 8000bae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4638      	mov	r0, r7
 8000bb6:	463c      	mov	r4, r7
 8000bb8:	46b8      	mov	r8, r7
 8000bba:	46be      	mov	lr, r7
 8000bbc:	2620      	movs	r6, #32
 8000bbe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bc2:	eba2 0208 	sub.w	r2, r2, r8
 8000bc6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bca:	e766      	b.n	8000a9a <__udivmoddi4+0xfa>
 8000bcc:	4601      	mov	r1, r0
 8000bce:	e718      	b.n	8000a02 <__udivmoddi4+0x62>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	e72c      	b.n	8000a2e <__udivmoddi4+0x8e>
 8000bd4:	f1c6 0220 	rsb	r2, r6, #32
 8000bd8:	fa2e f302 	lsr.w	r3, lr, r2
 8000bdc:	40b7      	lsls	r7, r6
 8000bde:	40b1      	lsls	r1, r6
 8000be0:	fa20 f202 	lsr.w	r2, r0, r2
 8000be4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be8:	430a      	orrs	r2, r1
 8000bea:	fbb3 f8fe 	udiv	r8, r3, lr
 8000bee:	b2bc      	uxth	r4, r7
 8000bf0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000bf4:	0c11      	lsrs	r1, r2, #16
 8000bf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bfa:	fb08 f904 	mul.w	r9, r8, r4
 8000bfe:	40b0      	lsls	r0, r6
 8000c00:	4589      	cmp	r9, r1
 8000c02:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c06:	b280      	uxth	r0, r0
 8000c08:	d93e      	bls.n	8000c88 <__udivmoddi4+0x2e8>
 8000c0a:	1879      	adds	r1, r7, r1
 8000c0c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c10:	d201      	bcs.n	8000c16 <__udivmoddi4+0x276>
 8000c12:	4589      	cmp	r9, r1
 8000c14:	d81f      	bhi.n	8000c56 <__udivmoddi4+0x2b6>
 8000c16:	eba1 0109 	sub.w	r1, r1, r9
 8000c1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c1e:	fb09 f804 	mul.w	r8, r9, r4
 8000c22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c26:	b292      	uxth	r2, r2
 8000c28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c2c:	4542      	cmp	r2, r8
 8000c2e:	d229      	bcs.n	8000c84 <__udivmoddi4+0x2e4>
 8000c30:	18ba      	adds	r2, r7, r2
 8000c32:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c36:	d2c4      	bcs.n	8000bc2 <__udivmoddi4+0x222>
 8000c38:	4542      	cmp	r2, r8
 8000c3a:	d2c2      	bcs.n	8000bc2 <__udivmoddi4+0x222>
 8000c3c:	f1a9 0102 	sub.w	r1, r9, #2
 8000c40:	443a      	add	r2, r7
 8000c42:	e7be      	b.n	8000bc2 <__udivmoddi4+0x222>
 8000c44:	45f0      	cmp	r8, lr
 8000c46:	d29d      	bcs.n	8000b84 <__udivmoddi4+0x1e4>
 8000c48:	ebbe 0302 	subs.w	r3, lr, r2
 8000c4c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c50:	3801      	subs	r0, #1
 8000c52:	46e1      	mov	r9, ip
 8000c54:	e796      	b.n	8000b84 <__udivmoddi4+0x1e4>
 8000c56:	eba7 0909 	sub.w	r9, r7, r9
 8000c5a:	4449      	add	r1, r9
 8000c5c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c60:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c64:	fb09 f804 	mul.w	r8, r9, r4
 8000c68:	e7db      	b.n	8000c22 <__udivmoddi4+0x282>
 8000c6a:	4673      	mov	r3, lr
 8000c6c:	e77f      	b.n	8000b6e <__udivmoddi4+0x1ce>
 8000c6e:	4650      	mov	r0, sl
 8000c70:	e766      	b.n	8000b40 <__udivmoddi4+0x1a0>
 8000c72:	4608      	mov	r0, r1
 8000c74:	e6fd      	b.n	8000a72 <__udivmoddi4+0xd2>
 8000c76:	443b      	add	r3, r7
 8000c78:	3a02      	subs	r2, #2
 8000c7a:	e733      	b.n	8000ae4 <__udivmoddi4+0x144>
 8000c7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c80:	443b      	add	r3, r7
 8000c82:	e71c      	b.n	8000abe <__udivmoddi4+0x11e>
 8000c84:	4649      	mov	r1, r9
 8000c86:	e79c      	b.n	8000bc2 <__udivmoddi4+0x222>
 8000c88:	eba1 0109 	sub.w	r1, r1, r9
 8000c8c:	46c4      	mov	ip, r8
 8000c8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c92:	fb09 f804 	mul.w	r8, r9, r4
 8000c96:	e7c4      	b.n	8000c22 <__udivmoddi4+0x282>

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <SYS_InitMeasurement+0x14>)
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <SYS_InitMeasurement+0x18>)
 8000ca4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000198 	.word	0x20000198
 8000cb4:	40012400 	.word	0x40012400

08000cb8 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000cc6:	f000 f869 	bl	8000d9c <SYS_GetBatteryLevel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000cce:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <SYS_GetTemperatureLevel+0xcc>)
 8000cd0:	f000 f898 	bl	8000e04 <ADC_ReadChannels>
 8000cd4:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d88 <SYS_GetTemperatureLevel+0xd0>)
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <SYS_GetTemperatureLevel+0xd4>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d026      	beq.n	8000d30 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000ce2:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <SYS_GetTemperatureLevel+0xd0>)
 8000ce4:	881a      	ldrh	r2, [r3, #0]
 8000ce6:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <SYS_GetTemperatureLevel+0xd4>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d01c      	beq.n	8000d28 <SYS_GetTemperatureLevel+0x70>
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	4a25      	ldr	r2, [pc, #148]	@ (8000d90 <SYS_GetTemperatureLevel+0xd8>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <SYS_GetTemperatureLevel+0xd4>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2264      	movs	r2, #100	@ 0x64
 8000d0a:	fb03 f202 	mul.w	r2, r3, r2
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <SYS_GetTemperatureLevel+0xd0>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <SYS_GetTemperatureLevel+0xd4>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	1acb      	subs	r3, r1, r3
 8000d1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	331e      	adds	r3, #30
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	e001      	b.n	8000d2c <SYS_GetTemperatureLevel+0x74>
 8000d28:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d2c:	803b      	strh	r3, [r7, #0]
 8000d2e:	e01d      	b.n	8000d6c <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	fb03 f202 	mul.w	r2, r3, r2
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <SYS_GetTemperatureLevel+0xdc>)
 8000d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d3e:	1ad2      	subs	r2, r2, r3
 8000d40:	0852      	lsrs	r2, r2, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	0adb      	lsrs	r3, r3, #11
 8000d46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d4a:	fb02 f303 	mul.w	r3, r2, r3
 8000d4e:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000d52:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <SYS_GetTemperatureLevel+0xe0>)
 8000d58:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5c:	1292      	asrs	r2, r2, #10
 8000d5e:	17db      	asrs	r3, r3, #31
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	331e      	adds	r3, #30
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000d6c:	883b      	ldrh	r3, [r7, #0]
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000d76:	883b      	ldrh	r3, [r7, #0]
 8000d78:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	b0001000 	.word	0xb0001000
 8000d88:	1fff75c8 	.word	0x1fff75c8
 8000d8c:	1fff75a8 	.word	0x1fff75a8
 8000d90:	09ee009f 	.word	0x09ee009f
 8000d94:	00100101 	.word	0x00100101
 8000d98:	68db8bad 	.word	0x68db8bad

08000d9c <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000daa:	4813      	ldr	r0, [pc, #76]	@ (8000df8 <SYS_GetBatteryLevel+0x5c>)
 8000dac:	f000 f82a 	bl	8000e04 <ADC_ReadChannels>
 8000db0:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	80fb      	strh	r3, [r7, #6]
 8000dbc:	e016      	b.n	8000dec <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <SYS_GetBatteryLevel+0x60>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00b      	beq.n	8000de2 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <SYS_GetBatteryLevel+0x60>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000dd4:	fb03 f202 	mul.w	r2, r3, r2
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	80fb      	strh	r3, [r7, #6]
 8000de0:	e004      	b.n	8000dec <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000de2:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <SYS_GetBatteryLevel+0x64>)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000dec:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	b4002000 	.word	0xb4002000
 8000dfc:	1fff75aa 	.word	0x1fff75aa
 8000e00:	004c08d8 	.word	0x004c08d8

08000e04 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000e1c:	f000 fb74 	bl	8001508 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000e20:	481a      	ldr	r0, [pc, #104]	@ (8000e8c <ADC_ReadChannels+0x88>)
 8000e22:	f002 fe18 	bl	8003a56 <HAL_ADCEx_Calibration_Start>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000e2c:	f000 fd14 	bl	8001858 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <ADC_ReadChannels+0x88>)
 8000e44:	f002 fb24 	bl	8003490 <HAL_ADC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000e4e:	f000 fd03 	bl	8001858 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000e52:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <ADC_ReadChannels+0x88>)
 8000e54:	f002 fa00 	bl	8003258 <HAL_ADC_Start>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000e5e:	f000 fcfb 	bl	8001858 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000e62:	f04f 31ff 	mov.w	r1, #4294967295
 8000e66:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <ADC_ReadChannels+0x88>)
 8000e68:	f002 fa6e 	bl	8003348 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000e6c:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <ADC_ReadChannels+0x88>)
 8000e6e:	f002 fa39 	bl	80032e4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <ADC_ReadChannels+0x88>)
 8000e74:	f002 faff 	bl	8003476 <HAL_ADC_GetValue>
 8000e78:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000e7a:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <ADC_ReadChannels+0x88>)
 8000e7c:	f002 f960 	bl	8003140 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000e80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000198 	.word	0x20000198

08000e90 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000e9c:	23ff      	movs	r3, #255	@ 0xff
 8000e9e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000ea6:	d311      	bcc.n	8000ecc <FLASH_IF_Write+0x3c>
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <FLASH_IF_Write+0x48>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	029a      	lsls	r2, r3, #10
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <FLASH_IF_Write+0x4c>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d306      	bcc.n	8000ecc <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f000 f85a 	bl	8000f7c <FLASH_IF_INT_Write>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8000ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	1fff75e0 	.word	0x1fff75e0
 8000edc:	03fffc00 	.word	0x03fffc00

08000ee0 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000eec:	23ff      	movs	r3, #255	@ 0xff
 8000eee:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000ef6:	d311      	bcc.n	8000f1c <FLASH_IF_Read+0x3c>
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <FLASH_IF_Read+0x48>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	029a      	lsls	r2, r3, #10
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <FLASH_IF_Read+0x4c>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000f06:	3b01      	subs	r3, #1
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d306      	bcc.n	8000f1c <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f000 f93a 	bl	800118c <FLASH_IF_INT_Read>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8000f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	1fff75e0 	.word	0x1fff75e0
 8000f2c:	03fffc00 	.word	0x03fffc00

08000f30 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000f3a:	23ff      	movs	r3, #255	@ 0xff
 8000f3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f44:	d310      	bcc.n	8000f68 <FLASH_IF_Erase+0x38>
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <FLASH_IF_Erase+0x44>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	029a      	lsls	r2, r3, #10
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <FLASH_IF_Erase+0x48>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000f54:	3b01      	subs	r3, #1
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d305      	bcc.n	8000f68 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f932 	bl	80011c8 <FLASH_IF_INT_Erase>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	1fff75e0 	.word	0x1fff75e0
 8000f78:	03fffc00 	.word	0x03fffc00

08000f7c <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b090      	sub	sp, #64	@ 0x40
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00c      	beq.n	8000fba <FLASH_IF_INT_Write+0x3e>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d009      	beq.n	8000fba <FLASH_IF_INT_Write+0x3e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8000fba:	f06f 0305 	mvn.w	r3, #5
 8000fbe:	e0da      	b.n	8001176 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8000fc0:	f000 f992 	bl	80012e8 <FLASH_IF_INT_Clear_Error>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8000fca:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 80cf 	bne.w	8001172 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8000fd4:	f003 fb78 	bl	80046c8 <HAL_FLASH_Unlock>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f040 80c6 	bne.w	800116c <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8000fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fe2:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8000fe6:	4b66      	ldr	r3, [pc, #408]	@ (8001180 <FLASH_IF_INT_Write+0x204>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0299      	lsls	r1, r3, #10
 8000fec:	4b65      	ldr	r3, [pc, #404]	@ (8001184 <FLASH_IF_INT_Write+0x208>)
 8000fee:	400b      	ands	r3, r1
 8000ff0:	fbb2 f1f3 	udiv	r1, r2, r3
 8000ff4:	fb01 f303 	mul.w	r3, r1, r3
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	0adb      	lsrs	r3, r3, #11
 8000ffc:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8000ffe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001008:	3b01      	subs	r3, #1
 800100a:	4a5d      	ldr	r2, [pc, #372]	@ (8001180 <FLASH_IF_INT_Write+0x204>)
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	0291      	lsls	r1, r2, #10
 8001010:	4a5c      	ldr	r2, [pc, #368]	@ (8001184 <FLASH_IF_INT_Write+0x208>)
 8001012:	400a      	ands	r2, r1
 8001014:	fbb3 f1f2 	udiv	r1, r3, r2
 8001018:	fb01 f202 	mul.w	r2, r1, r2
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	0ada      	lsrs	r2, r3, #11
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d905      	bls.n	800103a <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800102e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001034:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001038:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800103e:	e089      	b.n	8001154 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001042:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001046:	02db      	lsls	r3, r3, #11
 8001048:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800104a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f925 	bl	800129c <FLASH_IF_INT_IsEmpty>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d031      	beq.n	80010bc <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001058:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <FLASH_IF_INT_Write+0x20c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d103      	bne.n	8001068 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001060:	23fa      	movs	r3, #250	@ 0xfa
 8001062:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001066:	e07e      	b.n	8001166 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001068:	4b47      	ldr	r3, [pc, #284]	@ (8001188 <FLASH_IF_INT_Write+0x20c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f88a 	bl	800118c <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001078:	4b43      	ldr	r3, [pc, #268]	@ (8001188 <FLASH_IF_INT_Write+0x20c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800107e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001082:	4413      	add	r3, r2
 8001084:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001088:	b292      	uxth	r2, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f019 f858 	bl	801a140 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f896 	bl	80011c8 <FLASH_IF_INT_Erase>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80010a2:	23fe      	movs	r3, #254	@ 0xfe
 80010a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 80010a8:	e05d      	b.n	8001166 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80010ae:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <FLASH_IF_INT_Write+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80010b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e005      	b.n	80010c8 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80010bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 80010c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c2:	623b      	str	r3, [r7, #32]
          current_length = length;
 80010c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c6:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010cc:	e026      	b.n	800111c <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80010ce:	6a3a      	ldr	r2, [r7, #32]
 80010d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d2:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010da:	2001      	movs	r0, #1
 80010dc:	f003 fab0 	bl	8004640 <HAL_FLASH_Program>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d113      	bne.n	800110e <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80010e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f0:	4413      	add	r3, r2
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	4299      	cmp	r1, r3
 80010f8:	bf08      	it	eq
 80010fa:	4290      	cmpeq	r0, r2
 80010fc:	d003      	beq.n	8001106 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80010fe:	23fc      	movs	r3, #252	@ 0xfc
 8001100:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001104:	e00e      	b.n	8001124 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	3308      	adds	r3, #8
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
 800110c:	e003      	b.n	8001116 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800110e:	23fc      	movs	r3, #252	@ 0xfc
 8001110:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001114:	e006      	b.n	8001124 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001118:	3308      	adds	r3, #8
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800111c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3d4      	bcc.n	80010ce <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001124:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001128:	2b00      	cmp	r3, #0
 800112a:	d11b      	bne.n	8001164 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 800112c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800112e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001130:	4413      	add	r3, r2
 8001132:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001138:	4413      	add	r3, r2
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001146:	bf28      	it	cs
 8001148:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001150:	3301      	adds	r3, #1
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4413      	add	r3, r2
 800115a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800115c:	429a      	cmp	r2, r3
 800115e:	f4ff af6f 	bcc.w	8001040 <FLASH_IF_INT_Write+0xc4>
 8001162:	e000      	b.n	8001166 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001164:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001166:	f003 fad1 	bl	800470c <HAL_FLASH_Lock>
 800116a:	e002      	b.n	8001172 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 800116c:	23fb      	movs	r3, #251	@ 0xfb
 800116e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001172:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001176:	4618      	mov	r0, r3
 8001178:	3740      	adds	r7, #64	@ 0x40
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	1fff75e0 	.word	0x1fff75e0
 8001184:	03fffc00 	.word	0x03fffc00
 8001188:	20000194 	.word	0x20000194

0800118c <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <FLASH_IF_INT_Read+0x1c>
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80011a8:	f06f 0305 	mvn.w	r3, #5
 80011ac:	e008      	b.n	80011c0 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f018 ffc2 	bl	801a140 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80011bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80011e8:	f06f 0305 	mvn.w	r3, #5
 80011ec:	e04e      	b.n	800128c <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80011ee:	f000 f87b 	bl	80012e8 <FLASH_IF_INT_Clear_Error>
 80011f2:	4603      	mov	r3, r0
 80011f4:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80011f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d144      	bne.n	8001288 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80011fe:	f003 fa63 	bl	80046c8 <HAL_FLASH_Unlock>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d13d      	bne.n	8001284 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001208:	2302      	movs	r3, #2
 800120a:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <FLASH_IF_INT_Erase+0xcc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0299      	lsls	r1, r3, #10
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <FLASH_IF_INT_Erase+0xd0>)
 800121a:	400b      	ands	r3, r1
 800121c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001220:	fb01 f303 	mul.w	r3, r1, r3
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	0adb      	lsrs	r3, r3, #11
 8001228:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001234:	3b01      	subs	r3, #1
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <FLASH_IF_INT_Erase+0xcc>)
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	0291      	lsls	r1, r2, #10
 800123c:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <FLASH_IF_INT_Erase+0xd0>)
 800123e:	400a      	ands	r2, r1
 8001240:	fbb3 f1f2 	udiv	r1, r3, r2
 8001244:	fb01 f202 	mul.w	r2, r1, r2
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	0ada      	lsrs	r2, r3, #11
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	3301      	adds	r3, #1
 8001252:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001254:	f107 0214 	add.w	r2, r7, #20
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fb34 	bl	80048cc <HAL_FLASHEx_Erase>
 8001264:	4603      	mov	r3, r0
 8001266:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800126e:	7fbb      	ldrb	r3, [r7, #30]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d101      	bne.n	8001278 <FLASH_IF_INT_Erase+0xb0>
 8001274:	2301      	movs	r3, #1
 8001276:	e001      	b.n	800127c <FLASH_IF_INT_Erase+0xb4>
 8001278:	f06f 0301 	mvn.w	r3, #1
 800127c:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800127e:	f003 fa45 	bl	800470c <HAL_FLASH_Lock>
 8001282:	e001      	b.n	8001288 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001284:	23fb      	movs	r3, #251	@ 0xfb
 8001286:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001288:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	1fff75e0 	.word	0x1fff75e0
 8001298:	03fffc00 	.word	0x03fffc00

0800129c <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	e011      	b.n	80012d4 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ba:	bf08      	it	eq
 80012bc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80012c0:	d002      	beq.n	80012c8 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
      break;
 80012c6:	e009      	b.n	80012dc <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3308      	adds	r3, #8
 80012cc:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3308      	adds	r3, #8
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3e9      	bcc.n	80012b0 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80012ee:	23fb      	movs	r3, #251	@ 0xfb
 80012f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80012f2:	f003 f9e9 	bl	80046c8 <HAL_FLASH_Unlock>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d110      	bne.n	800131e <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <FLASH_IF_INT_Clear_Error+0x44>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <FLASH_IF_INT_Clear_Error+0x44>)
 8001302:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <FLASH_IF_INT_Clear_Error+0x44>)
 800130a:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 800130e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001310:	f003 f9fc 	bl	800470c <HAL_FLASH_Lock>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	58004000 	.word	0x58004000

08001330 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001340:	f023 0218 	bic.w	r2, r3, #24
 8001344:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4313      	orrs	r3, r2
 800134c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001366:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001376:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4013      	ands	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800138a:	b480      	push	{r7}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001398:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4313      	orrs	r3, r2
 80013a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4013      	ands	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
	...

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f001 faf0 	bl	80029a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f846 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 f9ee 	bl	80017a8 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80013cc:	f008 fd72 	bl	8009eb4 <MX_LoRaWAN_Init>
  MX_I2C3_Init();
 80013d0:	f000 f8e8 	bl	80015a4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013da:	481a      	ldr	r0, [pc, #104]	@ (8001444 <main+0x88>)
 80013dc:	f003 fd78 	bl	8004ed0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e4:	f000 fe98 	bl	8002118 <HAL_Delay>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ee:	4815      	ldr	r0, [pc, #84]	@ (8001444 <main+0x88>)
 80013f0:	f003 fd6e 	bl	8004ed0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80013f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013f8:	f000 fe8e 	bl	8002118 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001406:	f003 fd63 	bl	8004ed0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800140a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800140e:	f000 fe83 	bl	8002118 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141c:	f003 fd58 	bl	8004ed0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001424:	f000 fe78 	bl	8002118 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_I2C_DeInit(&hi2c3);
 8001428:	4807      	ldr	r0, [pc, #28]	@ (8001448 <main+0x8c>)
 800142a:	f003 fe26 	bl	800507a <HAL_I2C_DeInit>
	HAL_ADC_DeInit(&hadc);
 800142e:	4807      	ldr	r0, [pc, #28]	@ (800144c <main+0x90>)
 8001430:	f001 fe86 	bl	8003140 <HAL_ADC_DeInit>
	HAL_UART_DeInit(&huart1);
 8001434:	4806      	ldr	r0, [pc, #24]	@ (8001450 <main+0x94>)
 8001436:	f006 fb36 	bl	8007aa6 <HAL_UART_DeInit>
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800143a:	f008 fd43 	bl	8009ec4 <MX_LoRaWAN_Process>
	HAL_I2C_DeInit(&hi2c3);
 800143e:	bf00      	nop
 8001440:	e7f2      	b.n	8001428 <main+0x6c>
 8001442:	bf00      	nop
 8001444:	48000400 	.word	0x48000400
 8001448:	200001fc 	.word	0x200001fc
 800144c:	20000198 	.word	0x20000198
 8001450:	20000294 	.word	0x20000294

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b09a      	sub	sp, #104	@ 0x68
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	2248      	movs	r2, #72	@ 0x48
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f01a f8ea 	bl	801b63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800147a:	f003 fec3 	bl	8005204 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff ff56 	bl	8001330 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <SystemClock_Config+0xb0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800148c:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <SystemClock_Config+0xb0>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <SystemClock_Config+0xb0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014a0:	2324      	movs	r3, #36	@ 0x24
 80014a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014a4:	2381      	movs	r3, #129	@ 0x81
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80014b0:	23a0      	movs	r3, #160	@ 0xa0
 80014b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 f9ed 	bl	800589c <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80014c8:	f000 f9c6 	bl	8001858 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80014cc:	234f      	movs	r3, #79	@ 0x4f
 80014ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	2102      	movs	r1, #2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 fd58 	bl	8005fa0 <HAL_RCC_ClockConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014f6:	f000 f9af 	bl	8001858 <Error_Handler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	3768      	adds	r7, #104	@ 0x68
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	58000400 	.word	0x58000400

08001508 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <MX_ADC_Init+0x94>)
 800150e:	4a24      	ldr	r2, [pc, #144]	@ (80015a0 <MX_ADC_Init+0x98>)
 8001510:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <MX_ADC_Init+0x94>)
 8001514:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001518:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <MX_ADC_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001520:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <MX_ADC_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <MX_ADC_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <MX_ADC_Init+0x94>)
 800152e:	2204      	movs	r2, #4
 8001530:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_ADC_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <MX_ADC_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <MX_ADC_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <MX_ADC_Init+0x94>)
 8001546:	2201      	movs	r2, #1
 8001548:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_ADC_Init+0x94>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_ADC_Init+0x94>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_ADC_Init+0x94>)
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_ADC_Init+0x94>)
 8001560:	2200      	movs	r2, #0
 8001562:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <MX_ADC_Init+0x94>)
 8001568:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800156c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_ADC_Init+0x94>)
 8001570:	2207      	movs	r2, #7
 8001572:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_ADC_Init+0x94>)
 8001576:	2207      	movs	r2, #7
 8001578:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_ADC_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_ADC_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	@ (800159c <MX_ADC_Init+0x94>)
 800158a:	f001 fc45 	bl	8002e18 <HAL_ADC_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001594:	f000 f960 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000198 	.word	0x20000198
 80015a0:	40012400 	.word	0x40012400

080015a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <MX_I2C3_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001620 <MX_I2C3_Init+0x7c>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015bc:	2201      	movs	r2, #1
 80015be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015de:	480e      	ldr	r0, [pc, #56]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015e0:	f003 fcb0 	bl	8004f44 <HAL_I2C_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ea:	f000 f935 	bl	8001858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4809      	ldr	r0, [pc, #36]	@ (8001618 <MX_I2C3_Init+0x74>)
 80015f2:	f003 fd71 	bl	80050d8 <HAL_I2CEx_ConfigAnalogFilter>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 f92c 	bl	8001858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_I2C3_Init+0x74>)
 8001604:	f003 fdb2 	bl	800516c <HAL_I2CEx_ConfigDigitalFilter>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 f923 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001fc 	.word	0x200001fc
 800161c:	40005c00 	.word	0x40005c00
 8001620:	00b07cb4 	.word	0x00b07cb4

08001624 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	@ 0x30
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	222c      	movs	r2, #44	@ 0x2c
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f01a f803 	bl	801b63c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001636:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <MX_RTC_Init+0x9c>)
 8001638:	4a22      	ldr	r2, [pc, #136]	@ (80016c4 <MX_RTC_Init+0xa0>)
 800163a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800163c:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <MX_RTC_Init+0x9c>)
 800163e:	221f      	movs	r2, #31
 8001640:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <MX_RTC_Init+0x9c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_RTC_Init+0x9c>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <MX_RTC_Init+0x9c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_RTC_Init+0x9c>)
 8001656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800165a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_RTC_Init+0x9c>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_RTC_Init+0x9c>)
 8001664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800166a:	4815      	ldr	r0, [pc, #84]	@ (80016c0 <MX_RTC_Init+0x9c>)
 800166c:	f005 f954 	bl	8006918 <HAL_RTC_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001676:	f000 f8ef 	bl	8001858 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800167a:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <MX_RTC_Init+0x9c>)
 800167c:	f005 fc4a 	bl	8006f14 <HAL_RTCEx_SetSSRU_IT>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001686:	f000 f8e7 	bl	8001858 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001696:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800169a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800169c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_RTC_Init+0x9c>)
 80016aa:	f005 f9b7 	bl	8006a1c <HAL_RTC_SetAlarm_IT>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80016b4:	f000 f8d0 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	@ 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000250 	.word	0x20000250
 80016c4:	40002800 	.word	0x40002800

080016c8 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_SUBGHZ_Init+0x20>)
 80016ce:	2210      	movs	r2, #16
 80016d0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_SUBGHZ_Init+0x20>)
 80016d4:	f005 fd46 	bl	8007164 <HAL_SUBGHZ_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80016de:	f000 f8bb 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000288 	.word	0x20000288

080016ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b22      	ldr	r3, [pc, #136]	@ (800177c <MX_USART1_UART_Init+0x90>)
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <MX_USART1_UART_Init+0x94>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <MX_USART1_UART_Init+0x90>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001734:	4811      	ldr	r0, [pc, #68]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001736:	f006 f966 	bl	8007a06 <HAL_UART_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001740:	f000 f88a 	bl	8001858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001748:	f008 faca 	bl	8009ce0 <HAL_UARTEx_SetTxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 f881 	bl	8001858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800175a:	f008 faff 	bl	8009d5c <HAL_UARTEx_SetRxFifoThreshold>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 f878 	bl	8001858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800176a:	f008 fa81 	bl	8009c70 <HAL_UARTEx_DisableFifoMode>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001774:	f000 f870 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000294 	.word	0x20000294
 8001780:	40013800 	.word	0x40013800

08001784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001788:	2004      	movs	r0, #4
 800178a:	f7ff fde6 	bl	800135a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff fde3 	bl	800135a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2102      	movs	r1, #2
 8001798:	200c      	movs	r0, #12
 800179a:	f002 fb24 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800179e:	200c      	movs	r0, #12
 80017a0:	f002 fb3b 	bl	8003e1a <HAL_NVIC_EnableIRQ>

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fde4 	bl	800138a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2002      	movs	r0, #2
 80017c4:	f7ff fde1 	bl	800138a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c8:	2004      	movs	r0, #4
 80017ca:	f7ff fdde 	bl	800138a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f248 0130 	movw	r1, #32816	@ 0x8030
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d8:	f003 fb7a 	bl	8004ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e2:	481c      	ldr	r0, [pc, #112]	@ (8001854 <MX_GPIO_Init+0xac>)
 80017e4:	f003 fb74 	bl	8004ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 80017e8:	f248 0330 	movw	r3, #32816	@ 0x8030
 80017ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001802:	f003 f937 	bl	8004a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800180a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	4619      	mov	r1, r3
 800181c:	480d      	ldr	r0, [pc, #52]	@ (8001854 <MX_GPIO_Init+0xac>)
 800181e:	f003 f929 	bl	8004a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOS_Button_Pin */
  GPIO_InitStruct.Pin = SOS_Button_Pin;
 8001822:	2308      	movs	r3, #8
 8001824:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001826:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800182a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182c:	2301      	movs	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SOS_Button_GPIO_Port, &GPIO_InitStruct);
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	4619      	mov	r1, r3
 8001834:	4807      	ldr	r0, [pc, #28]	@ (8001854 <MX_GPIO_Init+0xac>)
 8001836:	f003 f91d 	bl	8004a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2009      	movs	r0, #9
 8001840:	f002 fad1 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001844:	2009      	movs	r0, #9
 8001846:	f002 fae8 	bl	8003e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	48000400 	.word	0x48000400

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <Error_Handler+0x8>

08001864 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800186a:	2201      	movs	r2, #1
 800186c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	58000400 	.word	0x58000400

0800187c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001898:	f001 f8f0 	bl	8002a7c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800189c:	f7ff ffe2 	bl	8001864 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f003 fd41 	bl	8005328 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}

080018aa <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80018ae:	f001 f8f3 	bl	8002a98 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80018b2:	f000 ffcd 	bl	8002850 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80018be:	f001 f8dd 	bl	8002a7c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80018c2:	2101      	movs	r1, #1
 80018c4:	2000      	movs	r0, #0
 80018c6:	f003 fcab 	bl	8005220 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}

080018ce <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80018d2:	f001 f8e1 	bl	8002a98 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}

080018da <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <LL_AHB2_GRP1_EnableClock>:
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001906:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001936:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001938:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4313      	orrs	r3, r2
 8001940:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001946:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001966:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	43db      	mvns	r3, r3
 800196c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001970:	4013      	ands	r3, r2
 8001972:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800198c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4313      	orrs	r3, r2
 8001994:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4013      	ands	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	43db      	mvns	r3, r3
 80019c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019c4:	4013      	ands	r3, r2
 80019c6:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <HAL_ADC_MspInit+0x24>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d103      	bne.n	8001a2a <HAL_ADC_MspInit+0x1a>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a22:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a26:	f7ff ffaa 	bl	800197e <LL_APB2_GRP1_EnableClock>

    /* USER CODE END ADC_MspInit 1 */

  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40012400 	.word	0x40012400

08001a38 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <HAL_ADC_MspDeInit+0x24>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d103      	bne.n	8001a52 <HAL_ADC_MspDeInit+0x1a>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001a4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a4e:	f7ff ffae 	bl	80019ae <LL_APB2_GRP1_DisableClock>
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40012400 	.word	0x40012400

08001a60 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b096      	sub	sp, #88	@ 0x58
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2238      	movs	r2, #56	@ 0x38
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f019 fddb 	bl	801b63c <memset>
  if(hi2c->Instance==I2C3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d127      	bne.n	8001ae0 <HAL_I2C_MspInit+0x80>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a94:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a96:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fe1f 	bl	80066e4 <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001aac:	f7ff fed4 	bl	8001858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7ff ff22 	bl	80018fa <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB14     ------> I2C3_SDA
    PB13     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001ab6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001aba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abc:	2312      	movs	r3, #18
 8001abe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	@ (8001aec <HAL_I2C_MspInit+0x8c>)
 8001ad4:	f002 ffce 	bl	8004a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ad8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001adc:	f7ff ff25 	bl	800192a <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3758      	adds	r7, #88	@ 0x58
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40005c00 	.word	0x40005c00
 8001aec:	48000400 	.word	0x48000400

08001af0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_I2C_MspDeInit+0x38>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10d      	bne.n	8001b1e <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001b02:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001b06:	f7ff ff28 	bl	800195a <LL_APB1_GRP1_DisableClock>

    /**I2C3 GPIO Configuration
    PB14     ------> I2C3_SDA
    PB13     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 8001b0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b0e:	4807      	ldr	r0, [pc, #28]	@ (8001b2c <HAL_I2C_MspDeInit+0x3c>)
 8001b10:	f003 f910 	bl	8004d34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8001b14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b18:	4804      	ldr	r0, [pc, #16]	@ (8001b2c <HAL_I2C_MspDeInit+0x3c>)
 8001b1a:	f003 f90b 	bl	8004d34 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40005c00 	.word	0x40005c00
 8001b2c:	48000400 	.word	0x48000400

08001b30 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b090      	sub	sp, #64	@ 0x40
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	2238      	movs	r2, #56	@ 0x38
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f019 fd7b 	bl	801b63c <memset>
  if(hrtc->Instance==RTC)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ba4 <HAL_RTC_MspInit+0x74>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d125      	bne.n	8001b9c <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b54:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 fdbf 	bl	80066e4 <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b6c:	f7ff fe74 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b70:	f7ff feb3 	bl	80018da <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b74:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001b78:	f7ff fed7 	bl	800192a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2002      	movs	r0, #2
 8001b82:	f002 f930 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b86:	2002      	movs	r0, #2
 8001b88:	f002 f947 	bl	8003e1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	202a      	movs	r0, #42	@ 0x2a
 8001b92:	f002 f928 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b96:	202a      	movs	r0, #42	@ 0x2a
 8001b98:	f002 f93f 	bl	8003e1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3740      	adds	r7, #64	@ 0x40
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40002800 	.word	0x40002800

08001ba8 <HAL_SUBGHZ_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsubghz: SUBGHZ handle pointer
  * @retval None
  */
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN SUBGHZ_MspInit 0 */

    /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff ff0e 	bl	80019d2 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2032      	movs	r0, #50	@ 0x32
 8001bbc:	f002 f913 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001bc0:	2032      	movs	r0, #50	@ 0x32
 8001bc2:	f002 f92a 	bl	8003e1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SUBGHZ_MspInit 1 */

    /* USER CODE END SUBGHZ_MspInit 1 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b096      	sub	sp, #88	@ 0x58
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	2238      	movs	r2, #56	@ 0x38
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f019 fd23 	bl	801b63c <memset>
  if(huart->Instance==USART1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb8 <HAL_UART_MspInit+0xe8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d156      	bne.n	8001cae <HAL_UART_MspInit+0xde>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c04:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001c08:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fd68 	bl	80066e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c1a:	f7ff fe1d 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c1e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c22:	f7ff feac 	bl	800197e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7ff fe67 	bl	80018fa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001c2c:	23c0      	movs	r3, #192	@ 0xc0
 8001c2e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c44:	4619      	mov	r1, r3
 8001c46:	481d      	ldr	r0, [pc, #116]	@ (8001cbc <HAL_UART_MspInit+0xec>)
 8001c48:	f002 ff14 	bl	8004a74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc4 <HAL_UART_MspInit+0xf4>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c54:	2212      	movs	r2, #18
 8001c56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c66:	2280      	movs	r2, #128	@ 0x80
 8001c68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c82:	480f      	ldr	r0, [pc, #60]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c84:	f002 f8f2 	bl	8003e6c <HAL_DMA_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001c8e:	f7ff fde3 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c96:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c98:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_UART_MspInit+0xf0>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	2024      	movs	r0, #36	@ 0x24
 8001ca4:	f002 f89f 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ca8:	2024      	movs	r0, #36	@ 0x24
 8001caa:	f002 f8b6 	bl	8003e1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001cae:	bf00      	nop
 8001cb0:	3758      	adds	r7, #88	@ 0x58
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	20000328 	.word	0x20000328
 8001cc4:	4002001c 	.word	0x4002001c

08001cc8 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d04 <HAL_UART_MspDeInit+0x3c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10f      	bne.n	8001cfa <HAL_UART_MspDeInit+0x32>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001cda:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001cde:	f7ff fe66 	bl	80019ae <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8001ce2:	21c0      	movs	r1, #192	@ 0xc0
 8001ce4:	4808      	ldr	r0, [pc, #32]	@ (8001d08 <HAL_UART_MspDeInit+0x40>)
 8001ce6:	f003 f825 	bl	8004d34 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 f964 	bl	8003fbc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001cf4:	2024      	movs	r0, #36	@ 0x24
 8001cf6:	f002 f89e 	bl	8003e36 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40013800 	.word	0x40013800
 8001d08:	48000400 	.word	0x48000400

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <NMI_Handler+0x4>

08001d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <MemManage_Handler+0x4>

08001d24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5c:	f000 fe7c 	bl	8002a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001d6a:	f005 f90f 	bl	8006f8c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000250 	.word	0x20000250

08001d78 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line 3 Interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOS_Button_Pin);
 8001d7c:	2008      	movs	r0, #8
 8001d7e:	f003 f8bf 	bl	8004f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <DMA1_Channel2_IRQHandler+0x10>)
 8001d8e:	f002 fae7 	bl	8004360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000328 	.word	0x20000328

08001d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <USART1_IRQHandler+0x10>)
 8001da2:	f005 ff8b 	bl	8007cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000294 	.word	0x20000294

08001db0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <RTC_Alarm_IRQHandler+0x10>)
 8001db6:	f004 ff99 	bl	8006cec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000250 	.word	0x20000250

08001dc4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001dca:	f005 fc4d 	bl	8007668 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000288 	.word	0x20000288

08001dd8 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001e04:	4b02      	ldr	r3, [pc, #8]	@ (8001e10 <LL_FLASH_GetUDN+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	1fff7580 	.word	0x1fff7580

08001e14 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <LL_FLASH_GetDeviceID+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	1fff7584 	.word	0x1fff7584

08001e2c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <LL_FLASH_GetSTCompanyID+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0a1b      	lsrs	r3, r3, #8
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	1fff7584 	.word	0x1fff7584

08001e44 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff ffc5 	bl	8001dd8 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001e4e:	f018 fe9d 	bl	801ab8c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <SystemApp_Init+0x48>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001e58:	f000 f97e 	bl	8002158 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001e5c:	f019 f926 	bl	801b0ac <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001e60:	480b      	ldr	r0, [pc, #44]	@ (8001e90 <SystemApp_Init+0x4c>)
 8001e62:	f019 f9d1 	bl	801b208 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <SystemApp_Init+0x50>)
 8001e68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e6c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f019 f9d8 	bl	801b224 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001e74:	f7fe ff12 	bl	8000c9c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001e78:	f000 f9ae 	bl	80021d8 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001e7c:	f018 f8ba 	bl	8019ff4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001e80:	2101      	movs	r1, #1
 8001e82:	2001      	movs	r0, #1
 8001e84:	f018 f8f6 	bl	801a074 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000388 	.word	0x20000388
 8001e90:	08002065 	.word	0x08002065
 8001e94:	58004000 	.word	0x58004000

08001e98 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001e9c:	f018 f91a 	bl	801a0d4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001eae:	f7fe ff75 	bl	8000d9c <SYS_GetBatteryLevel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d902      	bls.n	8001ec6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001ec0:	23fe      	movs	r3, #254	@ 0xfe
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	e014      	b.n	8001ef0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001ecc:	d202      	bcs.n	8001ed4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	e00d      	b.n	8001ef0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ed4:	88bb      	ldrh	r3, [r7, #4]
 8001ed6:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001eda:	461a      	mov	r2, r3
 8001edc:	4613      	mov	r3, r2
 8001ede:	01db      	lsls	r3, r3, #7
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <GetBatteryLevel+0x58>)
 8001ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8001eec:	09db      	lsrs	r3, r3, #7
 8001eee:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	1b4e81b5 	.word	0x1b4e81b5

08001f00 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 f931 	bl	8002174 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fd05 	bl	8000924 <__aeabi_f2iz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001f1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001f2a:	b590      	push	{r4, r7, lr}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001f36:	f7ff ff63 	bl	8001e00 <LL_FLASH_GetUDN>
 8001f3a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f42:	d138      	bne.n	8001fb6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001f44:	f000 fdb6 	bl	8002ab4 <HAL_GetUIDw0>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	f000 fdc7 	bl	8002adc <HAL_GetUIDw2>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4423      	add	r3, r4
 8001f52:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001f54:	f000 fdb8 	bl	8002ac8 <HAL_GetUIDw1>
 8001f58:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	0e1a      	lsrs	r2, r3, #24
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3307      	adds	r3, #7
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	0c1a      	lsrs	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3306      	adds	r3, #6
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	0a1a      	lsrs	r2, r3, #8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3305      	adds	r3, #5
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	0e1a      	lsrs	r2, r3, #24
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3303      	adds	r3, #3
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	0c1a      	lsrs	r2, r3, #16
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	0a1a      	lsrs	r2, r3, #8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001fb4:	e031      	b.n	800201a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3307      	adds	r3, #7
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	0a1a      	lsrs	r2, r3, #8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	0c1a      	lsrs	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	0e1a      	lsrs	r2, r3, #24
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001fe4:	f7ff ff16 	bl	8001e14 <LL_FLASH_GetDeviceID>
 8001fe8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3303      	adds	r3, #3
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ff4:	f7ff ff1a 	bl	8001e2c <LL_FLASH_GetSTCompanyID>
 8001ff8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	0a1a      	lsrs	r2, r3, #8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3301      	adds	r3, #1
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	701a      	strb	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd90      	pop	{r4, r7, pc}

08002022 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002022:	b590      	push	{r4, r7, lr}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800202a:	f7ff fee9 	bl	8001e00 <LL_FLASH_GetUDN>
 800202e:	4602      	mov	r2, r0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d10d      	bne.n	800205a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800203e:	f000 fd39 	bl	8002ab4 <HAL_GetUIDw0>
 8002042:	4604      	mov	r4, r0
 8002044:	f000 fd40 	bl	8002ac8 <HAL_GetUIDw1>
 8002048:	4603      	mov	r3, r0
 800204a:	405c      	eors	r4, r3
 800204c:	f000 fd46 	bl	8002adc <HAL_GetUIDw2>
 8002050:	4603      	mov	r3, r0
 8002052:	ea84 0203 	eor.w	r2, r4, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
	...

08002064 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af02      	add	r7, sp, #8
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4618      	mov	r0, r3
 8002074:	f018 f93e 	bl	801a2f4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	4a07      	ldr	r2, [pc, #28]	@ (80020a0 <TimestampNow+0x3c>)
 8002082:	2110      	movs	r1, #16
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f81d 	bl	80020c4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe f878 	bl	8000180 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	0801c050 	.word	0x0801c050

080020a4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80020a8:	2101      	movs	r1, #1
 80020aa:	2002      	movs	r0, #2
 80020ac:	f017 ffb2 	bl	801a014 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80020b8:	2100      	movs	r1, #0
 80020ba:	2002      	movs	r0, #2
 80020bc:	f017 ffaa 	bl	801a014 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80020c4:	b40c      	push	{r2, r3}
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f018 fa75 	bl	801a5cc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020ec:	b002      	add	sp, #8
 80020ee:	4770      	bx	lr

080020f0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_GetTick+0x24>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002102:	f000 f96d 	bl	80023e0 <TIMER_IF_GetTimerValue>
 8002106:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000388 	.word	0x20000388

08002118 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f9e3 	bl	80024ee <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <LL_EXTI_EnableIT_32_63+0x24>)
 800213a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800213e:	4905      	ldr	r1, [pc, #20]	@ (8002154 <LL_EXTI_EnableIT_32_63+0x24>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	58000800 	.word	0x58000800

08002158 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 800215c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002160:	f7ff ffe6 	bl	8002130 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002164:	f000 fcc4 	bl	8002af0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002168:	f000 fcc8 	bl	8002afc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800216c:	f000 fccc 	bl	8002b08 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}

08002174 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <EnvSensors_Read+0x50>)
 800217e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <EnvSensors_Read+0x54>)
 8002182:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <EnvSensors_Read+0x58>)
 8002186:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002188:	f7fe fd96 	bl	8000cb8 <SYS_GetTemperatureLevel>
 800218c:	4603      	mov	r3, r0
 800218e:	121b      	asrs	r3, r3, #8
 8002190:	b21b      	sxth	r3, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fb72 	bl	800087c <__aeabi_i2f>
 8002198:	4603      	mov	r3, r0
 800219a:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a07      	ldr	r2, [pc, #28]	@ (80021d0 <EnvSensors_Read+0x5c>)
 80021b2:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a07      	ldr	r2, [pc, #28]	@ (80021d4 <EnvSensors_Read+0x60>)
 80021b8:	611a      	str	r2, [r3, #16]

  return 0;
 80021ba:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	42480000 	.word	0x42480000
 80021c8:	41900000 	.word	0x41900000
 80021cc:	447a0000 	.word	0x447a0000
 80021d0:	003e090d 	.word	0x003e090d
 80021d4:	000503ab 	.word	0x000503ab

080021d8 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 80021e2:	687b      	ldr	r3, [r7, #4]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	@ (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d207      	bcs.n	8002230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002220:	f019 fa14 	bl	801b64c <__errno>
 8002224:	4603      	mov	r3, r0
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	e009      	b.n	8002244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <_sbrk+0x64>)
 8002240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20010000 	.word	0x20010000
 8002250:	00000400 	.word	0x00000400
 8002254:	2000038c 	.word	0x2000038c
 8002258:	20001ce8 	.word	0x20001ce8

0800225c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
	...

08002280 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800228a:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <TIMER_IF_Init+0x5c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f083 0301 	eor.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <TIMER_IF_Init+0x60>)
 800229a:	f04f 32ff 	mov.w	r2, #4294967295
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80022a0:	f7ff f9c0 	bl	8001624 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80022a4:	f000 f856 	bl	8002354 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ac:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <TIMER_IF_Init+0x60>)
 80022ae:	f004 fcc1 	bl	8006c34 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <TIMER_IF_Init+0x60>)
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022ba:	4809      	ldr	r0, [pc, #36]	@ (80022e0 <TIMER_IF_Init+0x60>)
 80022bc:	f004 fdf8 	bl	8006eb0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 f9d3 	bl	800266c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80022c6:	f000 f85f 	bl	8002388 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <TIMER_IF_Init+0x5c>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80022d0:	79fb      	ldrb	r3, [r7, #7]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000390 	.word	0x20000390
 80022e0:	20000250 	.word	0x20000250

080022e4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08e      	sub	sp, #56	@ 0x38
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	222c      	movs	r2, #44	@ 0x2c
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f019 f99e 	bl	801b63c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002300:	f000 f828 	bl	8002354 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <TIMER_IF_StartTimer+0x68>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	43db      	mvns	r3, r3
 8002316:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800231c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002320:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002322:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002326:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	2201      	movs	r2, #1
 800232e:	4619      	mov	r1, r3
 8002330:	4807      	ldr	r0, [pc, #28]	@ (8002350 <TIMER_IF_StartTimer+0x6c>)
 8002332:	f004 fb73 	bl	8006a1c <HAL_RTC_SetAlarm_IT>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800233c:	f7ff fa8c 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002340:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002344:	4618      	mov	r0, r3
 8002346:	3738      	adds	r7, #56	@ 0x38
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000394 	.word	0x20000394
 8002350:	20000250 	.word	0x20000250

08002354 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <TIMER_IF_StopTimer+0x2c>)
 8002360:	2201      	movs	r2, #1
 8002362:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002368:	4806      	ldr	r0, [pc, #24]	@ (8002384 <TIMER_IF_StopTimer+0x30>)
 800236a:	f004 fc63 	bl	8006c34 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <TIMER_IF_StopTimer+0x30>)
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002376:	79fb      	ldrb	r3, [r7, #7]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40002800 	.word	0x40002800
 8002384:	20000250 	.word	0x20000250

08002388 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800238c:	f000 f98e 	bl	80026ac <GetTimerTicks>
 8002390:	4603      	mov	r3, r0
 8002392:	4a03      	ldr	r2, [pc, #12]	@ (80023a0 <TIMER_IF_SetTimerContext+0x18>)
 8002394:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002396:	4b02      	ldr	r3, [pc, #8]	@ (80023a0 <TIMER_IF_SetTimerContext+0x18>)
 8002398:	681b      	ldr	r3, [r3, #0]
}
 800239a:	4618      	mov	r0, r3
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000394 	.word	0x20000394

080023a4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023a8:	4b02      	ldr	r3, [pc, #8]	@ (80023b4 <TIMER_IF_GetTimerContext+0x10>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000394 	.word	0x20000394

080023b8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023c2:	f000 f973 	bl	80026ac <GetTimerTicks>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <TIMER_IF_GetTimerElapsedTime+0x24>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80023d0:	687b      	ldr	r3, [r7, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000394 	.word	0x20000394

080023e0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <TIMER_IF_GetTimerValue+0x24>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80023f2:	f000 f95b 	bl	80026ac <GetTimerTicks>
 80023f6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000390 	.word	0x20000390

08002408 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002412:	2303      	movs	r3, #3
 8002414:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002416:	687b      	ldr	r3, [r7, #4]
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002422:	b5b0      	push	{r4, r5, r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800242a:	2100      	movs	r1, #0
 800242c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	2000      	movs	r0, #0
 8002432:	460a      	mov	r2, r1
 8002434:	4603      	mov	r3, r0
 8002436:	0d95      	lsrs	r5, r2, #22
 8002438:	0294      	lsls	r4, r2, #10
 800243a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fe fa93 	bl	8000970 <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4613      	mov	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bdb0      	pop	{r4, r5, r7, pc}

0800245c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800245c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002466:	2100      	movs	r1, #0
 8002468:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	2000      	movs	r0, #0
 800246e:	460c      	mov	r4, r1
 8002470:	4605      	mov	r5, r0
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f04f 0a00 	mov.w	sl, #0
 800247a:	f04f 0b00 	mov.w	fp, #0
 800247e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002482:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002486:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800248a:	4650      	mov	r0, sl
 800248c:	4659      	mov	r1, fp
 800248e:	1b02      	subs	r2, r0, r4
 8002490:	eb61 0305 	sbc.w	r3, r1, r5
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	0099      	lsls	r1, r3, #2
 800249e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80024a2:	0090      	lsls	r0, r2, #2
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	eb12 0804 	adds.w	r8, r2, r4
 80024ac:	eb43 0905 	adc.w	r9, r3, r5
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024c4:	4690      	mov	r8, r2
 80024c6:	4699      	mov	r9, r3
 80024c8:	4640      	mov	r0, r8
 80024ca:	4649      	mov	r1, r9
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	0a82      	lsrs	r2, r0, #10
 80024d6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80024da:	0a8b      	lsrs	r3, r1, #10
 80024dc:	4613      	mov	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80024e0:	68fb      	ldr	r3, [r7, #12]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024ec:	4770      	bx	lr

080024ee <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ff93 	bl	8002422 <TIMER_IF_Convert_ms2Tick>
 80024fc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80024fe:	f000 f8d5 	bl	80026ac <GetTimerTicks>
 8002502:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002504:	e000      	b.n	8002508 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002506:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002508:	f000 f8d0 	bl	80026ac <GetTimerTicks>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f6      	bhi.n	8002506 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800252a:	f018 fc7d 	bl	801ae28 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800253e:	f000 f8a5 	bl	800268c <TIMER_IF_BkUp_Read_MSBticks>
 8002542:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3301      	adds	r3, #1
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f88f 	bl	800266c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002556:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255a:	b08c      	sub	sp, #48	@ 0x30
 800255c:	af00      	add	r7, sp, #0
 800255e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002564:	f000 f8a2 	bl	80026ac <GetTimerTicks>
 8002568:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800256a:	f000 f88f 	bl	800268c <TIMER_IF_BkUp_Read_MSBticks>
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	2200      	movs	r2, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	60fa      	str	r2, [r7, #12]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	000b      	movs	r3, r1
 8002584:	2200      	movs	r2, #0
 8002586:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002588:	2000      	movs	r0, #0
 800258a:	460c      	mov	r4, r1
 800258c:	4605      	mov	r5, r0
 800258e:	eb12 0804 	adds.w	r8, r2, r4
 8002592:	eb43 0905 	adc.w	r9, r3, r5
 8002596:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800259a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	0a82      	lsrs	r2, r0, #10
 80025a8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80025ac:	0a8b      	lsrs	r3, r1, #10
 80025ae:	4613      	mov	r3, r2
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2200      	movs	r2, #0
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80025c0:	f04f 0b00 	mov.w	fp, #0
 80025c4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff46 	bl	800245c <TIMER_IF_Convert_Tick2ms>
 80025d0:	4603      	mov	r3, r0
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3730      	adds	r7, #48	@ 0x30
 80025de:	46bd      	mov	sp, r7
 80025e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025e4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	2100      	movs	r1, #0
 80025f0:	4803      	ldr	r0, [pc, #12]	@ (8002600 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80025f2:	f004 fcef 	bl	8006fd4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000250 	.word	0x20000250

08002604 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	2101      	movs	r1, #1
 8002610:	4803      	ldr	r0, [pc, #12]	@ (8002620 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002612:	f004 fcdf 	bl	8006fd4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000250 	.word	0x20000250

08002624 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800262e:	2100      	movs	r1, #0
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002632:	f004 fce7 	bl	8007004 <HAL_RTCEx_BKUPRead>
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002638:	687b      	ldr	r3, [r7, #4]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000250 	.word	0x20000250

08002648 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002652:	2101      	movs	r1, #1
 8002654:	4804      	ldr	r0, [pc, #16]	@ (8002668 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002656:	f004 fcd5 	bl	8007004 <HAL_RTCEx_BKUPRead>
 800265a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000250 	.word	0x20000250

0800266c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	2102      	movs	r1, #2
 8002678:	4803      	ldr	r0, [pc, #12]	@ (8002688 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800267a:	f004 fcab 	bl	8006fd4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000250 	.word	0x20000250

0800268c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002692:	2102      	movs	r1, #2
 8002694:	4804      	ldr	r0, [pc, #16]	@ (80026a8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002696:	f004 fcb5 	bl	8007004 <HAL_RTCEx_BKUPRead>
 800269a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800269c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000250 	.word	0x20000250

080026ac <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026b2:	480b      	ldr	r0, [pc, #44]	@ (80026e0 <GetTimerTicks+0x34>)
 80026b4:	f7ff fdd8 	bl	8002268 <LL_RTC_TIME_GetSubSecond>
 80026b8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026ba:	e003      	b.n	80026c4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026bc:	4808      	ldr	r0, [pc, #32]	@ (80026e0 <GetTimerTicks+0x34>)
 80026be:	f7ff fdd3 	bl	8002268 <LL_RTC_TIME_GetSubSecond>
 80026c2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026c4:	4806      	ldr	r0, [pc, #24]	@ (80026e0 <GetTimerTicks+0x34>)
 80026c6:	f7ff fdcf 	bl	8002268 <LL_RTC_TIME_GetSubSecond>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d1f4      	bne.n	80026bc <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40002800 	.word	0x40002800

080026e4 <LL_APB2_GRP1_ForceReset>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <LL_APB2_GRP1_ReleaseReset>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	43db      	mvns	r3, r3
 8002718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800271c:	4013      	ands	r3, r2
 800271e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <LL_EXTI_EnableIT_0_31>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <LL_EXTI_EnableIT_0_31+0x24>)
 8002736:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800273a:	4905      	ldr	r1, [pc, #20]	@ (8002750 <LL_EXTI_EnableIT_0_31+0x24>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	58000800 	.word	0x58000800

08002754 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800275c:	4a07      	ldr	r2, [pc, #28]	@ (800277c <vcom_Init+0x28>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002762:	f7ff f80f 	bl	8001784 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002766:	f7fe ffc1 	bl	80016ec <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800276a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800276e:	f7ff ffdd 	bl	800272c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002772:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000039c 	.word	0x2000039c

08002780 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002784:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002788:	f7ff ffac 	bl	80026e4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800278c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002790:	f7ff ffb9 	bl	8002706 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <vcom_DeInit+0x28>)
 8002796:	f7ff fa97 	bl	8001cc8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800279a:	200f      	movs	r0, #15
 800279c:	f001 fb4b 	bl	8003e36 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80027a0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000294 	.word	0x20000294

080027ac <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	461a      	mov	r2, r3
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4804      	ldr	r0, [pc, #16]	@ (80027d0 <vcom_Trace_DMA+0x24>)
 80027c0:	f005 f9fc 	bl	8007bbc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80027c4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000294 	.word	0x20000294

080027d4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80027dc:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <vcom_ReceiveInit+0x70>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80027e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027e6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027f0:	4815      	ldr	r0, [pc, #84]	@ (8002848 <vcom_ReceiveInit+0x74>)
 80027f2:	f007 f9b0 	bl	8009b56 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80027f6:	bf00      	nop
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <vcom_ReceiveInit+0x74>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002806:	d0f7      	beq.n	80027f8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002808:	bf00      	nop
 800280a:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <vcom_ReceiveInit+0x74>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002818:	d1f7      	bne.n	800280a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <vcom_ReceiveInit+0x74>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <vcom_ReceiveInit+0x74>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002828:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800282a:	4807      	ldr	r0, [pc, #28]	@ (8002848 <vcom_ReceiveInit+0x74>)
 800282c:	f007 f9ee 	bl	8009c0c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002830:	2201      	movs	r2, #1
 8002832:	4906      	ldr	r1, [pc, #24]	@ (800284c <vcom_ReceiveInit+0x78>)
 8002834:	4804      	ldr	r0, [pc, #16]	@ (8002848 <vcom_ReceiveInit+0x74>)
 8002836:	f005 f975 	bl	8007b24 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800283a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200003a0 	.word	0x200003a0
 8002848:	20000294 	.word	0x20000294
 800284c:	20000398 	.word	0x20000398

08002850 <vcom_Resume>:

void vcom_Resume(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002854:	4808      	ldr	r0, [pc, #32]	@ (8002878 <vcom_Resume+0x28>)
 8002856:	f005 f8d6 	bl	8007a06 <HAL_UART_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002860:	f7fe fffa 	bl	8001858 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002864:	4805      	ldr	r0, [pc, #20]	@ (800287c <vcom_Resume+0x2c>)
 8002866:	f001 fb01 	bl	8003e6c <HAL_DMA_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002870:	f7fe fff2 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000294 	.word	0x20000294
 800287c:	20000328 	.word	0x20000328

08002880 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <HAL_UART_TxCpltCallback+0x24>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d103      	bne.n	800289a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_UART_TxCpltCallback+0x28>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2000      	movs	r0, #0
 8002898:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40013800 	.word	0x40013800
 80028a8:	2000039c 	.word	0x2000039c

080028ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <HAL_UART_RxCpltCallback+0x44>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d113      	bne.n	80028e6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <HAL_UART_RxCpltCallback+0x48>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_UART_RxCpltCallback+0x30>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_UART_RxCpltCallback+0x48>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2101      	movs	r1, #1
 80028d8:	4807      	ldr	r0, [pc, #28]	@ (80028f8 <HAL_UART_RxCpltCallback+0x4c>)
 80028da:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80028dc:	2201      	movs	r2, #1
 80028de:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <HAL_UART_RxCpltCallback+0x4c>)
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f005 f91f 	bl	8007b24 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40013800 	.word	0x40013800
 80028f4:	200003a0 	.word	0x200003a0
 80028f8:	20000398 	.word	0x20000398

080028fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028fc:	480d      	ldr	r0, [pc, #52]	@ (8002934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002900:	f7ff fcac 	bl	800225c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <LoopForever+0x6>)
  ldr r1, =_edata
 8002906:	490d      	ldr	r1, [pc, #52]	@ (800293c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <LoopForever+0xe>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800291c:	4c0a      	ldr	r4, [pc, #40]	@ (8002948 <LoopForever+0x16>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800292a:	f018 fe95 	bl	801b658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800292e:	f7fe fd45 	bl	80013bc <main>

08002932 <LoopForever>:

LoopForever:
    b LoopForever
 8002932:	e7fe      	b.n	8002932 <LoopForever>
  ldr   r0, =_estack
 8002934:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8002940:	0801cc30 	.word	0x0801cc30
  ldr r2, =_sbss
 8002944:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8002948:	20001ce8 	.word	0x20001ce8

0800294c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC_IRQHandler>
	...

08002950 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a03      	ldr	r2, [pc, #12]	@ (8002968 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6053      	str	r3, [r2, #4]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	e0042000 	.word	0xe0042000

0800296c <LL_DBGMCU_EnableDBGStopMode>:
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002970:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a03      	ldr	r2, [pc, #12]	@ (8002984 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	6053      	str	r3, [r2, #4]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	e0042000 	.word	0xe0042000

08002988 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800298c:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a03      	ldr	r2, [pc, #12]	@ (80029a0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002992:	f043 0304 	orr.w	r3, r3, #4
 8002996:	6053      	str	r3, [r2, #4]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	e0042000 	.word	0xe0042000

080029a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ae:	2003      	movs	r0, #3
 80029b0:	f001 fa0e 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029b4:	f003 fcb8 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_Init+0x3c>)
 80029bc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029be:	200f      	movs	r0, #15
 80029c0:	f000 f810 	bl	80029e4 <HAL_InitTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	71fb      	strb	r3, [r7, #7]
 80029ce:	e001      	b.n	80029d4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029d0:	f7ff f817 	bl	8001a02 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029d4:	79fb      	ldrb	r3, [r7, #7]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000

080029e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <HAL_InitTick+0x6c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d024      	beq.n	8002a42 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029f8:	f003 fc96 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <HAL_InitTick+0x6c>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	4619      	mov	r1, r3
 8002a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a08:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 fa1e 	bl	8003e52 <HAL_SYSTICK_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d809      	bhi.n	8002a36 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a22:	2200      	movs	r2, #0
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2a:	f001 f9dc 	bl	8003de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a2e:	4a09      	ldr	r2, [pc, #36]	@ (8002a54 <HAL_InitTick+0x70>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e007      	b.n	8002a46 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	e004      	b.n	8002a46 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e001      	b.n	8002a46 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000008 	.word	0x20000008
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_IncTick+0x1c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_IncTick+0x20>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a03      	ldr	r2, [pc, #12]	@ (8002a78 <HAL_IncTick+0x20>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000008 	.word	0x20000008
 8002a78:	200003a4 	.word	0x200003a4

08002a7c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a80:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <HAL_SuspendTick+0x18>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a03      	ldr	r2, [pc, #12]	@ (8002a94 <HAL_SuspendTick+0x18>)
 8002a86:	f023 0302 	bic.w	r3, r3, #2
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	e000e010 	.word	0xe000e010

08002a98 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a9c:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <HAL_ResumeTick+0x18>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a03      	ldr	r2, [pc, #12]	@ (8002ab0 <HAL_ResumeTick+0x18>)
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002ab8:	4b02      	ldr	r3, [pc, #8]	@ (8002ac4 <HAL_GetUIDw0+0x10>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	1fff7590 	.word	0x1fff7590

08002ac8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002acc:	4b02      	ldr	r3, [pc, #8]	@ (8002ad8 <HAL_GetUIDw1+0x10>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	1fff7594 	.word	0x1fff7594

08002adc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002ae0:	4b02      	ldr	r3, [pc, #8]	@ (8002aec <HAL_GetUIDw2+0x10>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	1fff7598 	.word	0x1fff7598

08002af0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002af4:	f7ff ff2c 	bl	8002950 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002b00:	f7ff ff34 	bl	800296c <LL_DBGMCU_EnableDBGStopMode>
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002b0c:	f7ff ff3c 	bl	8002988 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2107      	movs	r1, #7
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	401a      	ands	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2107      	movs	r1, #7
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	210f      	movs	r1, #15
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	f003 010f 	and.w	r1, r3, #15
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	43db      	mvns	r3, r3
 8002c84:	401a      	ands	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0219      	lsls	r1, r3, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002c92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002cb6:	f023 0317 	bic.w	r3, r3, #23
 8002cba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002cdc:	f023 0317 	bic.w	r3, r3, #23
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6093      	str	r3, [r2, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d02:	d101      	bne.n	8002d08 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d24:	f023 0317 	bic.w	r3, r3, #23
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d4a:	f023 0317 	bic.w	r3, r3, #23
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <LL_ADC_IsEnabled+0x18>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <LL_ADC_IsEnabled+0x1a>
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_IsDisableOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_IsDisableOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002db8:	f023 0317 	bic.w	r3, r3, #23
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dde:	f023 0317 	bic.w	r3, r3, #23
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d101      	bne.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e17e      	b.n	8003138 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7fe fde1 	bl	8001a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff44 	bl	8002cee <LL_ADC_IsInternalRegulatorEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d115      	bne.n	8002e98 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff18 	bl	8002ca6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e76:	4b9e      	ldr	r3, [pc, #632]	@ (80030f0 <HAL_ADC_Init+0x2d8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	4a9d      	ldr	r2, [pc, #628]	@ (80030f4 <HAL_ADC_Init+0x2dc>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	3301      	adds	r3, #1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e8a:	e002      	b.n	8002e92 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f9      	bne.n	8002e8c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff26 	bl	8002cee <LL_ADC_IsInternalRegulatorEnabled>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	f043 0210 	orr.w	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff93 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 8002ece:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 8124 	bne.w	8003126 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 8120 	bne.w	8003126 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002eee:	f043 0202 	orr.w	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff30 	bl	8002d60 <LL_ADC_IsEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 80a7 	bne.w	8003056 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7e1b      	ldrb	r3, [r3, #24]
 8002f10:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f12:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7e5b      	ldrb	r3, [r3, #25]
 8002f18:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f1a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7e9b      	ldrb	r3, [r3, #26]
 8002f20:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f22:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_ADC_Init+0x11a>
 8002f2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_Init+0x11c>
 8002f32:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f34:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f3a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da04      	bge.n	8002f4e <HAL_ADC_Init+0x136>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f4c:	e001      	b.n	8002f52 <HAL_ADC_Init+0x13a>
 8002f4e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002f52:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002f5a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f5c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d114      	bne.n	8002f98 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7e9b      	ldrb	r3, [r3, #26]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e00b      	b.n	8002f98 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fac:	4313      	orrs	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002fbe:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d111      	bne.n	800300e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ff6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002ffc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003002:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	4b38      	ldr	r3, [pc, #224]	@ (80030f8 <HAL_ADC_Init+0x2e0>)
 8003016:	4013      	ands	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	6979      	ldr	r1, [r7, #20]
 800301e:	430b      	orrs	r3, r1
 8003020:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800302a:	d014      	beq.n	8003056 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003034:	d00f      	beq.n	8003056 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800303a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800303e:	d00a      	beq.n	8003056 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003040:	4b2e      	ldr	r3, [pc, #184]	@ (80030fc <HAL_ADC_Init+0x2e4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003050:	492a      	ldr	r1, [pc, #168]	@ (80030fc <HAL_ADC_Init+0x2e4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	461a      	mov	r2, r3
 8003060:	2100      	movs	r1, #0
 8003062:	f7ff fd76 	bl	8002b52 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306e:	461a      	mov	r2, r3
 8003070:	4923      	ldr	r1, [pc, #140]	@ (8003100 <HAL_ADC_Init+0x2e8>)
 8003072:	f7ff fd6e 	bl	8002b52 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f062 020f 	orn	r2, r2, #15
 800308c:	629a      	str	r2, [r3, #40]	@ 0x28
 800308e:	e017      	b.n	80030c0 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003098:	d112      	bne.n	80030c0 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f003 031c 	and.w	r3, r3, #28
 80030ac:	f06f 020f 	mvn.w	r2, #15
 80030b0:	fa02 f103 	lsl.w	r1, r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fd61 	bl	8002b8e <LL_ADC_GetSamplingTimeCommonChannels>
 80030cc:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d116      	bne.n	8003104 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030ec:	e023      	b.n	8003136 <HAL_ADC_Init+0x31e>
 80030ee:	bf00      	nop
 80030f0:	20000000 	.word	0x20000000
 80030f4:	053e2d63 	.word	0x053e2d63
 80030f8:	1ffffc02 	.word	0x1ffffc02
 80030fc:	40012708 	.word	0x40012708
 8003100:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003108:	f023 0312 	bic.w	r3, r3, #18
 800310c:	f043 0210 	orr.w	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003124:	e007      	b.n	8003136 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003136:	7ffb      	ldrb	r3, [r7, #31]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07a      	b.n	8003248 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	f043 0202 	orr.w	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 face 	bl	8003700 <ADC_ConversionStop>
 8003164:	4603      	mov	r3, r0
 8003166:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fb92 	bl	8003898 <ADC_Disable>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fd9f 	bl	8002ccc <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 800319c:	f023 0303 	bic.w	r3, r3, #3
 80031a0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f240 329f 	movw	r2, #927	@ 0x39f
 80031aa:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68d9      	ldr	r1, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b26      	ldr	r3, [pc, #152]	@ (8003250 <HAL_ADC_DeInit+0x110>)
 80031b8:	400b      	ands	r3, r1
 80031ba:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0207 	bic.w	r2, r2, #7
 80031ca:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80031e8:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003208:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003218:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800321a:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <HAL_ADC_DeInit+0x114>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0d      	ldr	r2, [pc, #52]	@ (8003254 <HAL_ADC_DeInit+0x114>)
 8003220:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003224:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe fc06 	bl	8001a38 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	833e0200 	.word	0x833e0200
 8003254:	40012708 	.word	0x40012708

08003258 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fdc5 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d132      	bne.n	80032d6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_ADC_Start+0x26>
 800327a:	2302      	movs	r3, #2
 800327c:	e02e      	b.n	80032dc <HAL_ADC_Start+0x84>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa80 	bl	800378c <ADC_Enable>
 800328c:	4603      	mov	r3, r0
 800328e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11a      	bne.n	80032cc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	221c      	movs	r2, #28
 80032b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fd6f 	bl	8002da8 <LL_ADC_REG_StartConversion>
 80032ca:	e006      	b.n	80032da <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80032d4:	e001      	b.n	80032da <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
 80032d8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Stop+0x16>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e022      	b.n	8003340 <HAL_ADC_Stop+0x5c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9fc 	bl	8003700 <ADC_ConversionStop>
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d111      	bne.n	8003336 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fac0 	bl	8003898 <ADC_Disable>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d102      	bne.n	8003360 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800335a:	2308      	movs	r3, #8
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e010      	b.n	8003382 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e077      	b.n	800346e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800337e:	2304      	movs	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003382:	f7fe feb5 	bl	80020f0 <HAL_GetTick>
 8003386:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003388:	e021      	b.n	80033ce <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d01d      	beq.n	80033ce <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003392:	f7fe fead 	bl	80020f0 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <HAL_ADC_PollForConversion+0x60>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d112      	bne.n	80033ce <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e04f      	b.n	800346e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0d6      	beq.n	800338a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fbe6 	bl	8002bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d031      	beq.n	800345c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e9b      	ldrb	r3, [r3, #26]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d12d      	bne.n	800345c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d126      	bne.n	800345c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fcee 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d112      	bne.n	8003444 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 020c 	bic.w	r2, r2, #12
 800342c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	659a      	str	r2, [r3, #88]	@ 0x58
 8003442:	e00b      	b.n	800345c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7e1b      	ldrb	r3, [r3, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d103      	bne.n	800346c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	220c      	movs	r2, #12
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
	...

08003490 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x28>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e110      	b.n	80036da <HAL_ADC_ConfigChannel+0x24a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fc95 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 80f7 	bne.w	80036c0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	f000 80b1 	beq.w	800363e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034ea:	4a7e      	ldr	r2, [pc, #504]	@ (80036e4 <HAL_ADC_ConfigChannel+0x254>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d108      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f7ff fb92 	bl	8002c24 <LL_ADC_REG_SetSequencerChAdd>
 8003500:	e041      	b.n	8003586 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	210f      	movs	r1, #15
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0xa0>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e011      	b.n	8003554 <HAL_ADC_ConfigChannel+0xc4>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e003      	b.n	8003554 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	6849      	ldr	r1, [r1, #4]
 8003558:	f001 011f 	and.w	r1, r1, #31
 800355c:	408b      	lsls	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	d808      	bhi.n	8003586 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	f7ff fb2e 	bl	8002be2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	461a      	mov	r2, r3
 8003594:	f7ff fb6b 	bl	8002c6e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f280 8097 	bge.w	80036d0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a2:	4851      	ldr	r0, [pc, #324]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80035a4:	f7ff fac8 	bl	8002b38 <LL_ADC_GetCommonPathInternalCh>
 80035a8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a4f      	ldr	r2, [pc, #316]	@ (80036ec <HAL_ADC_ConfigChannel+0x25c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d120      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11b      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035c4:	4619      	mov	r1, r3
 80035c6:	4848      	ldr	r0, [pc, #288]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80035c8:	f7ff faa4 	bl	8002b14 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035cc:	4b48      	ldr	r3, [pc, #288]	@ (80036f0 <HAL_ADC_ConfigChannel+0x260>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	099b      	lsrs	r3, r3, #6
 80035d2:	4a48      	ldr	r2, [pc, #288]	@ (80036f4 <HAL_ADC_ConfigChannel+0x264>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035e6:	e002      	b.n	80035ee <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035f4:	e06c      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a3f      	ldr	r2, [pc, #252]	@ (80036f8 <HAL_ADC_ConfigChannel+0x268>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10c      	bne.n	800361a <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d107      	bne.n	800361a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003610:	4619      	mov	r1, r3
 8003612:	4835      	ldr	r0, [pc, #212]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 8003614:	f7ff fa7e 	bl	8002b14 <LL_ADC_SetCommonPathInternalCh>
 8003618:	e05a      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a37      	ldr	r2, [pc, #220]	@ (80036fc <HAL_ADC_ConfigChannel+0x26c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d155      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	d150      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003634:	4619      	mov	r1, r3
 8003636:	482c      	ldr	r0, [pc, #176]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 8003638:	f7ff fa6c 	bl	8002b14 <LL_ADC_SetCommonPathInternalCh>
 800363c:	e048      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003646:	d004      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800364c:	4a25      	ldr	r2, [pc, #148]	@ (80036e4 <HAL_ADC_ConfigChannel+0x254>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d107      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7ff faf3 	bl	8002c48 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	da32      	bge.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800366a:	481f      	ldr	r0, [pc, #124]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 800366c:	f7ff fa64 	bl	8002b38 <LL_ADC_GetCommonPathInternalCh>
 8003670:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_ADC_ConfigChannel+0x25c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d107      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003682:	4619      	mov	r1, r3
 8003684:	4818      	ldr	r0, [pc, #96]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 8003686:	f7ff fa45 	bl	8002b14 <LL_ADC_SetCommonPathInternalCh>
 800368a:	e021      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <HAL_ADC_ConfigChannel+0x268>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d107      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800369c:	4619      	mov	r1, r3
 800369e:	4812      	ldr	r0, [pc, #72]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80036a0:	f7ff fa38 	bl	8002b14 <LL_ADC_SetCommonPathInternalCh>
 80036a4:	e014      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_ADC_ConfigChannel+0x26c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10f      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036b6:	4619      	mov	r1, r3
 80036b8:	480b      	ldr	r0, [pc, #44]	@ (80036e8 <HAL_ADC_ConfigChannel+0x258>)
 80036ba:	f7ff fa2b 	bl	8002b14 <LL_ADC_SetCommonPathInternalCh>
 80036be:	e007      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80036d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	80000004 	.word	0x80000004
 80036e8:	40012708 	.word	0x40012708
 80036ec:	b0001000 	.word	0xb0001000
 80036f0:	20000000 	.word	0x20000000
 80036f4:	053e2d63 	.word	0x053e2d63
 80036f8:	b8004000 	.word	0xb8004000
 80036fc:	b4002000 	.word	0xb4002000

08003700 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fb71 	bl	8002df4 <LL_ADC_REG_IsConversionOngoing>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d033      	beq.n	8003780 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fb31 	bl	8002d84 <LL_ADC_IsDisableOngoing>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fb4e 	bl	8002dce <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003732:	f7fe fcdd 	bl	80020f0 <HAL_GetTick>
 8003736:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003738:	e01b      	b.n	8003772 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800373a:	f7fe fcd9 	bl	80020f0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d914      	bls.n	8003772 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00d      	beq.n	8003772 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1dc      	bne.n	800373a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fadf 	bl	8002d60 <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d169      	bne.n	800387c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	4b36      	ldr	r3, [pc, #216]	@ (8003888 <ADC_Enable+0xfc>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ba:	f043 0210 	orr.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e055      	b.n	800387e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fa9c 	bl	8002d14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80037dc:	482b      	ldr	r0, [pc, #172]	@ (800388c <ADC_Enable+0x100>)
 80037de:	f7ff f9ab 	bl	8002b38 <LL_ADC_GetCommonPathInternalCh>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00f      	beq.n	800380c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ec:	4b28      	ldr	r3, [pc, #160]	@ (8003890 <ADC_Enable+0x104>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	4a28      	ldr	r2, [pc, #160]	@ (8003894 <ADC_Enable+0x108>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80037fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037fe:	e002      	b.n	8003806 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	3b01      	subs	r3, #1
 8003804:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f9      	bne.n	8003800 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e5b      	ldrb	r3, [r3, #25]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d033      	beq.n	800387c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003814:	f7fe fc6c 	bl	80020f0 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800381a:	e028      	b.n	800386e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fa9d 	bl	8002d60 <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d104      	bne.n	8003836 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fa6f 	bl	8002d14 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003836:	f7fe fc5b 	bl	80020f0 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d914      	bls.n	800386e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d00d      	beq.n	800386e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	f043 0210 	orr.w	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e007      	b.n	800387e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d1cf      	bne.n	800381c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	80000017 	.word	0x80000017
 800388c:	40012708 	.word	0x40012708
 8003890:	20000000 	.word	0x20000000
 8003894:	053e2d63 	.word	0x053e2d63

08003898 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fa6d 	bl	8002d84 <LL_ADC_IsDisableOngoing>
 80038aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fa55 	bl	8002d60 <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d047      	beq.n	800394c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d144      	bne.n	800394c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0305 	and.w	r3, r3, #5
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10c      	bne.n	80038ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fa30 	bl	8002d3a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2203      	movs	r2, #3
 80038e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038e2:	f7fe fc05 	bl	80020f0 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038e8:	e029      	b.n	800393e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e023      	b.n	800394e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003906:	f7fe fbf3 	bl	80020f0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d914      	bls.n	800393e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	f043 0210 	orr.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1dc      	bne.n	8003906 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <LL_ADC_SetCalibrationFactor>:
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003966:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <LL_ADC_GetCalibrationFactor>:
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800398c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <LL_ADC_Enable>:
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039aa:	f023 0317 	bic.w	r3, r3, #23
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_Disable>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039d0:	f023 0317 	bic.w	r3, r3, #23
 80039d4:	f043 0202 	orr.w	r2, r3, #2
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <LL_ADC_IsEnabled>:
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <LL_ADC_IsEnabled+0x18>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <LL_ADC_IsEnabled+0x1a>
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <LL_ADC_StartCalibration>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a1a:	f023 0317 	bic.w	r3, r3, #23
 8003a1e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a44:	d101      	bne.n	8003a4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_ADCEx_Calibration_Start+0x1e>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0b9      	b.n	8003be8 <HAL_ADCEx_Calibration_Start+0x192>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff0b 	bl	8003898 <ADC_Disable>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ffab 	bl	80039e6 <LL_ADC_IsEnabled>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 809d 	bne.w	8003bd2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003aa0:	f043 0202 	orr.w	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ac4:	f023 0303 	bic.w	r3, r3, #3
 8003ac8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e02e      	b.n	8003b2e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff98 	bl	8003a0a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ada:	e014      	b.n	8003b06 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003ae8:	d30d      	bcc.n	8003b06 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	f023 0312 	bic.w	r3, r3, #18
 8003af2:	f043 0210 	orr.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e070      	b.n	8003be8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff ff90 	bl	8003a30 <LL_ADC_IsCalibrationOnGoing>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e2      	bne.n	8003adc <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff2f 	bl	800397e <LL_ADC_GetCalibrationFactor>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4413      	add	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b07      	cmp	r3, #7
 8003b32:	d9cd      	bls.n	8003ad0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff29 	bl	800399a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69b9      	ldr	r1, [r7, #24]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff01 	bl	8003956 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff31 	bl	80039c0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b5e:	f7fe fac7 	bl	80020f0 <HAL_GetTick>
 8003b62:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b64:	e01c      	b.n	8003ba0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b66:	f7fe fac3 	bl	80020f0 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d915      	bls.n	8003ba0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ff34 	bl	80039e6 <LL_ADC_IsEnabled>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e023      	b.n	8003be8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff1e 	bl	80039e6 <LL_ADC_IsEnabled>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1da      	bne.n	8003b66 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc4:	f023 0303 	bic.w	r3, r3, #3
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bd0:	e005      	b.n	8003bde <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	f043 0210 	orr.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c22:	4a04      	ldr	r2, [pc, #16]	@ (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	60d3      	str	r3, [r2, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c3c:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <__NVIC_GetPriorityGrouping+0x18>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	f003 0307 	and.w	r3, r3, #7
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	db0b      	blt.n	8003c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	4906      	ldr	r1, [pc, #24]	@ (8003c88 <__NVIC_EnableIRQ+0x34>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2001      	movs	r0, #1
 8003c76:	fa00 f202 	lsl.w	r2, r0, r2
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db12      	blt.n	8003cc4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	490a      	ldr	r1, [pc, #40]	@ (8003cd0 <__NVIC_DisableIRQ+0x44>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2001      	movs	r0, #1
 8003cae:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb2:	3320      	adds	r3, #32
 8003cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cb8:	f3bf 8f4f 	dsb	sy
}
 8003cbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cbe:	f3bf 8f6f 	isb	sy
}
 8003cc2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	@ (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	@ (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9c:	d301      	bcc.n	8003da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00f      	b.n	8003dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <SysTick_Config+0x40>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003daa:	210f      	movs	r1, #15
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	f7ff ff90 	bl	8003cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <SysTick_Config+0x40>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dba:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <SysTick_Config+0x40>)
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff09 	bl	8003bf0 <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003df4:	f7ff ff20 	bl	8003c38 <__NVIC_GetPriorityGrouping>
 8003df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff92 	bl	8003d28 <NVIC_EncodePriority>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff61 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff13 	bl	8003c54 <__NVIC_EnableIRQ>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff21 	bl	8003c8c <__NVIC_DisableIRQ>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff96 	bl	8003d8c <SysTick_Config>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e08e      	b.n	8003f9c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b47      	ldr	r3, [pc, #284]	@ (8003fa4 <HAL_DMA_Init+0x138>)
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d80f      	bhi.n	8003eaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b45      	ldr	r3, [pc, #276]	@ (8003fa8 <HAL_DMA_Init+0x13c>)
 8003e92:	4413      	add	r3, r2
 8003e94:	4a45      	ldr	r2, [pc, #276]	@ (8003fac <HAL_DMA_Init+0x140>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	009a      	lsls	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	@ (8003fb0 <HAL_DMA_Init+0x144>)
 8003ea6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ea8:	e00e      	b.n	8003ec8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b40      	ldr	r3, [pc, #256]	@ (8003fb4 <HAL_DMA_Init+0x148>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	4a3d      	ldr	r2, [pc, #244]	@ (8003fac <HAL_DMA_Init+0x140>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	009a      	lsls	r2, r3, #2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8003fb8 <HAL_DMA_Init+0x14c>)
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb24 	bl	8004568 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f28:	d102      	bne.n	8003f30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d010      	beq.n	8003f72 <HAL_DMA_Init+0x106>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d80c      	bhi.n	8003f72 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fb4d 	bl	80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	e008      	b.n	8003f84 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40020407 	.word	0x40020407
 8003fa8:	bffdfff8 	.word	0xbffdfff8
 8003fac:	cccccccd 	.word	0xcccccccd
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	bffdfbf8 	.word	0xbffdfbf8
 8003fb8:	40020400 	.word	0x40020400

08003fbc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07b      	b.n	80040c6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80040d0 <HAL_DMA_DeInit+0x114>)
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d80f      	bhi.n	800400a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <HAL_DMA_DeInit+0x118>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4a38      	ldr	r2, [pc, #224]	@ (80040d8 <HAL_DMA_DeInit+0x11c>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	009a      	lsls	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a35      	ldr	r2, [pc, #212]	@ (80040dc <HAL_DMA_DeInit+0x120>)
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40
 8004008:	e00e      	b.n	8004028 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b33      	ldr	r3, [pc, #204]	@ (80040e0 <HAL_DMA_DeInit+0x124>)
 8004012:	4413      	add	r3, r2
 8004014:	4a30      	ldr	r2, [pc, #192]	@ (80040d8 <HAL_DMA_DeInit+0x11c>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2f      	ldr	r2, [pc, #188]	@ (80040e4 <HAL_DMA_DeInit+0x128>)
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004034:	f003 021c 	and.w	r2, r3, #28
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	2101      	movs	r1, #1
 800403e:	fa01 f202 	lsl.w	r2, r1, r2
 8004042:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fa8f 	bl	8004568 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800405a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00f      	beq.n	8004084 <HAL_DMA_DeInit+0xc8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d80b      	bhi.n	8004084 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fac3 	bl	80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004082:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40020407 	.word	0x40020407
 80040d4:	bffdfff8 	.word	0xbffdfff8
 80040d8:	cccccccd 	.word	0xcccccccd
 80040dc:	40020000 	.word	0x40020000
 80040e0:	bffdfbf8 	.word	0xbffdfbf8
 80040e4:	40020400 	.word	0x40020400

080040e8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_DMA_Start_IT+0x20>
 8004104:	2302      	movs	r3, #2
 8004106:	e069      	b.n	80041dc <HAL_DMA_Start_IT+0xf4>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d155      	bne.n	80041c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f9d3 	bl	80044ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 020e 	orr.w	r2, r2, #14
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e00f      	b.n	8004180 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 020a 	orr.w	r2, r2, #10
 800417e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800419c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e008      	b.n	80041da <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2280      	movs	r2, #128	@ 0x80
 80041cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e04f      	b.n	8004296 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d008      	beq.n	8004214 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e040      	b.n	8004296 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 020e 	bic.w	r2, r2, #14
 8004222:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004232:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	f003 021c 	and.w	r2, r3, #28
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f202 	lsl.w	r2, r1, r2
 8004256:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004260:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004278:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004282:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d005      	beq.n	80042c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2204      	movs	r2, #4
 80042bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	e047      	b.n	8004354 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 020e 	bic.w	r2, r2, #14
 80042d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f8:	f003 021c 	and.w	r2, r3, #28
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	2101      	movs	r1, #1
 8004302:	fa01 f202 	lsl.w	r2, r1, r2
 8004306:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004310:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004328:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004332:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	4798      	blx	r3
    }
  }
  return status;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437c:	f003 031c 	and.w	r3, r3, #28
 8004380:	2204      	movs	r2, #4
 8004382:	409a      	lsls	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d027      	beq.n	80043dc <HAL_DMA_IRQHandler+0x7c>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	d022      	beq.n	80043dc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b8:	f003 021c 	and.w	r2, r3, #28
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	2104      	movs	r1, #4
 80043c2:	fa01 f202 	lsl.w	r2, r1, r2
 80043c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8081 	beq.w	80044d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80043da:	e07b      	b.n	80044d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e0:	f003 031c 	and.w	r3, r3, #28
 80043e4:	2202      	movs	r2, #2
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03d      	beq.n	800446c <HAL_DMA_IRQHandler+0x10c>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d038      	beq.n	800446c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 020a 	bic.w	r2, r2, #10
 8004416:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4b2e      	ldr	r3, [pc, #184]	@ (80044e0 <HAL_DMA_IRQHandler+0x180>)
 8004428:	429a      	cmp	r2, r3
 800442a:	d909      	bls.n	8004440 <HAL_DMA_IRQHandler+0xe0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	f003 031c 	and.w	r3, r3, #28
 8004434:	4a2b      	ldr	r2, [pc, #172]	@ (80044e4 <HAL_DMA_IRQHandler+0x184>)
 8004436:	2102      	movs	r1, #2
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	e008      	b.n	8004452 <HAL_DMA_IRQHandler+0xf2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004444:	f003 031c 	and.w	r3, r3, #28
 8004448:	4a27      	ldr	r2, [pc, #156]	@ (80044e8 <HAL_DMA_IRQHandler+0x188>)
 800444a:	2102      	movs	r1, #2
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d038      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800446a:	e033      	b.n	80044d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004470:	f003 031c 	and.w	r3, r3, #28
 8004474:	2208      	movs	r2, #8
 8004476:	409a      	lsls	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02a      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x176>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d025      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 020e 	bic.w	r2, r2, #14
 8004498:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	f003 021c 	and.w	r2, r3, #28
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2101      	movs	r1, #1
 80044a8:	fa01 f202 	lsl.w	r2, r1, r2
 80044ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
}
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40020080 	.word	0x40020080
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020000 	.word	0x40020000

080044ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004502:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004514:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451a:	f003 021c 	and.w	r2, r3, #28
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	2101      	movs	r1, #1
 8004524:	fa01 f202 	lsl.w	r2, r1, r2
 8004528:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b10      	cmp	r3, #16
 8004538:	d108      	bne.n	800454c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800454a:	e007      	b.n	800455c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
	...

08004568 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	4b1c      	ldr	r3, [pc, #112]	@ (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004578:	429a      	cmp	r2, r3
 800457a:	d813      	bhi.n	80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004588:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	3b08      	subs	r3, #8
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e011      	b.n	80045c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	009a      	lsls	r2, r3, #2
 80045ac:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80045ae:	4413      	add	r3, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	3b08      	subs	r3, #8
 80045bc:	4a0b      	ldr	r2, [pc, #44]	@ (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	3307      	adds	r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80045cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2201      	movs	r2, #1
 80045d6:	409a      	lsls	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40020407 	.word	0x40020407
 80045ec:	cccccccd 	.word	0xcccccccd
 80045f0:	4002081c 	.word	0x4002081c
 80045f4:	40020880 	.word	0x40020880

080045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004608:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	461a      	mov	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a08      	ldr	r2, [pc, #32]	@ (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800461c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b01      	subs	r3, #1
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2201      	movs	r2, #1
 8004628:	409a      	lsls	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	1000823f 	.word	0x1000823f
 800463c:	40020940 	.word	0x40020940

08004640 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800464e:	4b1c      	ldr	r3, [pc, #112]	@ (80046c0 <HAL_FLASH_Program+0x80>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_FLASH_Program+0x1a>
 8004656:	2302      	movs	r3, #2
 8004658:	e02d      	b.n	80046b6 <HAL_FLASH_Program+0x76>
 800465a:	4b19      	ldr	r3, [pc, #100]	@ (80046c0 <HAL_FLASH_Program+0x80>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004660:	4b17      	ldr	r3, [pc, #92]	@ (80046c0 <HAL_FLASH_Program+0x80>)
 8004662:	2200      	movs	r2, #0
 8004664:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800466a:	f000 f869 	bl	8004740 <FLASH_WaitForLastOperation>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11a      	bne.n	80046ae <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d105      	bne.n	800468a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800467e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004682:	68b8      	ldr	r0, [r7, #8]
 8004684:	f000 f8be 	bl	8004804 <FLASH_Program_DoubleWord>
 8004688:	e004      	b.n	8004694 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4619      	mov	r1, r3
 800468e:	68b8      	ldr	r0, [r7, #8]
 8004690:	f000 f8de 	bl	8004850 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004698:	f000 f852 	bl	8004740 <FLASH_WaitForLastOperation>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80046a0:	4b08      	ldr	r3, [pc, #32]	@ (80046c4 <HAL_FLASH_Program+0x84>)
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	4906      	ldr	r1, [pc, #24]	@ (80046c4 <HAL_FLASH_Program+0x84>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80046ae:	4b04      	ldr	r3, [pc, #16]	@ (80046c0 <HAL_FLASH_Program+0x80>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200003a8 	.word	0x200003a8
 80046c4:	58004000 	.word	0x58004000

080046c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <HAL_FLASH_Unlock+0x38>)
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da0b      	bge.n	80046f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80046da:	4b09      	ldr	r3, [pc, #36]	@ (8004700 <HAL_FLASH_Unlock+0x38>)
 80046dc:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <HAL_FLASH_Unlock+0x3c>)
 80046de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80046e0:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <HAL_FLASH_Unlock+0x38>)
 80046e2:	4a09      	ldr	r2, [pc, #36]	@ (8004708 <HAL_FLASH_Unlock+0x40>)
 80046e4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046e6:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <HAL_FLASH_Unlock+0x38>)
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da01      	bge.n	80046f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046f2:	79fb      	ldrb	r3, [r7, #7]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	58004000 	.word	0x58004000
 8004704:	45670123 	.word	0x45670123
 8004708:	cdef89ab 	.word	0xcdef89ab

0800470c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <HAL_FLASH_Lock+0x30>)
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	4a08      	ldr	r2, [pc, #32]	@ (800473c <HAL_FLASH_Lock+0x30>)
 800471c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004720:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004722:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_FLASH_Lock+0x30>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	db01      	blt.n	800472e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800472e:	79fb      	ldrb	r3, [r7, #7]
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	58004000 	.word	0x58004000

08004740 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004748:	f7fd fcd2 	bl	80020f0 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800474e:	e009      	b.n	8004764 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004750:	f7fd fcce 	bl	80020f0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d801      	bhi.n	8004764 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e046      	b.n	80047f2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004764:	4b25      	ldr	r3, [pc, #148]	@ (80047fc <FLASH_WaitForLastOperation+0xbc>)
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800476c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004770:	d0ee      	beq.n	8004750 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004772:	4b22      	ldr	r3, [pc, #136]	@ (80047fc <FLASH_WaitForLastOperation+0xbc>)
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004782:	4b1e      	ldr	r3, [pc, #120]	@ (80047fc <FLASH_WaitForLastOperation+0xbc>)
 8004784:	2201      	movs	r2, #1
 8004786:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800478e:	4013      	ands	r3, r2
 8004790:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d307      	bcc.n	80047aa <FLASH_WaitForLastOperation+0x6a>
 800479a:	4b18      	ldr	r3, [pc, #96]	@ (80047fc <FLASH_WaitForLastOperation+0xbc>)
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80047a4:	4915      	ldr	r1, [pc, #84]	@ (80047fc <FLASH_WaitForLastOperation+0xbc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	618b      	str	r3, [r1, #24]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <FLASH_WaitForLastOperation+0x7e>
 80047b4:	4a11      	ldr	r2, [pc, #68]	@ (80047fc <FLASH_WaitForLastOperation+0xbc>)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80047bc:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00e      	beq.n	80047e2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80047c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004800 <FLASH_WaitForLastOperation+0xc0>)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e011      	b.n	80047f2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80047ce:	f7fd fc8f 	bl	80020f0 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d801      	bhi.n	80047e2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e007      	b.n	80047f2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80047e2:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <FLASH_WaitForLastOperation+0xbc>)
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047ee:	d0ee      	beq.n	80047ce <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	58004000 	.word	0x58004000
 8004800:	200003a8 	.word	0x200003a8

08004804 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004810:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <FLASH_Program_DoubleWord+0x48>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	4a0d      	ldr	r2, [pc, #52]	@ (800484c <FLASH_Program_DoubleWord+0x48>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004822:	f3bf 8f6f 	isb	sy
}
 8004826:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	000a      	movs	r2, r1
 8004836:	2300      	movs	r3, #0
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	3104      	adds	r1, #4
 800483c:	4613      	mov	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	58004000 	.word	0x58004000

08004850 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800485a:	2340      	movs	r3, #64	@ 0x40
 800485c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004866:	4b18      	ldr	r3, [pc, #96]	@ (80048c8 <FLASH_Program_Fast+0x78>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	4a17      	ldr	r2, [pc, #92]	@ (80048c8 <FLASH_Program_Fast+0x78>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004870:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004872:	f3ef 8310 	mrs	r3, PRIMASK
 8004876:	60fb      	str	r3, [r7, #12]
  return(result);
 8004878:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800487a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800487c:	b672      	cpsid	i
}
 800487e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3304      	adds	r3, #4
 800488c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	3304      	adds	r3, #4
 8004892:	617b      	str	r3, [r7, #20]
    row_index--;
 8004894:	7ffb      	ldrb	r3, [r7, #31]
 8004896:	3b01      	subs	r3, #1
 8004898:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800489a:	7ffb      	ldrb	r3, [r7, #31]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ef      	bne.n	8004880 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80048a0:	bf00      	nop
 80048a2:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <FLASH_Program_Fast+0x78>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ae:	d0f8      	beq.n	80048a2 <FLASH_Program_Fast+0x52>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80048bc:	bf00      	nop
 80048be:	3724      	adds	r7, #36	@ 0x24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	58004000 	.word	0x58004000

080048cc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048d6:	4b28      	ldr	r3, [pc, #160]	@ (8004978 <HAL_FLASHEx_Erase+0xac>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_FLASHEx_Erase+0x16>
 80048de:	2302      	movs	r3, #2
 80048e0:	e046      	b.n	8004970 <HAL_FLASHEx_Erase+0xa4>
 80048e2:	4b25      	ldr	r3, [pc, #148]	@ (8004978 <HAL_FLASHEx_Erase+0xac>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048e8:	4b23      	ldr	r3, [pc, #140]	@ (8004978 <HAL_FLASHEx_Erase+0xac>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80048f2:	f7ff ff25 	bl	8004740 <FLASH_WaitForLastOperation>
 80048f6:	4603      	mov	r3, r0
 80048f8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d133      	bne.n	8004968 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d108      	bne.n	800491a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004908:	f000 f838 	bl	800497c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800490c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004910:	f7ff ff16 	bl	8004740 <FLASH_WaitForLastOperation>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e024      	b.n	8004964 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	e012      	b.n	8004950 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f000 f836 	bl	800499c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004930:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004934:	f7ff ff04 	bl	8004740 <FLASH_WaitForLastOperation>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	601a      	str	r2, [r3, #0]
          break;
 8004948:	e00a      	b.n	8004960 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3301      	adds	r3, #1
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4413      	add	r3, r2
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3e4      	bcc.n	800492a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004960:	f000 f878 	bl	8004a54 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004964:	f000 f832 	bl	80049cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004968:	4b03      	ldr	r3, [pc, #12]	@ (8004978 <HAL_FLASHEx_Erase+0xac>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]

  return status;
 800496e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200003a8 	.word	0x200003a8

0800497c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <FLASH_MassErase+0x1c>)
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <FLASH_MassErase+0x1c>)
 8004986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800498a:	f043 0304 	orr.w	r3, r3, #4
 800498e:	6153      	str	r3, [r2, #20]
#endif
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	58004000 	.word	0x58004000

0800499c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <FLASH_PageErase+0x2c>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4313      	orrs	r3, r2
 80049b2:	4a05      	ldr	r2, [pc, #20]	@ (80049c8 <FLASH_PageErase+0x2c>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	6153      	str	r3, [r2, #20]
#endif
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	58004000 	.word	0x58004000

080049cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80049d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d117      	bne.n	8004a0c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80049dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 80049e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80049e8:	4b19      	ldr	r3, [pc, #100]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a18      	ldr	r2, [pc, #96]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 80049ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	4b16      	ldr	r3, [pc, #88]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a15      	ldr	r2, [pc, #84]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 80049fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a00:	4b13      	ldr	r3, [pc, #76]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a0a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004a0c:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d117      	bne.n	8004a48 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a18:	4b0d      	ldr	r3, [pc, #52]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a22:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a24:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a09      	ldr	r2, [pc, #36]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a06      	ldr	r2, [pc, #24]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a3a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a3c:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a03      	ldr	r2, [pc, #12]	@ (8004a50 <FLASH_FlushCaches+0x84>)
 8004a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a46:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr
 8004a50:	58004000 	.word	0x58004000

08004a54 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004a58:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <FLASH_AcknowledgePageErase+0x1c>)
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	4a04      	ldr	r2, [pc, #16]	@ (8004a70 <FLASH_AcknowledgePageErase+0x1c>)
 8004a5e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004a62:	f023 0302 	bic.w	r3, r3, #2
 8004a66:	6153      	str	r3, [r2, #20]
#endif
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr
 8004a70:	58004000 	.word	0x58004000

08004a74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a82:	e140      	b.n	8004d06 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2101      	movs	r1, #1
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a90:	4013      	ands	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8132 	beq.w	8004d00 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d005      	beq.n	8004ab4 <HAL_GPIO_Init+0x40>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d130      	bne.n	8004b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aea:	2201      	movs	r2, #1
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0201 	and.w	r2, r3, #1
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d017      	beq.n	8004b52 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d123      	bne.n	8004ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	08da      	lsrs	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3208      	adds	r2, #8
 8004b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	220f      	movs	r2, #15
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	08da      	lsrs	r2, r3, #3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3208      	adds	r2, #8
 8004ba0:	6939      	ldr	r1, [r7, #16]
 8004ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 0203 	and.w	r2, r3, #3
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 808c 	beq.w	8004d00 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004be8:	4a4e      	ldr	r2, [pc, #312]	@ (8004d24 <HAL_GPIO_Init+0x2b0>)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	089b      	lsrs	r3, r3, #2
 8004bee:	3302      	adds	r3, #2
 8004bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	2207      	movs	r2, #7
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c12:	d00d      	beq.n	8004c30 <HAL_GPIO_Init+0x1bc>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a44      	ldr	r2, [pc, #272]	@ (8004d28 <HAL_GPIO_Init+0x2b4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <HAL_GPIO_Init+0x1b8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a43      	ldr	r2, [pc, #268]	@ (8004d2c <HAL_GPIO_Init+0x2b8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_GPIO_Init+0x1b4>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e004      	b.n	8004c32 <HAL_GPIO_Init+0x1be>
 8004c28:	2307      	movs	r3, #7
 8004c2a:	e002      	b.n	8004c32 <HAL_GPIO_Init+0x1be>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_GPIO_Init+0x1be>
 8004c30:	2300      	movs	r3, #0
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	f002 0203 	and.w	r2, r2, #3
 8004c38:	0092      	lsls	r2, r2, #2
 8004c3a:	4093      	lsls	r3, r2
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c42:	4938      	ldr	r1, [pc, #224]	@ (8004d24 <HAL_GPIO_Init+0x2b0>)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	3302      	adds	r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c50:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c74:	4a2e      	ldr	r2, [pc, #184]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4013      	ands	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c9e:	4a24      	ldr	r2, [pc, #144]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004ca4:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004caa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004cca:	4a19      	ldr	r2, [pc, #100]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004cd2:	4b17      	ldr	r3, [pc, #92]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8004d30 <HAL_GPIO_Init+0x2bc>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3301      	adds	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f47f aeb7 	bne.w	8004a84 <HAL_GPIO_Init+0x10>
  }
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40010000 	.word	0x40010000
 8004d28:	48000400 	.word	0x48000400
 8004d2c:	48000800 	.word	0x48000800
 8004d30:	58000800 	.word	0x58000800

08004d34 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004d42:	e0af      	b.n	8004ea4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004d44:	2201      	movs	r2, #1
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80a2 	beq.w	8004e9e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004d5a:	4a59      	ldr	r2, [pc, #356]	@ (8004ec0 <HAL_GPIO_DeInit+0x18c>)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	3302      	adds	r3, #2
 8004d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d66:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	2207      	movs	r2, #7
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d82:	d00d      	beq.n	8004da0 <HAL_GPIO_DeInit+0x6c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a4f      	ldr	r2, [pc, #316]	@ (8004ec4 <HAL_GPIO_DeInit+0x190>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <HAL_GPIO_DeInit+0x68>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ec8 <HAL_GPIO_DeInit+0x194>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_GPIO_DeInit+0x64>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e004      	b.n	8004da2 <HAL_GPIO_DeInit+0x6e>
 8004d98:	2307      	movs	r3, #7
 8004d9a:	e002      	b.n	8004da2 <HAL_GPIO_DeInit+0x6e>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_GPIO_DeInit+0x6e>
 8004da0:	2300      	movs	r3, #0
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	f002 0203 	and.w	r2, r2, #3
 8004da8:	0092      	lsls	r2, r2, #2
 8004daa:	4093      	lsls	r3, r2
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d136      	bne.n	8004e20 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004db2:	4b46      	ldr	r3, [pc, #280]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004db4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	4943      	ldr	r1, [pc, #268]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004dc4:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004dc6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	493f      	ldr	r1, [pc, #252]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	493b      	ldr	r1, [pc, #236]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004de4:	4b39      	ldr	r3, [pc, #228]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	43db      	mvns	r3, r3
 8004dec:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_GPIO_DeInit+0x198>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e02:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec0 <HAL_GPIO_DeInit+0x18c>)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	3302      	adds	r3, #2
 8004e0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	43da      	mvns	r2, r3
 8004e12:	482b      	ldr	r0, [pc, #172]	@ (8004ec0 <HAL_GPIO_DeInit+0x18c>)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	089b      	lsrs	r3, r3, #2
 8004e18:	400a      	ands	r2, r1
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2103      	movs	r1, #3
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	08da      	lsrs	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3208      	adds	r2, #8
 8004e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	220f      	movs	r2, #15
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	08d2      	lsrs	r2, r2, #3
 8004e54:	4019      	ands	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3208      	adds	r2, #8
 8004e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2103      	movs	r1, #3
 8004e68:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	401a      	ands	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	2101      	movs	r1, #1
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	401a      	ands	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	2103      	movs	r1, #3
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	401a      	ands	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f47f af49 	bne.w	8004d44 <HAL_GPIO_DeInit+0x10>
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	48000400 	.word	0x48000400
 8004ec8:	48000800 	.word	0x48000800
 8004ecc:	58000800 	.word	0x58000800

08004ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	807b      	strh	r3, [r7, #2]
 8004edc:	4613      	mov	r3, r2
 8004ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ee0:	787b      	ldrb	r3, [r7, #1]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004eec:	e002      	b.n	8004ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f0a:	4b08      	ldr	r3, [pc, #32]	@ (8004f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f16:	4a05      	ldr	r2, [pc, #20]	@ (8004f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f806 	bl	8004f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	58000800 	.word	0x58000800

08004f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e08d      	b.n	8005072 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc fd78 	bl	8001a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	@ 0x24
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d107      	bne.n	8004fbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	e006      	b.n	8004fcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004fca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d108      	bne.n	8004fe6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	e007      	b.n	8004ff6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005008:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005018:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e021      	b.n	80050d0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2224      	movs	r2, #36	@ 0x24
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fc fd23 	bl	8001af0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d138      	bne.n	8005160 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e032      	b.n	8005162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2224      	movs	r2, #36	@ 0x24
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800512a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005160:	2302      	movs	r3, #2
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b20      	cmp	r3, #32
 8005180:	d139      	bne.n	80051f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800518c:	2302      	movs	r3, #2
 800518e:	e033      	b.n	80051f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	@ 0x24
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e000      	b.n	80051f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
	...

08005204 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005208:	4b04      	ldr	r3, [pc, #16]	@ (800521c <HAL_PWR_EnableBkUpAccess+0x18>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a03      	ldr	r2, [pc, #12]	@ (800521c <HAL_PWR_EnableBkUpAccess+0x18>)
 800520e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005212:	6013      	str	r3, [r2, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	58000400 	.word	0x58000400

08005220 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005232:	4b13      	ldr	r3, [pc, #76]	@ (8005280 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800523a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800523e:	d10d      	bne.n	800525c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005240:	f000 f83c 	bl	80052bc <HAL_PWREx_DisableLowPowerRunMode>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800524a:	e015      	b.n	8005278 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800524c:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <HAL_PWR_EnterSLEEPMode+0x60>)
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005258:	f000 f822 	bl	80052a0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800525c:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <HAL_PWR_EnterSLEEPMode+0x64>)
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	4a08      	ldr	r2, [pc, #32]	@ (8005284 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005262:	f023 0304 	bic.w	r3, r3, #4
 8005266:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800526e:	bf30      	wfi
 8005270:	e002      	b.n	8005278 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005272:	bf40      	sev
    __WFE();
 8005274:	bf20      	wfe
    __WFE();
 8005276:	bf20      	wfe
  }
}
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	58000400 	.word	0x58000400
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800528c:	4b03      	ldr	r3, [pc, #12]	@ (800529c <HAL_PWREx_GetVoltageRange+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005294:	4618      	mov	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	58000400 	.word	0x58000400

080052a0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80052a4:	4b04      	ldr	r3, [pc, #16]	@ (80052b8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a03      	ldr	r2, [pc, #12]	@ (80052b8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80052aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052ae:	6013      	str	r3, [r2, #0]
}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	58000400 	.word	0x58000400

080052bc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80052c2:	4b16      	ldr	r3, [pc, #88]	@ (800531c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a15      	ldr	r2, [pc, #84]	@ (800531c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80052c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052cc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80052ce:	4b14      	ldr	r3, [pc, #80]	@ (8005320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2232      	movs	r2, #50	@ 0x32
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	4a12      	ldr	r2, [pc, #72]	@ (8005324 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0c9b      	lsrs	r3, r3, #18
 80052e0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80052e2:	e002      	b.n	80052ea <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80052ea:	4b0c      	ldr	r3, [pc, #48]	@ (800531c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f6:	d102      	bne.n	80052fe <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f2      	bne.n	80052e4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80052fe:	4b07      	ldr	r3, [pc, #28]	@ (800531c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800530a:	d101      	bne.n	8005310 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e000      	b.n	8005312 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	58000400 	.word	0x58000400
 8005320:	20000000 	.word	0x20000000
 8005324:	431bde83 	.word	0x431bde83

08005328 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	4a0e      	ldr	r2, [pc, #56]	@ (8005374 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005342:	4b0d      	ldr	r3, [pc, #52]	@ (8005378 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	4a0c      	ldr	r2, [pc, #48]	@ (8005378 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005348:	f043 0304 	orr.w	r3, r3, #4
 800534c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005354:	bf30      	wfi
 8005356:	e002      	b.n	800535e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005358:	bf40      	sev
    __WFE();
 800535a:	bf20      	wfe
    __WFE();
 800535c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800535e:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	4a05      	ldr	r2, [pc, #20]	@ (8005378 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	6113      	str	r3, [r2, #16]
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr
 8005374:	58000400 	.word	0x58000400
 8005378:	e000ed00 	.word	0xe000ed00

0800537c <LL_PWR_IsEnabledBkUpAccess>:
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800538c:	d101      	bne.n	8005392 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	58000400 	.word	0x58000400

080053a0 <LL_RCC_HSE_EnableTcxo>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053b2:	6013      	str	r3, [r2, #0]
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <LL_RCC_HSE_DisableTcxo>:
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053ce:	6013      	str	r3, [r2, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ea:	d101      	bne.n	80053f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <LL_RCC_HSE_Enable>:
{
 80053fa:	b480      	push	{r7}
 80053fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800540c:	6013      	str	r3, [r2, #0]
}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <LL_RCC_HSE_Disable>:
{
 8005416:	b480      	push	{r7}
 8005418:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800541a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005428:	6013      	str	r3, [r2, #0]
}
 800542a:	bf00      	nop
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <LL_RCC_HSE_IsReady>:
{
 8005432:	b480      	push	{r7}
 8005434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005444:	d101      	bne.n	800544a <LL_RCC_HSE_IsReady+0x18>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <LL_RCC_HSE_IsReady+0x1a>
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <LL_RCC_HSI_Enable>:
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <LL_RCC_HSI_Disable>:
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800547e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <LL_RCC_HSI_IsReady>:
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549e:	d101      	bne.n	80054a4 <LL_RCC_HSI_IsReady+0x18>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <LL_RCC_HSI_IsReady+0x1a>
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr

080054ae <LL_RCC_HSI_SetCalibTrimming>:
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80054b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054c8:	4313      	orrs	r3, r2
 80054ca:	604b      	str	r3, [r1, #4]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <LL_RCC_LSE_IsReady>:
{
 80054d6:	b480      	push	{r7}
 80054d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d101      	bne.n	80054ee <LL_RCC_LSE_IsReady+0x18>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <LL_RCC_LSE_IsReady+0x1a>
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <LL_RCC_LSI_Enable>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <LL_RCC_LSI_Disable>:
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005524:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005530:	bf00      	nop
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <LL_RCC_LSI_IsReady>:
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d101      	bne.n	8005550 <LL_RCC_LSI_IsReady+0x18>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <LL_RCC_LSI_IsReady+0x1a>
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <LL_RCC_MSI_Enable>:
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800555e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6013      	str	r3, [r2, #0]
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <LL_RCC_MSI_Disable>:
{
 8005576:	b480      	push	{r7}
 8005578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800557a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	6013      	str	r3, [r2, #0]
}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr

08005592 <LL_RCC_MSI_IsReady>:
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d101      	bne.n	80055a8 <LL_RCC_MSI_IsReady+0x16>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <LL_RCC_MSI_IsReady+0x18>
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80055b2:	b480      	push	{r7}
 80055b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d101      	bne.n	80055c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr

080055d2 <LL_RCC_MSI_GetRange>:
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bc80      	pop	{r7}
 80055fe:	4770      	bx	lr

08005600 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <LL_RCC_SetSysClkSource>:
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f023 0203 	bic.w	r2, r3, #3
 800563a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4313      	orrs	r3, r2
 8005642:	608b      	str	r3, [r1, #8]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr

0800564e <LL_RCC_GetSysClkSource>:
{
 800564e:	b480      	push	{r7}
 8005650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
}
 800565c:	4618      	mov	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <LL_RCC_SetAHBPrescaler>:
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005676:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4313      	orrs	r3, r2
 800567e:	608b      	str	r3, [r1, #8]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr

0800568a <LL_RCC_SetAHB3Prescaler>:
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005696:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800569a:	f023 020f 	bic.w	r2, r3, #15
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr

080056b6 <LL_RCC_SetAPB1Prescaler>:
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80056be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <LL_RCC_SetAPB2Prescaler>:
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80056e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	608b      	str	r3, [r1, #8]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <LL_RCC_GetAHBPrescaler>:
{
 8005702:	b480      	push	{r7}
 8005704:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <LL_RCC_GetAHB3Prescaler>:
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800571c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005720:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800572a:	4618      	mov	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <LL_RCC_GetAPB1Prescaler>:
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <LL_RCC_GetAPB2Prescaler>:
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800574c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005756:	4618      	mov	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800575e:	b480      	push	{r7}
 8005760:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800576c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005770:	6013      	str	r3, [r2, #0]
}
 8005772:	bf00      	nop
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800577a:	b480      	push	{r7}
 800577c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005788:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800578c:	6013      	str	r3, [r2, #0]
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005796:	b480      	push	{r7}
 8005798:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057a8:	d101      	bne.n	80057ae <LL_RCC_PLL_IsReady+0x18>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <LL_RCC_PLL_IsReady+0x1a>
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80057de:	4618      	mov	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80057e6:	b480      	push	{r7}
 80057e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0303 	and.w	r3, r3, #3
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005812:	b480      	push	{r7}
 8005814:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005824:	d101      	bne.n	800582a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005848:	d101      	bne.n	800584e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800585c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800586a:	d101      	bne.n	8005870 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800587a:	b480      	push	{r7}
 800587c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005888:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800588c:	d101      	bne.n	8005892 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e36f      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ae:	f7ff fece 	bl	800564e <LL_RCC_GetSysClkSource>
 80058b2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b4:	f7ff ffa2 	bl	80057fc <LL_RCC_PLL_GetMainSource>
 80058b8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80c4 	beq.w	8005a50 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <HAL_RCC_OscConfig+0x3e>
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b0c      	cmp	r3, #12
 80058d2:	d176      	bne.n	80059c2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d173      	bne.n	80059c2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e353      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_RCC_OscConfig+0x68>
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005902:	e006      	b.n	8005912 <HAL_RCC_OscConfig+0x76>
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005912:	4293      	cmp	r3, r2
 8005914:	d222      	bcs.n	800595c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fd3c 	bl	8006398 <RCC_SetFlashLatencyFromMSIRange>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e331      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800592a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005934:	f043 0308 	orr.w	r3, r3, #8
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fe53 	bl	8005600 <LL_RCC_MSI_SetCalibTrimming>
 800595a:	e021      	b.n	80059a0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005966:	f043 0308 	orr.w	r3, r3, #8
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fe3a 	bl	8005600 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fd01 	bl	8006398 <RCC_SetFlashLatencyFromMSIRange>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e2f6      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059a0:	f000 fcc2 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 80059a4:	4603      	mov	r3, r0
 80059a6:	4aa7      	ldr	r2, [pc, #668]	@ (8005c44 <HAL_RCC_OscConfig+0x3a8>)
 80059a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80059aa:	4ba7      	ldr	r3, [pc, #668]	@ (8005c48 <HAL_RCC_OscConfig+0x3ac>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fd f818 	bl	80029e4 <HAL_InitTick>
 80059b4:	4603      	mov	r3, r0
 80059b6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80059b8:	7cfb      	ldrb	r3, [r7, #19]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d047      	beq.n	8005a4e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80059be:	7cfb      	ldrb	r3, [r7, #19]
 80059c0:	e2e5      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d02c      	beq.n	8005a24 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059ca:	f7ff fdc6 	bl	800555a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ce:	f7fc fb8f 	bl	80020f0 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059d6:	f7fc fb8b 	bl	80020f0 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e2d2      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80059e8:	f7ff fdd3 	bl	8005592 <LL_RCC_MSI_IsReady>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f1      	beq.n	80059d6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059fc:	f043 0308 	orr.w	r3, r3, #8
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a14:	4313      	orrs	r3, r2
 8005a16:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fdef 	bl	8005600 <LL_RCC_MSI_SetCalibTrimming>
 8005a22:	e015      	b.n	8005a50 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a24:	f7ff fda7 	bl	8005576 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a28:	f7fc fb62 	bl	80020f0 <HAL_GetTick>
 8005a2c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a30:	f7fc fb5e 	bl	80020f0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e2a5      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005a42:	f7ff fda6 	bl	8005592 <LL_RCC_MSI_IsReady>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f1      	bne.n	8005a30 <HAL_RCC_OscConfig+0x194>
 8005a4c:	e000      	b.n	8005a50 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005a4e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d058      	beq.n	8005b0e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d005      	beq.n	8005a6e <HAL_RCC_OscConfig+0x1d2>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2b0c      	cmp	r3, #12
 8005a66:	d108      	bne.n	8005a7a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d105      	bne.n	8005a7a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d14b      	bne.n	8005b0e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e289      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a98:	d102      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x204>
 8005a9a:	f7ff fcae 	bl	80053fa <LL_RCC_HSE_Enable>
 8005a9e:	e00d      	b.n	8005abc <HAL_RCC_OscConfig+0x220>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005aa8:	d104      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x218>
 8005aaa:	f7ff fc79 	bl	80053a0 <LL_RCC_HSE_EnableTcxo>
 8005aae:	f7ff fca4 	bl	80053fa <LL_RCC_HSE_Enable>
 8005ab2:	e003      	b.n	8005abc <HAL_RCC_OscConfig+0x220>
 8005ab4:	f7ff fcaf 	bl	8005416 <LL_RCC_HSE_Disable>
 8005ab8:	f7ff fc80 	bl	80053bc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d012      	beq.n	8005aea <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac4:	f7fc fb14 	bl	80020f0 <HAL_GetTick>
 8005ac8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005acc:	f7fc fb10 	bl	80020f0 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	@ 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e257      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005ade:	f7ff fca8 	bl	8005432 <LL_RCC_HSE_IsReady>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f1      	beq.n	8005acc <HAL_RCC_OscConfig+0x230>
 8005ae8:	e011      	b.n	8005b0e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aea:	f7fc fb01 	bl	80020f0 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af2:	f7fc fafd 	bl	80020f0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b64      	cmp	r3, #100	@ 0x64
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e244      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005b04:	f7ff fc95 	bl	8005432 <LL_RCC_HSE_IsReady>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f1      	bne.n	8005af2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d046      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCC_OscConfig+0x290>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2b0c      	cmp	r3, #12
 8005b24:	d10e      	bne.n	8005b44 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d10b      	bne.n	8005b44 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e22a      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fcb6 	bl	80054ae <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005b42:	e031      	b.n	8005ba8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d019      	beq.n	8005b80 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b4c:	f7ff fc82 	bl	8005454 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc face 	bl	80020f0 <HAL_GetTick>
 8005b54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b58:	f7fc faca 	bl	80020f0 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e211      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005b6a:	f7ff fc8f 	bl	800548c <LL_RCC_HSI_IsReady>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f1      	beq.n	8005b58 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fc98 	bl	80054ae <LL_RCC_HSI_SetCalibTrimming>
 8005b7e:	e013      	b.n	8005ba8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b80:	f7ff fc76 	bl	8005470 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fc fab4 	bl	80020f0 <HAL_GetTick>
 8005b88:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8c:	f7fc fab0 	bl	80020f0 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e1f7      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b9e:	f7ff fc75 	bl	800548c <LL_RCC_HSI_IsReady>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f1      	bne.n	8005b8c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d06e      	beq.n	8005c92 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d056      	beq.n	8005c6a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d031      	beq.n	8005c38 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e1d0      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d013      	beq.n	8005c1e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005bf6:	f7ff fc8f 	bl	8005518 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bfa:	f7fc fa79 	bl	80020f0 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c02:	f7fc fa75 	bl	80020f0 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b11      	cmp	r3, #17
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e1bc      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005c14:	f7ff fc90 	bl	8005538 <LL_RCC_LSI_IsReady>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f1      	bne.n	8005c02 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c26:	f023 0210 	bic.w	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c38:	f7ff fc5e 	bl	80054f8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c3c:	f7fc fa58 	bl	80020f0 <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005c42:	e00c      	b.n	8005c5e <HAL_RCC_OscConfig+0x3c2>
 8005c44:	20000000 	.word	0x20000000
 8005c48:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fc fa50 	bl	80020f0 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b11      	cmp	r3, #17
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e197      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005c5e:	f7ff fc6b 	bl	8005538 <LL_RCC_LSI_IsReady>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f1      	beq.n	8005c4c <HAL_RCC_OscConfig+0x3b0>
 8005c68:	e013      	b.n	8005c92 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6a:	f7ff fc55 	bl	8005518 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6e:	f7fc fa3f 	bl	80020f0 <HAL_GetTick>
 8005c72:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c76:	f7fc fa3b 	bl	80020f0 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b11      	cmp	r3, #17
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e182      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005c88:	f7ff fc56 	bl	8005538 <LL_RCC_LSI_IsReady>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f1      	bne.n	8005c76 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80d8 	beq.w	8005e50 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005ca0:	f7ff fb6c 	bl	800537c <LL_PWR_IsEnabledBkUpAccess>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d113      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005caa:	f7ff faab 	bl	8005204 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cae:	f7fc fa1f 	bl	80020f0 <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb6:	f7fc fa1b 	bl	80020f0 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e162      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005cc8:	f7ff fb58 	bl	800537c <LL_PWR_IsEnabledBkUpAccess>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f1      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d07b      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b85      	cmp	r3, #133	@ 0x85
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d109      	bne.n	8005cfe <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cf6:	f043 0304 	orr.w	r3, r3, #4
 8005cfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfe:	f7fc f9f7 	bl	80020f0 <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d10:	f043 0301 	orr.w	r3, r3, #1
 8005d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1a:	f7fc f9e9 	bl	80020f0 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e12e      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d30:	f7ff fbd1 	bl	80054d6 <LL_RCC_LSE_IsReady>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0ef      	beq.n	8005d1a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	2b81      	cmp	r3, #129	@ 0x81
 8005d40:	d003      	beq.n	8005d4a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2b85      	cmp	r3, #133	@ 0x85
 8005d48:	d121      	bne.n	8005d8e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4a:	f7fc f9d1 	bl	80020f0 <HAL_GetTick>
 8005d4e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fc f9c3 	bl	80020f0 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e108      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0ec      	beq.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005d8c:	e060      	b.n	8005e50 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fc f9af 	bl	80020f0 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fc f9a1 	bl	80020f0 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e0e6      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ec      	bne.n	8005daa <HAL_RCC_OscConfig+0x50e>
 8005dd0:	e03e      	b.n	8005e50 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd2:	f7fc f98d 	bl	80020f0 <HAL_GetTick>
 8005dd6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005de4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005dec:	e00a      	b.n	8005e04 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dee:	f7fc f97f 	bl	80020f0 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e0c4      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1ec      	bne.n	8005dee <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e14:	f7fc f96c 	bl	80020f0 <HAL_GetTick>
 8005e18:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e30:	f7fc f95e 	bl	80020f0 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e0a3      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e46:	f7ff fb46 	bl	80054d6 <LL_RCC_LSE_IsReady>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1ef      	bne.n	8005e30 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8099 	beq.w	8005f8c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d06c      	beq.n	8005f3a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d14b      	bne.n	8005f00 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e68:	f7ff fc87 	bl	800577a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fc f940 	bl	80020f0 <HAL_GetTick>
 8005e70:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e74:	f7fc f93c 	bl	80020f0 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b0a      	cmp	r3, #10
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e083      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e86:	f7ff fc86 	bl	8005796 <LL_RCC_PLL_IsReady>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f1      	bne.n	8005e74 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	4b40      	ldr	r3, [pc, #256]	@ (8005f98 <HAL_RCC_OscConfig+0x6fc>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ea2:	4311      	orrs	r1, r2
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ea8:	0212      	lsls	r2, r2, #8
 8005eaa:	4311      	orrs	r1, r2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005eb0:	4311      	orrs	r1, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005eb6:	4311      	orrs	r1, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec6:	f7ff fc4a 	bl	800575e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eda:	f7fc f909 	bl	80020f0 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fc f905 	bl	80020f0 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b0a      	cmp	r3, #10
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e04c      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ef4:	f7ff fc4f 	bl	8005796 <LL_RCC_PLL_IsReady>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f1      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x646>
 8005efe:	e045      	b.n	8005f8c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f00:	f7ff fc3b 	bl	800577a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f04:	f7fc f8f4 	bl	80020f0 <HAL_GetTick>
 8005f08:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0c:	f7fc f8f0 	bl	80020f0 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b0a      	cmp	r3, #10
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e037      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f1e:	f7ff fc3a 	bl	8005796 <LL_RCC_PLL_IsReady>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f1      	bne.n	8005f0c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f32:	4b1a      	ldr	r3, [pc, #104]	@ (8005f9c <HAL_RCC_OscConfig+0x700>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	60cb      	str	r3, [r1, #12]
 8005f38:	e028      	b.n	8005f8c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e023      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f003 0203 	and.w	r2, r3, #3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d115      	bne.n	8005f88 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d10e      	bne.n	8005f88 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	11c1808c 	.word	0x11c1808c
 8005f9c:	eefefffc 	.word	0xeefefffc

08005fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e10f      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b89      	ldr	r3, [pc, #548]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d91b      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc2:	4b86      	ldr	r3, [pc, #536]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 0207 	bic.w	r2, r3, #7
 8005fca:	4984      	ldr	r1, [pc, #528]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fd2:	f7fc f88d 	bl	80020f0 <HAL_GetTick>
 8005fd6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fda:	f7fc f889 	bl	80020f0 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e0f3      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fec:	4b7b      	ldr	r3, [pc, #492]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d1ef      	bne.n	8005fda <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d016      	beq.n	8006034 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fb2a 	bl	8005664 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006010:	f7fc f86e 	bl	80020f0 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006016:	e008      	b.n	800602a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006018:	f7fc f86a 	bl	80020f0 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e0d4      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800602a:	f7ff fbf2 	bl	8005812 <LL_RCC_IsActiveFlag_HPRE>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f1      	beq.n	8006018 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d016      	beq.n	800606e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fb20 	bl	800568a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800604a:	f7fc f851 	bl	80020f0 <HAL_GetTick>
 800604e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006050:	e008      	b.n	8006064 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006052:	f7fc f84d 	bl	80020f0 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e0b7      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006064:	f7ff fbe6 	bl	8005834 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0f1      	beq.n	8006052 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d016      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fb19 	bl	80056b6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006084:	f7fc f834 	bl	80020f0 <HAL_GetTick>
 8006088:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800608c:	f7fc f830 	bl	80020f0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e09a      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800609e:	f7ff fbdb 	bl	8005858 <LL_RCC_IsActiveFlag_PPRE1>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f1      	beq.n	800608c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d017      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fb0e 	bl	80056dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060c0:	f7fc f816 	bl	80020f0 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80060c6:	e008      	b.n	80060da <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060c8:	f7fc f812 	bl	80020f0 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e07c      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80060da:	f7ff fbce 	bl	800587a <LL_RCC_IsActiveFlag_PPRE2>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d0f1      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d043      	beq.n	8006178 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d106      	bne.n	8006106 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80060f8:	f7ff f99b 	bl	8005432 <LL_RCC_HSE_IsReady>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11e      	bne.n	8006140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e066      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b03      	cmp	r3, #3
 800610c:	d106      	bne.n	800611c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800610e:	f7ff fb42 	bl	8005796 <LL_RCC_PLL_IsReady>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d113      	bne.n	8006140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e05b      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006124:	f7ff fa35 	bl	8005592 <LL_RCC_MSI_IsReady>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d108      	bne.n	8006140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e050      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006132:	f7ff f9ab 	bl	800548c <LL_RCC_HSI_IsReady>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e049      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fa6f 	bl	8005628 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800614a:	f7fb ffd1 	bl	80020f0 <HAL_GetTick>
 800614e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006150:	e00a      	b.n	8006168 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006152:	f7fb ffcd 	bl	80020f0 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006160:	4293      	cmp	r3, r2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e035      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006168:	f7ff fa71 	bl	800564e <LL_RCC_GetSysClkSource>
 800616c:	4602      	mov	r2, r0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	429a      	cmp	r2, r3
 8006176:	d1ec      	bne.n	8006152 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006178:	4b18      	ldr	r3, [pc, #96]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d21b      	bcs.n	80061be <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006186:	4b15      	ldr	r3, [pc, #84]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f023 0207 	bic.w	r2, r3, #7
 800618e:	4913      	ldr	r1, [pc, #76]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006196:	f7fb ffab 	bl	80020f0 <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800619e:	f7fb ffa7 	bl	80020f0 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e011      	b.n	80061d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b0:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <HAL_RCC_ClockConfig+0x23c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d1ef      	bne.n	800619e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061be:	f000 f8b3 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 80061c2:	4603      	mov	r3, r0
 80061c4:	4a06      	ldr	r2, [pc, #24]	@ (80061e0 <HAL_RCC_ClockConfig+0x240>)
 80061c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_RCC_ClockConfig+0x244>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fc fc09 	bl	80029e4 <HAL_InitTick>
 80061d2:	4603      	mov	r3, r0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	58004000 	.word	0x58004000
 80061e0:	20000000 	.word	0x20000000
 80061e4:	20000004 	.word	0x20000004

080061e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f6:	f7ff fa2a 	bl	800564e <LL_RCC_GetSysClkSource>
 80061fa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061fc:	f7ff fafe 	bl	80057fc <LL_RCC_PLL_GetMainSource>
 8006200:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_RCC_GetSysClockFreq+0x2c>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b0c      	cmp	r3, #12
 800620c:	d139      	bne.n	8006282 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d136      	bne.n	8006282 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006214:	f7ff f9cd 	bl	80055b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d115      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0x62>
 800621e:	f7ff f9c8 	bl	80055b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006222:	4603      	mov	r3, r0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d106      	bne.n	8006236 <HAL_RCC_GetSysClockFreq+0x4e>
 8006228:	f7ff f9d3 	bl	80055d2 <LL_RCC_MSI_GetRange>
 800622c:	4603      	mov	r3, r0
 800622e:	0a1b      	lsrs	r3, r3, #8
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	e005      	b.n	8006242 <HAL_RCC_GetSysClockFreq+0x5a>
 8006236:	f7ff f9d7 	bl	80055e8 <LL_RCC_MSI_GetRangeAfterStandby>
 800623a:	4603      	mov	r3, r0
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	4a36      	ldr	r2, [pc, #216]	@ (800631c <HAL_RCC_GetSysClockFreq+0x134>)
 8006244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006248:	e014      	b.n	8006274 <HAL_RCC_GetSysClockFreq+0x8c>
 800624a:	f7ff f9b2 	bl	80055b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d106      	bne.n	8006262 <HAL_RCC_GetSysClockFreq+0x7a>
 8006254:	f7ff f9bd 	bl	80055d2 <LL_RCC_MSI_GetRange>
 8006258:	4603      	mov	r3, r0
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 030f 	and.w	r3, r3, #15
 8006260:	e005      	b.n	800626e <HAL_RCC_GetSysClockFreq+0x86>
 8006262:	f7ff f9c1 	bl	80055e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006266:	4603      	mov	r3, r0
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <HAL_RCC_GetSysClockFreq+0x134>)
 8006270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006274:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d115      	bne.n	80062a8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006280:	e012      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b04      	cmp	r3, #4
 8006286:	d102      	bne.n	800628e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006288:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <HAL_RCC_GetSysClockFreq+0x138>)
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e00c      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d109      	bne.n	80062a8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006294:	f7ff f8a0 	bl	80053d8 <LL_RCC_HSE_IsEnabledDiv2>
 8006298:	4603      	mov	r3, r0
 800629a:	2b01      	cmp	r3, #1
 800629c:	d102      	bne.n	80062a4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800629e:	4b20      	ldr	r3, [pc, #128]	@ (8006320 <HAL_RCC_GetSysClockFreq+0x138>)
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e001      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80062a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006324 <HAL_RCC_GetSysClockFreq+0x13c>)
 80062a6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062a8:	f7ff f9d1 	bl	800564e <LL_RCC_GetSysClkSource>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b0c      	cmp	r3, #12
 80062b0:	d12f      	bne.n	8006312 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80062b2:	f7ff faa3 	bl	80057fc <LL_RCC_PLL_GetMainSource>
 80062b6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d003      	beq.n	80062c6 <HAL_RCC_GetSysClockFreq+0xde>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d003      	beq.n	80062cc <HAL_RCC_GetSysClockFreq+0xe4>
 80062c4:	e00d      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80062c6:	4b16      	ldr	r3, [pc, #88]	@ (8006320 <HAL_RCC_GetSysClockFreq+0x138>)
 80062c8:	60fb      	str	r3, [r7, #12]
        break;
 80062ca:	e00d      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80062cc:	f7ff f884 	bl	80053d8 <LL_RCC_HSE_IsEnabledDiv2>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d102      	bne.n	80062dc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80062d6:	4b12      	ldr	r3, [pc, #72]	@ (8006320 <HAL_RCC_GetSysClockFreq+0x138>)
 80062d8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80062da:	e005      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80062dc:	4b11      	ldr	r3, [pc, #68]	@ (8006324 <HAL_RCC_GetSysClockFreq+0x13c>)
 80062de:	60fb      	str	r3, [r7, #12]
        break;
 80062e0:	e002      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	60fb      	str	r3, [r7, #12]
        break;
 80062e6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80062e8:	f7ff fa66 	bl	80057b8 <LL_RCC_PLL_GetN>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	fb03 f402 	mul.w	r4, r3, r2
 80062f4:	f7ff fa77 	bl	80057e6 <LL_RCC_PLL_GetDivider>
 80062f8:	4603      	mov	r3, r0
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	3301      	adds	r3, #1
 80062fe:	fbb4 f4f3 	udiv	r4, r4, r3
 8006302:	f7ff fa65 	bl	80057d0 <LL_RCC_PLL_GetR>
 8006306:	4603      	mov	r3, r0
 8006308:	0f5b      	lsrs	r3, r3, #29
 800630a:	3301      	adds	r3, #1
 800630c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006310:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006312:	697b      	ldr	r3, [r7, #20]
}
 8006314:	4618      	mov	r0, r3
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd90      	pop	{r4, r7, pc}
 800631c:	0801c540 	.word	0x0801c540
 8006320:	00f42400 	.word	0x00f42400
 8006324:	01e84800 	.word	0x01e84800

08006328 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006328:	b598      	push	{r3, r4, r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800632c:	f7ff ff5c 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 8006330:	4604      	mov	r4, r0
 8006332:	f7ff f9e6 	bl	8005702 <LL_RCC_GetAHBPrescaler>
 8006336:	4603      	mov	r3, r0
 8006338:	091b      	lsrs	r3, r3, #4
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	4a03      	ldr	r2, [pc, #12]	@ (800634c <HAL_RCC_GetHCLKFreq+0x24>)
 8006340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006344:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	bd98      	pop	{r3, r4, r7, pc}
 800634c:	0801c4e0 	.word	0x0801c4e0

08006350 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006350:	b598      	push	{r3, r4, r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006354:	f7ff ffe8 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 8006358:	4604      	mov	r4, r0
 800635a:	f7ff f9ea 	bl	8005732 <LL_RCC_GetAPB1Prescaler>
 800635e:	4603      	mov	r3, r0
 8006360:	0a1b      	lsrs	r3, r3, #8
 8006362:	4a03      	ldr	r2, [pc, #12]	@ (8006370 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006368:	fa24 f303 	lsr.w	r3, r4, r3
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd98      	pop	{r3, r4, r7, pc}
 8006370:	0801c520 	.word	0x0801c520

08006374 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006374:	b598      	push	{r3, r4, r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006378:	f7ff ffd6 	bl	8006328 <HAL_RCC_GetHCLKFreq>
 800637c:	4604      	mov	r4, r0
 800637e:	f7ff f9e3 	bl	8005748 <LL_RCC_GetAPB2Prescaler>
 8006382:	4603      	mov	r3, r0
 8006384:	0adb      	lsrs	r3, r3, #11
 8006386:	4a03      	ldr	r2, [pc, #12]	@ (8006394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800638c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006390:	4618      	mov	r0, r3
 8006392:	bd98      	pop	{r3, r4, r7, pc}
 8006394:	0801c520 	.word	0x0801c520

08006398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	4a10      	ldr	r2, [pc, #64]	@ (80063ec <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80063aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ae:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80063b0:	f7ff f9b2 	bl	8005718 <LL_RCC_GetAHB3Prescaler>
 80063b4:	4603      	mov	r3, r0
 80063b6:	091b      	lsrs	r3, r3, #4
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	4a0c      	ldr	r2, [pc, #48]	@ (80063f0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80063be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4a09      	ldr	r2, [pc, #36]	@ (80063f4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	0c9c      	lsrs	r4, r3, #18
 80063d4:	f7fe ff58 	bl	8005288 <HAL_PWREx_GetVoltageRange>
 80063d8:	4603      	mov	r3, r0
 80063da:	4619      	mov	r1, r3
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f80b 	bl	80063f8 <RCC_SetFlashLatency>
 80063e2:	4603      	mov	r3, r0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd90      	pop	{r4, r7, pc}
 80063ec:	0801c540 	.word	0x0801c540
 80063f0:	0801c4e0 	.word	0x0801c4e0
 80063f4:	431bde83 	.word	0x431bde83

080063f8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	@ 0x38
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006402:	4a3a      	ldr	r2, [pc, #232]	@ (80064ec <RCC_SetFlashLatency+0xf4>)
 8006404:	f107 0320 	add.w	r3, r7, #32
 8006408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800640c:	6018      	str	r0, [r3, #0]
 800640e:	3304      	adds	r3, #4
 8006410:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006412:	4a37      	ldr	r2, [pc, #220]	@ (80064f0 <RCC_SetFlashLatency+0xf8>)
 8006414:	f107 0318 	add.w	r3, r7, #24
 8006418:	e892 0003 	ldmia.w	r2, {r0, r1}
 800641c:	6018      	str	r0, [r3, #0]
 800641e:	3304      	adds	r3, #4
 8006420:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006422:	4a34      	ldr	r2, [pc, #208]	@ (80064f4 <RCC_SetFlashLatency+0xfc>)
 8006424:	f107 030c 	add.w	r3, r7, #12
 8006428:	ca07      	ldmia	r2, {r0, r1, r2}
 800642a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800642e:	2300      	movs	r3, #0
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006438:	d11b      	bne.n	8006472 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800643a:	2300      	movs	r3, #0
 800643c:	633b      	str	r3, [r7, #48]	@ 0x30
 800643e:	e014      	b.n	800646a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	3338      	adds	r3, #56	@ 0x38
 8006446:	443b      	add	r3, r7
 8006448:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4293      	cmp	r3, r2
 8006452:	d807      	bhi.n	8006464 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	3338      	adds	r3, #56	@ 0x38
 800645a:	443b      	add	r3, r7
 800645c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006462:	e021      	b.n	80064a8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	3301      	adds	r3, #1
 8006468:	633b      	str	r3, [r7, #48]	@ 0x30
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	2b02      	cmp	r3, #2
 800646e:	d9e7      	bls.n	8006440 <RCC_SetFlashLatency+0x48>
 8006470:	e01a      	b.n	80064a8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006472:	2300      	movs	r3, #0
 8006474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006476:	e014      	b.n	80064a2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	3338      	adds	r3, #56	@ 0x38
 800647e:	443b      	add	r3, r7
 8006480:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4293      	cmp	r3, r2
 800648a:	d807      	bhi.n	800649c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	3338      	adds	r3, #56	@ 0x38
 8006492:	443b      	add	r3, r7
 8006494:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800649a:	e005      	b.n	80064a8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	3301      	adds	r3, #1
 80064a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d9e7      	bls.n	8006478 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064a8:	4b13      	ldr	r3, [pc, #76]	@ (80064f8 <RCC_SetFlashLatency+0x100>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f023 0207 	bic.w	r2, r3, #7
 80064b0:	4911      	ldr	r1, [pc, #68]	@ (80064f8 <RCC_SetFlashLatency+0x100>)
 80064b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064b8:	f7fb fe1a 	bl	80020f0 <HAL_GetTick>
 80064bc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064be:	e008      	b.n	80064d2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064c0:	f7fb fe16 	bl	80020f0 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e007      	b.n	80064e2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064d2:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <RCC_SetFlashLatency+0x100>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064dc:	429a      	cmp	r2, r3
 80064de:	d1ef      	bne.n	80064c0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3738      	adds	r7, #56	@ 0x38
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	0801c05c 	.word	0x0801c05c
 80064f0:	0801c064 	.word	0x0801c064
 80064f4:	0801c06c 	.word	0x0801c06c
 80064f8:	58004000 	.word	0x58004000

080064fc <LL_RCC_LSE_IsReady>:
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b02      	cmp	r3, #2
 800650e:	d101      	bne.n	8006514 <LL_RCC_LSE_IsReady+0x18>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <LL_RCC_LSE_IsReady+0x1a>
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <LL_RCC_SetUSARTClockSource>:
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800652a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	0c1b      	lsrs	r3, r3, #16
 8006532:	43db      	mvns	r3, r3
 8006534:	401a      	ands	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <LL_RCC_SetI2SClockSource>:
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006562:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <LL_RCC_SetLPUARTClockSource>:
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006588:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800658c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <LL_RCC_SetI2CClockSource>:
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80065aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	091b      	lsrs	r3, r3, #4
 80065b6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80065ba:	43db      	mvns	r3, r3
 80065bc:	401a      	ands	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80065c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <LL_RCC_SetLPTIMClockSource>:
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	43db      	mvns	r3, r3
 80065f2:	401a      	ands	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <LL_RCC_SetRNGClockSource>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006620:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	bc80      	pop	{r7}
 8006634:	4770      	bx	lr

08006636 <LL_RCC_SetADCClockSource>:
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800663e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006646:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <LL_RCC_SetRTCClockSource>:
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <LL_RCC_GetRTCClockSource>:
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800669a:	4618      	mov	r0, r3
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <LL_RCC_ForceBackupDomainReset>:
{
 80066a2:	b480      	push	{r7}
 80066a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80066ba:	bf00      	nop
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr

080066c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80066da:	bf00      	nop
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr
	...

080066e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80066f0:	2300      	movs	r3, #0
 80066f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80066f4:	2300      	movs	r3, #0
 80066f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d058      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006704:	f7fe fd7e 	bl	8005204 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006708:	f7fb fcf2 	bl	80020f0 <HAL_GetTick>
 800670c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800670e:	e009      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006710:	f7fb fcee 	bl	80020f0 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d902      	bls.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	74fb      	strb	r3, [r7, #19]
        break;
 8006722:	e006      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006724:	4b7b      	ldr	r3, [pc, #492]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006730:	d1ee      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d13c      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006738:	f7ff ffa7 	bl	800668a <LL_RCC_GetRTCClockSource>
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006742:	429a      	cmp	r2, r3
 8006744:	d00f      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800674e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006752:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006754:	f7ff ffa5 	bl	80066a2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006758:	f7ff ffb3 	bl	80066c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800675c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d014      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fb fcbe 	bl	80020f0 <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006776:	e00b      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006778:	f7fb fcba 	bl	80020f0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d902      	bls.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	74fb      	strb	r3, [r7, #19]
            break;
 800678e:	e004      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006790:	f7ff feb4 	bl	80064fc <LL_RCC_LSE_IsReady>
 8006794:	4603      	mov	r3, r0
 8006796:	2b01      	cmp	r3, #1
 8006798:	d1ee      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800679a:	7cfb      	ldrb	r3, [r7, #19]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d105      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff ff5b 	bl	8006660 <LL_RCC_SetRTCClockSource>
 80067aa:	e004      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067ac:	7cfb      	ldrb	r3, [r7, #19]
 80067ae:	74bb      	strb	r3, [r7, #18]
 80067b0:	e001      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b2:	7cfb      	ldrb	r3, [r7, #19]
 80067b4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fea9 	bl	800651e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fe9e 	bl	800651e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fec0 	bl	8006578 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fee6 	bl	80065da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fedb 	bl	80065da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800682c:	2b00      	cmp	r3, #0
 800682e:	d004      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fed0 	bl	80065da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fea9 	bl	80065a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fe9e 	bl	80065a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fe93 	bl	80065a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d011      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff fe5e 	bl	800654e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800689a:	d107      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800689c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff fea5 	bl	800660c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d107      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80068ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fea3 	bl	8006636 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068f8:	d107      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006908:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800690a:	7cbb      	ldrb	r3, [r7, #18]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	58000400 	.word	0x58000400

08006918 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d071      	beq.n	8006a0e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d106      	bne.n	8006944 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7fb f8f6 	bl	8001b30 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800694c:	4b32      	ldr	r3, [pc, #200]	@ (8006a18 <HAL_RTC_Init+0x100>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b10      	cmp	r3, #16
 8006956:	d051      	beq.n	80069fc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006958:	4b2f      	ldr	r3, [pc, #188]	@ (8006a18 <HAL_RTC_Init+0x100>)
 800695a:	22ca      	movs	r2, #202	@ 0xca
 800695c:	625a      	str	r2, [r3, #36]	@ 0x24
 800695e:	4b2e      	ldr	r3, [pc, #184]	@ (8006a18 <HAL_RTC_Init+0x100>)
 8006960:	2253      	movs	r2, #83	@ 0x53
 8006962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa11 	bl	8006d8c <RTC_EnterInitMode>
 800696a:	4603      	mov	r3, r0
 800696c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d13f      	bne.n	80069f4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006974:	4b28      	ldr	r3, [pc, #160]	@ (8006a18 <HAL_RTC_Init+0x100>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	4a27      	ldr	r2, [pc, #156]	@ (8006a18 <HAL_RTC_Init+0x100>)
 800697a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800697e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006982:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006984:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <HAL_RTC_Init+0x100>)
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	4319      	orrs	r1, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	430b      	orrs	r3, r1
 8006998:	491f      	ldr	r1, [pc, #124]	@ (8006a18 <HAL_RTC_Init+0x100>)
 800699a:	4313      	orrs	r3, r2
 800699c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	491b      	ldr	r1, [pc, #108]	@ (8006a18 <HAL_RTC_Init+0x100>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80069ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006a18 <HAL_RTC_Init+0x100>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069be:	430b      	orrs	r3, r1
 80069c0:	4915      	ldr	r1, [pc, #84]	@ (8006a18 <HAL_RTC_Init+0x100>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa14 	bl	8006df4 <RTC_ExitInitMode>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10e      	bne.n	80069f4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80069d6:	4b10      	ldr	r3, [pc, #64]	@ (8006a18 <HAL_RTC_Init+0x100>)
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a19      	ldr	r1, [r3, #32]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	4319      	orrs	r1, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	430b      	orrs	r3, r1
 80069ee:	490a      	ldr	r1, [pc, #40]	@ (8006a18 <HAL_RTC_Init+0x100>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f4:	4b08      	ldr	r3, [pc, #32]	@ (8006a18 <HAL_RTC_Init+0x100>)
 80069f6:	22ff      	movs	r2, #255	@ 0xff
 80069f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80069fa:	e001      	b.n	8006a00 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d103      	bne.n	8006a0e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40002800 	.word	0x40002800

08006a1c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006a1c:	b590      	push	{r4, r7, lr}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_RTC_SetAlarm_IT+0x1e>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e0f3      	b.n	8006c22 <HAL_RTC_SetAlarm_IT+0x206>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006a4a:	4b78      	ldr	r3, [pc, #480]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a52:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a5a:	d06a      	beq.n	8006b32 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d13a      	bne.n	8006ad8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006a62:	4b72      	ldr	r3, [pc, #456]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2200      	movs	r2, #0
 8006a72:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 f9f5 	bl	8006e70 <RTC_ByteToBcd2>
 8006a86:	4603      	mov	r3, r0
 8006a88:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f9ee 	bl	8006e70 <RTC_ByteToBcd2>
 8006a94:	4603      	mov	r3, r0
 8006a96:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a98:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	789b      	ldrb	r3, [r3, #2]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f9e6 	bl	8006e70 <RTC_ByteToBcd2>
 8006aa4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006aa6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ab0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 f9d8 	bl	8006e70 <RTC_ByteToBcd2>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ac4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006acc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e02c      	b.n	8006b32 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006ae0:	d00d      	beq.n	8006afe <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006aea:	d008      	beq.n	8006afe <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006aec:	4b4f      	ldr	r3, [pc, #316]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b0a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b10:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	78db      	ldrb	r3, [r3, #3]
 8006b16:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b18:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b20:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b22:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b28:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b32:	4b3e      	ldr	r3, [pc, #248]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b34:	22ca      	movs	r2, #202	@ 0xca
 8006b36:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b38:	4b3c      	ldr	r3, [pc, #240]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b3a:	2253      	movs	r2, #83	@ 0x53
 8006b3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b46:	d12c      	bne.n	8006ba2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006b48:	4b38      	ldr	r3, [pc, #224]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	4a37      	ldr	r2, [pc, #220]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006b52:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006b54:	4b35      	ldr	r3, [pc, #212]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b60:	d107      	bne.n	8006b72 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	4930      	ldr	r1, [pc, #192]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	644b      	str	r3, [r1, #68]	@ 0x44
 8006b70:	e006      	b.n	8006b80 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006b72:	4a2e      	ldr	r2, [pc, #184]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006b78:	4a2c      	ldr	r2, [pc, #176]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006b80:	4a2a      	ldr	r2, [pc, #168]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006b94:	4b25      	ldr	r3, [pc, #148]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	4a24      	ldr	r2, [pc, #144]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006b9a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006b9e:	6193      	str	r3, [r2, #24]
 8006ba0:	e02b      	b.n	8006bfa <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006ba2:	4b22      	ldr	r3, [pc, #136]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	4a21      	ldr	r2, [pc, #132]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006ba8:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006bac:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006bae:	4b1f      	ldr	r3, [pc, #124]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bba:	d107      	bne.n	8006bcc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	4919      	ldr	r1, [pc, #100]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006bca:	e006      	b.n	8006bda <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006bcc:	4a17      	ldr	r2, [pc, #92]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006bd2:	4a16      	ldr	r2, [pc, #88]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006bda:	4a14      	ldr	r2, [pc, #80]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	f043 0202 	orr.w	r2, r3, #2
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006bee:	4b0f      	ldr	r3, [pc, #60]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006bf4:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8006bf8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <HAL_RTC_SetAlarm_IT+0x214>)
 8006bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c00:	4a0b      	ldr	r2, [pc, #44]	@ (8006c30 <HAL_RTC_SetAlarm_IT+0x214>)
 8006c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c06:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c0a:	4b08      	ldr	r3, [pc, #32]	@ (8006c2c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c0c:	22ff      	movs	r2, #255	@ 0xff
 8006c0e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40002800 	.word	0x40002800
 8006c30:	58000800 	.word	0x58000800

08006c34 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_RTC_DeactivateAlarm+0x18>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e048      	b.n	8006cde <HAL_RTC_DeactivateAlarm+0xaa>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c5c:	4b22      	ldr	r3, [pc, #136]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c5e:	22ca      	movs	r2, #202	@ 0xca
 8006c60:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c62:	4b21      	ldr	r3, [pc, #132]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c64:	2253      	movs	r2, #83	@ 0x53
 8006c66:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6e:	d115      	bne.n	8006c9c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c70:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006c7a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c80:	4a19      	ldr	r2, [pc, #100]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c86:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8c:	f023 0201 	bic.w	r2, r3, #1
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c94:	4b14      	ldr	r3, [pc, #80]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c9a:	e014      	b.n	8006cc6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006c9c:	4b12      	ldr	r3, [pc, #72]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	4a11      	ldr	r2, [pc, #68]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ca2:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006ca6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cac:	4a0e      	ldr	r2, [pc, #56]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006cae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb8:	f023 0202 	bic.w	r2, r3, #2
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006cc0:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cc6:	4b08      	ldr	r3, [pc, #32]	@ (8006ce8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006cc8:	22ff      	movs	r2, #255	@ 0xff
 8006cca:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr
 8006ce8:	40002800 	.word	0x40002800

08006cec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006cf4:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006cf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fb fc06 	bl	8002522 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <HAL_RTC_AlarmIRQHandler+0x50>)
 8006d22:	2202      	movs	r2, #2
 8006d24:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f94a 	bl	8006fc0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40002800 	.word	0x40002800

08006d40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006d48:	4b0f      	ldr	r3, [pc, #60]	@ (8006d88 <HAL_RTC_WaitForSynchro+0x48>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8006d88 <HAL_RTC_WaitForSynchro+0x48>)
 8006d4e:	f023 0320 	bic.w	r3, r3, #32
 8006d52:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006d54:	f7fb f9cc 	bl	80020f0 <HAL_GetTick>
 8006d58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006d5a:	e009      	b.n	8006d70 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d5c:	f7fb f9c8 	bl	80020f0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d6a:	d901      	bls.n	8006d70 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e006      	b.n	8006d7e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006d70:	4b05      	ldr	r3, [pc, #20]	@ (8006d88 <HAL_RTC_WaitForSynchro+0x48>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0ef      	beq.n	8006d5c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40002800 	.word	0x40002800

08006d8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006d98:	4b15      	ldr	r3, [pc, #84]	@ (8006df0 <RTC_EnterInitMode+0x64>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d120      	bne.n	8006de6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006da4:	4b12      	ldr	r3, [pc, #72]	@ (8006df0 <RTC_EnterInitMode+0x64>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4a11      	ldr	r2, [pc, #68]	@ (8006df0 <RTC_EnterInitMode+0x64>)
 8006daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dae:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006db0:	f7fb f99e 	bl	80020f0 <HAL_GetTick>
 8006db4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006db6:	e00d      	b.n	8006dd4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006db8:	f7fb f99a 	bl	80020f0 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dc6:	d905      	bls.n	8006dd4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2203      	movs	r2, #3
 8006dd0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006dd4:	4b06      	ldr	r3, [pc, #24]	@ (8006df0 <RTC_EnterInitMode+0x64>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <RTC_EnterInitMode+0x5a>
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d1e8      	bne.n	8006db8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40002800 	.word	0x40002800

08006df4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e00:	4b1a      	ldr	r3, [pc, #104]	@ (8006e6c <RTC_ExitInitMode+0x78>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4a19      	ldr	r2, [pc, #100]	@ (8006e6c <RTC_ExitInitMode+0x78>)
 8006e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e0c:	4b17      	ldr	r3, [pc, #92]	@ (8006e6c <RTC_ExitInitMode+0x78>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10c      	bne.n	8006e32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff91 	bl	8006d40 <HAL_RTC_WaitForSynchro>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01e      	beq.n	8006e62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2203      	movs	r2, #3
 8006e28:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	73fb      	strb	r3, [r7, #15]
 8006e30:	e017      	b.n	8006e62 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e32:	4b0e      	ldr	r3, [pc, #56]	@ (8006e6c <RTC_ExitInitMode+0x78>)
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	4a0d      	ldr	r2, [pc, #52]	@ (8006e6c <RTC_ExitInitMode+0x78>)
 8006e38:	f023 0320 	bic.w	r3, r3, #32
 8006e3c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ff7e 	bl	8006d40 <HAL_RTC_WaitForSynchro>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e56:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <RTC_ExitInitMode+0x78>)
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	4a04      	ldr	r2, [pc, #16]	@ (8006e6c <RTC_ExitInitMode+0x78>)
 8006e5c:	f043 0320 	orr.w	r3, r3, #32
 8006e60:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40002800 	.word	0x40002800

08006e70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006e82:	e005      	b.n	8006e90 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3301      	adds	r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
 8006e8c:	3b0a      	subs	r3, #10
 8006e8e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	2b09      	cmp	r3, #9
 8006e94:	d8f6      	bhi.n	8006e84 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b2db      	uxtb	r3, r3
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr
	...

08006eb0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e01f      	b.n	8006f06 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8006f10 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ed8:	22ca      	movs	r2, #202	@ 0xca
 8006eda:	625a      	str	r2, [r3, #36]	@ 0x24
 8006edc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f10 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ede:	2253      	movs	r2, #83	@ 0x53
 8006ee0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8006f10 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ee8:	f043 0320 	orr.w	r3, r3, #32
 8006eec:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eee:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ef0:	22ff      	movs	r2, #255	@ 0xff
 8006ef2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr
 8006f10:	40002800 	.word	0x40002800

08006f14 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HAL_RTCEx_SetSSRU_IT+0x16>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e027      	b.n	8006f7a <HAL_RTCEx_SetSSRU_IT+0x66>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f3a:	4b12      	ldr	r3, [pc, #72]	@ (8006f84 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006f3c:	22ca      	movs	r2, #202	@ 0xca
 8006f3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f40:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006f42:	2253      	movs	r2, #83	@ 0x53
 8006f44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006f46:	4b0f      	ldr	r3, [pc, #60]	@ (8006f84 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8006f84 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f50:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006f52:	4b0d      	ldr	r3, [pc, #52]	@ (8006f88 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f58:	4a0b      	ldr	r2, [pc, #44]	@ (8006f88 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006f5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f62:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006f64:	22ff      	movs	r2, #255	@ 0xff
 8006f66:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr
 8006f84:	40002800 	.word	0x40002800
 8006f88:	58000800 	.word	0x58000800

08006f8c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006f94:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006fa2:	2240      	movs	r2, #64	@ 0x40
 8006fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fb fac5 	bl	8002536 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	40002800 	.word	0x40002800

08006fc0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr
	...

08006fd4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006fe0:	4b07      	ldr	r3, [pc, #28]	@ (8007000 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006fe2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4413      	add	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	4000b100 	.word	0x4000b100

08007004 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800700e:	4b07      	ldr	r3, [pc, #28]	@ (800702c <HAL_RTCEx_BKUPRead+0x28>)
 8007010:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	4000b100 	.word	0x4000b100

08007030 <LL_PWR_SetRadioBusyTrigger>:
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007038:	4b06      	ldr	r3, [pc, #24]	@ (8007054 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007040:	4904      	ldr	r1, [pc, #16]	@ (8007054 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4313      	orrs	r3, r2
 8007046:	608b      	str	r3, [r1, #8]
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	58000400 	.word	0x58000400

08007058 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007058:	b480      	push	{r7}
 800705a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800705e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007062:	4a04      	ldr	r2, [pc, #16]	@ (8007074 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800706c:	bf00      	nop
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	58000400 	.word	0x58000400

08007078 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800707c:	4b05      	ldr	r3, [pc, #20]	@ (8007094 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007082:	4a04      	ldr	r2, [pc, #16]	@ (8007094 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007084:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800708c:	bf00      	nop
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	58000400 	.word	0x58000400

08007098 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800709c:	4b03      	ldr	r3, [pc, #12]	@ (80070ac <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800709e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070a2:	619a      	str	r2, [r3, #24]
}
 80070a4:	bf00      	nop
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	58000400 	.word	0x58000400

080070b0 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80070b4:	4b06      	ldr	r3, [pc, #24]	@ (80070d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d101      	bne.n	80070c4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80070c0:	2301      	movs	r3, #1
 80070c2:	e000      	b.n	80070c6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	58000400 	.word	0x58000400

080070d4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80070d8:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d101      	bne.n	80070e8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	58000400 	.word	0x58000400

080070f8 <LL_RCC_RF_DisableReset>:
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80070fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007104:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007108:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800710c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007110:	bf00      	nop
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <LL_RCC_IsRFUnderReset>:
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800711c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800712c:	d101      	bne.n	8007132 <LL_RCC_IsRFUnderReset+0x1a>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <LL_RCC_IsRFUnderReset+0x1c>
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <LL_EXTI_EnableIT_32_63>:
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007144:	4b06      	ldr	r3, [pc, #24]	@ (8007160 <LL_EXTI_EnableIT_32_63+0x24>)
 8007146:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800714a:	4905      	ldr	r1, [pc, #20]	@ (8007160 <LL_EXTI_EnableIT_32_63+0x24>)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	58000800 	.word	0x58000800

08007164 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	73fb      	strb	r3, [r7, #15]
    return status;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	e052      	b.n	8007220 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	799b      	ldrb	r3, [r3, #6]
 8007182:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_SUBGHZ_Init+0x2c>
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d109      	bne.n	80071a4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fa fd06 	bl	8001ba8 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800719c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80071a0:	f7ff ffcc 	bl	800713c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d126      	bne.n	80071f8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80071b0:	f7ff ffa2 	bl	80070f8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007228 <HAL_SUBGHZ_Init+0xc4>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	1a9b      	subs	r3, r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	0cdb      	lsrs	r3, r3, #19
 80071c2:	2264      	movs	r2, #100	@ 0x64
 80071c4:	fb02 f303 	mul.w	r3, r2, r3
 80071c8:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	609a      	str	r2, [r3, #8]
        break;
 80071da:	e007      	b.n	80071ec <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	3b01      	subs	r3, #1
 80071e0:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80071e2:	f7ff ff99 	bl	8007118 <LL_RCC_IsRFUnderReset>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1ee      	bne.n	80071ca <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071ec:	f7ff ff34 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80071f0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80071f4:	f7ff ff1c 	bl	8007030 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80071f8:	f7ff ff4e 	bl	8007098 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10a      	bne.n	8007218 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fabc 	bl	8007784 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	719a      	strb	r2, [r3, #6]

  return status;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000000 	.word	0x20000000

0800722c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	607a      	str	r2, [r7, #4]
 8007236:	461a      	mov	r2, r3
 8007238:	460b      	mov	r3, r1
 800723a:	817b      	strh	r3, [r7, #10]
 800723c:	4613      	mov	r3, r2
 800723e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	799b      	ldrb	r3, [r3, #6]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b01      	cmp	r3, #1
 8007248:	d14a      	bne.n	80072e0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	795b      	ldrb	r3, [r3, #5]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007252:	2302      	movs	r3, #2
 8007254:	e045      	b.n	80072e2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2202      	movs	r2, #2
 8007260:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fb5c 	bl	8007920 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007268:	f7ff ff06 	bl	8007078 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800726c:	210d      	movs	r1, #13
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 faa8 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007274:	897b      	ldrh	r3, [r7, #10]
 8007276:	0a1b      	lsrs	r3, r3, #8
 8007278:	b29b      	uxth	r3, r3
 800727a:	b2db      	uxtb	r3, r3
 800727c:	4619      	mov	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 faa0 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007284:	897b      	ldrh	r3, [r7, #10]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fa9a 	bl	80077c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007290:	2300      	movs	r3, #0
 8007292:	82bb      	strh	r3, [r7, #20]
 8007294:	e00a      	b.n	80072ac <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007296:	8abb      	ldrh	r3, [r7, #20]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	4413      	add	r3, r2
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	4619      	mov	r1, r3
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fa8f 	bl	80077c4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072a6:	8abb      	ldrh	r3, [r7, #20]
 80072a8:	3301      	adds	r3, #1
 80072aa:	82bb      	strh	r3, [r7, #20]
 80072ac:	8aba      	ldrh	r2, [r7, #20]
 80072ae:	893b      	ldrh	r3, [r7, #8]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d3f0      	bcc.n	8007296 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072b4:	f7ff fed0 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 fb55 	bl	8007968 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	75fb      	strb	r3, [r7, #23]
 80072ca:	e001      	b.n	80072d0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	715a      	strb	r2, [r3, #5]

    return status;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	e000      	b.n	80072e2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b088      	sub	sp, #32
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	461a      	mov	r2, r3
 80072f6:	460b      	mov	r3, r1
 80072f8:	817b      	strh	r3, [r7, #10]
 80072fa:	4613      	mov	r3, r2
 80072fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	799b      	ldrb	r3, [r3, #6]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d14a      	bne.n	80073a2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	795b      	ldrb	r3, [r3, #5]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007314:	2302      	movs	r3, #2
 8007316:	e045      	b.n	80073a4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2201      	movs	r2, #1
 800731c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fafe 	bl	8007920 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007324:	f7ff fea8 	bl	8007078 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007328:	211d      	movs	r1, #29
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 fa4a 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007330:	897b      	ldrh	r3, [r7, #10]
 8007332:	0a1b      	lsrs	r3, r3, #8
 8007334:	b29b      	uxth	r3, r3
 8007336:	b2db      	uxtb	r3, r3
 8007338:	4619      	mov	r1, r3
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fa42 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007340:	897b      	ldrh	r3, [r7, #10]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fa3c 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800734c:	2100      	movs	r1, #0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fa38 	bl	80077c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007354:	2300      	movs	r3, #0
 8007356:	82fb      	strh	r3, [r7, #22]
 8007358:	e009      	b.n	800736e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800735a:	69b9      	ldr	r1, [r7, #24]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fa87 	bl	8007870 <SUBGHZSPI_Receive>
      pData++;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	3301      	adds	r3, #1
 8007366:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007368:	8afb      	ldrh	r3, [r7, #22]
 800736a:	3301      	adds	r3, #1
 800736c:	82fb      	strh	r3, [r7, #22]
 800736e:	8afa      	ldrh	r2, [r7, #22]
 8007370:	893b      	ldrh	r3, [r7, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d3f1      	bcc.n	800735a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007376:	f7ff fe6f 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 faf4 	bl	8007968 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e001      	b.n	8007392 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	715a      	strb	r2, [r3, #5]

    return status;
 800739e:	7ffb      	ldrb	r3, [r7, #31]
 80073a0:	e000      	b.n	80073a4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	461a      	mov	r2, r3
 80073b8:	460b      	mov	r3, r1
 80073ba:	72fb      	strb	r3, [r7, #11]
 80073bc:	4613      	mov	r3, r2
 80073be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	799b      	ldrb	r3, [r3, #6]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d14a      	bne.n	8007460 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	795b      	ldrb	r3, [r3, #5]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e045      	b.n	8007462 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fa9f 	bl	8007920 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	2b84      	cmp	r3, #132	@ 0x84
 80073e6:	d002      	beq.n	80073ee <HAL_SUBGHZ_ExecSetCmd+0x42>
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	2b94      	cmp	r3, #148	@ 0x94
 80073ec:	d103      	bne.n	80073f6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	711a      	strb	r2, [r3, #4]
 80073f4:	e002      	b.n	80073fc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073fc:	f7ff fe3c 	bl	8007078 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007400:	7afb      	ldrb	r3, [r7, #11]
 8007402:	4619      	mov	r1, r3
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f9dd 	bl	80077c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800740a:	2300      	movs	r3, #0
 800740c:	82bb      	strh	r3, [r7, #20]
 800740e:	e00a      	b.n	8007426 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007410:	8abb      	ldrh	r3, [r7, #20]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f9d2 	bl	80077c4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007420:	8abb      	ldrh	r3, [r7, #20]
 8007422:	3301      	adds	r3, #1
 8007424:	82bb      	strh	r3, [r7, #20]
 8007426:	8aba      	ldrh	r2, [r7, #20]
 8007428:	893b      	ldrh	r3, [r7, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	d3f0      	bcc.n	8007410 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800742e:	f7ff fe13 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	2b84      	cmp	r3, #132	@ 0x84
 8007436:	d002      	beq.n	800743e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fa95 	bl	8007968 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	75fb      	strb	r3, [r7, #23]
 800744a:	e001      	b.n	8007450 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	715a      	strb	r2, [r3, #5]

    return status;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	e000      	b.n	8007462 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b088      	sub	sp, #32
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	461a      	mov	r2, r3
 8007476:	460b      	mov	r3, r1
 8007478:	72fb      	strb	r3, [r7, #11]
 800747a:	4613      	mov	r3, r2
 800747c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	799b      	ldrb	r3, [r3, #6]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	d13d      	bne.n	8007508 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	795b      	ldrb	r3, [r3, #5]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007494:	2302      	movs	r3, #2
 8007496:	e038      	b.n	800750a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fa3e 	bl	8007920 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80074a4:	f7ff fde8 	bl	8007078 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	4619      	mov	r1, r3
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f989 	bl	80077c4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80074b2:	2100      	movs	r1, #0
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f985 	bl	80077c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	82fb      	strh	r3, [r7, #22]
 80074be:	e009      	b.n	80074d4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f9d4 	bl	8007870 <SUBGHZSPI_Receive>
      pData++;
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	3301      	adds	r3, #1
 80074cc:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80074ce:	8afb      	ldrh	r3, [r7, #22]
 80074d0:	3301      	adds	r3, #1
 80074d2:	82fb      	strh	r3, [r7, #22]
 80074d4:	8afa      	ldrh	r2, [r7, #22]
 80074d6:	893b      	ldrh	r3, [r7, #8]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d3f1      	bcc.n	80074c0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074dc:	f7ff fdbc 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fa41 	bl	8007968 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	77fb      	strb	r3, [r7, #31]
 80074f2:	e001      	b.n	80074f8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	715a      	strb	r2, [r3, #5]

    return status;
 8007504:	7ffb      	ldrb	r3, [r7, #31]
 8007506:	e000      	b.n	800750a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	461a      	mov	r2, r3
 800751e:	460b      	mov	r3, r1
 8007520:	72fb      	strb	r3, [r7, #11]
 8007522:	4613      	mov	r3, r2
 8007524:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	799b      	ldrb	r3, [r3, #6]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d13e      	bne.n	80075ae <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	795b      	ldrb	r3, [r3, #5]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007538:	2302      	movs	r3, #2
 800753a:	e039      	b.n	80075b0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f9ec 	bl	8007920 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007548:	f7ff fd96 	bl	8007078 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800754c:	210e      	movs	r1, #14
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f938 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 f933 	bl	80077c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800755e:	2300      	movs	r3, #0
 8007560:	82bb      	strh	r3, [r7, #20]
 8007562:	e00a      	b.n	800757a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007564:	8abb      	ldrh	r3, [r7, #20]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f928 	bl	80077c4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007574:	8abb      	ldrh	r3, [r7, #20]
 8007576:	3301      	adds	r3, #1
 8007578:	82bb      	strh	r3, [r7, #20]
 800757a:	8aba      	ldrh	r2, [r7, #20]
 800757c:	893b      	ldrh	r3, [r7, #8]
 800757e:	429a      	cmp	r2, r3
 8007580:	d3f0      	bcc.n	8007564 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007582:	f7ff fd69 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f9ee 	bl	8007968 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
 8007598:	e001      	b.n	800759e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	715a      	strb	r2, [r3, #5]

    return status;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	e000      	b.n	80075b0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80075ae:	2302      	movs	r3, #2
  }
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	461a      	mov	r2, r3
 80075c4:	460b      	mov	r3, r1
 80075c6:	72fb      	strb	r3, [r7, #11]
 80075c8:	4613      	mov	r3, r2
 80075ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	799b      	ldrb	r3, [r3, #6]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d141      	bne.n	800765e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	795b      	ldrb	r3, [r3, #5]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e03c      	b.n	8007660 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f997 	bl	8007920 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075f2:	f7ff fd41 	bl	8007078 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80075f6:	211e      	movs	r1, #30
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f8e3 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	4619      	mov	r1, r3
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 f8de 	bl	80077c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007608:	2100      	movs	r1, #0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f8da 	bl	80077c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007610:	2300      	movs	r3, #0
 8007612:	82fb      	strh	r3, [r7, #22]
 8007614:	e009      	b.n	800762a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007616:	69b9      	ldr	r1, [r7, #24]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f929 	bl	8007870 <SUBGHZSPI_Receive>
      pData++;
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	3301      	adds	r3, #1
 8007622:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007624:	8afb      	ldrh	r3, [r7, #22]
 8007626:	3301      	adds	r3, #1
 8007628:	82fb      	strh	r3, [r7, #22]
 800762a:	8afa      	ldrh	r2, [r7, #22]
 800762c:	893b      	ldrh	r3, [r7, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	d3f1      	bcc.n	8007616 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007632:	f7ff fd11 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f996 	bl	8007968 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e001      	b.n	800764e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	715a      	strb	r2, [r3, #5]

    return status;
 800765a:	7ffb      	ldrb	r3, [r7, #31]
 800765c:	e000      	b.n	8007660 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800765e:	2302      	movs	r3, #2
  }
}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007670:	2300      	movs	r3, #0
 8007672:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007674:	f107 020c 	add.w	r2, r7, #12
 8007678:	2302      	movs	r3, #2
 800767a:	2112      	movs	r1, #18
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fef4 	bl	800746a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007682:	7b3b      	ldrb	r3, [r7, #12]
 8007684:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	b21a      	sxth	r2, r3
 800768e:	7b7b      	ldrb	r3, [r7, #13]
 8007690:	b21b      	sxth	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b21b      	sxth	r3, r3
 8007696:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007698:	f107 020c 	add.w	r2, r7, #12
 800769c:	2302      	movs	r3, #2
 800769e:	2102      	movs	r1, #2
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff fe83 	bl	80073ac <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80076a6:	89fb      	ldrh	r3, [r7, #14]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f012 fac3 	bl	8019c3c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80076b6:	89fb      	ldrh	r3, [r7, #14]
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d008      	beq.n	80076d4 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80076c2:	89fb      	ldrh	r3, [r7, #14]
 80076c4:	099b      	lsrs	r3, r3, #6
 80076c6:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f012 fac2 	bl	8019c58 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80076d4:	89fb      	ldrh	r3, [r7, #14]
 80076d6:	089b      	lsrs	r3, r3, #2
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f012 fb11 	bl	8019d08 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80076e6:	89fb      	ldrh	r3, [r7, #14]
 80076e8:	08db      	lsrs	r3, r3, #3
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f012 fb16 	bl	8019d24 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80076f8:	89fb      	ldrh	r3, [r7, #14]
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f012 fb1b 	bl	8019d40 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800770a:	89fb      	ldrh	r3, [r7, #14]
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f012 fae8 	bl	8019cec <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800771c:	89fb      	ldrh	r3, [r7, #14]
 800771e:	099b      	lsrs	r3, r3, #6
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f012 faa3 	bl	8019c74 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800772e:	89fb      	ldrh	r3, [r7, #14]
 8007730:	09db      	lsrs	r3, r3, #7
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00e      	beq.n	8007758 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800773a:	89fb      	ldrh	r3, [r7, #14]
 800773c:	0a1b      	lsrs	r3, r3, #8
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007746:	2101      	movs	r1, #1
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f012 faa1 	bl	8019c90 <HAL_SUBGHZ_CADStatusCallback>
 800774e:	e003      	b.n	8007758 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007750:	2100      	movs	r1, #0
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f012 fa9c 	bl	8019c90 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007758:	89fb      	ldrh	r3, [r7, #14]
 800775a:	0a5b      	lsrs	r3, r3, #9
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f012 fab1 	bl	8019ccc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	0b9b      	lsrs	r3, r3, #14
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f012 faf0 	bl	8019d5c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800778c:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <SUBGHZSPI_Init+0x3c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a0b      	ldr	r2, [pc, #44]	@ (80077c0 <SUBGHZSPI_Init+0x3c>)
 8007792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007796:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007798:	4a09      	ldr	r2, [pc, #36]	@ (80077c0 <SUBGHZSPI_Init+0x3c>)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80077a0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80077a2:	4b07      	ldr	r3, [pc, #28]	@ (80077c0 <SUBGHZSPI_Init+0x3c>)
 80077a4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80077a8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80077aa:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <SUBGHZSPI_Init+0x3c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a04      	ldr	r2, [pc, #16]	@ (80077c0 <SUBGHZSPI_Init+0x3c>)
 80077b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077b4:	6013      	str	r3, [r2, #0]
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	58010000 	.word	0x58010000

080077c4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80077d4:	4b23      	ldr	r3, [pc, #140]	@ (8007864 <SUBGHZSPI_Transmit+0xa0>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	0cdb      	lsrs	r3, r3, #19
 80077e2:	2264      	movs	r2, #100	@ 0x64
 80077e4:	fb02 f303 	mul.w	r3, r2, r3
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	609a      	str	r2, [r3, #8]
      break;
 80077fa:	e008      	b.n	800780e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3b01      	subs	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007802:	4b19      	ldr	r3, [pc, #100]	@ (8007868 <SUBGHZSPI_Transmit+0xa4>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b02      	cmp	r3, #2
 800780c:	d1ed      	bne.n	80077ea <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800780e:	4b17      	ldr	r3, [pc, #92]	@ (800786c <SUBGHZSPI_Transmit+0xa8>)
 8007810:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007818:	4b12      	ldr	r3, [pc, #72]	@ (8007864 <SUBGHZSPI_Transmit+0xa0>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	0cdb      	lsrs	r3, r3, #19
 8007826:	2264      	movs	r2, #100	@ 0x64
 8007828:	fb02 f303 	mul.w	r3, r2, r3
 800782c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d105      	bne.n	8007840 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	609a      	str	r2, [r3, #8]
      break;
 800783e:	e008      	b.n	8007852 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3b01      	subs	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007846:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <SUBGHZSPI_Transmit+0xa4>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b01      	cmp	r3, #1
 8007850:	d1ed      	bne.n	800782e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007852:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <SUBGHZSPI_Transmit+0xa4>)
 8007854:	68db      	ldr	r3, [r3, #12]

  return status;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
}
 8007858:	4618      	mov	r0, r3
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	20000000 	.word	0x20000000
 8007868:	58010000 	.word	0x58010000
 800786c:	5801000c 	.word	0x5801000c

08007870 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007870:	b480      	push	{r7}
 8007872:	b087      	sub	sp, #28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800787e:	4b25      	ldr	r3, [pc, #148]	@ (8007914 <SUBGHZSPI_Receive+0xa4>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	4613      	mov	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	0cdb      	lsrs	r3, r3, #19
 800788c:	2264      	movs	r2, #100	@ 0x64
 800788e:	fb02 f303 	mul.w	r3, r2, r3
 8007892:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	609a      	str	r2, [r3, #8]
      break;
 80078a4:	e008      	b.n	80078b8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80078ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007918 <SUBGHZSPI_Receive+0xa8>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d1ed      	bne.n	8007894 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80078b8:	4b18      	ldr	r3, [pc, #96]	@ (800791c <SUBGHZSPI_Receive+0xac>)
 80078ba:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	22ff      	movs	r2, #255	@ 0xff
 80078c0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80078c2:	4b14      	ldr	r3, [pc, #80]	@ (8007914 <SUBGHZSPI_Receive+0xa4>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	0cdb      	lsrs	r3, r3, #19
 80078d0:	2264      	movs	r2, #100	@ 0x64
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d105      	bne.n	80078ea <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	609a      	str	r2, [r3, #8]
      break;
 80078e8:	e008      	b.n	80078fc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80078f0:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <SUBGHZSPI_Receive+0xa8>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d1ed      	bne.n	80078d8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80078fc:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <SUBGHZSPI_Receive+0xa8>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	701a      	strb	r2, [r3, #0]

  return status;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
}
 8007908:	4618      	mov	r0, r3
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000000 	.word	0x20000000
 8007918:	58010000 	.word	0x58010000
 800791c:	5801000c 	.word	0x5801000c

08007920 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	791b      	ldrb	r3, [r3, #4]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d111      	bne.n	8007954 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007930:	4b0c      	ldr	r3, [pc, #48]	@ (8007964 <SUBGHZ_CheckDeviceReady+0x44>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	4413      	add	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007940:	f7ff fb9a 	bl	8007078 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3b01      	subs	r3, #1
 8007948:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f9      	bne.n	8007944 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007950:	f7ff fb82 	bl	8007058 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f807 	bl	8007968 <SUBGHZ_WaitOnBusy>
 800795a:	4603      	mov	r3, r0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000000 	.word	0x20000000

08007968 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007974:	4b12      	ldr	r3, [pc, #72]	@ (80079c0 <SUBGHZ_WaitOnBusy+0x58>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	4613      	mov	r3, r2
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	4413      	add	r3, r2
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	0d1b      	lsrs	r3, r3, #20
 8007982:	2264      	movs	r2, #100	@ 0x64
 8007984:	fb02 f303 	mul.w	r3, r2, r3
 8007988:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800798a:	f7ff fba3 	bl	80070d4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800798e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d105      	bne.n	80079a2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	609a      	str	r2, [r3, #8]
      break;
 80079a0:	e009      	b.n	80079b6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80079a8:	f7ff fb82 	bl	80070b0 <LL_PWR_IsActiveFlag_RFBUSYS>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d0e9      	beq.n	800798a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000000 	.word	0x20000000

080079c4 <LL_RCC_GetUSARTClockSource>:
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80079cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	401a      	ands	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	041b      	lsls	r3, r3, #16
 80079dc:	4313      	orrs	r3, r2
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr

080079e8 <LL_RCC_GetLPUARTClockSource>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80079f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4013      	ands	r3, r2
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr

08007a06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e042      	b.n	8007a9e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fa f8d0 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2224      	movs	r2, #36	@ 0x24
 8007a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fee9 	bl	8008828 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fc72 	bl	8008340 <UART_SetConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e01b      	b.n	8007a9e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0201 	orr.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 ff67 	bl	800896a <UART_CheckIdleState>
 8007a9c:	4603      	mov	r3, r0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e031      	b.n	8007b1c <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2224      	movs	r2, #36	@ 0x24
 8007abc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0201 	bic.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2200      	movs	r2, #0
 8007ade:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fa f8ed 	bl	8001cc8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	@ 0x28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d137      	bne.n	8007bac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_UART_Receive_IT+0x24>
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e030      	b.n	8007bae <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a18      	ldr	r2, [pc, #96]	@ (8007bb8 <HAL_UART_Receive_IT+0x94>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d01f      	beq.n	8007b9c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d018      	beq.n	8007b9c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	613b      	str	r3, [r7, #16]
   return(result);
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	623b      	str	r3, [r7, #32]
 8007b8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	69f9      	ldr	r1, [r7, #28]
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b9c:	88fb      	ldrh	r3, [r7, #6]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fffe 	bl	8008ba4 <UART_Start_Receive_IT>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	e000      	b.n	8007bae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bac:	2302      	movs	r3, #2
  }
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3728      	adds	r7, #40	@ 0x28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	40008000 	.word	0x40008000

08007bbc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	@ 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d167      	bne.n	8007ca4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_UART_Transmit_DMA+0x24>
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e060      	b.n	8007ca6 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	88fa      	ldrh	r2, [r7, #6]
 8007bee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	88fa      	ldrh	r2, [r7, #6]
 8007bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2221      	movs	r2, #33	@ 0x21
 8007c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d028      	beq.n	8007c64 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c16:	4a26      	ldr	r2, [pc, #152]	@ (8007cb0 <HAL_UART_Transmit_DMA+0xf4>)
 8007c18:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c1e:	4a25      	ldr	r2, [pc, #148]	@ (8007cb4 <HAL_UART_Transmit_DMA+0xf8>)
 8007c20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c26:	4a24      	ldr	r2, [pc, #144]	@ (8007cb8 <HAL_UART_Transmit_DMA+0xfc>)
 8007c28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c2e:	2200      	movs	r2, #0
 8007c30:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3328      	adds	r3, #40	@ 0x28
 8007c42:	461a      	mov	r2, r3
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	f7fc fa4f 	bl	80040e8 <HAL_DMA_Start_IT>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d009      	beq.n	8007c64 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2210      	movs	r2, #16
 8007c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e020      	b.n	8007ca6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2240      	movs	r2, #64	@ 0x40
 8007c6a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c8c:	623a      	str	r2, [r7, #32]
 8007c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	69f9      	ldr	r1, [r7, #28]
 8007c92:	6a3a      	ldr	r2, [r7, #32]
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e5      	bne.n	8007c6c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e000      	b.n	8007ca6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007ca4:	2302      	movs	r3, #2
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3728      	adds	r7, #40	@ 0x28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	08008f2f 	.word	0x08008f2f
 8007cb4:	08008fc9 	.word	0x08008fc9
 8007cb8:	08008fe5 	.word	0x08008fe5

08007cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b0ba      	sub	sp, #232	@ 0xe8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ce2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ce6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007cea:	4013      	ands	r3, r2
 8007cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d11b      	bne.n	8007d30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d015      	beq.n	8007d30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d105      	bne.n	8007d1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d009      	beq.n	8007d30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 82e3 	beq.w	80082ec <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
      }
      return;
 8007d2e:	e2dd      	b.n	80082ec <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8123 	beq.w	8007f80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8007f74 <HAL_UART_IRQHandler+0x2b8>)
 8007d40:	4013      	ands	r3, r2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8007f78 <HAL_UART_IRQHandler+0x2bc>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 8116 	beq.w	8007f80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d011      	beq.n	8007d84 <HAL_UART_IRQHandler+0xc8>
 8007d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2201      	movs	r2, #1
 8007d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7a:	f043 0201 	orr.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d011      	beq.n	8007db4 <HAL_UART_IRQHandler+0xf8>
 8007d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2202      	movs	r2, #2
 8007da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007daa:	f043 0204 	orr.w	r2, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d011      	beq.n	8007de4 <HAL_UART_IRQHandler+0x128>
 8007dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dda:	f043 0202 	orr.w	r2, r3, #2
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d017      	beq.n	8007e20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d105      	bne.n	8007e08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007dfc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e00:	4b5c      	ldr	r3, [pc, #368]	@ (8007f74 <HAL_UART_IRQHandler+0x2b8>)
 8007e02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e16:	f043 0208 	orr.w	r2, r3, #8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d012      	beq.n	8007e52 <HAL_UART_IRQHandler+0x196>
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00c      	beq.n	8007e52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e48:	f043 0220 	orr.w	r2, r3, #32
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8249 	beq.w	80082f0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d013      	beq.n	8007e92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d105      	bne.n	8007e82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea6:	2b40      	cmp	r3, #64	@ 0x40
 8007ea8:	d005      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d054      	beq.n	8007f60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 ffd4 	bl	8008e64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec6:	2b40      	cmp	r3, #64	@ 0x40
 8007ec8:	d146      	bne.n	8007f58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007efa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1d9      	bne.n	8007eca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d017      	beq.n	8007f50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f26:	4a15      	ldr	r2, [pc, #84]	@ (8007f7c <HAL_UART_IRQHandler+0x2c0>)
 8007f28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fc f9b5 	bl	80042a0 <HAL_DMA_Abort_IT>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d019      	beq.n	8007f70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f4e:	e00f      	b.n	8007f70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f9e0 	bl	8008316 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f56:	e00b      	b.n	8007f70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f9dc 	bl	8008316 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f5e:	e007      	b.n	8007f70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f9d8 	bl	8008316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007f6e:	e1bf      	b.n	80082f0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f70:	bf00      	nop
    return;
 8007f72:	e1bd      	b.n	80082f0 <HAL_UART_IRQHandler+0x634>
 8007f74:	10000001 	.word	0x10000001
 8007f78:	04000120 	.word	0x04000120
 8007f7c:	08009065 	.word	0x08009065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f040 8153 	bne.w	8008230 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f8e:	f003 0310 	and.w	r3, r3, #16
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 814c 	beq.w	8008230 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 8145 	beq.w	8008230 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2210      	movs	r2, #16
 8007fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	f040 80bb 	bne.w	8008134 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 818f 	beq.w	80082f4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	f080 8187 	bcs.w	80082f4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 8087 	bne.w	8008112 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800801c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800802e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008032:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800803a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1da      	bne.n	8008004 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800805e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3308      	adds	r3, #8
 800806e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008072:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008076:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800807a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e1      	bne.n	800804e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800809a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800809c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80080ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80080b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e3      	bne.n	800808a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080e0:	f023 0310 	bic.w	r3, r3, #16
 80080e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e4      	bne.n	80080d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800810c:	4618      	mov	r0, r3
 800810e:	f7fc f869 	bl	80041e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2202      	movs	r2, #2
 8008116:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008124:	b29b      	uxth	r3, r3
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	b29b      	uxth	r3, r3
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8fb 	bl	8008328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008132:	e0df      	b.n	80082f4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008140:	b29b      	uxth	r3, r3
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 80d1 	beq.w	80082f8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80cc 	beq.w	80082f8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800816e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008182:	647b      	str	r3, [r7, #68]	@ 0x44
 8008184:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e4      	bne.n	8008160 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3308      	adds	r3, #8
 800819c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	623b      	str	r3, [r7, #32]
   return(result);
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3308      	adds	r3, #8
 80081ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80081be:	633a      	str	r2, [r7, #48]	@ 0x30
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e1      	bne.n	8008196 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0310 	bic.w	r3, r3, #16
 80081fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	69b9      	ldr	r1, [r7, #24]
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	617b      	str	r3, [r7, #20]
   return(result);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e4      	bne.n	80081e6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f87d 	bl	8008328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800822e:	e063      	b.n	80082f8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00e      	beq.n	800825a <HAL_UART_IRQHandler+0x59e>
 800823c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d008      	beq.n	800825a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fc64 	bl	8009b20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008258:	e051      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800825e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008262:	2b00      	cmp	r3, #0
 8008264:	d014      	beq.n	8008290 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d105      	bne.n	800827e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d008      	beq.n	8008290 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008282:	2b00      	cmp	r3, #0
 8008284:	d03a      	beq.n	80082fc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
    }
    return;
 800828e:	e035      	b.n	80082fc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d009      	beq.n	80082b0 <HAL_UART_IRQHandler+0x5f4>
 800829c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fef1 	bl	8009090 <UART_EndTransmit_IT>
    return;
 80082ae:	e026      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80082b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <HAL_UART_IRQHandler+0x614>
 80082bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 fc3b 	bl	8009b44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082ce:	e016      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d010      	beq.n	80082fe <HAL_UART_IRQHandler+0x642>
 80082dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	da0c      	bge.n	80082fe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 fc24 	bl	8009b32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082ea:	e008      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
      return;
 80082ec:	bf00      	nop
 80082ee:	e006      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
    return;
 80082f0:	bf00      	nop
 80082f2:	e004      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
      return;
 80082f4:	bf00      	nop
 80082f6:	e002      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
      return;
 80082f8:	bf00      	nop
 80082fa:	e000      	b.n	80082fe <HAL_UART_IRQHandler+0x642>
    return;
 80082fc:	bf00      	nop
  }
}
 80082fe:	37e8      	adds	r7, #232	@ 0xe8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr

08008328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr
	...

08008340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008344:	b08c      	sub	sp, #48	@ 0x30
 8008346:	af00      	add	r7, sp, #0
 8008348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	431a      	orrs	r2, r3
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	431a      	orrs	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4313      	orrs	r3, r2
 8008366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b94      	ldr	r3, [pc, #592]	@ (80085c0 <UART_SetConfig+0x280>)
 8008370:	4013      	ands	r3, r2
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	6812      	ldr	r2, [r2, #0]
 8008376:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008378:	430b      	orrs	r3, r1
 800837a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a89      	ldr	r2, [pc, #548]	@ (80085c4 <UART_SetConfig+0x284>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d004      	beq.n	80083ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a8:	4313      	orrs	r3, r2
 80083aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80083b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ca:	f023 010f 	bic.w	r1, r3, #15
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a7a      	ldr	r2, [pc, #488]	@ (80085c8 <UART_SetConfig+0x288>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d127      	bne.n	8008434 <UART_SetConfig+0xf4>
 80083e4:	2003      	movs	r0, #3
 80083e6:	f7ff faed 	bl	80079c4 <LL_RCC_GetUSARTClockSource>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d81b      	bhi.n	800842c <UART_SetConfig+0xec>
 80083f4:	a201      	add	r2, pc, #4	@ (adr r2, 80083fc <UART_SetConfig+0xbc>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	0800841d 	.word	0x0800841d
 8008404:	08008415 	.word	0x08008415
 8008408:	08008425 	.word	0x08008425
 800840c:	2301      	movs	r3, #1
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008412:	e080      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008414:	2302      	movs	r3, #2
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800841a:	e07c      	b.n	8008516 <UART_SetConfig+0x1d6>
 800841c:	2304      	movs	r3, #4
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008422:	e078      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008424:	2308      	movs	r3, #8
 8008426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842a:	e074      	b.n	8008516 <UART_SetConfig+0x1d6>
 800842c:	2310      	movs	r3, #16
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008432:	e070      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a64      	ldr	r2, [pc, #400]	@ (80085cc <UART_SetConfig+0x28c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d138      	bne.n	80084b0 <UART_SetConfig+0x170>
 800843e:	200c      	movs	r0, #12
 8008440:	f7ff fac0 	bl	80079c4 <LL_RCC_GetUSARTClockSource>
 8008444:	4603      	mov	r3, r0
 8008446:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800844a:	2b0c      	cmp	r3, #12
 800844c:	d82c      	bhi.n	80084a8 <UART_SetConfig+0x168>
 800844e:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <UART_SetConfig+0x114>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008489 	.word	0x08008489
 8008458:	080084a9 	.word	0x080084a9
 800845c:	080084a9 	.word	0x080084a9
 8008460:	080084a9 	.word	0x080084a9
 8008464:	08008499 	.word	0x08008499
 8008468:	080084a9 	.word	0x080084a9
 800846c:	080084a9 	.word	0x080084a9
 8008470:	080084a9 	.word	0x080084a9
 8008474:	08008491 	.word	0x08008491
 8008478:	080084a9 	.word	0x080084a9
 800847c:	080084a9 	.word	0x080084a9
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084a1 	.word	0x080084a1
 8008488:	2300      	movs	r3, #0
 800848a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848e:	e042      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008490:	2302      	movs	r3, #2
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008496:	e03e      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008498:	2304      	movs	r3, #4
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800849e:	e03a      	b.n	8008516 <UART_SetConfig+0x1d6>
 80084a0:	2308      	movs	r3, #8
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a6:	e036      	b.n	8008516 <UART_SetConfig+0x1d6>
 80084a8:	2310      	movs	r3, #16
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ae:	e032      	b.n	8008516 <UART_SetConfig+0x1d6>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a43      	ldr	r2, [pc, #268]	@ (80085c4 <UART_SetConfig+0x284>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d12a      	bne.n	8008510 <UART_SetConfig+0x1d0>
 80084ba:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80084be:	f7ff fa93 	bl	80079e8 <LL_RCC_GetLPUARTClockSource>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084c8:	d01a      	beq.n	8008500 <UART_SetConfig+0x1c0>
 80084ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084ce:	d81b      	bhi.n	8008508 <UART_SetConfig+0x1c8>
 80084d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084d4:	d00c      	beq.n	80084f0 <UART_SetConfig+0x1b0>
 80084d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084da:	d815      	bhi.n	8008508 <UART_SetConfig+0x1c8>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <UART_SetConfig+0x1a8>
 80084e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e4:	d008      	beq.n	80084f8 <UART_SetConfig+0x1b8>
 80084e6:	e00f      	b.n	8008508 <UART_SetConfig+0x1c8>
 80084e8:	2300      	movs	r3, #0
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	e012      	b.n	8008516 <UART_SetConfig+0x1d6>
 80084f0:	2302      	movs	r3, #2
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084f6:	e00e      	b.n	8008516 <UART_SetConfig+0x1d6>
 80084f8:	2304      	movs	r3, #4
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084fe:	e00a      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008500:	2308      	movs	r3, #8
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008506:	e006      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008508:	2310      	movs	r3, #16
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800850e:	e002      	b.n	8008516 <UART_SetConfig+0x1d6>
 8008510:	2310      	movs	r3, #16
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a2a      	ldr	r2, [pc, #168]	@ (80085c4 <UART_SetConfig+0x284>)
 800851c:	4293      	cmp	r3, r2
 800851e:	f040 80a4 	bne.w	800866a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008522:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008526:	2b08      	cmp	r3, #8
 8008528:	d823      	bhi.n	8008572 <UART_SetConfig+0x232>
 800852a:	a201      	add	r2, pc, #4	@ (adr r2, 8008530 <UART_SetConfig+0x1f0>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008555 	.word	0x08008555
 8008534:	08008573 	.word	0x08008573
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008573 	.word	0x08008573
 8008540:	08008563 	.word	0x08008563
 8008544:	08008573 	.word	0x08008573
 8008548:	08008573 	.word	0x08008573
 800854c:	08008573 	.word	0x08008573
 8008550:	0800856b 	.word	0x0800856b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008554:	f7fd fefc 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 8008558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800855a:	e010      	b.n	800857e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800855c:	4b1c      	ldr	r3, [pc, #112]	@ (80085d0 <UART_SetConfig+0x290>)
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008560:	e00d      	b.n	800857e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008562:	f7fd fe41 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 8008566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008568:	e009      	b.n	800857e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800856a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800856e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008570:	e005      	b.n	800857e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800857c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 8137 	beq.w	80087f4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858a:	4a12      	ldr	r2, [pc, #72]	@ (80085d4 <UART_SetConfig+0x294>)
 800858c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008590:	461a      	mov	r2, r3
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	fbb3 f3f2 	udiv	r3, r3, r2
 8008598:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	4613      	mov	r3, r2
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4413      	add	r3, r2
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d305      	bcc.n	80085b6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d910      	bls.n	80085d8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085bc:	e11a      	b.n	80087f4 <UART_SetConfig+0x4b4>
 80085be:	bf00      	nop
 80085c0:	cfff69f3 	.word	0xcfff69f3
 80085c4:	40008000 	.word	0x40008000
 80085c8:	40013800 	.word	0x40013800
 80085cc:	40004400 	.word	0x40004400
 80085d0:	00f42400 	.word	0x00f42400
 80085d4:	0801c5d0 	.word	0x0801c5d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	2200      	movs	r2, #0
 80085dc:	60bb      	str	r3, [r7, #8]
 80085de:	60fa      	str	r2, [r7, #12]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008820 <UART_SetConfig+0x4e0>)
 80085e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2200      	movs	r2, #0
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085fa:	f7f8 f9b9 	bl	8000970 <__aeabi_uldivmod>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4610      	mov	r0, r2
 8008604:	4619      	mov	r1, r3
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	020b      	lsls	r3, r1, #8
 8008610:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008614:	0202      	lsls	r2, r0, #8
 8008616:	6979      	ldr	r1, [r7, #20]
 8008618:	6849      	ldr	r1, [r1, #4]
 800861a:	0849      	lsrs	r1, r1, #1
 800861c:	2000      	movs	r0, #0
 800861e:	460c      	mov	r4, r1
 8008620:	4605      	mov	r5, r0
 8008622:	eb12 0804 	adds.w	r8, r2, r4
 8008626:	eb43 0905 	adc.w	r9, r3, r5
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	469a      	mov	sl, r3
 8008632:	4693      	mov	fp, r2
 8008634:	4652      	mov	r2, sl
 8008636:	465b      	mov	r3, fp
 8008638:	4640      	mov	r0, r8
 800863a:	4649      	mov	r1, r9
 800863c:	f7f8 f998 	bl	8000970 <__aeabi_uldivmod>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4613      	mov	r3, r2
 8008646:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800864e:	d308      	bcc.n	8008662 <UART_SetConfig+0x322>
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008656:	d204      	bcs.n	8008662 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6a3a      	ldr	r2, [r7, #32]
 800865e:	60da      	str	r2, [r3, #12]
 8008660:	e0c8      	b.n	80087f4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008668:	e0c4      	b.n	80087f4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008672:	d167      	bne.n	8008744 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008674:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008678:	2b08      	cmp	r3, #8
 800867a:	d828      	bhi.n	80086ce <UART_SetConfig+0x38e>
 800867c:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <UART_SetConfig+0x344>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	080086a9 	.word	0x080086a9
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b9 	.word	0x080086b9
 8008690:	080086cf 	.word	0x080086cf
 8008694:	080086bf 	.word	0x080086bf
 8008698:	080086cf 	.word	0x080086cf
 800869c:	080086cf 	.word	0x080086cf
 80086a0:	080086cf 	.word	0x080086cf
 80086a4:	080086c7 	.word	0x080086c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a8:	f7fd fe52 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 80086ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086ae:	e014      	b.n	80086da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086b0:	f7fd fe60 	bl	8006374 <HAL_RCC_GetPCLK2Freq>
 80086b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086b6:	e010      	b.n	80086da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008824 <UART_SetConfig+0x4e4>)
 80086ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086bc:	e00d      	b.n	80086da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086be:	f7fd fd93 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 80086c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086c4:	e009      	b.n	80086da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086cc:	e005      	b.n	80086da <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8089 	beq.w	80087f4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008820 <UART_SetConfig+0x4e0>)
 80086e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f4:	005a      	lsls	r2, r3, #1
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	085b      	lsrs	r3, r3, #1
 80086fc:	441a      	add	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	fbb2 f3f3 	udiv	r3, r2, r3
 8008706:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b0f      	cmp	r3, #15
 800870c:	d916      	bls.n	800873c <UART_SetConfig+0x3fc>
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008714:	d212      	bcs.n	800873c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	b29b      	uxth	r3, r3
 800871a:	f023 030f 	bic.w	r3, r3, #15
 800871e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	b29a      	uxth	r2, r3
 800872c:	8bfb      	ldrh	r3, [r7, #30]
 800872e:	4313      	orrs	r3, r2
 8008730:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	8bfa      	ldrh	r2, [r7, #30]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e05b      	b.n	80087f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008742:	e057      	b.n	80087f4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008744:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008748:	2b08      	cmp	r3, #8
 800874a:	d828      	bhi.n	800879e <UART_SetConfig+0x45e>
 800874c:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <UART_SetConfig+0x414>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	08008779 	.word	0x08008779
 8008758:	08008781 	.word	0x08008781
 800875c:	08008789 	.word	0x08008789
 8008760:	0800879f 	.word	0x0800879f
 8008764:	0800878f 	.word	0x0800878f
 8008768:	0800879f 	.word	0x0800879f
 800876c:	0800879f 	.word	0x0800879f
 8008770:	0800879f 	.word	0x0800879f
 8008774:	08008797 	.word	0x08008797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008778:	f7fd fdea 	bl	8006350 <HAL_RCC_GetPCLK1Freq>
 800877c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800877e:	e014      	b.n	80087aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008780:	f7fd fdf8 	bl	8006374 <HAL_RCC_GetPCLK2Freq>
 8008784:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008786:	e010      	b.n	80087aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008788:	4b26      	ldr	r3, [pc, #152]	@ (8008824 <UART_SetConfig+0x4e4>)
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800878c:	e00d      	b.n	80087aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800878e:	f7fd fd2b 	bl	80061e8 <HAL_RCC_GetSysClockFreq>
 8008792:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008794:	e009      	b.n	80087aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800879a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800879c:	e005      	b.n	80087aa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80087a8:	bf00      	nop
    }

    if (pclk != 0U)
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d021      	beq.n	80087f4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008820 <UART_SetConfig+0x4e0>)
 80087b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ba:	461a      	mov	r2, r3
 80087bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087be:	fbb3 f2f2 	udiv	r2, r3, r2
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	441a      	add	r2, r3
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2b0f      	cmp	r3, #15
 80087d8:	d909      	bls.n	80087ee <UART_SetConfig+0x4ae>
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087e0:	d205      	bcs.n	80087ee <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60da      	str	r2, [r3, #12]
 80087ec:	e002      	b.n	80087f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2201      	movs	r2, #1
 8008800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2200      	movs	r2, #0
 8008808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2200      	movs	r2, #0
 800880e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008810:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008814:	4618      	mov	r0, r3
 8008816:	3730      	adds	r7, #48	@ 0x30
 8008818:	46bd      	mov	sp, r7
 800881a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800881e:	bf00      	nop
 8008820:	0801c5d0 	.word	0x0801c5d0
 8008824:	00f42400 	.word	0x00f42400

08008828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008834:	f003 0308 	and.w	r3, r3, #8
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00a      	beq.n	80088da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01a      	beq.n	800893e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008926:	d10a      	bne.n	800893e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	605a      	str	r2, [r3, #4]
  }
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	bc80      	pop	{r7}
 8008968:	4770      	bx	lr

0800896a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b086      	sub	sp, #24
 800896e:	af02      	add	r7, sp, #8
 8008970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800897a:	f7f9 fbb9 	bl	80020f0 <HAL_GetTick>
 800897e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b08      	cmp	r3, #8
 800898c:	d10e      	bne.n	80089ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800898e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f832 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e028      	b.n	80089fe <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d10e      	bne.n	80089d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f81c 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e012      	b.n	80089fe <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b09c      	sub	sp, #112	@ 0x70
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	4613      	mov	r3, r2
 8008a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a16:	e0af      	b.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	f000 80ab 	beq.w	8008b78 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a22:	f7f9 fb65 	bl	80020f0 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d302      	bcc.n	8008a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d140      	bne.n	8008aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a48:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008a4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a58:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008a5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e6      	bne.n	8008a38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	f023 0301 	bic.w	r3, r3, #1
 8008a80:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3308      	adds	r3, #8
 8008a88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a8a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a8c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e5      	bne.n	8008a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e06f      	b.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d057      	beq.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x172>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b80      	cmp	r3, #128	@ 0x80
 8008acc:	d054      	beq.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x172>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b40      	cmp	r3, #64	@ 0x40
 8008ad2:	d051      	beq.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ae2:	d149      	bne.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008aec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b0e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e6      	bne.n	8008aee <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3308      	adds	r3, #8
 8008b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008b40:	623a      	str	r2, [r7, #32]
 8008b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	69f9      	ldr	r1, [r7, #28]
 8008b46:	6a3a      	ldr	r2, [r7, #32]
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e5      	bne.n	8008b20 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e010      	b.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69da      	ldr	r2, [r3, #28]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	4013      	ands	r3, r2
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	bf0c      	ite	eq
 8008b88:	2301      	moveq	r3, #1
 8008b8a:	2300      	movne	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	f43f af40 	beq.w	8008a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3770      	adds	r7, #112	@ 0x70
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b0a3      	sub	sp, #140	@ 0x8c
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	88fa      	ldrh	r2, [r7, #6]
 8008bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	88fa      	ldrh	r2, [r7, #6]
 8008bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bd6:	d10e      	bne.n	8008bf6 <UART_Start_Receive_IT+0x52>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d105      	bne.n	8008bec <UART_Start_Receive_IT+0x48>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008be6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bea:	e02d      	b.n	8008c48 <UART_Start_Receive_IT+0xa4>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	22ff      	movs	r2, #255	@ 0xff
 8008bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bf4:	e028      	b.n	8008c48 <UART_Start_Receive_IT+0xa4>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10d      	bne.n	8008c1a <UART_Start_Receive_IT+0x76>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <UART_Start_Receive_IT+0x6c>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	22ff      	movs	r2, #255	@ 0xff
 8008c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c0e:	e01b      	b.n	8008c48 <UART_Start_Receive_IT+0xa4>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	227f      	movs	r2, #127	@ 0x7f
 8008c14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c18:	e016      	b.n	8008c48 <UART_Start_Receive_IT+0xa4>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c22:	d10d      	bne.n	8008c40 <UART_Start_Receive_IT+0x9c>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <UART_Start_Receive_IT+0x92>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	227f      	movs	r2, #127	@ 0x7f
 8008c30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c34:	e008      	b.n	8008c48 <UART_Start_Receive_IT+0xa4>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	223f      	movs	r2, #63	@ 0x3f
 8008c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c3e:	e003      	b.n	8008c48 <UART_Start_Receive_IT+0xa4>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2222      	movs	r2, #34	@ 0x22
 8008c54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3308      	adds	r3, #8
 8008c78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c7c:	673a      	str	r2, [r7, #112]	@ 0x70
 8008c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e3      	bne.n	8008c58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c98:	d14f      	bne.n	8008d3a <UART_Start_Receive_IT+0x196>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ca0:	88fa      	ldrh	r2, [r7, #6]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d349      	bcc.n	8008d3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cae:	d107      	bne.n	8008cc0 <UART_Start_Receive_IT+0x11c>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d103      	bne.n	8008cc0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4a46      	ldr	r2, [pc, #280]	@ (8008dd4 <UART_Start_Receive_IT+0x230>)
 8008cbc:	675a      	str	r2, [r3, #116]	@ 0x74
 8008cbe:	e002      	b.n	8008cc6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4a45      	ldr	r2, [pc, #276]	@ (8008dd8 <UART_Start_Receive_IT+0x234>)
 8008cc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01a      	beq.n	8008d04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ce2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cf2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008cf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e4      	bne.n	8008cce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3308      	adds	r3, #8
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3308      	adds	r3, #8
 8008d22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d24:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008d26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e5      	bne.n	8008d04 <UART_Start_Receive_IT+0x160>
 8008d38:	e046      	b.n	8008dc8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d42:	d107      	bne.n	8008d54 <UART_Start_Receive_IT+0x1b0>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a23      	ldr	r2, [pc, #140]	@ (8008ddc <UART_Start_Receive_IT+0x238>)
 8008d50:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d52:	e002      	b.n	8008d5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4a22      	ldr	r2, [pc, #136]	@ (8008de0 <UART_Start_Receive_IT+0x23c>)
 8008d58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d019      	beq.n	8008d96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d76:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d82:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e6      	bne.n	8008d62 <UART_Start_Receive_IT+0x1be>
 8008d94:	e018      	b.n	8008dc8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	613b      	str	r3, [r7, #16]
   return(result);
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f043 0320 	orr.w	r3, r3, #32
 8008daa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008db4:	623b      	str	r3, [r7, #32]
 8008db6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	69f9      	ldr	r1, [r7, #28]
 8008dba:	6a3a      	ldr	r2, [r7, #32]
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e6      	bne.n	8008d96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	378c      	adds	r7, #140	@ 0x8c
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bc80      	pop	{r7}
 8008dd2:	4770      	bx	lr
 8008dd4:	080097b9 	.word	0x080097b9
 8008dd8:	08009459 	.word	0x08009459
 8008ddc:	080092a1 	.word	0x080092a1
 8008de0:	080090e9 	.word	0x080090e9

08008de4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b08f      	sub	sp, #60	@ 0x3c
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e0c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e3e:	61ba      	str	r2, [r7, #24]
 8008e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6979      	ldr	r1, [r7, #20]
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008e5a:	bf00      	nop
 8008e5c:	373c      	adds	r7, #60	@ 0x3c
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bc80      	pop	{r7}
 8008e62:	4770      	bx	lr

08008e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b095      	sub	sp, #84	@ 0x54
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e6      	bne.n	8008e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e3      	bne.n	8008e9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d118      	bne.n	8008f10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f023 0310 	bic.w	r3, r3, #16
 8008ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f24:	bf00      	nop
 8008f26:	3754      	adds	r7, #84	@ 0x54
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr

08008f2e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b090      	sub	sp, #64	@ 0x40
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d137      	bne.n	8008fba <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3308      	adds	r3, #8
 8008f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	623b      	str	r3, [r7, #32]
   return(result);
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3308      	adds	r3, #8
 8008f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f72:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e5      	bne.n	8008f52 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa4:	61fb      	str	r3, [r7, #28]
 8008fa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	69b9      	ldr	r1, [r7, #24]
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e6      	bne.n	8008f86 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fb8:	e002      	b.n	8008fc0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008fba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008fbc:	f7f9 fc60 	bl	8002880 <HAL_UART_TxCpltCallback>
}
 8008fc0:	bf00      	nop
 8008fc2:	3740      	adds	r7, #64	@ 0x40
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f7ff f994 	bl	8008304 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fdc:	bf00      	nop
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ff8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009000:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900c:	2b80      	cmp	r3, #128	@ 0x80
 800900e:	d109      	bne.n	8009024 <UART_DMAError+0x40>
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b21      	cmp	r3, #33	@ 0x21
 8009014:	d106      	bne.n	8009024 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2200      	movs	r2, #0
 800901a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800901e:	6978      	ldr	r0, [r7, #20]
 8009020:	f7ff fee0 	bl	8008de4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800902e:	2b40      	cmp	r3, #64	@ 0x40
 8009030:	d109      	bne.n	8009046 <UART_DMAError+0x62>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b22      	cmp	r3, #34	@ 0x22
 8009036:	d106      	bne.n	8009046 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2200      	movs	r2, #0
 800903c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009040:	6978      	ldr	r0, [r7, #20]
 8009042:	f7ff ff0f 	bl	8008e64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904c:	f043 0210 	orr.w	r2, r3, #16
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f7ff f95d 	bl	8008316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800905c:	bf00      	nop
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff f947 	bl	8008316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ac:	61fb      	str	r3, [r7, #28]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6979      	ldr	r1, [r7, #20]
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	613b      	str	r3, [r7, #16]
   return(result);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e6      	bne.n	8009098 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7f9 fbd1 	bl	8002880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090de:	bf00      	nop
 80090e0:	3720      	adds	r7, #32
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b09c      	sub	sp, #112	@ 0x70
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009100:	2b22      	cmp	r3, #34	@ 0x22
 8009102:	f040 80be 	bne.w	8009282 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009110:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009114:	b2d9      	uxtb	r1, r3
 8009116:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800911a:	b2da      	uxtb	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009120:	400a      	ands	r2, r1
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	f040 80a1 	bne.w	8009292 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800915e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800916e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009170:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009174:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800917c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e6      	bne.n	8009150 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3308      	adds	r3, #8
 8009188:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	667b      	str	r3, [r7, #100]	@ 0x64
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80091a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e5      	bne.n	8009182 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a33      	ldr	r2, [pc, #204]	@ (800929c <UART_RxISR_8BIT+0x1b4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d01f      	beq.n	8009214 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d018      	beq.n	8009214 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	623b      	str	r3, [r7, #32]
   return(result);
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009200:	633b      	str	r3, [r7, #48]	@ 0x30
 8009202:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e6      	bne.n	80091e2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d12e      	bne.n	800927a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0310 	bic.w	r3, r3, #16
 8009236:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009240:	61fb      	str	r3, [r7, #28]
 8009242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	69b9      	ldr	r1, [r7, #24]
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	617b      	str	r3, [r7, #20]
   return(result);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e6      	bne.n	8009222 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f003 0310 	and.w	r3, r3, #16
 800925e:	2b10      	cmp	r3, #16
 8009260:	d103      	bne.n	800926a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2210      	movs	r2, #16
 8009268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff f858 	bl	8008328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009278:	e00b      	b.n	8009292 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f9 fb16 	bl	80028ac <HAL_UART_RxCpltCallback>
}
 8009280:	e007      	b.n	8009292 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699a      	ldr	r2, [r3, #24]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0208 	orr.w	r2, r2, #8
 8009290:	619a      	str	r2, [r3, #24]
}
 8009292:	bf00      	nop
 8009294:	3770      	adds	r7, #112	@ 0x70
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	40008000 	.word	0x40008000

080092a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b09c      	sub	sp, #112	@ 0x70
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092b8:	2b22      	cmp	r3, #34	@ 0x22
 80092ba:	f040 80be 	bne.w	800943a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80092ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80092d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80092d6:	4013      	ands	r3, r2
 80092d8:	b29a      	uxth	r2, r3
 80092da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e2:	1c9a      	adds	r2, r3, #2
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 80a1 	bne.w	800944a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800931c:	667b      	str	r3, [r7, #100]	@ 0x64
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009326:	657b      	str	r3, [r7, #84]	@ 0x54
 8009328:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800932c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e6      	bne.n	8009308 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	f023 0301 	bic.w	r3, r3, #1
 8009350:	663b      	str	r3, [r7, #96]	@ 0x60
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3308      	adds	r3, #8
 8009358:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800935a:	643a      	str	r2, [r7, #64]	@ 0x40
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a33      	ldr	r2, [pc, #204]	@ (8009454 <UART_RxISR_16BIT+0x1b4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d01f      	beq.n	80093cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d018      	beq.n	80093cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d12e      	bne.n	8009432 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f023 0310 	bic.w	r3, r3, #16
 80093ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093f8:	61bb      	str	r3, [r7, #24]
 80093fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	6979      	ldr	r1, [r7, #20]
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	613b      	str	r3, [r7, #16]
   return(result);
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d103      	bne.n	8009422 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2210      	movs	r2, #16
 8009420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7fe ff7c 	bl	8008328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009430:	e00b      	b.n	800944a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7f9 fa3a 	bl	80028ac <HAL_UART_RxCpltCallback>
}
 8009438:	e007      	b.n	800944a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	699a      	ldr	r2, [r3, #24]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f042 0208 	orr.w	r2, r2, #8
 8009448:	619a      	str	r2, [r3, #24]
}
 800944a:	bf00      	nop
 800944c:	3770      	adds	r7, #112	@ 0x70
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40008000 	.word	0x40008000

08009458 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b0ac      	sub	sp, #176	@ 0xb0
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009466:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800948e:	2b22      	cmp	r3, #34	@ 0x22
 8009490:	f040 8182 	bne.w	8009798 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800949a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800949e:	e125      	b.n	80096ec <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80094ae:	b2d9      	uxtb	r1, r3
 80094b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ba:	400a      	ands	r2, r1
 80094bc:	b2d2      	uxtb	r2, r2
 80094be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d053      	beq.n	800959a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d011      	beq.n	8009522 <UART_RxISR_8BIT_FIFOEN+0xca>
 80094fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00b      	beq.n	8009522 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2201      	movs	r2, #1
 8009510:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009518:	f043 0201 	orr.w	r2, r3, #1
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d011      	beq.n	8009552 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800952e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2202      	movs	r2, #2
 8009540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009548:	f043 0204 	orr.w	r2, r3, #4
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d011      	beq.n	8009582 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800955e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00b      	beq.n	8009582 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2204      	movs	r2, #4
 8009570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009578:	f043 0202 	orr.w	r2, r3, #2
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009588:	2b00      	cmp	r3, #0
 800958a:	d006      	beq.n	800959a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7fe fec2 	bl	8008316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 80a2 	bne.w	80096ec <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80095b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095cc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ce:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80095d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80095d2:	e841 2300 	strex	r3, r2, [r1]
 80095d6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80095d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1e4      	bne.n	80095a8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3308      	adds	r3, #8
 80095e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80095ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095f4:	f023 0301 	bic.w	r3, r3, #1
 80095f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3308      	adds	r3, #8
 8009602:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009606:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009608:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800960c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009614:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e1      	bne.n	80095de <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2220      	movs	r2, #32
 800961e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a5f      	ldr	r2, [pc, #380]	@ (80097b0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d021      	beq.n	800967c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d01a      	beq.n	800967c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009656:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800965a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009668:	657b      	str	r3, [r7, #84]	@ 0x54
 800966a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800966e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009670:	e841 2300 	strex	r3, r2, [r1]
 8009674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e4      	bne.n	8009646 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d130      	bne.n	80096e6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969a:	f023 0310 	bic.w	r3, r3, #16
 800969e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e4      	bne.n	800968a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	f003 0310 	and.w	r3, r3, #16
 80096ca:	2b10      	cmp	r3, #16
 80096cc:	d103      	bne.n	80096d6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2210      	movs	r2, #16
 80096d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7fe fe22 	bl	8008328 <HAL_UARTEx_RxEventCallback>
 80096e4:	e002      	b.n	80096ec <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7f9 f8e0 	bl	80028ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d006      	beq.n	8009702 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80096f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f47f aecf 	bne.w	80094a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009708:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800970c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009710:	2b00      	cmp	r3, #0
 8009712:	d049      	beq.n	80097a8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800971a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800971e:	429a      	cmp	r2, r3
 8009720:	d242      	bcs.n	80097a8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	61fb      	str	r3, [r7, #28]
   return(result);
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3308      	adds	r3, #8
 8009742:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800974c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e3      	bne.n	8009722 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a15      	ldr	r2, [pc, #84]	@ (80097b4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800975e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	60bb      	str	r3, [r7, #8]
   return(result);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f043 0320 	orr.w	r3, r3, #32
 8009774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009786:	6979      	ldr	r1, [r7, #20]
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	613b      	str	r3, [r7, #16]
   return(result);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e4      	bne.n	8009760 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009796:	e007      	b.n	80097a8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699a      	ldr	r2, [r3, #24]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0208 	orr.w	r2, r2, #8
 80097a6:	619a      	str	r2, [r3, #24]
}
 80097a8:	bf00      	nop
 80097aa:	37b0      	adds	r7, #176	@ 0xb0
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40008000 	.word	0x40008000
 80097b4:	080090e9 	.word	0x080090e9

080097b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b0ae      	sub	sp, #184	@ 0xb8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097ee:	2b22      	cmp	r3, #34	@ 0x22
 80097f0:	f040 8186 	bne.w	8009b00 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097fe:	e129      	b.n	8009a54 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009806:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800980e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009812:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009816:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800981a:	4013      	ands	r3, r2
 800981c:	b29a      	uxth	r2, r3
 800981e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009822:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009828:	1c9a      	adds	r2, r3, #2
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009834:	b29b      	uxth	r3, r3
 8009836:	3b01      	subs	r3, #1
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800984a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b00      	cmp	r3, #0
 8009854:	d053      	beq.n	80098fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2201      	movs	r2, #1
 8009874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987c:	f043 0201 	orr.w	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2202      	movs	r2, #2
 80098a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ac:	f043 0204 	orr.w	r2, r3, #4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d011      	beq.n	80098e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80098c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2204      	movs	r2, #4
 80098d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098dc:	f043 0202 	orr.w	r2, r3, #2
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d006      	beq.n	80098fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7fe fd10 	bl	8008316 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	f040 80a4 	bne.w	8009a54 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800991a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800991c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009920:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800992e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009932:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e2      	bne.n	800990c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3308      	adds	r3, #8
 800994c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800995c:	f023 0301 	bic.w	r3, r3, #1
 8009960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3308      	adds	r3, #8
 800996a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800996e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009970:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009974:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800997c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e1      	bne.n	8009946 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2220      	movs	r2, #32
 8009986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a5f      	ldr	r2, [pc, #380]	@ (8009b18 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d021      	beq.n	80099e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d01a      	beq.n	80099e4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099b6:	e853 3f00 	ldrex	r3, [r3]
 80099ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80099d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e4      	bne.n	80099ae <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d130      	bne.n	8009a4e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a02:	f023 0310 	bic.w	r3, r3, #16
 8009a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a1c:	e841 2300 	strex	r3, r2, [r1]
 8009a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e4      	bne.n	80099f2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	f003 0310 	and.w	r3, r3, #16
 8009a32:	2b10      	cmp	r3, #16
 8009a34:	d103      	bne.n	8009a3e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2210      	movs	r2, #16
 8009a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7fe fc6e 	bl	8008328 <HAL_UARTEx_RxEventCallback>
 8009a4c:	e002      	b.n	8009a54 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7f8 ff2c 	bl	80028ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a54:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d006      	beq.n	8009a6a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009a5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f47f aecb 	bne.w	8009800 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a70:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a74:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d049      	beq.n	8009b10 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a82:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d242      	bcs.n	8009b10 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	623b      	str	r3, [r7, #32]
   return(result);
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1e3      	bne.n	8009a8a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a15      	ldr	r2, [pc, #84]	@ (8009b1c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009ac6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f043 0320 	orr.w	r3, r3, #32
 8009adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009aea:	61fb      	str	r3, [r7, #28]
 8009aec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	69b9      	ldr	r1, [r7, #24]
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	617b      	str	r3, [r7, #20]
   return(result);
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e4      	bne.n	8009ac8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009afe:	e007      	b.n	8009b10 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0208 	orr.w	r2, r2, #8
 8009b0e:	619a      	str	r2, [r3, #24]
}
 8009b10:	bf00      	nop
 8009b12:	37b8      	adds	r7, #184	@ 0xb8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40008000 	.word	0x40008000
 8009b1c:	080092a1 	.word	0x080092a1

08009b20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bc80      	pop	{r7}
 8009b30:	4770      	bx	lr

08009b32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b3a:	bf00      	nop
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr

08009b44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bc80      	pop	{r7}
 8009b54:	4770      	bx	lr

08009b56 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b088      	sub	sp, #32
 8009b5a:	af02      	add	r7, sp, #8
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	1d3b      	adds	r3, r7, #4
 8009b60:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d101      	bne.n	8009b76 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009b72:	2302      	movs	r3, #2
 8009b74:	e046      	b.n	8009c04 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2224      	movs	r2, #36	@ 0x24
 8009b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 0201 	bic.w	r2, r2, #1
 8009b94:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d105      	bne.n	8009bbc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009bb0:	1d3b      	adds	r3, r7, #4
 8009bb2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 f90e 	bl	8009dd8 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0201 	orr.w	r2, r2, #1
 8009bca:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bcc:	f7f8 fa90 	bl	80020f0 <HAL_GetTick>
 8009bd0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7fe ff10 	bl	8008a06 <UART_WaitOnFlagUntilTimeout>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	75fb      	strb	r3, [r7, #23]
 8009bf0:	e003      	b.n	8009bfa <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b089      	sub	sp, #36	@ 0x24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_UARTEx_EnableStopMode+0x16>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e021      	b.n	8009c66 <HAL_UARTEx_EnableStopMode+0x5a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f043 0302 	orr.w	r3, r3, #2
 8009c3e:	61fb      	str	r3, [r7, #28]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	613b      	str	r3, [r7, #16]
   return(result);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e6      	bne.n	8009c2a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3724      	adds	r7, #36	@ 0x24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bc80      	pop	{r7}
 8009c6e:	4770      	bx	lr

08009c70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d101      	bne.n	8009c86 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c82:	2302      	movs	r3, #2
 8009c84:	e027      	b.n	8009cd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2224      	movs	r2, #36	@ 0x24
 8009c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0201 	bic.w	r2, r2, #1
 8009cac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009cb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bc80      	pop	{r7}
 8009cde:	4770      	bx	lr

08009ce0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d101      	bne.n	8009cf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e02d      	b.n	8009d54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2224      	movs	r2, #36	@ 0x24
 8009d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0201 	bic.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f871 	bl	8009e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e02d      	b.n	8009dd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2224      	movs	r2, #36	@ 0x24
 8009d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0201 	bic.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f833 	bl	8009e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	1d3b      	adds	r3, r7, #4
 8009de2:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f023 0210 	bic.w	r2, r3, #16
 8009df0:	893b      	ldrh	r3, [r7, #8]
 8009df2:	4619      	mov	r1, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009e06:	7abb      	ldrb	r3, [r7, #10]
 8009e08:	061a      	lsls	r2, r3, #24
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
}
 8009e12:	bf00      	nop
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bc80      	pop	{r7}
 8009e1a:	4770      	bx	lr

08009e1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d108      	bne.n	8009e3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e3c:	e031      	b.n	8009ea2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e3e:	2308      	movs	r3, #8
 8009e40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e42:	2308      	movs	r3, #8
 8009e44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	0e5b      	lsrs	r3, r3, #25
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 0307 	and.w	r3, r3, #7
 8009e54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	0f5b      	lsrs	r3, r3, #29
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	7b3a      	ldrb	r2, [r7, #12]
 8009e6a:	4910      	ldr	r1, [pc, #64]	@ (8009eac <UARTEx_SetNbDataToProcess+0x90>)
 8009e6c:	5c8a      	ldrb	r2, [r1, r2]
 8009e6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e72:	7b3a      	ldrb	r2, [r7, #12]
 8009e74:	490e      	ldr	r1, [pc, #56]	@ (8009eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8009e76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e78:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	7b7a      	ldrb	r2, [r7, #13]
 8009e88:	4908      	ldr	r1, [pc, #32]	@ (8009eac <UARTEx_SetNbDataToProcess+0x90>)
 8009e8a:	5c8a      	ldrb	r2, [r1, r2]
 8009e8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e90:	7b7a      	ldrb	r2, [r7, #13]
 8009e92:	4907      	ldr	r1, [pc, #28]	@ (8009eb0 <UARTEx_SetNbDataToProcess+0x94>)
 8009e94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr
 8009eac:	0801c5e8 	.word	0x0801c5e8
 8009eb0:	0801c5f0 	.word	0x0801c5f0

08009eb4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009eb8:	f7f7 ffc4 	bl	8001e44 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009ebc:	f000 f820 	bl	8009f00 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009ec0:	bf00      	nop
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	f010 fcd0 	bl	801a870 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009ed0:	bf00      	nop
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <__NVIC_SystemReset>:
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009ed8:	f3bf 8f4f 	dsb	sy
}
 8009edc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009ede:	4b06      	ldr	r3, [pc, #24]	@ (8009ef8 <__NVIC_SystemReset+0x24>)
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009ee6:	4904      	ldr	r1, [pc, #16]	@ (8009ef8 <__NVIC_SystemReset+0x24>)
 8009ee8:	4b04      	ldr	r3, [pc, #16]	@ (8009efc <__NVIC_SystemReset+0x28>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009eee:	f3bf 8f4f 	dsb	sy
}
 8009ef2:	bf00      	nop
    __NOP();
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <__NVIC_SystemReset+0x20>
 8009ef8:	e000ed00 	.word	0xe000ed00
 8009efc:	05fa0004 	.word	0x05fa0004

08009f00 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009f06:	2300      	movs	r3, #0
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8009f88 <LoRaWAN_Init+0x88>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8009f12:	481e      	ldr	r0, [pc, #120]	@ (8009f8c <LoRaWAN_Init+0x8c>)
 8009f14:	f010 fe4a 	bl	801abac <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009f18:	4a1d      	ldr	r2, [pc, #116]	@ (8009f90 <LoRaWAN_Init+0x90>)
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	f010 fda3 	bl	801aa68 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009f22:	4a1c      	ldr	r2, [pc, #112]	@ (8009f94 <LoRaWAN_Init+0x94>)
 8009f24:	2100      	movs	r1, #0
 8009f26:	2002      	movs	r0, #2
 8009f28:	f010 fd9e 	bl	801aa68 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009f98 <LoRaWAN_Init+0x98>)
 8009f2e:	2100      	movs	r1, #0
 8009f30:	2004      	movs	r0, #4
 8009f32:	f010 fd99 	bl	801aa68 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009f36:	4a19      	ldr	r2, [pc, #100]	@ (8009f9c <LoRaWAN_Init+0x9c>)
 8009f38:	2100      	movs	r1, #0
 8009f3a:	2008      	movs	r0, #8
 8009f3c:	f010 fd94 	bl	801aa68 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009f40:	f000 f990 	bl	800a264 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009f44:	4916      	ldr	r1, [pc, #88]	@ (8009fa0 <LoRaWAN_Init+0xa0>)
 8009f46:	4817      	ldr	r0, [pc, #92]	@ (8009fa4 <LoRaWAN_Init+0xa4>)
 8009f48:	f001 ff3e 	bl	800bdc8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009f4c:	4816      	ldr	r0, [pc, #88]	@ (8009fa8 <LoRaWAN_Init+0xa8>)
 8009f4e:	f001 ffa9 	bl	800bea4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009f52:	4b16      	ldr	r3, [pc, #88]	@ (8009fac <LoRaWAN_Init+0xac>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	4a16      	ldr	r2, [pc, #88]	@ (8009fb0 <LoRaWAN_Init+0xb0>)
 8009f58:	7812      	ldrb	r2, [r2, #0]
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f002 f895 	bl	800c08c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009f62:	4b14      	ldr	r3, [pc, #80]	@ (8009fb4 <LoRaWAN_Init+0xb4>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <LoRaWAN_Init+0x82>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009f6a:	4b13      	ldr	r3, [pc, #76]	@ (8009fb8 <LoRaWAN_Init+0xb8>)
 8009f6c:	6819      	ldr	r1, [r3, #0]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	4b12      	ldr	r3, [pc, #72]	@ (8009fbc <LoRaWAN_Init+0xbc>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	4812      	ldr	r0, [pc, #72]	@ (8009fc0 <LoRaWAN_Init+0xc0>)
 8009f78:	f010 fe18 	bl	801abac <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009f7c:	4810      	ldr	r0, [pc, #64]	@ (8009fc0 <LoRaWAN_Init+0xc0>)
 8009f7e:	f010 fe4b 	bl	801ac18 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009f82:	bf00      	nop
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	0800a1c1 	.word	0x0800a1c1
 8009f8c:	200003dc 	.word	0x200003dc
 8009f90:	0800c021 	.word	0x0800c021
 8009f94:	08009fd9 	.word	0x08009fd9
 8009f98:	0800a1e5 	.word	0x0800a1e5
 8009f9c:	0800a175 	.word	0x0800a175
 8009fa0:	01030100 	.word	0x01030100
 8009fa4:	2000000c 	.word	0x2000000c
 8009fa8:	20000058 	.word	0x20000058
 8009fac:	20000009 	.word	0x20000009
 8009fb0:	2000000a 	.word	0x2000000a
 8009fb4:	200003c0 	.word	0x200003c0
 8009fb8:	20000070 	.word	0x20000070
 8009fbc:	0800a041 	.word	0x0800a041
 8009fc0:	200003c4 	.word	0x200003c4

08009fc4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 8009fce:	bf00      	nop
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <SendTxData>:

static void SendTxData(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b09e      	sub	sp, #120	@ 0x78
 8009fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */


	uint8_t Data[100] = {'\0'};
 8009fde:	f107 030c 	add.w	r3, r7, #12
 8009fe2:	2264      	movs	r2, #100	@ 0x64
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f011 fb28 	bl	801b63c <memset>
	static uint32_t cntr = 0;
	uint16_t bat = SYS_GetBatteryLevel();
 8009fec:	f7f6 fed6 	bl	8000d9c <SYS_GetBatteryLevel>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	int len = sprintf((char *)Data,"RadioSonde: BAT:%d,#:%ld",bat,cntr++);
 8009ff6:	f8b7 1076 	ldrh.w	r1, [r7, #118]	@ 0x76
 8009ffa:	4b0f      	ldr	r3, [pc, #60]	@ (800a038 <SendTxData+0x60>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	480d      	ldr	r0, [pc, #52]	@ (800a038 <SendTxData+0x60>)
 800a002:	6002      	str	r2, [r0, #0]
 800a004:	f107 000c 	add.w	r0, r7, #12
 800a008:	460a      	mov	r2, r1
 800a00a:	490c      	ldr	r1, [pc, #48]	@ (800a03c <SendTxData+0x64>)
 800a00c:	f011 faf4 	bl	801b5f8 <siprintf>
 800a010:	6738      	str	r0, [r7, #112]	@ 0x70
	LmHandlerAppData_t Data_t;
	Data_t.Port = 1 ;
 800a012:	2301      	movs	r3, #1
 800a014:	713b      	strb	r3, [r7, #4]
	Data_t.BufferSize = len ;
 800a016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	717b      	strb	r3, [r7, #5]
	Data_t.Buffer = Data;
 800a01c:	f107 030c 	add.w	r3, r7, #12
 800a020:	60bb      	str	r3, [r7, #8]
	LmHandlerSend(&Data_t, LORAMAC_HANDLER_UNCONFIRMED_MSG, 0 );
 800a022:	1d3b      	adds	r3, r7, #4
 800a024:	2200      	movs	r2, #0
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f002 f8ed 	bl	800c208 <LmHandlerSend>
  /* USER CODE END SendTxData_1 */
}
 800a02e:	bf00      	nop
 800a030:	3778      	adds	r7, #120	@ 0x78
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	200003f4 	.word	0x200003f4
 800a03c:	0801c078 	.word	0x0801c078

0800a040 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a048:	2100      	movs	r1, #0
 800a04a:	2002      	movs	r0, #2
 800a04c:	f010 fd2e 	bl	801aaac <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a050:	4803      	ldr	r0, [pc, #12]	@ (800a060 <OnTxTimerEvent+0x20>)
 800a052:	f010 fde1 	bl	801ac18 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200003c4 	.word	0x200003c4

0800a064 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr

0800a076 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	bc80      	pop	{r7}
 800a086:	4770      	bx	lr

0800a088 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	bc80      	pop	{r7}
 800a098:	4770      	bx	lr

0800a09a <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800a09a:	b480      	push	{r7}
 800a09c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800a09e:	bf00      	nop
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr

0800a0a6 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bc80      	pop	{r7}
 800a0b8:	4770      	bx	lr

0800a0ba <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a0be:	2100      	movs	r1, #0
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f010 fcf3 	bl	801aaac <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a0c6:	bf00      	nop
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a0d4:	4a0d      	ldr	r2, [pc, #52]	@ (800a10c <OnTxPeriodicityChanged+0x40>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a0da:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <OnTxPeriodicityChanged+0x40>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d103      	bne.n	800a0ea <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a10c <OnTxPeriodicityChanged+0x40>)
 800a0e4:	f247 5230 	movw	r2, #30000	@ 0x7530
 800a0e8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a0ea:	4809      	ldr	r0, [pc, #36]	@ (800a110 <OnTxPeriodicityChanged+0x44>)
 800a0ec:	f010 fe02 	bl	801acf4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a0f0:	4b06      	ldr	r3, [pc, #24]	@ (800a10c <OnTxPeriodicityChanged+0x40>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4806      	ldr	r0, [pc, #24]	@ (800a110 <OnTxPeriodicityChanged+0x44>)
 800a0f8:	f010 fe6c 	bl	801add4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a0fc:	4804      	ldr	r0, [pc, #16]	@ (800a110 <OnTxPeriodicityChanged+0x44>)
 800a0fe:	f010 fd8b 	bl	801ac18 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a102:	bf00      	nop
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000070 	.word	0x20000070
 800a110:	200003c4 	.word	0x200003c4

0800a114 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a11e:	4a04      	ldr	r2, [pc, #16]	@ (800a130 <OnTxFrameCtrlChanged+0x1c>)
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	bc80      	pop	{r7}
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20000058 	.word	0x20000058

0800a134 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a13e:	4a04      	ldr	r2, [pc, #16]	@ (800a150 <OnPingSlotPeriodicityChanged+0x1c>)
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20000058 	.word	0x20000058

0800a154 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a158:	f002 fd6d 	bl	800cc36 <LmHandlerHalt>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <OnSystemReset+0x1c>
 800a162:	f002 f835 	bl	800c1d0 <LmHandlerJoinStatus>
 800a166:	4603      	mov	r3, r0
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d101      	bne.n	800a170 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a16c:	f7ff feb2 	bl	8009ed4 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a170:	bf00      	nop
 800a172:	bd80      	pop	{r7, pc}

0800a174 <StopJoin>:

static void StopJoin(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a178:	480d      	ldr	r0, [pc, #52]	@ (800a1b0 <StopJoin+0x3c>)
 800a17a:	f010 fdbb 	bl	801acf4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a17e:	f002 fd4d 	bl	800cc1c <LmHandlerStop>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10e      	bne.n	800a1a6 <StopJoin+0x32>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a188:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b4 <StopJoin+0x40>)
 800a18a:	2201      	movs	r2, #1
 800a18c:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a18e:	480a      	ldr	r0, [pc, #40]	@ (800a1b8 <StopJoin+0x44>)
 800a190:	f001 fe88 	bl	800bea4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a194:	4b07      	ldr	r3, [pc, #28]	@ (800a1b4 <StopJoin+0x40>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2101      	movs	r1, #1
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 ff76 	bl	800c08c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a1a0:	4803      	ldr	r0, [pc, #12]	@ (800a1b0 <StopJoin+0x3c>)
 800a1a2:	f010 fd39 	bl	801ac18 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a1a6:	4805      	ldr	r0, [pc, #20]	@ (800a1bc <StopJoin+0x48>)
 800a1a8:	f010 fd36 	bl	801ac18 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a1ac:	bf00      	nop
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	200003c4 	.word	0x200003c4
 800a1b4:	20000009 	.word	0x20000009
 800a1b8:	20000058 	.word	0x20000058
 800a1bc:	200003dc 	.word	0x200003dc

0800a1c0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a1c8:	4b05      	ldr	r3, [pc, #20]	@ (800a1e0 <OnStopJoinTimerEvent+0x20>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d103      	bne.n	800a1d8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2008      	movs	r0, #8
 800a1d4:	f010 fc6a 	bl	801aaac <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000009 	.word	0x20000009

0800a1e4 <StoreContext>:

static void StoreContext(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a1ea:	23ff      	movs	r3, #255	@ 0xff
 800a1ec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a1ee:	f002 fd57 	bl	800cca0 <LmHandlerNvmDataStore>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	4603      	mov	r3, r0
 800a206:	71fb      	strb	r3, [r7, #7]
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bc80      	pop	{r7}
 800a210:	4770      	bx	lr
	...

0800a214 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800a21e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a222:	4807      	ldr	r0, [pc, #28]	@ (800a240 <OnStoreContextRequest+0x2c>)
 800a224:	f7f6 fe84 	bl	8000f30 <FLASH_IF_Erase>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d104      	bne.n	800a238 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	4803      	ldr	r0, [pc, #12]	@ (800a240 <OnStoreContextRequest+0x2c>)
 800a234:	f7f6 fe2c 	bl	8000e90 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	0803f000 	.word	0x0803f000

0800a244 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	4903      	ldr	r1, [pc, #12]	@ (800a260 <OnRestoreContextRequest+0x1c>)
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7f6 fe44 	bl	8000ee0 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	0803f000 	.word	0x0803f000

0800a264 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800a268:	4b15      	ldr	r3, [pc, #84]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a26e:	4b14      	ldr	r3, [pc, #80]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a270:	2200      	movs	r2, #0
 800a272:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a274:	4b12      	ldr	r3, [pc, #72]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a276:	2200      	movs	r2, #0
 800a278:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a27a:	4b11      	ldr	r3, [pc, #68]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800a280:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f043 0320 	orr.w	r3, r3, #32
 800a288:	4a0d      	ldr	r2, [pc, #52]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a28a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a28c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10d      	bne.n	800a2b0 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a294:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c4 <LoraInfo_Init+0x60>)
 800a296:	2200      	movs	r2, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	2000      	movs	r0, #0
 800a29c:	f010 ff34 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a2a0:	bf00      	nop
 800a2a2:	f010 ff1f 	bl	801b0e4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d1fa      	bne.n	800a2a2 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a2ac:	bf00      	nop
 800a2ae:	e7fd      	b.n	800a2ac <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a2b0:	4b03      	ldr	r3, [pc, #12]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800a2b6:	4b02      	ldr	r3, [pc, #8]	@ (800a2c0 <LoraInfo_Init+0x5c>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a2bc:	bf00      	nop
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	200003f8 	.word	0x200003f8
 800a2c4:	0801c094 	.word	0x0801c094

0800a2c8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a2cc:	4b02      	ldr	r3, [pc, #8]	@ (800a2d8 <LoraInfo_GetPtr+0x10>)
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bc80      	pop	{r7}
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	200003f8 	.word	0x200003f8

0800a2dc <LL_AHB2_GRP1_EnableClock>:
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a2e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a2f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a300:	68fb      	ldr	r3, [r7, #12]
}
 800a302:	bf00      	nop
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	bc80      	pop	{r7}
 800a30a:	4770      	bx	lr

0800a30c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
//#warning user to provide its board code or to call his board driver functions
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800a316:	463b      	mov	r3, r7
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	609a      	str	r2, [r3, #8]
 800a320:	60da      	str	r2, [r3, #12]
 800a322:	611a      	str	r2, [r3, #16]

  /* Enable the Radio Switch Clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a324:	2001      	movs	r0, #1
 800a326:	f7ff ffd9 	bl	800a2dc <LL_AHB2_GRP1_EnableClock>


  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_CTRL1_Pin;
 800a32a:	2310      	movs	r3, #16
 800a32c:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800a32e:	2301      	movs	r3, #1
 800a330:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800a332:	2300      	movs	r3, #0
 800a334:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a336:	2303      	movs	r3, #3
 800a338:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(RF_CTRL1_GPIO_Port, &gpio_init_structure);
 800a33a:	463b      	mov	r3, r7
 800a33c:	4619      	mov	r1, r3
 800a33e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a342:	f7fa fb97 	bl	8004a74 <HAL_GPIO_Init>

  gpio_init_structure.Pin = RF_CTRL2_Pin;
 800a346:	2320      	movs	r3, #32
 800a348:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(RF_CTRL2_GPIO_Port, &gpio_init_structure);
 800a34a:	463b      	mov	r3, r7
 800a34c:	4619      	mov	r1, r3
 800a34e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a352:	f7fa fb8f 	bl	8004a74 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_RESET);
 800a356:	2200      	movs	r2, #0
 800a358:	2120      	movs	r1, #32
 800a35a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a35e:	f7fa fdb7 	bl	8004ed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_CTRL1_GPIO_Port, RF_CTRL1_Pin, GPIO_PIN_RESET);
 800a362:	2200      	movs	r2, #0
 800a364:	2110      	movs	r1, #16
 800a366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a36a:	f7fa fdb1 	bl	8004ed0 <HAL_GPIO_WritePin>

  return 0;
 800a36e:	2300      	movs	r3, #0
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
  switch (Config)
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d83f      	bhi.n	800a40c <RBI_ConfigRFSwitch+0x94>
 800a38c:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <RBI_ConfigRFSwitch+0x1c>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3a5 	.word	0x0800a3a5
 800a398:	0800a3bf 	.word	0x0800a3bf
 800a39c:	0800a3d9 	.word	0x0800a3d9
 800a3a0:	0800a3f3 	.word	0x0800a3f3
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_CTRL1_GPIO_Port, RF_CTRL1_Pin, GPIO_PIN_RESET);
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	2110      	movs	r1, #16
 800a3a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3ac:	f7fa fd90 	bl	8004ed0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_RESET);
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2120      	movs	r1, #32
 800a3b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3b8:	f7fa fd8a 	bl	8004ed0 <HAL_GPIO_WritePin>
      break;
 800a3bc:	e027      	b.n	800a40e <RBI_ConfigRFSwitch+0x96>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_CTRL1_GPIO_Port, RF_CTRL1_Pin, GPIO_PIN_SET);
 800a3be:	2201      	movs	r2, #1
 800a3c0:	2110      	movs	r1, #16
 800a3c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3c6:	f7fa fd83 	bl	8004ed0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_RESET);
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2120      	movs	r1, #32
 800a3ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3d2:	f7fa fd7d 	bl	8004ed0 <HAL_GPIO_WritePin>
      break;
 800a3d6:	e01a      	b.n	800a40e <RBI_ConfigRFSwitch+0x96>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_CTRL1_GPIO_Port, RF_CTRL1_Pin, GPIO_PIN_SET);
 800a3d8:	2201      	movs	r2, #1
 800a3da:	2110      	movs	r1, #16
 800a3dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3e0:	f7fa fd76 	bl	8004ed0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_SET);
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	2120      	movs	r1, #32
 800a3e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3ec:	f7fa fd70 	bl	8004ed0 <HAL_GPIO_WritePin>
      break;
 800a3f0:	e00d      	b.n	800a40e <RBI_ConfigRFSwitch+0x96>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_CTRL1_GPIO_Port, RF_CTRL1_Pin, GPIO_PIN_RESET);
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2110      	movs	r1, #16
 800a3f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3fa:	f7fa fd69 	bl	8004ed0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_CTRL2_GPIO_Port, RF_CTRL2_Pin, GPIO_PIN_SET);
 800a3fe:	2201      	movs	r2, #1
 800a400:	2120      	movs	r1, #32
 800a402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a406:	f7fa fd63 	bl	8004ed0 <HAL_GPIO_WritePin>
      break;
 800a40a:	e000      	b.n	800a40e <RBI_ConfigRFSwitch+0x96>
    }
    default:
      break;
 800a40c:	bf00      	nop
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a40e:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a41e:	2300      	movs	r3, #0
 800a420:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
  return RADIO_CONF_RFO_HP;
 800a422:	2302      	movs	r3, #2
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	bc80      	pop	{r7}
 800a42c:	4770      	bx	lr

0800a42e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a434:	2301      	movs	r3, #1
 800a436:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
  return RADIO_CONF_TCXO_SUPPORTED;
 800a438:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr

0800a444 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a44a:	2301      	movs	r3, #1
 800a44c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
  return RADIO_CONF_DCDC_SUPPORTED;
 800a44e:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a450:	4618      	mov	r0, r3
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	bc80      	pop	{r7}
 800a458:	4770      	bx	lr

0800a45a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b085      	sub	sp, #20
 800a45e:	af00      	add	r7, sp, #0
 800a460:	4603      	mov	r3, r0
 800a462:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */

  if (Config == RBI_RFO_LP_MAXPOWER)
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d102      	bne.n	800a474 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800a46e:	230f      	movs	r3, #15
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e001      	b.n	800a478 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800a474:	2316      	movs	r3, #22
 800a476:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a478:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	bc80      	pop	{r7}
 800a482:	4770      	bx	lr

0800a484 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	33f1      	adds	r3, #241	@ 0xf1
 800a490:	2210      	movs	r2, #16
 800a492:	2100      	movs	r1, #0
 800a494:	4618      	mov	r0, r3
 800a496:	f00c fb15 	bl	8016ac4 <memset1>
    ctx->M_n = 0;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	22f0      	movs	r2, #240	@ 0xf0
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f00c fb0b 	bl	8016ac4 <memset1>
}
 800a4ae:	bf00      	nop
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	2110      	movs	r1, #16
 800a4c6:	6838      	ldr	r0, [r7, #0]
 800a4c8:	f000 fe60 	bl	800b18c <lorawan_aes_set_key>
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08c      	sub	sp, #48	@ 0x30
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 80a1 	beq.w	800a62e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a4f2:	f1c3 0310 	rsb	r3, r3, #16
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	bf28      	it	cs
 800a4fc:	4613      	movcs	r3, r2
 800a4fe:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a50c:	4413      	add	r3, r2
 800a50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a510:	b292      	uxth	r2, r2
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f00c fa9a 	bl	8016a4e <memcpy1>
        ctx->M_n += mlen;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	441a      	add	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a530:	2b0f      	cmp	r3, #15
 800a532:	f240 808d 	bls.w	800a650 <AES_CMAC_Update+0x17c>
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53a:	429a      	cmp	r2, r3
 800a53c:	f000 8088 	beq.w	800a650 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a540:	2300      	movs	r3, #0
 800a542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a544:	e015      	b.n	800a572 <AES_CMAC_Update+0x9e>
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54a:	4413      	add	r3, r2
 800a54c:	33f1      	adds	r3, #241	@ 0xf1
 800a54e:	781a      	ldrb	r2, [r3, #0]
 800a550:	68f9      	ldr	r1, [r7, #12]
 800a552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a554:	440b      	add	r3, r1
 800a556:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	4053      	eors	r3, r2
 800a55e:	b2d9      	uxtb	r1, r3
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a564:	4413      	add	r3, r2
 800a566:	33f1      	adds	r3, #241	@ 0xf1
 800a568:	460a      	mov	r2, r1
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	3301      	adds	r3, #1
 800a570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a574:	2b0f      	cmp	r3, #15
 800a576:	dde6      	ble.n	800a546 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a57e:	f107 0314 	add.w	r3, r7, #20
 800a582:	2210      	movs	r2, #16
 800a584:	4618      	mov	r0, r3
 800a586:	f00c fa62 	bl	8016a4e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	f107 0114 	add.w	r1, r7, #20
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fed7 	bl	800b348 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	33f1      	adds	r3, #241	@ 0xf1
 800a59e:	f107 0114 	add.w	r1, r7, #20
 800a5a2:	2210      	movs	r2, #16
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f00c fa52 	bl	8016a4e <memcpy1>

        data += mlen;
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	4413      	add	r3, r2
 800a5b0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a5ba:	e038      	b.n	800a62e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a5bc:	2300      	movs	r3, #0
 800a5be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5c0:	e013      	b.n	800a5ea <AES_CMAC_Update+0x116>
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c6:	4413      	add	r3, r2
 800a5c8:	33f1      	adds	r3, #241	@ 0xf1
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	440b      	add	r3, r1
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	4053      	eors	r3, r2
 800a5d6:	b2d9      	uxtb	r1, r3
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5dc:	4413      	add	r3, r2
 800a5de:	33f1      	adds	r3, #241	@ 0xf1
 800a5e0:	460a      	mov	r2, r1
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ec:	2b0f      	cmp	r3, #15
 800a5ee:	dde8      	ble.n	800a5c2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a5f6:	f107 0314 	add.w	r3, r7, #20
 800a5fa:	2210      	movs	r2, #16
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f00c fa26 	bl	8016a4e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	f107 0114 	add.w	r1, r7, #20
 800a608:	f107 0314 	add.w	r3, r7, #20
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fe9b 	bl	800b348 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	33f1      	adds	r3, #241	@ 0xf1
 800a616:	f107 0114 	add.w	r1, r7, #20
 800a61a:	2210      	movs	r2, #16
 800a61c:	4618      	mov	r0, r3
 800a61e:	f00c fa16 	bl	8016a4e <memcpy1>

        data += 16;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	3310      	adds	r3, #16
 800a626:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3b10      	subs	r3, #16
 800a62c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b10      	cmp	r3, #16
 800a632:	d8c3      	bhi.n	800a5bc <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	b292      	uxth	r2, r2
 800a63e:	68b9      	ldr	r1, [r7, #8]
 800a640:	4618      	mov	r0, r3
 800a642:	f00c fa04 	bl	8016a4e <memcpy1>
    ctx->M_n = len;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a64e:	e000      	b.n	800a652 <AES_CMAC_Update+0x17e>
            return;
 800a650:	bf00      	nop
}
 800a652:	3730      	adds	r7, #48	@ 0x30
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b092      	sub	sp, #72	@ 0x48
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a662:	f107 031c 	add.w	r3, r7, #28
 800a666:	2210      	movs	r2, #16
 800a668:	2100      	movs	r1, #0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f00c fa2a 	bl	8016ac4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	f107 011c 	add.w	r1, r7, #28
 800a676:	f107 031c 	add.w	r3, r7, #28
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fe64 	bl	800b348 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a680:	7f3b      	ldrb	r3, [r7, #28]
 800a682:	b25b      	sxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	da31      	bge.n	800a6ec <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800a688:	2300      	movs	r3, #0
 800a68a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a68c:	e01c      	b.n	800a6c8 <AES_CMAC_Final+0x70>
 800a68e:	f107 021c 	add.w	r2, r7, #28
 800a692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a694:	4413      	add	r3, r2
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	b25b      	sxtb	r3, r3
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	b25a      	sxtb	r2, r3
 800a69e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	3348      	adds	r3, #72	@ 0x48
 800a6a4:	443b      	add	r3, r7
 800a6a6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a6aa:	09db      	lsrs	r3, r3, #7
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b25b      	sxtb	r3, r3
 800a6b4:	b2d9      	uxtb	r1, r3
 800a6b6:	f107 021c 	add.w	r2, r7, #28
 800a6ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6bc:	4413      	add	r3, r2
 800a6be:	460a      	mov	r2, r1
 800a6c0:	701a      	strb	r2, [r3, #0]
 800a6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6ca:	2b0e      	cmp	r3, #14
 800a6cc:	dddf      	ble.n	800a68e <AES_CMAC_Final+0x36>
 800a6ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800a6da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6de:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a6e2:	43db      	mvns	r3, r3
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ea:	e028      	b.n	800a73e <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6f0:	e01c      	b.n	800a72c <AES_CMAC_Final+0xd4>
 800a6f2:	f107 021c 	add.w	r2, r7, #28
 800a6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f8:	4413      	add	r3, r2
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	b25b      	sxtb	r3, r3
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	b25a      	sxtb	r2, r3
 800a702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a704:	3301      	adds	r3, #1
 800a706:	3348      	adds	r3, #72	@ 0x48
 800a708:	443b      	add	r3, r7
 800a70a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a70e:	09db      	lsrs	r3, r3, #7
 800a710:	b2db      	uxtb	r3, r3
 800a712:	b25b      	sxtb	r3, r3
 800a714:	4313      	orrs	r3, r2
 800a716:	b25b      	sxtb	r3, r3
 800a718:	b2d9      	uxtb	r1, r3
 800a71a:	f107 021c 	add.w	r2, r7, #28
 800a71e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a720:	4413      	add	r3, r2
 800a722:	460a      	mov	r2, r1
 800a724:	701a      	strb	r2, [r3, #0]
 800a726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a728:	3301      	adds	r3, #1
 800a72a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a72c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72e:	2b0e      	cmp	r3, #14
 800a730:	dddf      	ble.n	800a6f2 <AES_CMAC_Final+0x9a>
 800a732:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a744:	2b10      	cmp	r3, #16
 800a746:	d11d      	bne.n	800a784 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a74c:	e016      	b.n	800a77c <AES_CMAC_Final+0x124>
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a752:	4413      	add	r3, r2
 800a754:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a758:	781a      	ldrb	r2, [r3, #0]
 800a75a:	f107 011c 	add.w	r1, r7, #28
 800a75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a760:	440b      	add	r3, r1
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	4053      	eors	r3, r2
 800a766:	b2d9      	uxtb	r1, r3
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a76c:	4413      	add	r3, r2
 800a76e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a772:	460a      	mov	r2, r1
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a778:	3301      	adds	r3, #1
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a77e:	2b0f      	cmp	r3, #15
 800a780:	dde5      	ble.n	800a74e <AES_CMAC_Final+0xf6>
 800a782:	e098      	b.n	800a8b6 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a784:	7f3b      	ldrb	r3, [r7, #28]
 800a786:	b25b      	sxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	da31      	bge.n	800a7f0 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800a78c:	2300      	movs	r3, #0
 800a78e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a790:	e01c      	b.n	800a7cc <AES_CMAC_Final+0x174>
 800a792:	f107 021c 	add.w	r2, r7, #28
 800a796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a798:	4413      	add	r3, r2
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	b25b      	sxtb	r3, r3
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	b25a      	sxtb	r2, r3
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	3348      	adds	r3, #72	@ 0x48
 800a7a8:	443b      	add	r3, r7
 800a7aa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a7ae:	09db      	lsrs	r3, r3, #7
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	b25b      	sxtb	r3, r3
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	b25b      	sxtb	r3, r3
 800a7b8:	b2d9      	uxtb	r1, r3
 800a7ba:	f107 021c 	add.w	r2, r7, #28
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	4413      	add	r3, r2
 800a7c2:	460a      	mov	r2, r1
 800a7c4:	701a      	strb	r2, [r3, #0]
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ce:	2b0e      	cmp	r3, #14
 800a7d0:	dddf      	ble.n	800a792 <AES_CMAC_Final+0x13a>
 800a7d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a7de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7e2:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a7e6:	43db      	mvns	r3, r3
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ee:	e028      	b.n	800a842 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f4:	e01c      	b.n	800a830 <AES_CMAC_Final+0x1d8>
 800a7f6:	f107 021c 	add.w	r2, r7, #28
 800a7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fc:	4413      	add	r3, r2
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	b25b      	sxtb	r3, r3
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	b25a      	sxtb	r2, r3
 800a806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a808:	3301      	adds	r3, #1
 800a80a:	3348      	adds	r3, #72	@ 0x48
 800a80c:	443b      	add	r3, r7
 800a80e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a812:	09db      	lsrs	r3, r3, #7
 800a814:	b2db      	uxtb	r3, r3
 800a816:	b25b      	sxtb	r3, r3
 800a818:	4313      	orrs	r3, r2
 800a81a:	b25b      	sxtb	r3, r3
 800a81c:	b2d9      	uxtb	r1, r3
 800a81e:	f107 021c 	add.w	r2, r7, #28
 800a822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a824:	4413      	add	r3, r2
 800a826:	460a      	mov	r2, r1
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82c:	3301      	adds	r3, #1
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a832:	2b0e      	cmp	r3, #14
 800a834:	dddf      	ble.n	800a7f6 <AES_CMAC_Final+0x19e>
 800a836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	4413      	add	r3, r2
 800a84c:	2280      	movs	r2, #128	@ 0x80
 800a84e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a852:	e007      	b.n	800a864 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	4413      	add	r3, r2
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a878:	2b0f      	cmp	r3, #15
 800a87a:	d9eb      	bls.n	800a854 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800a87c:	2300      	movs	r3, #0
 800a87e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a880:	e016      	b.n	800a8b0 <AES_CMAC_Final+0x258>
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	4413      	add	r3, r2
 800a888:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a88c:	781a      	ldrb	r2, [r3, #0]
 800a88e:	f107 011c 	add.w	r1, r7, #28
 800a892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a894:	440b      	add	r3, r1
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	4053      	eors	r3, r2
 800a89a:	b2d9      	uxtb	r1, r3
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a8a6:	460a      	mov	r2, r1
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b2:	2b0f      	cmp	r3, #15
 800a8b4:	dde5      	ble.n	800a882 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ba:	e015      	b.n	800a8e8 <AES_CMAC_Final+0x290>
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c0:	4413      	add	r3, r2
 800a8c2:	33f1      	adds	r3, #241	@ 0xf1
 800a8c4:	781a      	ldrb	r2, [r3, #0]
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ca:	440b      	add	r3, r1
 800a8cc:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	4053      	eors	r3, r2
 800a8d4:	b2d9      	uxtb	r1, r3
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	4413      	add	r3, r2
 800a8dc:	33f1      	adds	r3, #241	@ 0xf1
 800a8de:	460a      	mov	r2, r1
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	2b0f      	cmp	r3, #15
 800a8ec:	dde6      	ble.n	800a8bc <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a8f4:	f107 030c 	add.w	r3, r7, #12
 800a8f8:	2210      	movs	r2, #16
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f00c f8a7 	bl	8016a4e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 fd1d 	bl	800b348 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a90e:	f107 031c 	add.w	r3, r7, #28
 800a912:	2210      	movs	r2, #16
 800a914:	2100      	movs	r1, #0
 800a916:	4618      	mov	r0, r3
 800a918:	f00c f8d4 	bl	8016ac4 <memset1>
}
 800a91c:	bf00      	nop
 800a91e:	3748      	adds	r7, #72	@ 0x48
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781a      	ldrb	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3301      	adds	r3, #1
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	7852      	ldrb	r2, [r2, #1]
 800a93e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3302      	adds	r3, #2
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	7892      	ldrb	r2, [r2, #2]
 800a948:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3303      	adds	r3, #3
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	78d2      	ldrb	r2, [r2, #3]
 800a952:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3304      	adds	r3, #4
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	7912      	ldrb	r2, [r2, #4]
 800a95c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3305      	adds	r3, #5
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	7952      	ldrb	r2, [r2, #5]
 800a966:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3306      	adds	r3, #6
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	7992      	ldrb	r2, [r2, #6]
 800a970:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3307      	adds	r3, #7
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	79d2      	ldrb	r2, [r2, #7]
 800a97a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3308      	adds	r3, #8
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	7a12      	ldrb	r2, [r2, #8]
 800a984:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	3309      	adds	r3, #9
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	7a52      	ldrb	r2, [r2, #9]
 800a98e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	330a      	adds	r3, #10
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	7a92      	ldrb	r2, [r2, #10]
 800a998:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	330b      	adds	r3, #11
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	7ad2      	ldrb	r2, [r2, #11]
 800a9a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	330c      	adds	r3, #12
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	7b12      	ldrb	r2, [r2, #12]
 800a9ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	330d      	adds	r3, #13
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	7b52      	ldrb	r2, [r2, #13]
 800a9b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	330e      	adds	r3, #14
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	7b92      	ldrb	r2, [r2, #14]
 800a9c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	330f      	adds	r3, #15
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	7bd2      	ldrb	r2, [r2, #15]
 800a9ca:	701a      	strb	r2, [r3, #0]
#endif
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr

0800a9d6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	60b9      	str	r1, [r7, #8]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a9e4:	e007      	b.n	800a9f6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	1c53      	adds	r3, r2, #1
 800a9ea:	60bb      	str	r3, [r7, #8]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	1c59      	adds	r1, r3, #1
 800a9f0:	60f9      	str	r1, [r7, #12]
 800a9f2:	7812      	ldrb	r2, [r2, #0]
 800a9f4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	71fa      	strb	r2, [r7, #7]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1f2      	bne.n	800a9e6 <copy_block_nn+0x10>
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bc80      	pop	{r7}
 800aa0a:	4770      	bx	lr

0800aa0c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	781a      	ldrb	r2, [r3, #0]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	4053      	eors	r3, r2
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	7819      	ldrb	r1, [r3, #0]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	781a      	ldrb	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3301      	adds	r3, #1
 800aa36:	404a      	eors	r2, r1
 800aa38:	b2d2      	uxtb	r2, r2
 800aa3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3302      	adds	r3, #2
 800aa40:	7819      	ldrb	r1, [r3, #0]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	3302      	adds	r3, #2
 800aa46:	781a      	ldrb	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	3302      	adds	r3, #2
 800aa4c:	404a      	eors	r2, r1
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3303      	adds	r3, #3
 800aa56:	7819      	ldrb	r1, [r3, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	3303      	adds	r3, #3
 800aa5c:	781a      	ldrb	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	3303      	adds	r3, #3
 800aa62:	404a      	eors	r2, r1
 800aa64:	b2d2      	uxtb	r2, r2
 800aa66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	7819      	ldrb	r1, [r3, #0]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	3304      	adds	r3, #4
 800aa72:	781a      	ldrb	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3304      	adds	r3, #4
 800aa78:	404a      	eors	r2, r1
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3305      	adds	r3, #5
 800aa82:	7819      	ldrb	r1, [r3, #0]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	3305      	adds	r3, #5
 800aa88:	781a      	ldrb	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	3305      	adds	r3, #5
 800aa8e:	404a      	eors	r2, r1
 800aa90:	b2d2      	uxtb	r2, r2
 800aa92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3306      	adds	r3, #6
 800aa98:	7819      	ldrb	r1, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	3306      	adds	r3, #6
 800aa9e:	781a      	ldrb	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3306      	adds	r3, #6
 800aaa4:	404a      	eors	r2, r1
 800aaa6:	b2d2      	uxtb	r2, r2
 800aaa8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3307      	adds	r3, #7
 800aaae:	7819      	ldrb	r1, [r3, #0]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	3307      	adds	r3, #7
 800aab4:	781a      	ldrb	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3307      	adds	r3, #7
 800aaba:	404a      	eors	r2, r1
 800aabc:	b2d2      	uxtb	r2, r2
 800aabe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3308      	adds	r3, #8
 800aac4:	7819      	ldrb	r1, [r3, #0]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	3308      	adds	r3, #8
 800aaca:	781a      	ldrb	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3308      	adds	r3, #8
 800aad0:	404a      	eors	r2, r1
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3309      	adds	r3, #9
 800aada:	7819      	ldrb	r1, [r3, #0]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	3309      	adds	r3, #9
 800aae0:	781a      	ldrb	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3309      	adds	r3, #9
 800aae6:	404a      	eors	r2, r1
 800aae8:	b2d2      	uxtb	r2, r2
 800aaea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	330a      	adds	r3, #10
 800aaf0:	7819      	ldrb	r1, [r3, #0]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	330a      	adds	r3, #10
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	330a      	adds	r3, #10
 800aafc:	404a      	eors	r2, r1
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	330b      	adds	r3, #11
 800ab06:	7819      	ldrb	r1, [r3, #0]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	330b      	adds	r3, #11
 800ab0c:	781a      	ldrb	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	330b      	adds	r3, #11
 800ab12:	404a      	eors	r2, r1
 800ab14:	b2d2      	uxtb	r2, r2
 800ab16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	330c      	adds	r3, #12
 800ab1c:	7819      	ldrb	r1, [r3, #0]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	330c      	adds	r3, #12
 800ab22:	781a      	ldrb	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	330c      	adds	r3, #12
 800ab28:	404a      	eors	r2, r1
 800ab2a:	b2d2      	uxtb	r2, r2
 800ab2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	330d      	adds	r3, #13
 800ab32:	7819      	ldrb	r1, [r3, #0]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	330d      	adds	r3, #13
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	330d      	adds	r3, #13
 800ab3e:	404a      	eors	r2, r1
 800ab40:	b2d2      	uxtb	r2, r2
 800ab42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	330e      	adds	r3, #14
 800ab48:	7819      	ldrb	r1, [r3, #0]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	330e      	adds	r3, #14
 800ab4e:	781a      	ldrb	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	330e      	adds	r3, #14
 800ab54:	404a      	eors	r2, r1
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	330f      	adds	r3, #15
 800ab5e:	7819      	ldrb	r1, [r3, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	330f      	adds	r3, #15
 800ab64:	781a      	ldrb	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	330f      	adds	r3, #15
 800ab6a:	404a      	eors	r2, r1
 800ab6c:	b2d2      	uxtb	r2, r2
 800ab6e:	701a      	strb	r2, [r3, #0]
#endif
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bc80      	pop	{r7}
 800ab78:	4770      	bx	lr

0800ab7a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	781a      	ldrb	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	4053      	eors	r3, r2
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	7819      	ldrb	r1, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	404a      	eors	r2, r1
 800aba8:	b2d2      	uxtb	r2, r2
 800abaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	3302      	adds	r3, #2
 800abb0:	7819      	ldrb	r1, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3302      	adds	r3, #2
 800abb6:	781a      	ldrb	r2, [r3, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3302      	adds	r3, #2
 800abbc:	404a      	eors	r2, r1
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3303      	adds	r3, #3
 800abc6:	7819      	ldrb	r1, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3303      	adds	r3, #3
 800abcc:	781a      	ldrb	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3303      	adds	r3, #3
 800abd2:	404a      	eors	r2, r1
 800abd4:	b2d2      	uxtb	r2, r2
 800abd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	3304      	adds	r3, #4
 800abdc:	7819      	ldrb	r1, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3304      	adds	r3, #4
 800abe2:	781a      	ldrb	r2, [r3, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3304      	adds	r3, #4
 800abe8:	404a      	eors	r2, r1
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	3305      	adds	r3, #5
 800abf2:	7819      	ldrb	r1, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3305      	adds	r3, #5
 800abf8:	781a      	ldrb	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3305      	adds	r3, #5
 800abfe:	404a      	eors	r2, r1
 800ac00:	b2d2      	uxtb	r2, r2
 800ac02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	3306      	adds	r3, #6
 800ac08:	7819      	ldrb	r1, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3306      	adds	r3, #6
 800ac0e:	781a      	ldrb	r2, [r3, #0]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3306      	adds	r3, #6
 800ac14:	404a      	eors	r2, r1
 800ac16:	b2d2      	uxtb	r2, r2
 800ac18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	3307      	adds	r3, #7
 800ac1e:	7819      	ldrb	r1, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3307      	adds	r3, #7
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3307      	adds	r3, #7
 800ac2a:	404a      	eors	r2, r1
 800ac2c:	b2d2      	uxtb	r2, r2
 800ac2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	3308      	adds	r3, #8
 800ac34:	7819      	ldrb	r1, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3308      	adds	r3, #8
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	404a      	eors	r2, r1
 800ac42:	b2d2      	uxtb	r2, r2
 800ac44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	3309      	adds	r3, #9
 800ac4a:	7819      	ldrb	r1, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3309      	adds	r3, #9
 800ac50:	781a      	ldrb	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3309      	adds	r3, #9
 800ac56:	404a      	eors	r2, r1
 800ac58:	b2d2      	uxtb	r2, r2
 800ac5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	330a      	adds	r3, #10
 800ac60:	7819      	ldrb	r1, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	330a      	adds	r3, #10
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	330a      	adds	r3, #10
 800ac6c:	404a      	eors	r2, r1
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	330b      	adds	r3, #11
 800ac76:	7819      	ldrb	r1, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	330b      	adds	r3, #11
 800ac7c:	781a      	ldrb	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	330b      	adds	r3, #11
 800ac82:	404a      	eors	r2, r1
 800ac84:	b2d2      	uxtb	r2, r2
 800ac86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	330c      	adds	r3, #12
 800ac8c:	7819      	ldrb	r1, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	330c      	adds	r3, #12
 800ac92:	781a      	ldrb	r2, [r3, #0]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	330c      	adds	r3, #12
 800ac98:	404a      	eors	r2, r1
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	330d      	adds	r3, #13
 800aca2:	7819      	ldrb	r1, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	330d      	adds	r3, #13
 800aca8:	781a      	ldrb	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	330d      	adds	r3, #13
 800acae:	404a      	eors	r2, r1
 800acb0:	b2d2      	uxtb	r2, r2
 800acb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	330e      	adds	r3, #14
 800acb8:	7819      	ldrb	r1, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	330e      	adds	r3, #14
 800acbe:	781a      	ldrb	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	330e      	adds	r3, #14
 800acc4:	404a      	eors	r2, r1
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	330f      	adds	r3, #15
 800acce:	7819      	ldrb	r1, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	330f      	adds	r3, #15
 800acd4:	781a      	ldrb	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	330f      	adds	r3, #15
 800acda:	404a      	eors	r2, r1
 800acdc:	b2d2      	uxtb	r2, r2
 800acde:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ace0:	bf00      	nop
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bc80      	pop	{r7}
 800ace8:	4770      	bx	lr

0800acea <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7ff fe88 	bl	800aa0c <xor_block>
}
 800acfc:	bf00      	nop
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	461a      	mov	r2, r3
 800ad12:	4b48      	ldr	r3, [pc, #288]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad14:	5c9a      	ldrb	r2, [r3, r2]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	4619      	mov	r1, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4a43      	ldr	r2, [pc, #268]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad28:	5c52      	ldrb	r2, [r2, r1]
 800ad2a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	4619      	mov	r1, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3308      	adds	r3, #8
 800ad38:	4a3e      	ldr	r2, [pc, #248]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad3a:	5c52      	ldrb	r2, [r2, r1]
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	330c      	adds	r3, #12
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	4619      	mov	r1, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	330c      	adds	r3, #12
 800ad4a:	4a3a      	ldr	r2, [pc, #232]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad4c:	5c52      	ldrb	r2, [r2, r1]
 800ad4e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3305      	adds	r3, #5
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3301      	adds	r3, #1
 800ad62:	4a34      	ldr	r2, [pc, #208]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad64:	5c52      	ldrb	r2, [r2, r1]
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3309      	adds	r3, #9
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3305      	adds	r3, #5
 800ad74:	4a2f      	ldr	r2, [pc, #188]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad76:	5c52      	ldrb	r2, [r2, r1]
 800ad78:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	330d      	adds	r3, #13
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	4619      	mov	r1, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3309      	adds	r3, #9
 800ad86:	4a2b      	ldr	r2, [pc, #172]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad88:	5c52      	ldrb	r2, [r2, r1]
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	7bfa      	ldrb	r2, [r7, #15]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	330d      	adds	r3, #13
 800ad92:	4928      	ldr	r1, [pc, #160]	@ (800ae34 <shift_sub_rows+0x130>)
 800ad94:	5c8a      	ldrb	r2, [r1, r2]
 800ad96:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	789b      	ldrb	r3, [r3, #2]
 800ad9c:	73fb      	strb	r3, [r7, #15]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	330a      	adds	r3, #10
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	4619      	mov	r1, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	3302      	adds	r3, #2
 800adaa:	4a22      	ldr	r2, [pc, #136]	@ (800ae34 <shift_sub_rows+0x130>)
 800adac:	5c52      	ldrb	r2, [r2, r1]
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	7bfa      	ldrb	r2, [r7, #15]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	330a      	adds	r3, #10
 800adb6:	491f      	ldr	r1, [pc, #124]	@ (800ae34 <shift_sub_rows+0x130>)
 800adb8:	5c8a      	ldrb	r2, [r1, r2]
 800adba:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	799b      	ldrb	r3, [r3, #6]
 800adc0:	73fb      	strb	r3, [r7, #15]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	330e      	adds	r3, #14
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	4619      	mov	r1, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3306      	adds	r3, #6
 800adce:	4a19      	ldr	r2, [pc, #100]	@ (800ae34 <shift_sub_rows+0x130>)
 800add0:	5c52      	ldrb	r2, [r2, r1]
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	7bfa      	ldrb	r2, [r7, #15]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	330e      	adds	r3, #14
 800adda:	4916      	ldr	r1, [pc, #88]	@ (800ae34 <shift_sub_rows+0x130>)
 800addc:	5c8a      	ldrb	r2, [r1, r2]
 800adde:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7bdb      	ldrb	r3, [r3, #15]
 800ade4:	73fb      	strb	r3, [r7, #15]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	330b      	adds	r3, #11
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	4619      	mov	r1, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	330f      	adds	r3, #15
 800adf2:	4a10      	ldr	r2, [pc, #64]	@ (800ae34 <shift_sub_rows+0x130>)
 800adf4:	5c52      	ldrb	r2, [r2, r1]
 800adf6:	701a      	strb	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3307      	adds	r3, #7
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	4619      	mov	r1, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	330b      	adds	r3, #11
 800ae04:	4a0b      	ldr	r2, [pc, #44]	@ (800ae34 <shift_sub_rows+0x130>)
 800ae06:	5c52      	ldrb	r2, [r2, r1]
 800ae08:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	3303      	adds	r3, #3
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	4619      	mov	r1, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3307      	adds	r3, #7
 800ae16:	4a07      	ldr	r2, [pc, #28]	@ (800ae34 <shift_sub_rows+0x130>)
 800ae18:	5c52      	ldrb	r2, [r2, r1]
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	7bfa      	ldrb	r2, [r7, #15]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3303      	adds	r3, #3
 800ae22:	4904      	ldr	r1, [pc, #16]	@ (800ae34 <shift_sub_rows+0x130>)
 800ae24:	5c8a      	ldrb	r2, [r1, r2]
 800ae26:	701a      	strb	r2, [r3, #0]
}
 800ae28:	bf00      	nop
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bc80      	pop	{r7}
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	0801c5f8 	.word	0x0801c5f8

0800ae38 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ae40:	f107 0308 	add.w	r3, r7, #8
 800ae44:	6879      	ldr	r1, [r7, #4]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff fd6c 	bl	800a924 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ae4c:	7a3b      	ldrb	r3, [r7, #8]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	4b9a      	ldr	r3, [pc, #616]	@ (800b0bc <mix_sub_columns+0x284>)
 800ae52:	5c9a      	ldrb	r2, [r3, r2]
 800ae54:	7b7b      	ldrb	r3, [r7, #13]
 800ae56:	4619      	mov	r1, r3
 800ae58:	4b99      	ldr	r3, [pc, #612]	@ (800b0c0 <mix_sub_columns+0x288>)
 800ae5a:	5c5b      	ldrb	r3, [r3, r1]
 800ae5c:	4053      	eors	r3, r2
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	7cbb      	ldrb	r3, [r7, #18]
 800ae62:	4619      	mov	r1, r3
 800ae64:	4b97      	ldr	r3, [pc, #604]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800ae66:	5c5b      	ldrb	r3, [r3, r1]
 800ae68:	4053      	eors	r3, r2
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4b94      	ldr	r3, [pc, #592]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800ae72:	5c5b      	ldrb	r3, [r3, r1]
 800ae74:	4053      	eors	r3, r2
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ae7c:	7a3b      	ldrb	r3, [r7, #8]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	4b90      	ldr	r3, [pc, #576]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800ae82:	5c9a      	ldrb	r2, [r3, r2]
 800ae84:	7b7b      	ldrb	r3, [r7, #13]
 800ae86:	4619      	mov	r1, r3
 800ae88:	4b8c      	ldr	r3, [pc, #560]	@ (800b0bc <mix_sub_columns+0x284>)
 800ae8a:	5c5b      	ldrb	r3, [r3, r1]
 800ae8c:	4053      	eors	r3, r2
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	7cbb      	ldrb	r3, [r7, #18]
 800ae92:	4619      	mov	r1, r3
 800ae94:	4b8a      	ldr	r3, [pc, #552]	@ (800b0c0 <mix_sub_columns+0x288>)
 800ae96:	5c5b      	ldrb	r3, [r3, r1]
 800ae98:	4053      	eors	r3, r2
 800ae9a:	b2d9      	uxtb	r1, r3
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	4b88      	ldr	r3, [pc, #544]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800aea2:	5c9a      	ldrb	r2, [r3, r2]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3301      	adds	r3, #1
 800aea8:	404a      	eors	r2, r1
 800aeaa:	b2d2      	uxtb	r2, r2
 800aeac:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800aeae:	7a3b      	ldrb	r3, [r7, #8]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	4b84      	ldr	r3, [pc, #528]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800aeb4:	5c9a      	ldrb	r2, [r3, r2]
 800aeb6:	7b7b      	ldrb	r3, [r7, #13]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4b82      	ldr	r3, [pc, #520]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800aebc:	5c5b      	ldrb	r3, [r3, r1]
 800aebe:	4053      	eors	r3, r2
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	7cbb      	ldrb	r3, [r7, #18]
 800aec4:	4619      	mov	r1, r3
 800aec6:	4b7d      	ldr	r3, [pc, #500]	@ (800b0bc <mix_sub_columns+0x284>)
 800aec8:	5c5b      	ldrb	r3, [r3, r1]
 800aeca:	4053      	eors	r3, r2
 800aecc:	b2d9      	uxtb	r1, r3
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	461a      	mov	r2, r3
 800aed2:	4b7b      	ldr	r3, [pc, #492]	@ (800b0c0 <mix_sub_columns+0x288>)
 800aed4:	5c9a      	ldrb	r2, [r3, r2]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3302      	adds	r3, #2
 800aeda:	404a      	eors	r2, r1
 800aedc:	b2d2      	uxtb	r2, r2
 800aede:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800aee0:	7a3b      	ldrb	r3, [r7, #8]
 800aee2:	461a      	mov	r2, r3
 800aee4:	4b76      	ldr	r3, [pc, #472]	@ (800b0c0 <mix_sub_columns+0x288>)
 800aee6:	5c9a      	ldrb	r2, [r3, r2]
 800aee8:	7b7b      	ldrb	r3, [r7, #13]
 800aeea:	4619      	mov	r1, r3
 800aeec:	4b75      	ldr	r3, [pc, #468]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800aeee:	5c5b      	ldrb	r3, [r3, r1]
 800aef0:	4053      	eors	r3, r2
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	7cbb      	ldrb	r3, [r7, #18]
 800aef6:	4619      	mov	r1, r3
 800aef8:	4b72      	ldr	r3, [pc, #456]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800aefa:	5c5b      	ldrb	r3, [r3, r1]
 800aefc:	4053      	eors	r3, r2
 800aefe:	b2d9      	uxtb	r1, r3
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	461a      	mov	r2, r3
 800af04:	4b6d      	ldr	r3, [pc, #436]	@ (800b0bc <mix_sub_columns+0x284>)
 800af06:	5c9a      	ldrb	r2, [r3, r2]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3303      	adds	r3, #3
 800af0c:	404a      	eors	r2, r1
 800af0e:	b2d2      	uxtb	r2, r2
 800af10:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800af12:	7b3b      	ldrb	r3, [r7, #12]
 800af14:	461a      	mov	r2, r3
 800af16:	4b69      	ldr	r3, [pc, #420]	@ (800b0bc <mix_sub_columns+0x284>)
 800af18:	5c9a      	ldrb	r2, [r3, r2]
 800af1a:	7c7b      	ldrb	r3, [r7, #17]
 800af1c:	4619      	mov	r1, r3
 800af1e:	4b68      	ldr	r3, [pc, #416]	@ (800b0c0 <mix_sub_columns+0x288>)
 800af20:	5c5b      	ldrb	r3, [r3, r1]
 800af22:	4053      	eors	r3, r2
 800af24:	b2da      	uxtb	r2, r3
 800af26:	7dbb      	ldrb	r3, [r7, #22]
 800af28:	4619      	mov	r1, r3
 800af2a:	4b66      	ldr	r3, [pc, #408]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800af2c:	5c5b      	ldrb	r3, [r3, r1]
 800af2e:	4053      	eors	r3, r2
 800af30:	b2d9      	uxtb	r1, r3
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	461a      	mov	r2, r3
 800af36:	4b63      	ldr	r3, [pc, #396]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800af38:	5c9a      	ldrb	r2, [r3, r2]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3304      	adds	r3, #4
 800af3e:	404a      	eors	r2, r1
 800af40:	b2d2      	uxtb	r2, r2
 800af42:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800af44:	7b3b      	ldrb	r3, [r7, #12]
 800af46:	461a      	mov	r2, r3
 800af48:	4b5e      	ldr	r3, [pc, #376]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800af4a:	5c9a      	ldrb	r2, [r3, r2]
 800af4c:	7c7b      	ldrb	r3, [r7, #17]
 800af4e:	4619      	mov	r1, r3
 800af50:	4b5a      	ldr	r3, [pc, #360]	@ (800b0bc <mix_sub_columns+0x284>)
 800af52:	5c5b      	ldrb	r3, [r3, r1]
 800af54:	4053      	eors	r3, r2
 800af56:	b2da      	uxtb	r2, r3
 800af58:	7dbb      	ldrb	r3, [r7, #22]
 800af5a:	4619      	mov	r1, r3
 800af5c:	4b58      	ldr	r3, [pc, #352]	@ (800b0c0 <mix_sub_columns+0x288>)
 800af5e:	5c5b      	ldrb	r3, [r3, r1]
 800af60:	4053      	eors	r3, r2
 800af62:	b2d9      	uxtb	r1, r3
 800af64:	7afb      	ldrb	r3, [r7, #11]
 800af66:	461a      	mov	r2, r3
 800af68:	4b56      	ldr	r3, [pc, #344]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800af6a:	5c9a      	ldrb	r2, [r3, r2]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3305      	adds	r3, #5
 800af70:	404a      	eors	r2, r1
 800af72:	b2d2      	uxtb	r2, r2
 800af74:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800af76:	7b3b      	ldrb	r3, [r7, #12]
 800af78:	461a      	mov	r2, r3
 800af7a:	4b52      	ldr	r3, [pc, #328]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800af7c:	5c9a      	ldrb	r2, [r3, r2]
 800af7e:	7c7b      	ldrb	r3, [r7, #17]
 800af80:	4619      	mov	r1, r3
 800af82:	4b50      	ldr	r3, [pc, #320]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800af84:	5c5b      	ldrb	r3, [r3, r1]
 800af86:	4053      	eors	r3, r2
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	7dbb      	ldrb	r3, [r7, #22]
 800af8c:	4619      	mov	r1, r3
 800af8e:	4b4b      	ldr	r3, [pc, #300]	@ (800b0bc <mix_sub_columns+0x284>)
 800af90:	5c5b      	ldrb	r3, [r3, r1]
 800af92:	4053      	eors	r3, r2
 800af94:	b2d9      	uxtb	r1, r3
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	461a      	mov	r2, r3
 800af9a:	4b49      	ldr	r3, [pc, #292]	@ (800b0c0 <mix_sub_columns+0x288>)
 800af9c:	5c9a      	ldrb	r2, [r3, r2]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3306      	adds	r3, #6
 800afa2:	404a      	eors	r2, r1
 800afa4:	b2d2      	uxtb	r2, r2
 800afa6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800afa8:	7b3b      	ldrb	r3, [r7, #12]
 800afaa:	461a      	mov	r2, r3
 800afac:	4b44      	ldr	r3, [pc, #272]	@ (800b0c0 <mix_sub_columns+0x288>)
 800afae:	5c9a      	ldrb	r2, [r3, r2]
 800afb0:	7c7b      	ldrb	r3, [r7, #17]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4b43      	ldr	r3, [pc, #268]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800afb6:	5c5b      	ldrb	r3, [r3, r1]
 800afb8:	4053      	eors	r3, r2
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	7dbb      	ldrb	r3, [r7, #22]
 800afbe:	4619      	mov	r1, r3
 800afc0:	4b40      	ldr	r3, [pc, #256]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800afc2:	5c5b      	ldrb	r3, [r3, r1]
 800afc4:	4053      	eors	r3, r2
 800afc6:	b2d9      	uxtb	r1, r3
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	461a      	mov	r2, r3
 800afcc:	4b3b      	ldr	r3, [pc, #236]	@ (800b0bc <mix_sub_columns+0x284>)
 800afce:	5c9a      	ldrb	r2, [r3, r2]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3307      	adds	r3, #7
 800afd4:	404a      	eors	r2, r1
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800afda:	7c3b      	ldrb	r3, [r7, #16]
 800afdc:	461a      	mov	r2, r3
 800afde:	4b37      	ldr	r3, [pc, #220]	@ (800b0bc <mix_sub_columns+0x284>)
 800afe0:	5c9a      	ldrb	r2, [r3, r2]
 800afe2:	7d7b      	ldrb	r3, [r7, #21]
 800afe4:	4619      	mov	r1, r3
 800afe6:	4b36      	ldr	r3, [pc, #216]	@ (800b0c0 <mix_sub_columns+0x288>)
 800afe8:	5c5b      	ldrb	r3, [r3, r1]
 800afea:	4053      	eors	r3, r2
 800afec:	b2da      	uxtb	r2, r3
 800afee:	7abb      	ldrb	r3, [r7, #10]
 800aff0:	4619      	mov	r1, r3
 800aff2:	4b34      	ldr	r3, [pc, #208]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800aff4:	5c5b      	ldrb	r3, [r3, r1]
 800aff6:	4053      	eors	r3, r2
 800aff8:	b2d9      	uxtb	r1, r3
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	461a      	mov	r2, r3
 800affe:	4b31      	ldr	r3, [pc, #196]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800b000:	5c9a      	ldrb	r2, [r3, r2]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3308      	adds	r3, #8
 800b006:	404a      	eors	r2, r1
 800b008:	b2d2      	uxtb	r2, r2
 800b00a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b00c:	7c3b      	ldrb	r3, [r7, #16]
 800b00e:	461a      	mov	r2, r3
 800b010:	4b2c      	ldr	r3, [pc, #176]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800b012:	5c9a      	ldrb	r2, [r3, r2]
 800b014:	7d7b      	ldrb	r3, [r7, #21]
 800b016:	4619      	mov	r1, r3
 800b018:	4b28      	ldr	r3, [pc, #160]	@ (800b0bc <mix_sub_columns+0x284>)
 800b01a:	5c5b      	ldrb	r3, [r3, r1]
 800b01c:	4053      	eors	r3, r2
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	7abb      	ldrb	r3, [r7, #10]
 800b022:	4619      	mov	r1, r3
 800b024:	4b26      	ldr	r3, [pc, #152]	@ (800b0c0 <mix_sub_columns+0x288>)
 800b026:	5c5b      	ldrb	r3, [r3, r1]
 800b028:	4053      	eors	r3, r2
 800b02a:	b2d9      	uxtb	r1, r3
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	461a      	mov	r2, r3
 800b030:	4b24      	ldr	r3, [pc, #144]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800b032:	5c9a      	ldrb	r2, [r3, r2]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3309      	adds	r3, #9
 800b038:	404a      	eors	r2, r1
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b03e:	7c3b      	ldrb	r3, [r7, #16]
 800b040:	461a      	mov	r2, r3
 800b042:	4b20      	ldr	r3, [pc, #128]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800b044:	5c9a      	ldrb	r2, [r3, r2]
 800b046:	7d7b      	ldrb	r3, [r7, #21]
 800b048:	4619      	mov	r1, r3
 800b04a:	4b1e      	ldr	r3, [pc, #120]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800b04c:	5c5b      	ldrb	r3, [r3, r1]
 800b04e:	4053      	eors	r3, r2
 800b050:	b2da      	uxtb	r2, r3
 800b052:	7abb      	ldrb	r3, [r7, #10]
 800b054:	4619      	mov	r1, r3
 800b056:	4b19      	ldr	r3, [pc, #100]	@ (800b0bc <mix_sub_columns+0x284>)
 800b058:	5c5b      	ldrb	r3, [r3, r1]
 800b05a:	4053      	eors	r3, r2
 800b05c:	b2d9      	uxtb	r1, r3
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	461a      	mov	r2, r3
 800b062:	4b17      	ldr	r3, [pc, #92]	@ (800b0c0 <mix_sub_columns+0x288>)
 800b064:	5c9a      	ldrb	r2, [r3, r2]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	330a      	adds	r3, #10
 800b06a:	404a      	eors	r2, r1
 800b06c:	b2d2      	uxtb	r2, r2
 800b06e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b070:	7c3b      	ldrb	r3, [r7, #16]
 800b072:	461a      	mov	r2, r3
 800b074:	4b12      	ldr	r3, [pc, #72]	@ (800b0c0 <mix_sub_columns+0x288>)
 800b076:	5c9a      	ldrb	r2, [r3, r2]
 800b078:	7d7b      	ldrb	r3, [r7, #21]
 800b07a:	4619      	mov	r1, r3
 800b07c:	4b11      	ldr	r3, [pc, #68]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800b07e:	5c5b      	ldrb	r3, [r3, r1]
 800b080:	4053      	eors	r3, r2
 800b082:	b2da      	uxtb	r2, r3
 800b084:	7abb      	ldrb	r3, [r7, #10]
 800b086:	4619      	mov	r1, r3
 800b088:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c4 <mix_sub_columns+0x28c>)
 800b08a:	5c5b      	ldrb	r3, [r3, r1]
 800b08c:	4053      	eors	r3, r2
 800b08e:	b2d9      	uxtb	r1, r3
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	461a      	mov	r2, r3
 800b094:	4b09      	ldr	r3, [pc, #36]	@ (800b0bc <mix_sub_columns+0x284>)
 800b096:	5c9a      	ldrb	r2, [r3, r2]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	330b      	adds	r3, #11
 800b09c:	404a      	eors	r2, r1
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b0a2:	7d3b      	ldrb	r3, [r7, #20]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4b05      	ldr	r3, [pc, #20]	@ (800b0bc <mix_sub_columns+0x284>)
 800b0a8:	5c9a      	ldrb	r2, [r3, r2]
 800b0aa:	7a7b      	ldrb	r3, [r7, #9]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4b04      	ldr	r3, [pc, #16]	@ (800b0c0 <mix_sub_columns+0x288>)
 800b0b0:	5c5b      	ldrb	r3, [r3, r1]
 800b0b2:	4053      	eors	r3, r2
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	e005      	b.n	800b0c8 <mix_sub_columns+0x290>
 800b0bc:	0801c6f8 	.word	0x0801c6f8
 800b0c0:	0801c7f8 	.word	0x0801c7f8
 800b0c4:	0801c5f8 	.word	0x0801c5f8
 800b0c8:	4b2d      	ldr	r3, [pc, #180]	@ (800b180 <mix_sub_columns+0x348>)
 800b0ca:	5c5b      	ldrb	r3, [r3, r1]
 800b0cc:	4053      	eors	r3, r2
 800b0ce:	b2d9      	uxtb	r1, r3
 800b0d0:	7cfb      	ldrb	r3, [r7, #19]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4b2a      	ldr	r3, [pc, #168]	@ (800b180 <mix_sub_columns+0x348>)
 800b0d6:	5c9a      	ldrb	r2, [r3, r2]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	330c      	adds	r3, #12
 800b0dc:	404a      	eors	r2, r1
 800b0de:	b2d2      	uxtb	r2, r2
 800b0e0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b0e2:	7d3b      	ldrb	r3, [r7, #20]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4b26      	ldr	r3, [pc, #152]	@ (800b180 <mix_sub_columns+0x348>)
 800b0e8:	5c9a      	ldrb	r2, [r3, r2]
 800b0ea:	7a7b      	ldrb	r3, [r7, #9]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4b25      	ldr	r3, [pc, #148]	@ (800b184 <mix_sub_columns+0x34c>)
 800b0f0:	5c5b      	ldrb	r3, [r3, r1]
 800b0f2:	4053      	eors	r3, r2
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4b23      	ldr	r3, [pc, #140]	@ (800b188 <mix_sub_columns+0x350>)
 800b0fc:	5c5b      	ldrb	r3, [r3, r1]
 800b0fe:	4053      	eors	r3, r2
 800b100:	b2d9      	uxtb	r1, r3
 800b102:	7cfb      	ldrb	r3, [r7, #19]
 800b104:	461a      	mov	r2, r3
 800b106:	4b1e      	ldr	r3, [pc, #120]	@ (800b180 <mix_sub_columns+0x348>)
 800b108:	5c9a      	ldrb	r2, [r3, r2]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	330d      	adds	r3, #13
 800b10e:	404a      	eors	r2, r1
 800b110:	b2d2      	uxtb	r2, r2
 800b112:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b114:	7d3b      	ldrb	r3, [r7, #20]
 800b116:	461a      	mov	r2, r3
 800b118:	4b19      	ldr	r3, [pc, #100]	@ (800b180 <mix_sub_columns+0x348>)
 800b11a:	5c9a      	ldrb	r2, [r3, r2]
 800b11c:	7a7b      	ldrb	r3, [r7, #9]
 800b11e:	4619      	mov	r1, r3
 800b120:	4b17      	ldr	r3, [pc, #92]	@ (800b180 <mix_sub_columns+0x348>)
 800b122:	5c5b      	ldrb	r3, [r3, r1]
 800b124:	4053      	eors	r3, r2
 800b126:	b2da      	uxtb	r2, r3
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	4619      	mov	r1, r3
 800b12c:	4b15      	ldr	r3, [pc, #84]	@ (800b184 <mix_sub_columns+0x34c>)
 800b12e:	5c5b      	ldrb	r3, [r3, r1]
 800b130:	4053      	eors	r3, r2
 800b132:	b2d9      	uxtb	r1, r3
 800b134:	7cfb      	ldrb	r3, [r7, #19]
 800b136:	461a      	mov	r2, r3
 800b138:	4b13      	ldr	r3, [pc, #76]	@ (800b188 <mix_sub_columns+0x350>)
 800b13a:	5c9a      	ldrb	r2, [r3, r2]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	330e      	adds	r3, #14
 800b140:	404a      	eors	r2, r1
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b146:	7d3b      	ldrb	r3, [r7, #20]
 800b148:	461a      	mov	r2, r3
 800b14a:	4b0f      	ldr	r3, [pc, #60]	@ (800b188 <mix_sub_columns+0x350>)
 800b14c:	5c9a      	ldrb	r2, [r3, r2]
 800b14e:	7a7b      	ldrb	r3, [r7, #9]
 800b150:	4619      	mov	r1, r3
 800b152:	4b0b      	ldr	r3, [pc, #44]	@ (800b180 <mix_sub_columns+0x348>)
 800b154:	5c5b      	ldrb	r3, [r3, r1]
 800b156:	4053      	eors	r3, r2
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	4619      	mov	r1, r3
 800b15e:	4b08      	ldr	r3, [pc, #32]	@ (800b180 <mix_sub_columns+0x348>)
 800b160:	5c5b      	ldrb	r3, [r3, r1]
 800b162:	4053      	eors	r3, r2
 800b164:	b2d9      	uxtb	r1, r3
 800b166:	7cfb      	ldrb	r3, [r7, #19]
 800b168:	461a      	mov	r2, r3
 800b16a:	4b06      	ldr	r3, [pc, #24]	@ (800b184 <mix_sub_columns+0x34c>)
 800b16c:	5c9a      	ldrb	r2, [r3, r2]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	330f      	adds	r3, #15
 800b172:	404a      	eors	r2, r1
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
  }
 800b178:	bf00      	nop
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	0801c5f8 	.word	0x0801c5f8
 800b184:	0801c6f8 	.word	0x0801c6f8
 800b188:	0801c7f8 	.word	0x0801c7f8

0800b18c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	460b      	mov	r3, r1
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	3b10      	subs	r3, #16
 800b19e:	2b10      	cmp	r3, #16
 800b1a0:	bf8c      	ite	hi
 800b1a2:	2201      	movhi	r2, #1
 800b1a4:	2200      	movls	r2, #0
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	2a00      	cmp	r2, #0
 800b1aa:	d10b      	bne.n	800b1c4 <lorawan_aes_set_key+0x38>
 800b1ac:	4a64      	ldr	r2, [pc, #400]	@ (800b340 <lorawan_aes_set_key+0x1b4>)
 800b1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b2:	f003 0301 	and.w	r3, r3, #1
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bf14      	ite	ne
 800b1ba:	2301      	movne	r3, #1
 800b1bc:	2300      	moveq	r3, #0
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d105      	bne.n	800b1d0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b1cc:	23ff      	movs	r3, #255	@ 0xff
 800b1ce:	e0b3      	b.n	800b338 <lorawan_aes_set_key+0x1ac>
        break;
 800b1d0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	7afa      	ldrb	r2, [r7, #11]
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fbfc 	bl	800a9d6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	331c      	adds	r3, #28
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b1e8:	7c7b      	ldrb	r3, [r7, #17]
 800b1ea:	091b      	lsrs	r3, r3, #4
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b1f8:	7afb      	ldrb	r3, [r7, #11]
 800b1fa:	75fb      	strb	r3, [r7, #23]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	75bb      	strb	r3, [r7, #22]
 800b200:	e094      	b.n	800b32c <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	3b04      	subs	r3, #4
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	5cd3      	ldrb	r3, [r2, r3]
 800b20a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	3b03      	subs	r3, #3
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	5cd3      	ldrb	r3, [r2, r3]
 800b214:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b216:	7dfb      	ldrb	r3, [r7, #23]
 800b218:	3b02      	subs	r3, #2
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	5cd3      	ldrb	r3, [r2, r3]
 800b21e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	3b01      	subs	r3, #1
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	5cd3      	ldrb	r3, [r2, r3]
 800b228:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	7afa      	ldrb	r2, [r7, #11]
 800b22e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b232:	fb01 f202 	mul.w	r2, r1, r2
 800b236:	1a9b      	subs	r3, r3, r2
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d128      	bne.n	800b290 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800b23e:	7d7b      	ldrb	r3, [r7, #21]
 800b240:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b242:	7d3b      	ldrb	r3, [r7, #20]
 800b244:	4a3f      	ldr	r2, [pc, #252]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b246:	5cd2      	ldrb	r2, [r2, r3]
 800b248:	7dbb      	ldrb	r3, [r7, #22]
 800b24a:	4053      	eors	r3, r2
 800b24c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b24e:	7cfb      	ldrb	r3, [r7, #19]
 800b250:	4a3c      	ldr	r2, [pc, #240]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b252:	5cd3      	ldrb	r3, [r2, r3]
 800b254:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b256:	7cbb      	ldrb	r3, [r7, #18]
 800b258:	4a3a      	ldr	r2, [pc, #232]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b25a:	5cd3      	ldrb	r3, [r2, r3]
 800b25c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b25e:	7c3b      	ldrb	r3, [r7, #16]
 800b260:	4a38      	ldr	r2, [pc, #224]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b262:	5cd3      	ldrb	r3, [r2, r3]
 800b264:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b266:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	b25a      	sxtb	r2, r3
 800b26e:	7dbb      	ldrb	r3, [r7, #22]
 800b270:	09db      	lsrs	r3, r3, #7
 800b272:	b2db      	uxtb	r3, r3
 800b274:	b25b      	sxtb	r3, r3
 800b276:	4619      	mov	r1, r3
 800b278:	0049      	lsls	r1, r1, #1
 800b27a:	440b      	add	r3, r1
 800b27c:	4619      	mov	r1, r3
 800b27e:	00c8      	lsls	r0, r1, #3
 800b280:	4619      	mov	r1, r3
 800b282:	4603      	mov	r3, r0
 800b284:	440b      	add	r3, r1
 800b286:	b25b      	sxtb	r3, r3
 800b288:	4053      	eors	r3, r2
 800b28a:	b25b      	sxtb	r3, r3
 800b28c:	75bb      	strb	r3, [r7, #22]
 800b28e:	e01c      	b.n	800b2ca <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b290:	7afb      	ldrb	r3, [r7, #11]
 800b292:	2b18      	cmp	r3, #24
 800b294:	d919      	bls.n	800b2ca <lorawan_aes_set_key+0x13e>
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	7afa      	ldrb	r2, [r7, #11]
 800b29a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b29e:	fb01 f202 	mul.w	r2, r1, r2
 800b2a2:	1a9b      	subs	r3, r3, r2
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b10      	cmp	r3, #16
 800b2a8:	d10f      	bne.n	800b2ca <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800b2aa:	7d7b      	ldrb	r3, [r7, #21]
 800b2ac:	4a25      	ldr	r2, [pc, #148]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b2ae:	5cd3      	ldrb	r3, [r2, r3]
 800b2b0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b2b2:	7d3b      	ldrb	r3, [r7, #20]
 800b2b4:	4a23      	ldr	r2, [pc, #140]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b2b6:	5cd3      	ldrb	r3, [r2, r3]
 800b2b8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b2ba:	7cfb      	ldrb	r3, [r7, #19]
 800b2bc:	4a21      	ldr	r2, [pc, #132]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b2be:	5cd3      	ldrb	r3, [r2, r3]
 800b2c0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b2c2:	7cbb      	ldrb	r3, [r7, #18]
 800b2c4:	4a1f      	ldr	r2, [pc, #124]	@ (800b344 <lorawan_aes_set_key+0x1b8>)
 800b2c6:	5cd3      	ldrb	r3, [r2, r3]
 800b2c8:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b2ca:	7dfa      	ldrb	r2, [r7, #23]
 800b2cc:	7afb      	ldrb	r3, [r7, #11]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b2d2:	7c3b      	ldrb	r3, [r7, #16]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	5cd1      	ldrb	r1, [r2, r3]
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	7d7a      	ldrb	r2, [r7, #21]
 800b2dc:	404a      	eors	r2, r1
 800b2de:	b2d1      	uxtb	r1, r2
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b2e4:	7c3b      	ldrb	r3, [r7, #16]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	5cd1      	ldrb	r1, [r2, r3]
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	7d3a      	ldrb	r2, [r7, #20]
 800b2f2:	404a      	eors	r2, r1
 800b2f4:	b2d1      	uxtb	r1, r2
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b2fa:	7c3b      	ldrb	r3, [r7, #16]
 800b2fc:	3302      	adds	r3, #2
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	5cd1      	ldrb	r1, [r2, r3]
 800b302:	7dfb      	ldrb	r3, [r7, #23]
 800b304:	3302      	adds	r3, #2
 800b306:	7cfa      	ldrb	r2, [r7, #19]
 800b308:	404a      	eors	r2, r1
 800b30a:	b2d1      	uxtb	r1, r2
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b310:	7c3b      	ldrb	r3, [r7, #16]
 800b312:	3303      	adds	r3, #3
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	5cd1      	ldrb	r1, [r2, r3]
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	3303      	adds	r3, #3
 800b31c:	7cba      	ldrb	r2, [r7, #18]
 800b31e:	404a      	eors	r2, r1
 800b320:	b2d1      	uxtb	r1, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	3304      	adds	r3, #4
 800b32a:	75fb      	strb	r3, [r7, #23]
 800b32c:	7dfa      	ldrb	r2, [r7, #23]
 800b32e:	7c7b      	ldrb	r3, [r7, #17]
 800b330:	429a      	cmp	r2, r3
 800b332:	f4ff af66 	bcc.w	800b202 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	00010101 	.word	0x00010101
 800b344:	0801c5f8 	.word	0x0801c5f8

0800b348 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08a      	sub	sp, #40	@ 0x28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d038      	beq.n	800b3d0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	f107 0314 	add.w	r3, r7, #20
 800b364:	68f9      	ldr	r1, [r7, #12]
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fc07 	bl	800ab7a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b372:	e014      	b.n	800b39e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff fd5d 	bl	800ae38 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b384:	0112      	lsls	r2, r2, #4
 800b386:	441a      	add	r2, r3
 800b388:	f107 0314 	add.w	r3, r7, #20
 800b38c:	4611      	mov	r1, r2
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff fcab 	bl	800acea <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b398:	3301      	adds	r3, #1
 800b39a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b3a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d3e3      	bcc.n	800b374 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b3ac:	f107 0314 	add.w	r3, r7, #20
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff fca7 	bl	800ad04 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b3bc:	0112      	lsls	r2, r2, #4
 800b3be:	441a      	add	r2, r3
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	68b8      	ldr	r0, [r7, #8]
 800b3c8:	f7ff fbd7 	bl	800ab7a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	e000      	b.n	800b3d2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b3d0:	23ff      	movs	r3, #255	@ 0xff
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3728      	adds	r7, #40	@ 0x28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
	...

0800b3dc <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3de:	b0a1      	sub	sp, #132	@ 0x84
 800b3e0:	af12      	add	r7, sp, #72	@ 0x48
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800b3e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b3ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fa12 	bl	800b81c <SecureElementGetKeyByID>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d174      	bne.n	800b4e8 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b3fe:	2300      	movs	r3, #0
 800b400:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b404:	e06c      	b.n	800b4e0 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800b406:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b40a:	4939      	ldr	r1, [pc, #228]	@ (800b4f0 <PrintKey+0x114>)
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	440b      	add	r3, r1
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d15a      	bne.n	800b4d6 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800b420:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b424:	4932      	ldr	r1, [pc, #200]	@ (800b4f0 <PrintKey+0x114>)
 800b426:	4613      	mov	r3, r2
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	440b      	add	r3, r1
 800b430:	3308      	adds	r3, #8
 800b432:	6819      	ldr	r1, [r3, #0]
 800b434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b436:	785b      	ldrb	r3, [r3, #1]
 800b438:	461d      	mov	r5, r3
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	789b      	ldrb	r3, [r3, #2]
 800b43e:	461e      	mov	r6, r3
 800b440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b442:	78db      	ldrb	r3, [r3, #3]
 800b444:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	791b      	ldrb	r3, [r3, #4]
 800b44a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44e:	795b      	ldrb	r3, [r3, #5]
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	799b      	ldrb	r3, [r3, #6]
 800b456:	61fb      	str	r3, [r7, #28]
 800b458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45a:	79db      	ldrb	r3, [r3, #7]
 800b45c:	61bb      	str	r3, [r7, #24]
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	7a1b      	ldrb	r3, [r3, #8]
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b466:	7a5b      	ldrb	r3, [r3, #9]
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	7a9b      	ldrb	r3, [r3, #10]
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	7adb      	ldrb	r3, [r3, #11]
 800b474:	60bb      	str	r3, [r7, #8]
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	7b1b      	ldrb	r3, [r3, #12]
 800b47a:	607b      	str	r3, [r7, #4]
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	7b5b      	ldrb	r3, [r3, #13]
 800b480:	461c      	mov	r4, r3
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	7b9b      	ldrb	r3, [r3, #14]
 800b486:	4618      	mov	r0, r3
 800b488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48a:	7bdb      	ldrb	r3, [r3, #15]
 800b48c:	461a      	mov	r2, r3
 800b48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b490:	7c1b      	ldrb	r3, [r3, #16]
 800b492:	9310      	str	r3, [sp, #64]	@ 0x40
 800b494:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b496:	900e      	str	r0, [sp, #56]	@ 0x38
 800b498:	940d      	str	r4, [sp, #52]	@ 0x34
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	920a      	str	r2, [sp, #40]	@ 0x28
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	9208      	str	r2, [sp, #32]
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	9207      	str	r2, [sp, #28]
 800b4b2:	69fa      	ldr	r2, [r7, #28]
 800b4b4:	9206      	str	r2, [sp, #24]
 800b4b6:	6a3a      	ldr	r2, [r7, #32]
 800b4b8:	9205      	str	r2, [sp, #20]
 800b4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4bc:	9204      	str	r2, [sp, #16]
 800b4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c0:	9303      	str	r3, [sp, #12]
 800b4c2:	9602      	str	r6, [sp, #8]
 800b4c4:	9501      	str	r5, [sp, #4]
 800b4c6:	9100      	str	r1, [sp, #0]
 800b4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f4 <PrintKey+0x118>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	2002      	movs	r0, #2
 800b4d0:	f00f fe1a 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
 800b4d4:	e008      	b.n	800b4e8 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b4d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4da:	3301      	adds	r3, #1
 800b4dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b4e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4e4:	2b0a      	cmp	r3, #10
 800b4e6:	d98e      	bls.n	800b406 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800b4e8:	373c      	adds	r7, #60	@ 0x3c
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	0801c8f8 	.word	0x0801c8f8
 800b4f4:	0801c178 	.word	0x0801c178

0800b4f8 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800b4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4fa:	b091      	sub	sp, #68	@ 0x44
 800b4fc:	af08      	add	r7, sp, #32
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800b506:	f107 0310 	add.w	r3, r7, #16
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 fbd8 	bl	800bcc0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800b510:	7c3b      	ldrb	r3, [r7, #16]
 800b512:	7c7a      	ldrb	r2, [r7, #17]
 800b514:	7cb9      	ldrb	r1, [r7, #18]
 800b516:	7cf8      	ldrb	r0, [r7, #19]
 800b518:	7d3c      	ldrb	r4, [r7, #20]
 800b51a:	7d7d      	ldrb	r5, [r7, #21]
 800b51c:	7dbe      	ldrb	r6, [r7, #22]
 800b51e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800b522:	f8cd c01c 	str.w	ip, [sp, #28]
 800b526:	9606      	str	r6, [sp, #24]
 800b528:	9505      	str	r5, [sp, #20]
 800b52a:	9404      	str	r4, [sp, #16]
 800b52c:	9003      	str	r0, [sp, #12]
 800b52e:	9102      	str	r1, [sp, #8]
 800b530:	9201      	str	r2, [sp, #4]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	4b24      	ldr	r3, [pc, #144]	@ (800b5c8 <PrintIds+0xd0>)
 800b536:	2200      	movs	r2, #0
 800b538:	2100      	movs	r1, #0
 800b53a:	2002      	movs	r0, #2
 800b53c:	f00f fde4 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800b540:	f107 0318 	add.w	r3, r7, #24
 800b544:	4618      	mov	r0, r3
 800b546:	f000 fbeb 	bl	800bd20 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800b54a:	7e3b      	ldrb	r3, [r7, #24]
 800b54c:	7e7a      	ldrb	r2, [r7, #25]
 800b54e:	7eb9      	ldrb	r1, [r7, #26]
 800b550:	7ef8      	ldrb	r0, [r7, #27]
 800b552:	7f3c      	ldrb	r4, [r7, #28]
 800b554:	7f7d      	ldrb	r5, [r7, #29]
 800b556:	7fbe      	ldrb	r6, [r7, #30]
 800b558:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800b55c:	f8cd c01c 	str.w	ip, [sp, #28]
 800b560:	9606      	str	r6, [sp, #24]
 800b562:	9505      	str	r5, [sp, #20]
 800b564:	9404      	str	r4, [sp, #16]
 800b566:	9003      	str	r0, [sp, #12]
 800b568:	9102      	str	r1, [sp, #8]
 800b56a:	9201      	str	r2, [sp, #4]
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	4b17      	ldr	r3, [pc, #92]	@ (800b5cc <PrintIds+0xd4>)
 800b570:	2200      	movs	r2, #0
 800b572:	2100      	movs	r1, #0
 800b574:	2002      	movs	r0, #2
 800b576:	f00f fdc7 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800b57a:	f107 020c 	add.w	r2, r7, #12
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	4611      	mov	r1, r2
 800b582:	4618      	mov	r0, r3
 800b584:	f000 fbfe 	bl	800bd84 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b588:	f107 030c 	add.w	r3, r7, #12
 800b58c:	3303      	adds	r3, #3
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	461a      	mov	r2, r3
 800b592:	f107 030c 	add.w	r3, r7, #12
 800b596:	3302      	adds	r3, #2
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	4619      	mov	r1, r3
 800b59c:	f107 030c 	add.w	r3, r7, #12
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f107 030c 	add.w	r3, r7, #12
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	9303      	str	r3, [sp, #12]
 800b5ae:	9002      	str	r0, [sp, #8]
 800b5b0:	9101      	str	r1, [sp, #4]
 800b5b2:	9200      	str	r2, [sp, #0]
 800b5b4:	4b06      	ldr	r3, [pc, #24]	@ (800b5d0 <PrintIds+0xd8>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	2002      	movs	r0, #2
 800b5bc:	f00f fda4 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800b5c0:	bf00      	nop
 800b5c2:	3724      	adds	r7, #36	@ 0x24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5c8:	0801c1d4 	.word	0x0801c1d4
 800b5cc:	0801c214 	.word	0x0801c214
 800b5d0:	0801c254 	.word	0x0801c254

0800b5d4 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	6039      	str	r1, [r7, #0]
 800b5de:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
 800b5e4:	e01a      	b.n	800b61c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b5e6:	4b12      	ldr	r3, [pc, #72]	@ (800b630 <GetKeyByID+0x5c>)
 800b5e8:	6819      	ldr	r1, [r3, #0]
 800b5ea:	7bfa      	ldrb	r2, [r7, #15]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	011b      	lsls	r3, r3, #4
 800b5f0:	4413      	add	r3, r2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	3318      	adds	r3, #24
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	79fa      	ldrb	r2, [r7, #7]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d10b      	bne.n	800b616 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <GetKeyByID+0x5c>)
 800b600:	6819      	ldr	r1, [r3, #0]
 800b602:	7bfa      	ldrb	r2, [r7, #15]
 800b604:	4613      	mov	r3, r2
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	4413      	add	r3, r2
 800b60a:	3318      	adds	r3, #24
 800b60c:	18ca      	adds	r2, r1, r3
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b612:	2300      	movs	r3, #0
 800b614:	e006      	b.n	800b624 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	3301      	adds	r3, #1
 800b61a:	73fb      	strb	r3, [r7, #15]
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	2b0a      	cmp	r3, #10
 800b620:	d9e1      	bls.n	800b5e6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b622:	2303      	movs	r3, #3
}
 800b624:	4618      	mov	r0, r3
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	bc80      	pop	{r7}
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	20000408 	.word	0x20000408

0800b634 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800b634:	b590      	push	{r4, r7, lr}
 800b636:	b0d1      	sub	sp, #324	@ 0x144
 800b638:	af00      	add	r7, sp, #0
 800b63a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800b63e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800b642:	6020      	str	r0, [r4, #0]
 800b644:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800b648:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800b64c:	6001      	str	r1, [r0, #0]
 800b64e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800b652:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800b656:	600a      	str	r2, [r1, #0]
 800b658:	461a      	mov	r2, r3
 800b65a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b65e:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b662:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b664:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b668:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <ComputeCmac+0x46>
 800b672:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b67a:	2302      	movs	r3, #2
 800b67c:	e05d      	b.n	800b73a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b67e:	f107 0314 	add.w	r3, r7, #20
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fefe 	bl	800a484 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b688:	f107 0210 	add.w	r2, r7, #16
 800b68c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b690:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	4611      	mov	r1, r2
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff ff9b 	bl	800b5d4 <GetKeyByID>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b6a4:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d144      	bne.n	800b736 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b6ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b6b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	1c5a      	adds	r2, r3, #1
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fef9 	bl	800a4b6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b6c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b6c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d009      	beq.n	800b6e6 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800b6d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b6d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b6da:	f107 0014 	add.w	r0, r7, #20
 800b6de:	2210      	movs	r2, #16
 800b6e0:	6819      	ldr	r1, [r3, #0]
 800b6e2:	f7fe fef7 	bl	800a4d4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b6e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b6ea:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800b6ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b6f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b6f6:	f107 0014 	add.w	r0, r7, #20
 800b6fa:	6812      	ldr	r2, [r2, #0]
 800b6fc:	6819      	ldr	r1, [r3, #0]
 800b6fe:	f7fe fee9 	bl	800a4d4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b702:	f107 0214 	add.w	r2, r7, #20
 800b706:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fe ffa3 	bl	800a658 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800b712:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800b716:	461a      	mov	r2, r3
 800b718:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800b71c:	021b      	lsls	r3, r3, #8
 800b71e:	431a      	orrs	r2, r3
 800b720:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b724:	041b      	lsls	r3, r3, #16
 800b726:	431a      	orrs	r2, r3
 800b728:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b72c:	061b      	lsls	r3, r3, #24
 800b72e:	431a      	orrs	r2, r3
 800b730:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b734:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b736:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b740:	46bd      	mov	sp, r7
 800b742:	bd90      	pop	{r4, r7, pc}

0800b744 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d101      	bne.n	800b756 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b752:	2302      	movs	r3, #2
 800b754:	e00a      	b.n	800b76c <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800b756:	4a07      	ldr	r2, [pc, #28]	@ (800b774 <SecureElementInit+0x30>)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800b75c:	4b05      	ldr	r3, [pc, #20]	@ (800b774 <SecureElementInit+0x30>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	22d8      	movs	r2, #216	@ 0xd8
 800b762:	4905      	ldr	r1, [pc, #20]	@ (800b778 <SecureElementInit+0x34>)
 800b764:	4618      	mov	r0, r3
 800b766:	f00b f972 	bl	8016a4e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000408 	.word	0x20000408
 800b778:	0801cb48 	.word	0x0801cb48

0800b77c <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800b78a:	f107 030c 	add.w	r3, r7, #12
 800b78e:	4618      	mov	r0, r3
 800b790:	f000 fa96 	bl	800bcc0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800b794:	f107 0308 	add.w	r3, r7, #8
 800b798:	4619      	mov	r1, r3
 800b79a:	2001      	movs	r0, #1
 800b79c:	f000 faf2 	bl	800bd84 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d024      	beq.n	800b7f0 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	75bb      	strb	r3, [r7, #22]
 800b7ae:	e00c      	b.n	800b7ca <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800b7b0:	7dbb      	ldrb	r3, [r7, #22]
 800b7b2:	3318      	adds	r3, #24
 800b7b4:	443b      	add	r3, r7
 800b7b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	75fb      	strb	r3, [r7, #23]
                break;
 800b7c2:	e005      	b.n	800b7d0 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b7c4:	7dbb      	ldrb	r3, [r7, #22]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	75bb      	strb	r3, [r7, #22]
 800b7ca:	7dbb      	ldrb	r3, [r7, #22]
 800b7cc:	2b07      	cmp	r3, #7
 800b7ce:	d9ef      	bls.n	800b7b0 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	f083 0301 	eor.w	r3, r3, #1
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d009      	beq.n	800b7f0 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800b7dc:	f107 020c 	add.w	r2, r7, #12
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800b7e6:	f107 030c 	add.w	r3, r7, #12
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fa50 	bl	800bc90 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00c      	beq.n	800b810 <SecureElementInitMcuID+0x94>
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d109      	bne.n	800b810 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800b7fc:	f107 0208 	add.w	r2, r7, #8
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	4610      	mov	r0, r2
 800b804:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	4619      	mov	r1, r3
 800b80a:	2001      	movs	r0, #1
 800b80c:	f000 faa0 	bl	800bd50 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	6039      	str	r1, [r7, #0]
 800b826:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]
 800b82c:	e01a      	b.n	800b864 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b82e:	4b12      	ldr	r3, [pc, #72]	@ (800b878 <SecureElementGetKeyByID+0x5c>)
 800b830:	6819      	ldr	r1, [r3, #0]
 800b832:	7bfa      	ldrb	r2, [r7, #15]
 800b834:	4613      	mov	r3, r2
 800b836:	011b      	lsls	r3, r3, #4
 800b838:	4413      	add	r3, r2
 800b83a:	440b      	add	r3, r1
 800b83c:	3318      	adds	r3, #24
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	79fa      	ldrb	r2, [r7, #7]
 800b842:	429a      	cmp	r2, r3
 800b844:	d10b      	bne.n	800b85e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b846:	4b0c      	ldr	r3, [pc, #48]	@ (800b878 <SecureElementGetKeyByID+0x5c>)
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	7bfa      	ldrb	r2, [r7, #15]
 800b84c:	4613      	mov	r3, r2
 800b84e:	011b      	lsls	r3, r3, #4
 800b850:	4413      	add	r3, r2
 800b852:	3318      	adds	r3, #24
 800b854:	18ca      	adds	r2, r1, r3
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b85a:	2300      	movs	r3, #0
 800b85c:	e006      	b.n	800b86c <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
 800b860:	3301      	adds	r3, #1
 800b862:	73fb      	strb	r3, [r7, #15]
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	2b0a      	cmp	r3, #10
 800b868:	d9e1      	bls.n	800b82e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b86a:	2303      	movs	r3, #3
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	bc80      	pop	{r7}
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	20000408 	.word	0x20000408

0800b87c <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800b880:	2000      	movs	r0, #0
 800b882:	f7ff fdab 	bl	800b3dc <PrintKey>
    PrintKey( NWK_KEY );
 800b886:	2001      	movs	r0, #1
 800b888:	f7ff fda8 	bl	800b3dc <PrintKey>
    PrintKey( APP_S_KEY );
 800b88c:	2009      	movs	r0, #9
 800b88e:	f7ff fda5 	bl	800b3dc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b892:	2008      	movs	r0, #8
 800b894:	f7ff fda2 	bl	800b3dc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800b898:	2000      	movs	r0, #0
 800b89a:	f7ff fe2d 	bl	800b4f8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800b8ae:	200b      	movs	r0, #11
 800b8b0:	f7ff fd94 	bl	800b3dc <PrintKey>
    PrintKey( MC_KE_KEY );
 800b8b4:	200c      	movs	r0, #12
 800b8b6:	f7ff fd91 	bl	800b3dc <PrintKey>
    PrintKey( APP_S_KEY );
 800b8ba:	2009      	movs	r0, #9
 800b8bc:	f7ff fd8e 	bl	800b3dc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b8c0:	2008      	movs	r0, #8
 800b8c2:	f7ff fd8b 	bl	800b3dc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800b8c6:	200a      	movs	r0, #10
 800b8c8:	f7ff fd88 	bl	800b3dc <PrintKey>
    PrintIds( mode );
 800b8cc:	79fb      	ldrb	r3, [r7, #7]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fe12 	bl	800b4f8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
	...

0800b8e0 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e04b      	b.n	800b98e <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	77fb      	strb	r3, [r7, #31]
 800b8fa:	e044      	b.n	800b986 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b8fc:	4b26      	ldr	r3, [pc, #152]	@ (800b998 <SecureElementSetKey+0xb8>)
 800b8fe:	6819      	ldr	r1, [r3, #0]
 800b900:	7ffa      	ldrb	r2, [r7, #31]
 800b902:	4613      	mov	r3, r2
 800b904:	011b      	lsls	r3, r3, #4
 800b906:	4413      	add	r3, r2
 800b908:	440b      	add	r3, r1
 800b90a:	3318      	adds	r3, #24
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	79fa      	ldrb	r2, [r7, #7]
 800b910:	429a      	cmp	r2, r3
 800b912:	d135      	bne.n	800b980 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	2b0d      	cmp	r3, #13
 800b918:	d122      	bne.n	800b960 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b91a:	2306      	movs	r3, #6
 800b91c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800b91e:	f107 030c 	add.w	r3, r7, #12
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	605a      	str	r2, [r3, #4]
 800b928:	609a      	str	r2, [r3, #8]
 800b92a:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800b92c:	f107 030c 	add.w	r3, r7, #12
 800b930:	220c      	movs	r2, #12
 800b932:	2110      	movs	r1, #16
 800b934:	6838      	ldr	r0, [r7, #0]
 800b936:	f000 f877 	bl	800ba28 <SecureElementAesEncrypt>
 800b93a:	4603      	mov	r3, r0
 800b93c:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b93e:	4b16      	ldr	r3, [pc, #88]	@ (800b998 <SecureElementSetKey+0xb8>)
 800b940:	6819      	ldr	r1, [r3, #0]
 800b942:	7ffa      	ldrb	r2, [r7, #31]
 800b944:	4613      	mov	r3, r2
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	4413      	add	r3, r2
 800b94a:	3318      	adds	r3, #24
 800b94c:	440b      	add	r3, r1
 800b94e:	3301      	adds	r3, #1
 800b950:	f107 010c 	add.w	r1, r7, #12
 800b954:	2210      	movs	r2, #16
 800b956:	4618      	mov	r0, r3
 800b958:	f00b f879 	bl	8016a4e <memcpy1>
                return retval;
 800b95c:	7fbb      	ldrb	r3, [r7, #30]
 800b95e:	e016      	b.n	800b98e <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b960:	4b0d      	ldr	r3, [pc, #52]	@ (800b998 <SecureElementSetKey+0xb8>)
 800b962:	6819      	ldr	r1, [r3, #0]
 800b964:	7ffa      	ldrb	r2, [r7, #31]
 800b966:	4613      	mov	r3, r2
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	4413      	add	r3, r2
 800b96c:	3318      	adds	r3, #24
 800b96e:	440b      	add	r3, r1
 800b970:	3301      	adds	r3, #1
 800b972:	2210      	movs	r2, #16
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	4618      	mov	r0, r3
 800b978:	f00b f869 	bl	8016a4e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b97c:	2300      	movs	r3, #0
 800b97e:	e006      	b.n	800b98e <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b980:	7ffb      	ldrb	r3, [r7, #31]
 800b982:	3301      	adds	r3, #1
 800b984:	77fb      	strb	r3, [r7, #31]
 800b986:	7ffb      	ldrb	r3, [r7, #31]
 800b988:	2b0a      	cmp	r3, #10
 800b98a:	d9b7      	bls.n	800b8fc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b98c:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3720      	adds	r7, #32
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20000408 	.word	0x20000408

0800b99c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af02      	add	r7, sp, #8
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	2b0b      	cmp	r3, #11
 800b9ae:	d901      	bls.n	800b9b4 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e009      	b.n	800b9c8 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b9b4:	78fa      	ldrb	r2, [r7, #3]
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	68b9      	ldr	r1, [r7, #8]
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f7ff fe37 	bl	800b634 <ComputeCmac>
 800b9c6:	4603      	mov	r3, r0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af02      	add	r7, sp, #8
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	e01b      	b.n	800ba20 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b9e8:	2306      	movs	r3, #6
 800b9ea:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b9f0:	78fa      	ldrb	r2, [r7, #3]
 800b9f2:	f107 0310 	add.w	r3, r7, #16
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	68f9      	ldr	r1, [r7, #12]
 800b9fe:	2000      	movs	r0, #0
 800ba00:	f7ff fe18 	bl	800b634 <ComputeCmac>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	e006      	b.n	800ba20 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d001      	beq.n	800ba1e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b0c2      	sub	sp, #264	@ 0x108
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba34:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800ba38:	6001      	str	r1, [r0, #0]
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800ba40:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba4a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800ba4e:	460a      	mov	r2, r1
 800ba50:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d006      	beq.n	800ba66 <SecureElementAesEncrypt+0x3e>
 800ba58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ba66:	2302      	movs	r3, #2
 800ba68:	e059      	b.n	800bb1e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800ba6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 030f 	and.w	r3, r3, #15
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ba7c:	2305      	movs	r3, #5
 800ba7e:	e04e      	b.n	800bb1e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ba80:	f107 0314 	add.w	r3, r7, #20
 800ba84:	22f0      	movs	r2, #240	@ 0xf0
 800ba86:	2100      	movs	r1, #0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f00b f81b 	bl	8016ac4 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ba8e:	f107 0210 	add.w	r2, r7, #16
 800ba92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba96:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fd98 	bl	800b5d4 <GetKeyByID>
 800baa4:	4603      	mov	r3, r0
 800baa6:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800baaa:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d133      	bne.n	800bb1a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	3301      	adds	r3, #1
 800bab6:	f107 0214 	add.w	r2, r7, #20
 800baba:	2110      	movs	r1, #16
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff fb65 	bl	800b18c <lorawan_aes_set_key>

        uint8_t block = 0;
 800bac2:	2300      	movs	r3, #0
 800bac4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800bac8:	e020      	b.n	800bb0c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800baca:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	18d0      	adds	r0, r2, r3
 800bad2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bad6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bada:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800bade:	6812      	ldr	r2, [r2, #0]
 800bae0:	4413      	add	r3, r2
 800bae2:	f107 0214 	add.w	r2, r7, #20
 800bae6:	4619      	mov	r1, r3
 800bae8:	f7ff fc2e 	bl	800b348 <lorawan_aes_encrypt>
            block = block + 16;
 800baec:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800baf0:	3310      	adds	r3, #16
 800baf2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800baf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bafe:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bb02:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800bb06:	6812      	ldr	r2, [r2, #0]
 800bb08:	3a10      	subs	r2, #16
 800bb0a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800bb0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1d7      	bne.n	800baca <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bb1a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b088      	sub	sp, #32
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70fb      	strb	r3, [r7, #3]
 800bb34:	4613      	mov	r3, r2
 800bb36:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb3e:	2302      	movs	r3, #2
 800bb40:	e02d      	b.n	800bb9e <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bb42:	2306      	movs	r3, #6
 800bb44:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800bb46:	78bb      	ldrb	r3, [r7, #2]
 800bb48:	2b0c      	cmp	r3, #12
 800bb4a:	d104      	bne.n	800bb56 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	2b0b      	cmp	r3, #11
 800bb50:	d001      	beq.n	800bb56 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e023      	b.n	800bb9e <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800bb56:	f107 030c 	add.w	r3, r7, #12
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
 800bb5e:	605a      	str	r2, [r3, #4]
 800bb60:	609a      	str	r2, [r3, #8]
 800bb62:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800bb64:	f107 030c 	add.w	r3, r7, #12
 800bb68:	78fa      	ldrb	r2, [r7, #3]
 800bb6a:	2110      	movs	r1, #16
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff ff5b 	bl	800ba28 <SecureElementAesEncrypt>
 800bb72:	4603      	mov	r3, r0
 800bb74:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bb76:	7ffb      	ldrb	r3, [r7, #31]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800bb7c:	7ffb      	ldrb	r3, [r7, #31]
 800bb7e:	e00e      	b.n	800bb9e <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800bb80:	f107 020c 	add.w	r2, r7, #12
 800bb84:	78bb      	ldrb	r3, [r7, #2]
 800bb86:	4611      	mov	r1, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7ff fea9 	bl	800b8e0 <SecureElementSetKey>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bb92:	7ffb      	ldrb	r3, [r7, #31]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800bb98:	7ffb      	ldrb	r3, [r7, #31]
 800bb9a:	e000      	b.n	800bb9e <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bb9c:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b086      	sub	sp, #24
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607b      	str	r3, [r7, #4]
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73fb      	strb	r3, [r7, #15]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <SecureElementProcessJoinAccept+0x24>
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <SecureElementProcessJoinAccept+0x24>
 800bbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e05c      	b.n	800bc88 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bbce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbd2:	2b21      	cmp	r3, #33	@ 0x21
 800bbd4:	d901      	bls.n	800bbda <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bbd6:	2305      	movs	r3, #5
 800bbd8:	e056      	b.n	800bc88 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bbde:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbea:	f00a ff30 	bl	8016a4e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	1c58      	adds	r0, r3, #1
 800bbf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	7dfa      	ldrb	r2, [r7, #23]
 800bc00:	f7ff ff12 	bl	800ba28 <SecureElementAesEncrypt>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bc0a:	2307      	movs	r3, #7
 800bc0c:	e03c      	b.n	800bc88 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc10:	330b      	adds	r3, #11
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	09db      	lsrs	r3, r3, #7
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800bc1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc20:	3b04      	subs	r3, #4
 800bc22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc24:	4413      	add	r3, r2
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc2e:	3b03      	subs	r3, #3
 800bc30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc32:	4413      	add	r3, r2
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	021b      	lsls	r3, r3, #8
 800bc38:	ea41 0203 	orr.w	r2, r1, r3
 800bc3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc40:	3b02      	subs	r3, #2
 800bc42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc44:	440b      	add	r3, r1
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	041b      	lsls	r3, r3, #16
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc54:	440b      	add	r3, r1
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	061b      	lsls	r3, r3, #24
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800bc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10d      	bne.n	800bc82 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800bc66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	2301      	movs	r3, #1
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc74:	f7ff feac 	bl	800b9d0 <SecureElementVerifyAesCmac>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e002      	b.n	800bc88 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800bc82:	2304      	movs	r3, #4
 800bc84:	e000      	b.n	800bc88 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc9e:	2302      	movs	r3, #2
 800bca0:	e007      	b.n	800bcb2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800bca2:	4b06      	ldr	r3, [pc, #24]	@ (800bcbc <SecureElementSetDevEui+0x2c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2208      	movs	r2, #8
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f00a fecf 	bl	8016a4e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bcb0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000408 	.word	0x20000408

0800bcc0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d101      	bne.n	800bcd2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e007      	b.n	800bce2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800bcd2:	4b06      	ldr	r3, [pc, #24]	@ (800bcec <SecureElementGetDevEui+0x2c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2208      	movs	r2, #8
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f00a feb7 	bl	8016a4e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bce0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	20000408 	.word	0x20000408

0800bcf0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e008      	b.n	800bd14 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800bd02:	4b06      	ldr	r3, [pc, #24]	@ (800bd1c <SecureElementSetJoinEui+0x2c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3308      	adds	r3, #8
 800bd08:	2208      	movs	r2, #8
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f00a fe9e 	bl	8016a4e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bd12:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	20000408 	.word	0x20000408

0800bd20 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd2e:	2302      	movs	r3, #2
 800bd30:	e008      	b.n	800bd44 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800bd32:	4b06      	ldr	r3, [pc, #24]	@ (800bd4c <SecureElementGetJoinEui+0x2c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3308      	adds	r3, #8
 800bd38:	2208      	movs	r2, #8
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f00a fe86 	bl	8016a4e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bd42:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	20000408 	.word	0x20000408

0800bd50 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	6039      	str	r1, [r7, #0]
 800bd5a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d104      	bne.n	800bd6c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800bd62:	4b07      	ldr	r3, [pc, #28]	@ (800bd80 <SecureElementSetDevAddr+0x30>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	611a      	str	r2, [r3, #16]
 800bd6a:	e003      	b.n	800bd74 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800bd6c:	4b04      	ldr	r3, [pc, #16]	@ (800bd80 <SecureElementSetDevAddr+0x30>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800bd74:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bc80      	pop	{r7}
 800bd7e:	4770      	bx	lr
 800bd80:	20000408 	.word	0x20000408

0800bd84 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	6039      	str	r1, [r7, #0]
 800bd8e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd96:	2302      	movs	r3, #2
 800bd98:	e00e      	b.n	800bdb8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800bd9a:	79fb      	ldrb	r3, [r7, #7]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d105      	bne.n	800bdac <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800bda0:	4b08      	ldr	r3, [pc, #32]	@ (800bdc4 <SecureElementGetDevAddr+0x40>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	691a      	ldr	r2, [r3, #16]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	e004      	b.n	800bdb6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800bdac:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <SecureElementGetDevAddr+0x40>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	695a      	ldr	r2, [r3, #20]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800bdb6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bc80      	pop	{r7}
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	20000408 	.word	0x20000408

0800bdc8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bdd2:	4a29      	ldr	r2, [pc, #164]	@ (800be78 <LmHandlerInit+0xb0>)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bdd8:	4b28      	ldr	r3, [pc, #160]	@ (800be7c <LmHandlerInit+0xb4>)
 800bdda:	4a29      	ldr	r2, [pc, #164]	@ (800be80 <LmHandlerInit+0xb8>)
 800bddc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bdde:	4b27      	ldr	r3, [pc, #156]	@ (800be7c <LmHandlerInit+0xb4>)
 800bde0:	4a28      	ldr	r2, [pc, #160]	@ (800be84 <LmHandlerInit+0xbc>)
 800bde2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bde4:	4b25      	ldr	r3, [pc, #148]	@ (800be7c <LmHandlerInit+0xb4>)
 800bde6:	4a28      	ldr	r2, [pc, #160]	@ (800be88 <LmHandlerInit+0xc0>)
 800bde8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bdea:	4b24      	ldr	r3, [pc, #144]	@ (800be7c <LmHandlerInit+0xb4>)
 800bdec:	4a27      	ldr	r2, [pc, #156]	@ (800be8c <LmHandlerInit+0xc4>)
 800bdee:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bdf0:	4b21      	ldr	r3, [pc, #132]	@ (800be78 <LmHandlerInit+0xb0>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a26      	ldr	r2, [pc, #152]	@ (800be90 <LmHandlerInit+0xc8>)
 800bdf8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bdfa:	4b1f      	ldr	r3, [pc, #124]	@ (800be78 <LmHandlerInit+0xb0>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	4a23      	ldr	r2, [pc, #140]	@ (800be90 <LmHandlerInit+0xc8>)
 800be02:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800be04:	4b1c      	ldr	r3, [pc, #112]	@ (800be78 <LmHandlerInit+0xb0>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	4a21      	ldr	r2, [pc, #132]	@ (800be90 <LmHandlerInit+0xc8>)
 800be0c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800be0e:	4b1a      	ldr	r3, [pc, #104]	@ (800be78 <LmHandlerInit+0xb0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	4a1e      	ldr	r2, [pc, #120]	@ (800be90 <LmHandlerInit+0xc8>)
 800be16:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800be18:	4b1d      	ldr	r3, [pc, #116]	@ (800be90 <LmHandlerInit+0xc8>)
 800be1a:	4a1e      	ldr	r2, [pc, #120]	@ (800be94 <LmHandlerInit+0xcc>)
 800be1c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800be1e:	4b16      	ldr	r3, [pc, #88]	@ (800be78 <LmHandlerInit+0xb0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	4a1a      	ldr	r2, [pc, #104]	@ (800be90 <LmHandlerInit+0xc8>)
 800be26:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	4a1b      	ldr	r2, [pc, #108]	@ (800be98 <LmHandlerInit+0xd0>)
 800be2c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800be2e:	4b12      	ldr	r3, [pc, #72]	@ (800be78 <LmHandlerInit+0xb0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be34:	4a18      	ldr	r2, [pc, #96]	@ (800be98 <LmHandlerInit+0xd0>)
 800be36:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800be38:	4b17      	ldr	r3, [pc, #92]	@ (800be98 <LmHandlerInit+0xd0>)
 800be3a:	4a18      	ldr	r2, [pc, #96]	@ (800be9c <LmHandlerInit+0xd4>)
 800be3c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800be3e:	4b16      	ldr	r3, [pc, #88]	@ (800be98 <LmHandlerInit+0xd0>)
 800be40:	4a17      	ldr	r2, [pc, #92]	@ (800bea0 <LmHandlerInit+0xd8>)
 800be42:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800be44:	4914      	ldr	r1, [pc, #80]	@ (800be98 <LmHandlerInit+0xd0>)
 800be46:	2000      	movs	r0, #0
 800be48:	f000 fd50 	bl	800c8ec <LmHandlerPackageRegister>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800be52:	f04f 33ff 	mov.w	r3, #4294967295
 800be56:	e00a      	b.n	800be6e <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800be58:	463b      	mov	r3, r7
 800be5a:	4618      	mov	r0, r3
 800be5c:	f001 fc26 	bl	800d6ac <LmhpPackagesRegistrationInit>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800be66:	f04f 33ff 	mov.w	r3, #4294967295
 800be6a:	e000      	b.n	800be6e <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20000460 	.word	0x20000460
 800be7c:	20000464 	.word	0x20000464
 800be80:	0800c5c5 	.word	0x0800c5c5
 800be84:	0800c639 	.word	0x0800c639
 800be88:	0800c709 	.word	0x0800c709
 800be8c:	0800c859 	.word	0x0800c859
 800be90:	20000474 	.word	0x20000474
 800be94:	0800ccb1 	.word	0x0800ccb1
 800be98:	20000424 	.word	0x20000424
 800be9c:	0800cbad 	.word	0x0800cbad
 800bea0:	0800cbe5 	.word	0x0800cbe5

0800bea4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b090      	sub	sp, #64	@ 0x40
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800beac:	2218      	movs	r2, #24
 800beae:	6879      	ldr	r1, [r7, #4]
 800beb0:	4854      	ldr	r0, [pc, #336]	@ (800c004 <LmHandlerConfigure+0x160>)
 800beb2:	f00a fdcc 	bl	8016a4e <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800beb6:	4b54      	ldr	r3, [pc, #336]	@ (800c008 <LmHandlerConfigure+0x164>)
 800beb8:	2200      	movs	r2, #0
 800beba:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800bebc:	f7fe fa04 	bl	800a2c8 <LoraInfo_GetPtr>
 800bec0:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800bec2:	4b50      	ldr	r3, [pc, #320]	@ (800c004 <LmHandlerConfigure+0x160>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	2301      	movs	r3, #1
 800beca:	4093      	lsls	r3, r2
 800becc:	461a      	mov	r2, r3
 800bece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	4013      	ands	r3, r2
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d107      	bne.n	800bee8 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800bed8:	4b4c      	ldr	r3, [pc, #304]	@ (800c00c <LmHandlerConfigure+0x168>)
 800beda:	2201      	movs	r2, #1
 800bedc:	2100      	movs	r1, #0
 800bede:	2000      	movs	r0, #0
 800bee0:	f00f f912 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800bee4:	bf00      	nop
 800bee6:	e7fd      	b.n	800bee4 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800bee8:	4b46      	ldr	r3, [pc, #280]	@ (800c004 <LmHandlerConfigure+0x160>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	4948      	ldr	r1, [pc, #288]	@ (800c010 <LmHandlerConfigure+0x16c>)
 800bef0:	4848      	ldr	r0, [pc, #288]	@ (800c014 <LmHandlerConfigure+0x170>)
 800bef2:	f004 fe59 	bl	8010ba8 <LoRaMacInitialization>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800befc:	f04f 33ff 	mov.w	r3, #4294967295
 800bf00:	e07c      	b.n	800bffc <LmHandlerConfigure+0x158>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800bf02:	2305      	movs	r3, #5
 800bf04:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800bf06:	2300      	movs	r3, #0
 800bf08:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800bf0a:	f107 0314 	add.w	r3, r7, #20
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f005 fbc6 	bl	80116a0 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800bf14:	4b3e      	ldr	r3, [pc, #248]	@ (800c010 <LmHandlerConfigure+0x16c>)
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	4a3d      	ldr	r2, [pc, #244]	@ (800c010 <LmHandlerConfigure+0x16c>)
 800bf1a:	68d2      	ldr	r2, [r2, #12]
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff fc2c 	bl	800b77c <SecureElementInitMcuID>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d002      	beq.n	800bf30 <LmHandlerConfigure+0x8c>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2e:	e065      	b.n	800bffc <LmHandlerConfigure+0x158>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800bf30:	2306      	movs	r3, #6
 800bf32:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bf34:	f107 0314 	add.w	r3, r7, #20
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f005 f9db 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	4a35      	ldr	r2, [pc, #212]	@ (800c018 <LmHandlerConfigure+0x174>)
 800bf42:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bf44:	f107 0314 	add.w	r3, r7, #20
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f005 fba9 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800bf4e:	2302      	movs	r3, #2
 800bf50:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800bf52:	4b31      	ldr	r3, [pc, #196]	@ (800c018 <LmHandlerConfigure+0x174>)
 800bf54:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bf56:	f107 0314 	add.w	r3, r7, #20
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f005 f9ca 	bl	80112f4 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800bf60:	2303      	movs	r3, #3
 800bf62:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800bf64:	4b2d      	ldr	r3, [pc, #180]	@ (800c01c <LmHandlerConfigure+0x178>)
 800bf66:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bf68:	f107 0314 	add.w	r3, r7, #20
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f005 f9c1 	bl	80112f4 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800bf72:	f7ff fc83 	bl	800b87c <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800bf76:	230f      	movs	r3, #15
 800bf78:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bf7e:	f107 0314 	add.w	r3, r7, #20
 800bf82:	4618      	mov	r0, r3
 800bf84:	f005 fb8c 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800bf88:	2310      	movs	r3, #16
 800bf8a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bf90:	f107 0314 	add.w	r3, r7, #20
 800bf94:	4618      	mov	r0, r3
 800bf96:	f005 fb83 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800bf9a:	2304      	movs	r3, #4
 800bf9c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800bf9e:	4b19      	ldr	r3, [pc, #100]	@ (800c004 <LmHandlerConfigure+0x160>)
 800bfa0:	789b      	ldrb	r3, [r3, #2]
 800bfa2:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bfa4:	f107 0314 	add.w	r3, r7, #20
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f005 fb79 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800bfae:	233a      	movs	r3, #58	@ 0x3a
 800bfb0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800bfb2:	4b14      	ldr	r3, [pc, #80]	@ (800c004 <LmHandlerConfigure+0x160>)
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bfb8:	f107 0314 	add.w	r3, r7, #20
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f005 fb6f 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bfc2:	230f      	movs	r3, #15
 800bfc4:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800c004 <LmHandlerConfigure+0x160>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	f107 020c 	add.w	r2, r7, #12
 800bfce:	4611      	mov	r1, r2
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f008 fb11 	bl	80145f8 <RegionGetPhyParam>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	bf14      	ite	ne
 800bfe0:	2301      	movne	r3, #1
 800bfe2:	2300      	moveq	r3, #0
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	4b07      	ldr	r3, [pc, #28]	@ (800c004 <LmHandlerConfigure+0x160>)
 800bfe8:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800bfea:	2014      	movs	r0, #20
 800bfec:	f000 fad2 	bl	800c594 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800bff0:	4b04      	ldr	r3, [pc, #16]	@ (800c004 <LmHandlerConfigure+0x160>)
 800bff2:	79db      	ldrb	r3, [r3, #7]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f006 fa31 	bl	801245c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3740      	adds	r7, #64	@ 0x40
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20000448 	.word	0x20000448
 800c008:	20000490 	.word	0x20000490
 800c00c:	0801c280 	.word	0x0801c280
 800c010:	20000474 	.word	0x20000474
 800c014:	20000464 	.word	0x20000464
 800c018:	2000040c 	.word	0x2000040c
 800c01c:	20000414 	.word	0x20000414

0800c020 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800c026:	f002 fdc1 	bl	800ebac <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800c02a:	f000 fd8b 	bl	800cb44 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800c02e:	f000 fd5f 	bl	800caf0 <LmHandlerPackageIsTxPending>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d117      	bne.n	800c068 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800c038:	4b0d      	ldr	r3, [pc, #52]	@ (800c070 <LmHandlerProcess+0x50>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d014      	beq.n	800c06a <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800c040:	2300      	movs	r3, #0
 800c042:	703b      	strb	r3, [r7, #0]
 800c044:	2300      	movs	r3, #0
 800c046:	707b      	strb	r3, [r7, #1]
 800c048:	2300      	movs	r3, #0
 800c04a:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c04c:	4b09      	ldr	r3, [pc, #36]	@ (800c074 <LmHandlerProcess+0x54>)
 800c04e:	78d9      	ldrb	r1, [r3, #3]
 800c050:	463b      	mov	r3, r7
 800c052:	2200      	movs	r2, #0
 800c054:	4618      	mov	r0, r3
 800c056:	f000 f8d7 	bl	800c208 <LmHandlerSend>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d104      	bne.n	800c06a <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c060:	4b03      	ldr	r3, [pc, #12]	@ (800c070 <LmHandlerProcess+0x50>)
 800c062:	2200      	movs	r2, #0
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	e000      	b.n	800c06a <LmHandlerProcess+0x4a>
        return;
 800c068:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	20000490 	.word	0x20000490
 800c074:	20000448 	.word	0x20000448

0800c078 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c078:	b480      	push	{r7}
 800c07a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c07e:	681b      	ldr	r3, [r3, #0]
}
 800c080:	4618      	mov	r0, r3
 800c082:	46bd      	mov	sp, r7
 800c084:	bc80      	pop	{r7}
 800c086:	4770      	bx	lr
 800c088:	2000048c 	.word	0x2000048c

0800c08c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b092      	sub	sp, #72	@ 0x48
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	460a      	mov	r2, r1
 800c096:	71fb      	strb	r3, [r7, #7]
 800c098:	4613      	mov	r3, r2
 800c09a:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c09c:	2301      	movs	r3, #1
 800c09e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c0a2:	4b46      	ldr	r3, [pc, #280]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c0a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800c0ae:	4b43      	ldr	r3, [pc, #268]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c0b0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c0b4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800c0b8:	79fb      	ldrb	r3, [r7, #7]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d10b      	bne.n	800c0d6 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c0be:	2302      	movs	r3, #2
 800c0c0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c0c4:	4b3e      	ldr	r3, [pc, #248]	@ (800c1c0 <LmHandlerJoin+0x134>)
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800c0ca:	4a3d      	ldr	r2, [pc, #244]	@ (800c1c0 <LmHandlerJoin+0x134>)
 800c0cc:	79bb      	ldrb	r3, [r7, #6]
 800c0ce:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800c0d0:	f005 f820 	bl	8011114 <LoRaMacStart>
 800c0d4:	e05c      	b.n	800c190 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c0dc:	4b38      	ldr	r3, [pc, #224]	@ (800c1c0 <LmHandlerJoin+0x134>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c0e2:	4b36      	ldr	r3, [pc, #216]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c0e4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c0e8:	4b35      	ldr	r3, [pc, #212]	@ (800c1c0 <LmHandlerJoin+0x134>)
 800c0ea:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800c0ec:	4b33      	ldr	r3, [pc, #204]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c0ee:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800c0f2:	4b33      	ldr	r3, [pc, #204]	@ (800c1c0 <LmHandlerJoin+0x134>)
 800c0f4:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c0f6:	4b32      	ldr	r3, [pc, #200]	@ (800c1c0 <LmHandlerJoin+0x134>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c0fc:	4a30      	ldr	r2, [pc, #192]	@ (800c1c0 <LmHandlerJoin+0x134>)
 800c0fe:	79bb      	ldrb	r3, [r7, #6]
 800c100:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800c102:	4b30      	ldr	r3, [pc, #192]	@ (800c1c4 <LmHandlerJoin+0x138>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	f083 0301 	eor.w	r3, r3, #1
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d034      	beq.n	800c17a <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c110:	231f      	movs	r3, #31
 800c112:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c114:	4b29      	ldr	r3, [pc, #164]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c116:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c11a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c11c:	f107 030c 	add.w	r3, r7, #12
 800c120:	4618      	mov	r0, r3
 800c122:	f005 fabd 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c126:	2320      	movs	r3, #32
 800c128:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c12a:	4b24      	ldr	r3, [pc, #144]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c12c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c130:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c132:	f107 030c 	add.w	r3, r7, #12
 800c136:	4618      	mov	r0, r3
 800c138:	f005 fab2 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800c13c:	2322      	movs	r3, #34	@ 0x22
 800c13e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800c140:	4b1e      	ldr	r3, [pc, #120]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c142:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c146:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c148:	f107 030c 	add.w	r3, r7, #12
 800c14c:	4618      	mov	r0, r3
 800c14e:	f005 faa7 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c152:	2321      	movs	r3, #33	@ 0x21
 800c154:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800c156:	4b19      	ldr	r3, [pc, #100]	@ (800c1bc <LmHandlerJoin+0x130>)
 800c158:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c15c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c15e:	f107 030c 	add.w	r3, r7, #12
 800c162:	4618      	mov	r0, r3
 800c164:	f005 fa9c 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c168:	2329      	movs	r3, #41	@ 0x29
 800c16a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c16c:	4b16      	ldr	r3, [pc, #88]	@ (800c1c8 <LmHandlerJoin+0x13c>)
 800c16e:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c170:	f107 030c 	add.w	r3, r7, #12
 800c174:	4618      	mov	r0, r3
 800c176:	f005 fa93 	bl	80116a0 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800c17a:	f004 ffcb 	bl	8011114 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c17e:	2301      	movs	r3, #1
 800c180:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c182:	2301      	movs	r3, #1
 800c184:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c186:	f107 030c 	add.w	r3, r7, #12
 800c18a:	4618      	mov	r0, r3
 800c18c:	f005 fa88 	bl	80116a0 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800c190:	4b0c      	ldr	r3, [pc, #48]	@ (800c1c4 <LmHandlerJoin+0x138>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	f083 0301 	eor.w	r3, r3, #1
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d102      	bne.n	800c1a4 <LmHandlerJoin+0x118>
 800c19e:	79bb      	ldrb	r3, [r7, #6]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d004      	beq.n	800c1ae <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800c1a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f005 fe7b 	bl	8011ea4 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c1ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b0:	4a06      	ldr	r2, [pc, #24]	@ (800c1cc <LmHandlerJoin+0x140>)
 800c1b2:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c1b4:	bf00      	nop
 800c1b6:	3748      	adds	r7, #72	@ 0x48
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	20000448 	.word	0x20000448
 800c1c0:	20000074 	.word	0x20000074
 800c1c4:	20000586 	.word	0x20000586
 800c1c8:	01000400 	.word	0x01000400
 800c1cc:	2000048c 	.word	0x2000048c

0800c1d0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b08c      	sub	sp, #48	@ 0x30
 800c1d4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c1da:	1d3b      	adds	r3, r7, #4
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f005 f889 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800c1e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d106      	bne.n	800c1fe <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c1f0:	7a3b      	ldrb	r3, [r7, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	e002      	b.n	800c200 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c1fe:	2300      	movs	r3, #0
    }
}
 800c200:	4618      	mov	r0, r3
 800c202:	3730      	adds	r7, #48	@ 0x30
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b08a      	sub	sp, #40	@ 0x28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
 800c214:	4613      	mov	r3, r2
 800c216:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c218:	23ff      	movs	r3, #255	@ 0xff
 800c21a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800c21e:	f002 fa1f 	bl	800e660 <LoRaMacIsBusy>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c228:	f06f 0301 	mvn.w	r3, #1
 800c22c:	e0ab      	b.n	800c386 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800c22e:	f002 fa3f 	bl	800e6b0 <LoRaMacIsStopped>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c238:	f06f 0302 	mvn.w	r3, #2
 800c23c:	e0a3      	b.n	800c386 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c23e:	f7ff ffc7 	bl	800c1d0 <LmHandlerJoinStatus>
 800c242:	4603      	mov	r3, r0
 800c244:	2b01      	cmp	r3, #1
 800c246:	d00a      	beq.n	800c25e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c248:	4b51      	ldr	r3, [pc, #324]	@ (800c390 <LmHandlerSend+0x188>)
 800c24a:	79db      	ldrb	r3, [r3, #7]
 800c24c:	4a50      	ldr	r2, [pc, #320]	@ (800c390 <LmHandlerSend+0x188>)
 800c24e:	7a12      	ldrb	r2, [r2, #8]
 800c250:	4611      	mov	r1, r2
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff ff1a 	bl	800c08c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c258:	f06f 0302 	mvn.w	r3, #2
 800c25c:	e093      	b.n	800c386 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c25e:	4a4d      	ldr	r2, [pc, #308]	@ (800c394 <LmHandlerSend+0x18c>)
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c264:	78fb      	ldrb	r3, [r7, #3]
 800c266:	2b00      	cmp	r3, #0
 800c268:	bf14      	ite	ne
 800c26a:	2301      	movne	r3, #1
 800c26c:	2300      	moveq	r3, #0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c272:	4b49      	ldr	r3, [pc, #292]	@ (800c398 <LmHandlerSend+0x190>)
 800c274:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c278:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	f107 020c 	add.w	r2, r7, #12
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f004 ffa5 	bl	80111d4 <LoRaMacQueryTxPossible>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c290:	2300      	movs	r3, #0
 800c292:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c294:	2300      	movs	r3, #0
 800c296:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c29c:	23f9      	movs	r3, #249	@ 0xf9
 800c29e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c2a2:	e008      	b.n	800c2b6 <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c2b6:	4b37      	ldr	r3, [pc, #220]	@ (800c394 <LmHandlerSend+0x18c>)
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	3310      	adds	r3, #16
 800c2bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2c0:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c2c4:	4b34      	ldr	r3, [pc, #208]	@ (800c398 <LmHandlerSend+0x190>)
 800c2c6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c2ca:	4b32      	ldr	r3, [pc, #200]	@ (800c394 <LmHandlerSend+0x18c>)
 800c2cc:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800c2ce:	78ba      	ldrb	r2, [r7, #2]
 800c2d0:	f107 0310 	add.w	r3, r7, #16
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f005 ff88 	bl	80121ec <LoRaMacMcpsRequest>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	4a2d      	ldr	r2, [pc, #180]	@ (800c39c <LmHandlerSend+0x194>)
 800c2e6:	6013      	str	r3, [r2, #0]

    switch( status )
 800c2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c2ec:	2b11      	cmp	r3, #17
 800c2ee:	d843      	bhi.n	800c378 <LmHandlerSend+0x170>
 800c2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f8 <LmHandlerSend+0xf0>)
 800c2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f6:	bf00      	nop
 800c2f8:	0800c341 	.word	0x0800c341
 800c2fc:	0800c359 	.word	0x0800c359
 800c300:	0800c379 	.word	0x0800c379
 800c304:	0800c379 	.word	0x0800c379
 800c308:	0800c379 	.word	0x0800c379
 800c30c:	0800c379 	.word	0x0800c379
 800c310:	0800c379 	.word	0x0800c379
 800c314:	0800c361 	.word	0x0800c361
 800c318:	0800c379 	.word	0x0800c379
 800c31c:	0800c379 	.word	0x0800c379
 800c320:	0800c379 	.word	0x0800c379
 800c324:	0800c371 	.word	0x0800c371
 800c328:	0800c379 	.word	0x0800c379
 800c32c:	0800c379 	.word	0x0800c379
 800c330:	0800c359 	.word	0x0800c359
 800c334:	0800c359 	.word	0x0800c359
 800c338:	0800c359 	.word	0x0800c359
 800c33c:	0800c369 	.word	0x0800c369
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800c340:	4b17      	ldr	r3, [pc, #92]	@ (800c3a0 <LmHandlerSend+0x198>)
 800c342:	2200      	movs	r2, #0
 800c344:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800c346:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c34a:	f113 0f07 	cmn.w	r3, #7
 800c34e:	d017      	beq.n	800c380 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c350:	2300      	movs	r3, #0
 800c352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c356:	e013      	b.n	800c380 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c358:	23fe      	movs	r3, #254	@ 0xfe
 800c35a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c35e:	e010      	b.n	800c382 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c360:	23fd      	movs	r3, #253	@ 0xfd
 800c362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c366:	e00c      	b.n	800c382 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c368:	23fb      	movs	r3, #251	@ 0xfb
 800c36a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c36e:	e008      	b.n	800c382 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c370:	23fa      	movs	r3, #250	@ 0xfa
 800c372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c376:	e004      	b.n	800c382 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c378:	23ff      	movs	r3, #255	@ 0xff
 800c37a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c37e:	e000      	b.n	800c382 <LmHandlerSend+0x17a>
            break;
 800c380:	bf00      	nop
    }

    return lmhStatus;
 800c382:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c386:	4618      	mov	r0, r3
 800c388:	3728      	adds	r7, #40	@ 0x28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	20000074 	.word	0x20000074
 800c394:	20000080 	.word	0x20000080
 800c398:	20000448 	.word	0x20000448
 800c39c:	2000048c 	.word	0x2000048c
 800c3a0:	20000490 	.word	0x20000490

0800c3a4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c3aa:	2309      	movs	r3, #9
 800c3ac:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c3ae:	463b      	mov	r3, r7
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f005 fd77 	bl	8011ea4 <LoRaMacMlmeRequest>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	4a06      	ldr	r2, [pc, #24]	@ (800c3d8 <LmHandlerDeviceTimeReq+0x34>)
 800c3be:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	e001      	b.n	800c3ce <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c3ca:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	2000048c 	.word	0x2000048c

0800c3dc <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c3e6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bc80      	pop	{r7}
 800c3f2:	4770      	bx	lr

0800c3f4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08e      	sub	sp, #56	@ 0x38
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c3fe:	2300      	movs	r3, #0
 800c400:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800c404:	f002 f92c 	bl	800e660 <LoRaMacIsBusy>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d002      	beq.n	800c414 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c40e:	f06f 0301 	mvn.w	r3, #1
 800c412:	e071      	b.n	800c4f8 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800c414:	f7ff fedc 	bl	800c1d0 <LmHandlerJoinStatus>
 800c418:	4603      	mov	r3, r0
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d002      	beq.n	800c424 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c41e:	f06f 0302 	mvn.w	r3, #2
 800c422:	e069      	b.n	800c4f8 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c424:	2300      	movs	r3, #0
 800c426:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c428:	f107 030c 	add.w	r3, r7, #12
 800c42c:	4618      	mov	r0, r3
 800c42e:	f004 ff61 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c438:	f04f 33ff 	mov.w	r3, #4294967295
 800c43c:	e05c      	b.n	800c4f8 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c43e:	7c3b      	ldrb	r3, [r7, #16]
 800c440:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800c444:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d052      	beq.n	800c4f4 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d028      	beq.n	800c4a6 <LmHandlerRequestClass+0xb2>
 800c454:	2b02      	cmp	r3, #2
 800c456:	dc48      	bgt.n	800c4ea <LmHandlerRequestClass+0xf6>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <LmHandlerRequestClass+0x6e>
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d01e      	beq.n	800c49e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800c460:	e043      	b.n	800c4ea <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800c462:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c466:	2b00      	cmp	r3, #0
 800c468:	d041      	beq.n	800c4ee <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800c46a:	79fb      	ldrb	r3, [r7, #7]
 800c46c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c46e:	f107 030c 	add.w	r3, r7, #12
 800c472:	4618      	mov	r0, r3
 800c474:	f005 f914 	bl	80116a0 <LoRaMacMibSetRequestConfirm>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10b      	bne.n	800c496 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c47e:	4b20      	ldr	r3, [pc, #128]	@ (800c500 <LmHandlerRequestClass+0x10c>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c484:	2b00      	cmp	r3, #0
 800c486:	d032      	beq.n	800c4ee <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c488:	4b1d      	ldr	r3, [pc, #116]	@ (800c500 <LmHandlerRequestClass+0x10c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c48e:	79fa      	ldrb	r2, [r7, #7]
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
                break;
 800c494:	e02b      	b.n	800c4ee <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c496:	23ff      	movs	r3, #255	@ 0xff
 800c498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c49c:	e027      	b.n	800c4ee <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c49e:	23ff      	movs	r3, #255	@ 0xff
 800c4a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c4a4:	e026      	b.n	800c4f4 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800c4a6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c4ae:	23ff      	movs	r3, #255	@ 0xff
 800c4b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c4b4:	e01d      	b.n	800c4f2 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c4ba:	f107 030c 	add.w	r3, r7, #12
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f005 f8ee 	bl	80116a0 <LoRaMacMibSetRequestConfirm>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10b      	bne.n	800c4e2 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c500 <LmHandlerRequestClass+0x10c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00e      	beq.n	800c4f2 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c4d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c500 <LmHandlerRequestClass+0x10c>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4da:	79fa      	ldrb	r2, [r7, #7]
 800c4dc:	4610      	mov	r0, r2
 800c4de:	4798      	blx	r3
                break;
 800c4e0:	e007      	b.n	800c4f2 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c4e2:	23ff      	movs	r3, #255	@ 0xff
 800c4e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c4e8:	e003      	b.n	800c4f2 <LmHandlerRequestClass+0xfe>
                break;
 800c4ea:	bf00      	nop
 800c4ec:	e002      	b.n	800c4f4 <LmHandlerRequestClass+0x100>
                break;
 800c4ee:	bf00      	nop
 800c4f0:	e000      	b.n	800c4f4 <LmHandlerRequestClass+0x100>
                break;
 800c4f2:	bf00      	nop
        }
    }
    return errorStatus;
 800c4f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3738      	adds	r7, #56	@ 0x38
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20000460 	.word	0x20000460

0800c504 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b08c      	sub	sp, #48	@ 0x30
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d102      	bne.n	800c518 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c512:	f04f 33ff 	mov.w	r3, #4294967295
 800c516:	e010      	b.n	800c53a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c518:	2300      	movs	r3, #0
 800c51a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c51c:	f107 0308 	add.w	r3, r7, #8
 800c520:	4618      	mov	r0, r3
 800c522:	f004 fee7 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c52c:	f04f 33ff 	mov.w	r3, #4294967295
 800c530:	e003      	b.n	800c53a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c532:	7b3a      	ldrb	r2, [r7, #12]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3730      	adds	r7, #48	@ 0x30
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08c      	sub	sp, #48	@ 0x30
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d102      	bne.n	800c558 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c552:	f04f 33ff 	mov.w	r3, #4294967295
 800c556:	e016      	b.n	800c586 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c558:	2320      	movs	r3, #32
 800c55a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800c55c:	f107 0308 	add.w	r3, r7, #8
 800c560:	4618      	mov	r0, r3
 800c562:	f004 fec7 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c56c:	f04f 33ff 	mov.w	r3, #4294967295
 800c570:	e009      	b.n	800c586 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c572:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f993 2000 	ldrsb.w	r2, [r3]
 800c580:	4b03      	ldr	r3, [pc, #12]	@ (800c590 <LmHandlerGetTxDatarate+0x4c>)
 800c582:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3730      	adds	r7, #48	@ 0x30
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000448 	.word	0x20000448

0800c594 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08c      	sub	sp, #48	@ 0x30
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c59c:	2323      	movs	r3, #35	@ 0x23
 800c59e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c5a4:	f107 0308 	add.w	r3, r7, #8
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f005 f879 	bl	80116a0 <LoRaMacMibSetRequestConfirm>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b8:	e000      	b.n	800c5bc <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3730      	adds	r7, #48	@ 0x30
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c5cc:	4b18      	ldr	r3, [pc, #96]	@ (800c630 <McpsConfirm+0x6c>)
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	785a      	ldrb	r2, [r3, #1]
 800c5d6:	4b16      	ldr	r3, [pc, #88]	@ (800c630 <McpsConfirm+0x6c>)
 800c5d8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	789b      	ldrb	r3, [r3, #2]
 800c5de:	b25a      	sxtb	r2, r3
 800c5e0:	4b13      	ldr	r3, [pc, #76]	@ (800c630 <McpsConfirm+0x6c>)
 800c5e2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	4a11      	ldr	r2, [pc, #68]	@ (800c630 <McpsConfirm+0x6c>)
 800c5ea:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c5f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c630 <McpsConfirm+0x6c>)
 800c5f4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <McpsConfirm+0x6c>)
 800c5fe:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	791b      	ldrb	r3, [r3, #4]
 800c604:	461a      	mov	r2, r3
 800c606:	4b0a      	ldr	r3, [pc, #40]	@ (800c630 <McpsConfirm+0x6c>)
 800c608:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800c60a:	4b0a      	ldr	r3, [pc, #40]	@ (800c634 <McpsConfirm+0x70>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c610:	2b00      	cmp	r3, #0
 800c612:	d004      	beq.n	800c61e <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c614:	4b07      	ldr	r3, [pc, #28]	@ (800c634 <McpsConfirm+0x70>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61a:	4805      	ldr	r0, [pc, #20]	@ (800c630 <McpsConfirm+0x6c>)
 800c61c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	2000      	movs	r0, #0
 800c622:	f000 f9e9 	bl	800c9f8 <LmHandlerPackagesNotify>
}
 800c626:	bf00      	nop
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20000080 	.word	0x20000080
 800c634:	20000460 	.word	0x20000460

0800c638 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b086      	sub	sp, #24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c642:	2300      	movs	r3, #0
 800c644:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800c646:	4b2d      	ldr	r3, [pc, #180]	@ (800c6fc <McpsIndication+0xc4>)
 800c648:	2201      	movs	r2, #1
 800c64a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	785a      	ldrb	r2, [r3, #1]
 800c650:	4b2a      	ldr	r3, [pc, #168]	@ (800c6fc <McpsIndication+0xc4>)
 800c652:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c654:	4b29      	ldr	r3, [pc, #164]	@ (800c6fc <McpsIndication+0xc4>)
 800c656:	785b      	ldrb	r3, [r3, #1]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d14b      	bne.n	800c6f4 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	791b      	ldrb	r3, [r3, #4]
 800c660:	b25a      	sxtb	r2, r3
 800c662:	4b26      	ldr	r3, [pc, #152]	@ (800c6fc <McpsIndication+0xc4>)
 800c664:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c66c:	b25a      	sxtb	r2, r3
 800c66e:	4b23      	ldr	r3, [pc, #140]	@ (800c6fc <McpsIndication+0xc4>)
 800c670:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c678:	4b20      	ldr	r3, [pc, #128]	@ (800c6fc <McpsIndication+0xc4>)
 800c67a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	78da      	ldrb	r2, [r3, #3]
 800c680:	4b1e      	ldr	r3, [pc, #120]	@ (800c6fc <McpsIndication+0xc4>)
 800c682:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	4a1c      	ldr	r2, [pc, #112]	@ (800c6fc <McpsIndication+0xc4>)
 800c68a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	78db      	ldrb	r3, [r3, #3]
 800c690:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	7b1b      	ldrb	r3, [r3, #12]
 800c696:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800c69e:	4b18      	ldr	r3, [pc, #96]	@ (800c700 <McpsIndication+0xc8>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c6a8:	4b15      	ldr	r3, [pc, #84]	@ (800c700 <McpsIndication+0xc8>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ae:	f107 0210 	add.w	r2, r7, #16
 800c6b2:	4912      	ldr	r1, [pc, #72]	@ (800c6fc <McpsIndication+0xc4>)
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800c6b8:	4b11      	ldr	r3, [pc, #68]	@ (800c700 <McpsIndication+0xc8>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <McpsIndication+0x9a>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	7e1b      	ldrb	r3, [r3, #24]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c700 <McpsIndication+0xc8>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6d0:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c6d2:	6879      	ldr	r1, [r7, #4]
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	f000 f98f 	bl	800c9f8 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c6da:	f107 030f 	add.w	r3, r7, #15
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff ff10 	bl	800c504 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	795b      	ldrb	r3, [r3, #5]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d004      	beq.n	800c6f6 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800c6ec:	4b05      	ldr	r3, [pc, #20]	@ (800c704 <McpsIndication+0xcc>)
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	e000      	b.n	800c6f6 <McpsIndication+0xbe>
        return;
 800c6f4:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	2000009c 	.word	0x2000009c
 800c700:	20000460 	.word	0x20000460
 800c704:	20000490 	.word	0x20000490

0800c708 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08c      	sub	sp, #48	@ 0x30
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c710:	4b49      	ldr	r3, [pc, #292]	@ (800c838 <MlmeConfirm+0x130>)
 800c712:	2200      	movs	r2, #0
 800c714:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	785a      	ldrb	r2, [r3, #1]
 800c71a:	4b47      	ldr	r3, [pc, #284]	@ (800c838 <MlmeConfirm+0x130>)
 800c71c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800c71e:	4b47      	ldr	r3, [pc, #284]	@ (800c83c <MlmeConfirm+0x134>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c724:	2b00      	cmp	r3, #0
 800c726:	d004      	beq.n	800c732 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c728:	4b44      	ldr	r3, [pc, #272]	@ (800c83c <MlmeConfirm+0x134>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c72e:	4842      	ldr	r0, [pc, #264]	@ (800c838 <MlmeConfirm+0x130>)
 800c730:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	2002      	movs	r0, #2
 800c736:	f000 f95f 	bl	800c9f8 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	3b01      	subs	r3, #1
 800c740:	2b0b      	cmp	r3, #11
 800c742:	d872      	bhi.n	800c82a <MlmeConfirm+0x122>
 800c744:	a201      	add	r2, pc, #4	@ (adr r2, 800c74c <MlmeConfirm+0x44>)
 800c746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74a:	bf00      	nop
 800c74c:	0800c77d 	.word	0x0800c77d
 800c750:	0800c82b 	.word	0x0800c82b
 800c754:	0800c82b 	.word	0x0800c82b
 800c758:	0800c82b 	.word	0x0800c82b
 800c75c:	0800c7f9 	.word	0x0800c7f9
 800c760:	0800c82b 	.word	0x0800c82b
 800c764:	0800c82b 	.word	0x0800c82b
 800c768:	0800c82b 	.word	0x0800c82b
 800c76c:	0800c82b 	.word	0x0800c82b
 800c770:	0800c82b 	.word	0x0800c82b
 800c774:	0800c811 	.word	0x0800c811
 800c778:	0800c82b 	.word	0x0800c82b
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800c77c:	2306      	movs	r3, #6
 800c77e:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800c780:	f107 0308 	add.w	r3, r7, #8
 800c784:	4618      	mov	r0, r3
 800c786:	f004 fdb5 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800c78a:	4b2d      	ldr	r3, [pc, #180]	@ (800c840 <MlmeConfirm+0x138>)
 800c78c:	79db      	ldrb	r3, [r3, #7]
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	4611      	mov	r1, r2
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff fadc 	bl	800bd50 <SecureElementSetDevAddr>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d102      	bne.n	800c7a4 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	4a28      	ldr	r2, [pc, #160]	@ (800c844 <MlmeConfirm+0x13c>)
 800c7a2:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c7a4:	4828      	ldr	r0, [pc, #160]	@ (800c848 <MlmeConfirm+0x140>)
 800c7a6:	f7ff fecd 	bl	800c544 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800c7aa:	4828      	ldr	r0, [pc, #160]	@ (800c84c <MlmeConfirm+0x144>)
 800c7ac:	f000 fa50 	bl	800cc50 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c7b0:	4b21      	ldr	r3, [pc, #132]	@ (800c838 <MlmeConfirm+0x130>)
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d108      	bne.n	800c7ca <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c7b8:	4b21      	ldr	r3, [pc, #132]	@ (800c840 <MlmeConfirm+0x138>)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800c7be:	4b24      	ldr	r3, [pc, #144]	@ (800c850 <MlmeConfirm+0x148>)
 800c7c0:	785b      	ldrb	r3, [r3, #1]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff fe16 	bl	800c3f4 <LmHandlerRequestClass>
 800c7c8:	e002      	b.n	800c7d0 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c7ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c840 <MlmeConfirm+0x138>)
 800c7cc:	22ff      	movs	r2, #255	@ 0xff
 800c7ce:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800c7d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c83c <MlmeConfirm+0x134>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d004      	beq.n	800c7e4 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c7da:	4b18      	ldr	r3, [pc, #96]	@ (800c83c <MlmeConfirm+0x134>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e0:	4817      	ldr	r0, [pc, #92]	@ (800c840 <MlmeConfirm+0x138>)
 800c7e2:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c7e4:	4b14      	ldr	r3, [pc, #80]	@ (800c838 <MlmeConfirm+0x130>)
 800c7e6:	785b      	ldrb	r3, [r3, #1]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d120      	bne.n	800c82e <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800c7ec:	4b14      	ldr	r3, [pc, #80]	@ (800c840 <MlmeConfirm+0x138>)
 800c7ee:	79db      	ldrb	r3, [r3, #7]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff f857 	bl	800b8a4 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800c7f6:	e01a      	b.n	800c82e <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800c7f8:	4b16      	ldr	r3, [pc, #88]	@ (800c854 <MlmeConfirm+0x14c>)
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	7a1a      	ldrb	r2, [r3, #8]
 800c802:	4b14      	ldr	r3, [pc, #80]	@ (800c854 <MlmeConfirm+0x14c>)
 800c804:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7a5a      	ldrb	r2, [r3, #9]
 800c80a:	4b12      	ldr	r3, [pc, #72]	@ (800c854 <MlmeConfirm+0x14c>)
 800c80c:	74da      	strb	r2, [r3, #19]
            }
            break;
 800c80e:	e00f      	b.n	800c830 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	785b      	ldrb	r3, [r3, #1]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d105      	bne.n	800c824 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c818:	4b0d      	ldr	r3, [pc, #52]	@ (800c850 <MlmeConfirm+0x148>)
 800c81a:	7c1b      	ldrb	r3, [r3, #16]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff fddd 	bl	800c3dc <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800c822:	e005      	b.n	800c830 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800c824:	f7ff fdbe 	bl	800c3a4 <LmHandlerDeviceTimeReq>
            break;
 800c828:	e002      	b.n	800c830 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c82a:	bf00      	nop
 800c82c:	e000      	b.n	800c830 <MlmeConfirm+0x128>
            break;
 800c82e:	bf00      	nop
    }
}
 800c830:	bf00      	nop
 800c832:	3730      	adds	r7, #48	@ 0x30
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	20000080 	.word	0x20000080
 800c83c:	20000460 	.word	0x20000460
 800c840:	20000074 	.word	0x20000074
 800c844:	2000040c 	.word	0x2000040c
 800c848:	20000078 	.word	0x20000078
 800c84c:	20000079 	.word	0x20000079
 800c850:	20000448 	.word	0x20000448
 800c854:	2000009c 	.word	0x2000009c

0800c858 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c862:	4b20      	ldr	r3, [pc, #128]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c864:	2200      	movs	r2, #0
 800c866:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	785a      	ldrb	r2, [r3, #1]
 800c86c:	4b1d      	ldr	r3, [pc, #116]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c86e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	789b      	ldrb	r3, [r3, #2]
 800c874:	b25a      	sxtb	r2, r3
 800c876:	4b1b      	ldr	r3, [pc, #108]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c878:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c880:	b25a      	sxtb	r2, r3
 800c882:	4b18      	ldr	r3, [pc, #96]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c884:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c88c:	4b15      	ldr	r3, [pc, #84]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c88e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	78da      	ldrb	r2, [r3, #3]
 800c894:	4b13      	ldr	r3, [pc, #76]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c896:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	4a11      	ldr	r2, [pc, #68]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c89e:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800c8a0:	4b11      	ldr	r3, [pc, #68]	@ (800c8e8 <MlmeIndication+0x90>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00d      	beq.n	800c8c6 <MlmeIndication+0x6e>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	2b0a      	cmp	r3, #10
 800c8b0:	d009      	beq.n	800c8c6 <MlmeIndication+0x6e>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b0e      	cmp	r3, #14
 800c8b8:	d005      	beq.n	800c8c6 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c8ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e8 <MlmeIndication+0x90>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c0:	4908      	ldr	r1, [pc, #32]	@ (800c8e4 <MlmeIndication+0x8c>)
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c8c6:	6879      	ldr	r1, [r7, #4]
 800c8c8:	2003      	movs	r0, #3
 800c8ca:	f000 f895 	bl	800c9f8 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	2b0a      	cmp	r3, #10
 800c8d4:	d001      	beq.n	800c8da <MlmeIndication+0x82>
 800c8d6:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c8d8:	e000      	b.n	800c8dc <MlmeIndication+0x84>
            break;
 800c8da:	bf00      	nop
    }
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	2000009c 	.word	0x2000009c
 800c8e8:	20000460 	.word	0x20000460

0800c8ec <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	6039      	str	r1, [r7, #0]
 800c8f6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c8fc:	79fb      	ldrb	r3, [r7, #7]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d104      	bne.n	800c90c <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800c902:	f000 f9eb 	bl	800ccdc <LmhpCompliancePackageFactory>
 800c906:	4603      	mov	r3, r0
 800c908:	60fb      	str	r3, [r7, #12]
                break;
 800c90a:	e00d      	b.n	800c928 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800c90c:	f107 020c 	add.w	r2, r7, #12
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	4611      	mov	r1, r2
 800c914:	4618      	mov	r0, r3
 800c916:	f000 fed3 	bl	800d6c0 <LmhpPackagesRegister>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800c920:	f04f 33ff 	mov.w	r3, #4294967295
 800c924:	e03b      	b.n	800c99e <LmHandlerPackageRegister+0xb2>
                }
                break;
 800c926:	bf00      	nop
            }
    }
    if( package != NULL )
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d035      	beq.n	800c99a <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800c92e:	79fb      	ldrb	r3, [r7, #7]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	491d      	ldr	r1, [pc, #116]	@ (800c9a8 <LmHandlerPackageRegister+0xbc>)
 800c934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c938:	79fb      	ldrb	r3, [r7, #7]
 800c93a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9a8 <LmHandlerPackageRegister+0xbc>)
 800c93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c940:	4a1a      	ldr	r2, [pc, #104]	@ (800c9ac <LmHandlerPackageRegister+0xc0>)
 800c942:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800c944:	4b1a      	ldr	r3, [pc, #104]	@ (800c9b0 <LmHandlerPackageRegister+0xc4>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	4917      	ldr	r1, [pc, #92]	@ (800c9a8 <LmHandlerPackageRegister+0xbc>)
 800c94c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c950:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c952:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800c954:	4b16      	ldr	r3, [pc, #88]	@ (800c9b0 <LmHandlerPackageRegister+0xc4>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	4913      	ldr	r1, [pc, #76]	@ (800c9a8 <LmHandlerPackageRegister+0xbc>)
 800c95c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c960:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c962:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	4a10      	ldr	r2, [pc, #64]	@ (800c9a8 <LmHandlerPackageRegister+0xbc>)
 800c968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c96c:	4a11      	ldr	r2, [pc, #68]	@ (800c9b4 <LmHandlerPackageRegister+0xc8>)
 800c96e:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c970:	4b0f      	ldr	r3, [pc, #60]	@ (800c9b0 <LmHandlerPackageRegister+0xc4>)
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	490c      	ldr	r1, [pc, #48]	@ (800c9a8 <LmHandlerPackageRegister+0xbc>)
 800c978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c97c:	6992      	ldr	r2, [r2, #24]
 800c97e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c980:	79fb      	ldrb	r3, [r7, #7]
 800c982:	4a09      	ldr	r2, [pc, #36]	@ (800c9a8 <LmHandlerPackageRegister+0xbc>)
 800c984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	4a0b      	ldr	r2, [pc, #44]	@ (800c9b8 <LmHandlerPackageRegister+0xcc>)
 800c98c:	6851      	ldr	r1, [r2, #4]
 800c98e:	4a0a      	ldr	r2, [pc, #40]	@ (800c9b8 <LmHandlerPackageRegister+0xcc>)
 800c990:	7852      	ldrb	r2, [r2, #1]
 800c992:	6838      	ldr	r0, [r7, #0]
 800c994:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c996:	2300      	movs	r3, #0
 800c998:	e001      	b.n	800c99e <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c99a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	20000434 	.word	0x20000434
 800c9ac:	0800c08d 	.word	0x0800c08d
 800c9b0:	20000460 	.word	0x20000460
 800c9b4:	0800c3a5 	.word	0x0800c3a5
 800c9b8:	200000b0 	.word	0x200000b0

0800c9bc <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c9c6:	79fb      	ldrb	r3, [r7, #7]
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	d80e      	bhi.n	800c9ea <LmHandlerPackageIsInitialized+0x2e>
 800c9cc:	79fb      	ldrb	r3, [r7, #7]
 800c9ce:	4a09      	ldr	r2, [pc, #36]	@ (800c9f4 <LmHandlerPackageIsInitialized+0x38>)
 800c9d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d007      	beq.n	800c9ea <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	4a05      	ldr	r2, [pc, #20]	@ (800c9f4 <LmHandlerPackageIsInitialized+0x38>)
 800c9de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	4798      	blx	r3
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	e000      	b.n	800c9ec <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c9ea:	2300      	movs	r3, #0
    }
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20000434 	.word	0x20000434

0800c9f8 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	6039      	str	r1, [r7, #0]
 800ca02:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ca04:	2300      	movs	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]
 800ca08:	e067      	b.n	800cada <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800ca0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0e:	4a37      	ldr	r2, [pc, #220]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800ca10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d05a      	beq.n	800cace <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d84e      	bhi.n	800cabc <LmHandlerPackagesNotify+0xc4>
 800ca1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca24 <LmHandlerPackagesNotify+0x2c>)
 800ca20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca24:	0800ca35 	.word	0x0800ca35
 800ca28:	0800ca57 	.word	0x0800ca57
 800ca2c:	0800ca79 	.word	0x0800ca79
 800ca30:	0800ca9b 	.word	0x0800ca9b
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ca34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca38:	4a2c      	ldr	r2, [pc, #176]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800ca3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d03d      	beq.n	800cac0 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800ca44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca48:	4a28      	ldr	r2, [pc, #160]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800ca4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca4e:	699b      	ldr	r3, [r3, #24]
 800ca50:	6838      	ldr	r0, [r7, #0]
 800ca52:	4798      	blx	r3
                        }
                        break;
 800ca54:	e034      	b.n	800cac0 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800ca56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca5a:	4a24      	ldr	r2, [pc, #144]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800ca5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d02e      	beq.n	800cac4 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800ca66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca6a:	4a20      	ldr	r2, [pc, #128]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800ca6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	6838      	ldr	r0, [r7, #0]
 800ca74:	4798      	blx	r3
                        }
                        break;
 800ca76:	e025      	b.n	800cac4 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ca78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca7c:	4a1b      	ldr	r2, [pc, #108]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800ca7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d01f      	beq.n	800cac8 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800ca88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca8c:	4a17      	ldr	r2, [pc, #92]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800ca8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	6838      	ldr	r0, [r7, #0]
 800ca96:	4798      	blx	r3
                        }
                        break;
 800ca98:	e016      	b.n	800cac8 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ca9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca9e:	4a13      	ldr	r2, [pc, #76]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800caa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d010      	beq.n	800cacc <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800caaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caae:	4a0f      	ldr	r2, [pc, #60]	@ (800caec <LmHandlerPackagesNotify+0xf4>)
 800cab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab6:	6838      	ldr	r0, [r7, #0]
 800cab8:	4798      	blx	r3
                        }
                        break;
 800caba:	e007      	b.n	800cacc <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800cabc:	bf00      	nop
 800cabe:	e006      	b.n	800cace <LmHandlerPackagesNotify+0xd6>
                        break;
 800cac0:	bf00      	nop
 800cac2:	e004      	b.n	800cace <LmHandlerPackagesNotify+0xd6>
                        break;
 800cac4:	bf00      	nop
 800cac6:	e002      	b.n	800cace <LmHandlerPackagesNotify+0xd6>
                        break;
 800cac8:	bf00      	nop
 800caca:	e000      	b.n	800cace <LmHandlerPackagesNotify+0xd6>
                        break;
 800cacc:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	3301      	adds	r3, #1
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	73fb      	strb	r3, [r7, #15]
 800cada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cade:	2b04      	cmp	r3, #4
 800cae0:	dd93      	ble.n	800ca0a <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800cae2:	bf00      	nop
 800cae4:	bf00      	nop
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20000434 	.word	0x20000434

0800caf0 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800caf6:	2300      	movs	r3, #0
 800caf8:	71fb      	strb	r3, [r7, #7]
 800cafa:	e018      	b.n	800cb2e <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800cafc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb00:	4a0f      	ldr	r2, [pc, #60]	@ (800cb40 <LmHandlerPackageIsTxPending+0x50>)
 800cb02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00b      	beq.n	800cb22 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cb0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb0e:	4a0c      	ldr	r2, [pc, #48]	@ (800cb40 <LmHandlerPackageIsTxPending+0x50>)
 800cb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	4798      	blx	r3
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e00a      	b.n	800cb38 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	3301      	adds	r3, #1
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	71fb      	strb	r3, [r7, #7]
 800cb2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb32:	2b04      	cmp	r3, #4
 800cb34:	dde2      	ble.n	800cafc <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	20000434 	.word	0x20000434

0800cb44 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	71fb      	strb	r3, [r7, #7]
 800cb4e:	e022      	b.n	800cb96 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cb50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb54:	4a14      	ldr	r2, [pc, #80]	@ (800cba8 <LmHandlerPackagesProcess+0x64>)
 800cb56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d015      	beq.n	800cb8a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cb5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb62:	4a11      	ldr	r2, [pc, #68]	@ (800cba8 <LmHandlerPackagesProcess+0x64>)
 800cb64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb68:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00d      	beq.n	800cb8a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cb6e:	79fb      	ldrb	r3, [r7, #7]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff ff23 	bl	800c9bc <LmHandlerPackageIsInitialized>
 800cb76:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d006      	beq.n	800cb8a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cb7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb80:	4a09      	ldr	r2, [pc, #36]	@ (800cba8 <LmHandlerPackagesProcess+0x64>)
 800cb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	3301      	adds	r3, #1
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	71fb      	strb	r3, [r7, #7]
 800cb96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb9a:	2b04      	cmp	r3, #4
 800cb9c:	ddd8      	ble.n	800cb50 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cb9e:	bf00      	nop
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	20000434 	.word	0x20000434

0800cbac <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800cbb6:	4a09      	ldr	r2, [pc, #36]	@ (800cbdc <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800cbbc:	4b08      	ldr	r3, [pc, #32]	@ (800cbe0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d005      	beq.n	800cbd2 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800cbc6:	4b06      	ldr	r3, [pc, #24]	@ (800cbe0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbcc:	79fa      	ldrb	r2, [r7, #7]
 800cbce:	4610      	mov	r0, r2
 800cbd0:	4798      	blx	r3
    }
}
 800cbd2:	bf00      	nop
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000448 	.word	0x20000448
 800cbe0:	20000460 	.word	0x20000460

0800cbe4 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	4603      	mov	r3, r0
 800cbec:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800cbee:	4a09      	ldr	r2, [pc, #36]	@ (800cc14 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800cbf4:	4b08      	ldr	r3, [pc, #32]	@ (800cc18 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800cbfe:	4b06      	ldr	r3, [pc, #24]	@ (800cc18 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc04:	79fa      	ldrb	r2, [r7, #7]
 800cc06:	4610      	mov	r0, r2
 800cc08:	4798      	blx	r3
    }
}
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20000448 	.word	0x20000448
 800cc18:	20000460 	.word	0x20000460

0800cc1c <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800cc20:	f005 fc42 	bl	80124a8 <LoRaMacDeInitialization>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e001      	b.n	800cc32 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cc2e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800cc3a:	f004 faa1 	bl	8011180 <LoRaMacHalt>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cc44:	2300      	movs	r3, #0
 800cc46:	e001      	b.n	800cc4c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cc48:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b08c      	sub	sp, #48	@ 0x30
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d102      	bne.n	800cc64 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc62:	e016      	b.n	800cc92 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cc64:	2321      	movs	r3, #33	@ 0x21
 800cc66:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc68:	f107 0308 	add.w	r3, r7, #8
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f004 fb41 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc78:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7c:	e009      	b.n	800cc92 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800cc7e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f993 2000 	ldrsb.w	r2, [r3]
 800cc8c:	4b03      	ldr	r3, [pc, #12]	@ (800cc9c <LmHandlerGetTxPower+0x4c>)
 800cc8e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3730      	adds	r7, #48	@ 0x30
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20000448 	.word	0x20000448

0800cca0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cca0:	b480      	push	{r7}
 800cca2:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 800cca4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bc80      	pop	{r7}
 800ccae:	4770      	bx	lr

0800ccb0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ccba:	bf00      	nop
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bc80      	pop	{r7}
 800ccc2:	4770      	bx	lr

0800ccc4 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ccc8:	2220      	movs	r2, #32
 800ccca:	2100      	movs	r1, #0
 800cccc:	4802      	ldr	r0, [pc, #8]	@ (800ccd8 <ClassBStatusReset+0x14>)
 800ccce:	f009 fef9 	bl	8016ac4 <memset1>
}
 800ccd2:	bf00      	nop
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	2000059c 	.word	0x2000059c

0800ccdc <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800cce0:	4b02      	ldr	r3, [pc, #8]	@ (800ccec <LmhpCompliancePackageFactory+0x10>)
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bc80      	pop	{r7}
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	200000b8 	.word	0x200000b8

0800ccf0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af02      	add	r7, sp, #8
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d018      	beq.n	800cd36 <LmhpComplianceInit+0x46>
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d015      	beq.n	800cd36 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800cd0a:	4a19      	ldr	r2, [pc, #100]	@ (800cd70 <LmhpComplianceInit+0x80>)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800cd10:	4a18      	ldr	r2, [pc, #96]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cd16:	4a17      	ldr	r2, [pc, #92]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd18:	79fb      	ldrb	r3, [r7, #7]
 800cd1a:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800cd1c:	4b15      	ldr	r3, [pc, #84]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd1e:	2201      	movs	r2, #1
 800cd20:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800cd22:	2300      	movs	r3, #0
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	4b14      	ldr	r3, [pc, #80]	@ (800cd78 <LmhpComplianceInit+0x88>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f04f 31ff 	mov.w	r1, #4294967295
 800cd2e:	4813      	ldr	r0, [pc, #76]	@ (800cd7c <LmhpComplianceInit+0x8c>)
 800cd30:	f00d ff3c 	bl	801abac <UTIL_TIMER_Create>
 800cd34:	e005      	b.n	800cd42 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800cd36:	4b0e      	ldr	r3, [pc, #56]	@ (800cd70 <LmhpComplianceInit+0x80>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800cd42:	4b0c      	ldr	r3, [pc, #48]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800cd48:	f7ff ffbc 	bl	800ccc4 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800cd4c:	4b09      	ldr	r3, [pc, #36]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd4e:	2200      	movs	r2, #0
 800cd50:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800cd52:	4b08      	ldr	r3, [pc, #32]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800cd58:	4b06      	ldr	r3, [pc, #24]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800cd60:	4b04      	ldr	r3, [pc, #16]	@ (800cd74 <LmhpComplianceInit+0x84>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800cd68:	bf00      	nop
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	200005c0 	.word	0x200005c0
 800cd74:	20000588 	.word	0x20000588
 800cd78:	0800d679 	.word	0x0800d679
 800cd7c:	200005c4 	.word	0x200005c4

0800cd80 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cd80:	b480      	push	{r7}
 800cd82:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cd84:	4b02      	ldr	r3, [pc, #8]	@ (800cd90 <LmhpComplianceIsInitialized+0x10>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bc80      	pop	{r7}
 800cd8e:	4770      	bx	lr
 800cd90:	20000588 	.word	0x20000588

0800cd94 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800cd94:	b480      	push	{r7}
 800cd96:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800cd98:	4b02      	ldr	r3, [pc, #8]	@ (800cda4 <LmhpComplianceIsTxPending+0x10>)
 800cd9a:	785b      	ldrb	r3, [r3, #1]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bc80      	pop	{r7}
 800cda2:	4770      	bx	lr
 800cda4:	20000588 	.word	0x20000588

0800cda8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800cda8:	b590      	push	{r4, r7, lr}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800cdae:	4b33      	ldr	r3, [pc, #204]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800cdb0:	785b      	ldrb	r3, [r3, #1]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d03e      	beq.n	800ce34 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800cdb6:	f00e f8b7 	bl	801af28 <UTIL_TIMER_GetCurrentTime>
 800cdba:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800cdbc:	4b2f      	ldr	r3, [pc, #188]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800cdbe:	685c      	ldr	r4, [r3, #4]
 800cdc0:	f7ff f95a 	bl	800c078 <LmHandlerGetDutyCycleWaitTime>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	4423      	add	r3, r4
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d941      	bls.n	800ce52 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800cdce:	4b2b      	ldr	r3, [pc, #172]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800cdd0:	7a9b      	ldrb	r3, [r3, #10]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d03d      	beq.n	800ce52 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800cdd6:	23e0      	movs	r3, #224	@ 0xe0
 800cdd8:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800cdda:	4b28      	ldr	r3, [pc, #160]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800cddc:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800cdde:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800cde0:	4b26      	ldr	r3, [pc, #152]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800cde2:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800cde4:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cde6:	23ff      	movs	r3, #255	@ 0xff
 800cde8:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800cdea:	4b24      	ldr	r3, [pc, #144]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800cdec:	7a19      	ldrb	r1, [r3, #8]
 800cdee:	463b      	mov	r3, r7
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7ff fa08 	bl	800c208 <LmHandlerSend>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800cdfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <LmhpComplianceProcess+0x66>
 800ce04:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ce08:	f113 0f07 	cmn.w	r3, #7
 800ce0c:	d106      	bne.n	800ce1c <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800ce0e:	4b1b      	ldr	r3, [pc, #108]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800ce14:	4b19      	ldr	r3, [pc, #100]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce16:	2200      	movs	r2, #0
 800ce18:	729a      	strb	r2, [r3, #10]
 800ce1a:	e007      	b.n	800ce2c <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800ce1c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ce20:	4817      	ldr	r0, [pc, #92]	@ (800ce80 <LmhpComplianceProcess+0xd8>)
 800ce22:	f00d ffd7 	bl	801add4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800ce26:	4816      	ldr	r0, [pc, #88]	@ (800ce80 <LmhpComplianceProcess+0xd8>)
 800ce28:	f00d fef6 	bl	801ac18 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800ce2c:	4a13      	ldr	r2, [pc, #76]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6053      	str	r3, [r2, #4]
 800ce32:	e00e      	b.n	800ce52 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800ce34:	4b11      	ldr	r3, [pc, #68]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d009      	beq.n	800ce52 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800ce3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800ce46:	4b0d      	ldr	r3, [pc, #52]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce48:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7ff fad1 	bl	800c3f4 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800ce52:	4b0a      	ldr	r3, [pc, #40]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00a      	beq.n	800ce72 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800ce5c:	4b07      	ldr	r3, [pc, #28]	@ (800ce7c <LmhpComplianceProcess+0xd4>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800ce64:	4b07      	ldr	r3, [pc, #28]	@ (800ce84 <LmhpComplianceProcess+0xdc>)
 800ce66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800ce6c:	4b05      	ldr	r3, [pc, #20]	@ (800ce84 <LmhpComplianceProcess+0xdc>)
 800ce6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce70:	4798      	blx	r3
        }
    }
}
 800ce72:	bf00      	nop
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd90      	pop	{r4, r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20000588 	.word	0x20000588
 800ce80:	200005c4 	.word	0x200005c4
 800ce84:	200000b8 	.word	0x200000b8

0800ce88 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800ce88:	b5b0      	push	{r4, r5, r7, lr}
 800ce8a:	b0a4      	sub	sp, #144	@ 0x90
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800ce96:	4bd0      	ldr	r3, [pc, #832]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	f083 0301 	eor.w	r3, r3, #1
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f040 83bf 	bne.w	800d624 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	78db      	ldrb	r3, [r3, #3]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d103      	bne.n	800ceb6 <LmhpComplianceOnMcpsIndication+0x2e>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	7b9b      	ldrb	r3, [r3, #14]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d005      	beq.n	800cec2 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800ceb6:	4bc8      	ldr	r3, [pc, #800]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800ceb8:	8a1b      	ldrh	r3, [r3, #16]
 800ceba:	3301      	adds	r3, #1
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	4bc6      	ldr	r3, [pc, #792]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800cec0:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	7b5b      	ldrb	r3, [r3, #13]
 800cec6:	f083 0301 	eor.w	r3, r3, #1
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f040 83ab 	bne.w	800d628 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	78db      	ldrb	r3, [r3, #3]
 800ced6:	2be0      	cmp	r3, #224	@ 0xe0
 800ced8:	f040 83a8 	bne.w	800d62c <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800cedc:	4bbe      	ldr	r3, [pc, #760]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800cede:	2200      	movs	r2, #0
 800cee0:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	689a      	ldr	r2, [r3, #8]
 800cee6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ceea:	1c59      	adds	r1, r3, #1
 800ceec:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800cef0:	4413      	add	r3, r2
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b7f      	cmp	r3, #127	@ 0x7f
 800cef6:	f200 8372 	bhi.w	800d5de <LmhpComplianceOnMcpsIndication+0x756>
 800cefa:	a201      	add	r2, pc, #4	@ (adr r2, 800cf00 <LmhpComplianceOnMcpsIndication+0x78>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800d101 	.word	0x0800d101
 800cf04:	0800d145 	.word	0x0800d145
 800cf08:	0800d14f 	.word	0x0800d14f
 800cf0c:	0800d165 	.word	0x0800d165
 800cf10:	0800d187 	.word	0x0800d187
 800cf14:	0800d1b5 	.word	0x0800d1b5
 800cf18:	0800d1e1 	.word	0x0800d1e1
 800cf1c:	0800d23f 	.word	0x0800d23f
 800cf20:	0800d297 	.word	0x0800d297
 800cf24:	0800d303 	.word	0x0800d303
 800cf28:	0800d353 	.word	0x0800d353
 800cf2c:	0800d5df 	.word	0x0800d5df
 800cf30:	0800d5df 	.word	0x0800d5df
 800cf34:	0800d5df 	.word	0x0800d5df
 800cf38:	0800d5df 	.word	0x0800d5df
 800cf3c:	0800d5df 	.word	0x0800d5df
 800cf40:	0800d5df 	.word	0x0800d5df
 800cf44:	0800d5df 	.word	0x0800d5df
 800cf48:	0800d5df 	.word	0x0800d5df
 800cf4c:	0800d5df 	.word	0x0800d5df
 800cf50:	0800d5df 	.word	0x0800d5df
 800cf54:	0800d5df 	.word	0x0800d5df
 800cf58:	0800d5df 	.word	0x0800d5df
 800cf5c:	0800d5df 	.word	0x0800d5df
 800cf60:	0800d5df 	.word	0x0800d5df
 800cf64:	0800d5df 	.word	0x0800d5df
 800cf68:	0800d5df 	.word	0x0800d5df
 800cf6c:	0800d5df 	.word	0x0800d5df
 800cf70:	0800d5df 	.word	0x0800d5df
 800cf74:	0800d5df 	.word	0x0800d5df
 800cf78:	0800d5df 	.word	0x0800d5df
 800cf7c:	0800d5df 	.word	0x0800d5df
 800cf80:	0800d35b 	.word	0x0800d35b
 800cf84:	0800d36d 	.word	0x0800d36d
 800cf88:	0800d375 	.word	0x0800d375
 800cf8c:	0800d5df 	.word	0x0800d5df
 800cf90:	0800d5df 	.word	0x0800d5df
 800cf94:	0800d5df 	.word	0x0800d5df
 800cf98:	0800d5df 	.word	0x0800d5df
 800cf9c:	0800d5df 	.word	0x0800d5df
 800cfa0:	0800d5df 	.word	0x0800d5df
 800cfa4:	0800d5df 	.word	0x0800d5df
 800cfa8:	0800d5df 	.word	0x0800d5df
 800cfac:	0800d5df 	.word	0x0800d5df
 800cfb0:	0800d5df 	.word	0x0800d5df
 800cfb4:	0800d5df 	.word	0x0800d5df
 800cfb8:	0800d5df 	.word	0x0800d5df
 800cfbc:	0800d5df 	.word	0x0800d5df
 800cfc0:	0800d5df 	.word	0x0800d5df
 800cfc4:	0800d5df 	.word	0x0800d5df
 800cfc8:	0800d5df 	.word	0x0800d5df
 800cfcc:	0800d5df 	.word	0x0800d5df
 800cfd0:	0800d5df 	.word	0x0800d5df
 800cfd4:	0800d5df 	.word	0x0800d5df
 800cfd8:	0800d5df 	.word	0x0800d5df
 800cfdc:	0800d5df 	.word	0x0800d5df
 800cfe0:	0800d5df 	.word	0x0800d5df
 800cfe4:	0800d5df 	.word	0x0800d5df
 800cfe8:	0800d5df 	.word	0x0800d5df
 800cfec:	0800d5df 	.word	0x0800d5df
 800cff0:	0800d5df 	.word	0x0800d5df
 800cff4:	0800d5df 	.word	0x0800d5df
 800cff8:	0800d5df 	.word	0x0800d5df
 800cffc:	0800d5df 	.word	0x0800d5df
 800d000:	0800d5df 	.word	0x0800d5df
 800d004:	0800d5df 	.word	0x0800d5df
 800d008:	0800d5df 	.word	0x0800d5df
 800d00c:	0800d5df 	.word	0x0800d5df
 800d010:	0800d5df 	.word	0x0800d5df
 800d014:	0800d5df 	.word	0x0800d5df
 800d018:	0800d5df 	.word	0x0800d5df
 800d01c:	0800d5df 	.word	0x0800d5df
 800d020:	0800d5df 	.word	0x0800d5df
 800d024:	0800d5df 	.word	0x0800d5df
 800d028:	0800d5df 	.word	0x0800d5df
 800d02c:	0800d5df 	.word	0x0800d5df
 800d030:	0800d5df 	.word	0x0800d5df
 800d034:	0800d5df 	.word	0x0800d5df
 800d038:	0800d5df 	.word	0x0800d5df
 800d03c:	0800d5df 	.word	0x0800d5df
 800d040:	0800d5df 	.word	0x0800d5df
 800d044:	0800d5df 	.word	0x0800d5df
 800d048:	0800d5df 	.word	0x0800d5df
 800d04c:	0800d5df 	.word	0x0800d5df
 800d050:	0800d5df 	.word	0x0800d5df
 800d054:	0800d5df 	.word	0x0800d5df
 800d058:	0800d5df 	.word	0x0800d5df
 800d05c:	0800d5df 	.word	0x0800d5df
 800d060:	0800d5df 	.word	0x0800d5df
 800d064:	0800d5df 	.word	0x0800d5df
 800d068:	0800d5df 	.word	0x0800d5df
 800d06c:	0800d5df 	.word	0x0800d5df
 800d070:	0800d5df 	.word	0x0800d5df
 800d074:	0800d5df 	.word	0x0800d5df
 800d078:	0800d5df 	.word	0x0800d5df
 800d07c:	0800d5df 	.word	0x0800d5df
 800d080:	0800d5df 	.word	0x0800d5df
 800d084:	0800d5df 	.word	0x0800d5df
 800d088:	0800d5df 	.word	0x0800d5df
 800d08c:	0800d5df 	.word	0x0800d5df
 800d090:	0800d5df 	.word	0x0800d5df
 800d094:	0800d5df 	.word	0x0800d5df
 800d098:	0800d5df 	.word	0x0800d5df
 800d09c:	0800d5df 	.word	0x0800d5df
 800d0a0:	0800d5df 	.word	0x0800d5df
 800d0a4:	0800d5df 	.word	0x0800d5df
 800d0a8:	0800d5df 	.word	0x0800d5df
 800d0ac:	0800d5df 	.word	0x0800d5df
 800d0b0:	0800d5df 	.word	0x0800d5df
 800d0b4:	0800d5df 	.word	0x0800d5df
 800d0b8:	0800d5df 	.word	0x0800d5df
 800d0bc:	0800d5df 	.word	0x0800d5df
 800d0c0:	0800d5df 	.word	0x0800d5df
 800d0c4:	0800d5df 	.word	0x0800d5df
 800d0c8:	0800d5df 	.word	0x0800d5df
 800d0cc:	0800d5df 	.word	0x0800d5df
 800d0d0:	0800d5df 	.word	0x0800d5df
 800d0d4:	0800d5df 	.word	0x0800d5df
 800d0d8:	0800d5df 	.word	0x0800d5df
 800d0dc:	0800d5df 	.word	0x0800d5df
 800d0e0:	0800d5df 	.word	0x0800d5df
 800d0e4:	0800d5df 	.word	0x0800d5df
 800d0e8:	0800d5df 	.word	0x0800d5df
 800d0ec:	0800d5df 	.word	0x0800d5df
 800d0f0:	0800d5df 	.word	0x0800d5df
 800d0f4:	0800d3a7 	.word	0x0800d3a7
 800d0f8:	0800d459 	.word	0x0800d459
 800d0fc:	0800d489 	.word	0x0800d489
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d100:	4b35      	ldr	r3, [pc, #212]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d102:	68da      	ldr	r2, [r3, #12]
 800d104:	4b34      	ldr	r3, [pc, #208]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d106:	7a9b      	ldrb	r3, [r3, #10]
 800d108:	1c59      	adds	r1, r3, #1
 800d10a:	b2c8      	uxtb	r0, r1
 800d10c:	4932      	ldr	r1, [pc, #200]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d10e:	7288      	strb	r0, [r1, #10]
 800d110:	4413      	add	r3, r2
 800d112:	2200      	movs	r2, #0
 800d114:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d116:	4b30      	ldr	r3, [pc, #192]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	4b2f      	ldr	r3, [pc, #188]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d11c:	7a9b      	ldrb	r3, [r3, #10]
 800d11e:	1c59      	adds	r1, r3, #1
 800d120:	b2c8      	uxtb	r0, r1
 800d122:	492d      	ldr	r1, [pc, #180]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d124:	7288      	strb	r0, [r1, #10]
 800d126:	4413      	add	r3, r2
 800d128:	2206      	movs	r2, #6
 800d12a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d12c:	4b2a      	ldr	r3, [pc, #168]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d12e:	68da      	ldr	r2, [r3, #12]
 800d130:	4b29      	ldr	r3, [pc, #164]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d132:	7a9b      	ldrb	r3, [r3, #10]
 800d134:	1c59      	adds	r1, r3, #1
 800d136:	b2c8      	uxtb	r0, r1
 800d138:	4927      	ldr	r1, [pc, #156]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d13a:	7288      	strb	r0, [r1, #10]
 800d13c:	4413      	add	r3, r2
 800d13e:	2201      	movs	r2, #1
 800d140:	701a      	strb	r2, [r3, #0]
                break;
 800d142:	e257      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800d144:	4b24      	ldr	r3, [pc, #144]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d146:	2201      	movs	r2, #1
 800d148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800d14c:	e252      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800d14e:	4b23      	ldr	r3, [pc, #140]	@ (800d1dc <LmhpComplianceOnMcpsIndication+0x354>)
 800d150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d152:	2b00      	cmp	r3, #0
 800d154:	f000 8245 	beq.w	800d5e2 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d158:	4b20      	ldr	r3, [pc, #128]	@ (800d1dc <LmhpComplianceOnMcpsIndication+0x354>)
 800d15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d15c:	2101      	movs	r1, #1
 800d15e:	2002      	movs	r0, #2
 800d160:	4798      	blx	r3
                }
                break;
 800d162:	e23e      	b.n	800d5e2 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	689a      	ldr	r2, [r3, #8]
 800d168:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d16c:	1c59      	adds	r1, r3, #1
 800d16e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d172:	4413      	add	r3, r2
 800d174:	781a      	ldrb	r2, [r3, #0]
 800d176:	4b18      	ldr	r3, [pc, #96]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d178:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800d17c:	4b16      	ldr	r3, [pc, #88]	@ (800d1d8 <LmhpComplianceOnMcpsIndication+0x350>)
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800d184:	e236      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800d186:	2304      	movs	r3, #4
 800d188:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	689a      	ldr	r2, [r3, #8]
 800d18e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d192:	1c59      	adds	r1, r3, #1
 800d194:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d198:	4413      	add	r3, r2
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	bf14      	ite	ne
 800d1a0:	2301      	movne	r3, #1
 800d1a2:	2300      	moveq	r3, #0
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800d1a8:	f107 0308 	add.w	r3, r7, #8
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f004 fa77 	bl	80116a0 <LoRaMacMibSetRequestConfirm>
                break;
 800d1b2:	e21f      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	689a      	ldr	r2, [r3, #8]
 800d1b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d1bc:	1c59      	adds	r1, r3, #1
 800d1be:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d1c2:	4413      	add	r3, r2
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bf14      	ite	ne
 800d1ca:	2301      	movne	r3, #1
 800d1cc:	2300      	moveq	r3, #0
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f005 f943 	bl	801245c <LoRaMacTestSetDutyCycleOn>
                break;
 800d1d6:	e20d      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
 800d1d8:	20000588 	.word	0x20000588
 800d1dc:	200000b8 	.word	0x200000b8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d1e0:	4ba5      	ldr	r3, [pc, #660]	@ (800d478 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d1e2:	f107 0408 	add.w	r4, r7, #8
 800d1e6:	461d      	mov	r5, r3
 800d1e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d1ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d1f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d1f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	689a      	ldr	r2, [r3, #8]
 800d1fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d200:	1c59      	adds	r1, r3, #1
 800d202:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d206:	4413      	add	r3, r2
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d20e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d212:	2b0a      	cmp	r3, #10
 800d214:	f200 81e7 	bhi.w	800d5e6 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d218:	4b98      	ldr	r3, [pc, #608]	@ (800d47c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 81e1 	beq.w	800d5e6 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d224:	4b95      	ldr	r3, [pc, #596]	@ (800d47c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	685a      	ldr	r2, [r3, #4]
 800d22a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	3390      	adds	r3, #144	@ 0x90
 800d232:	443b      	add	r3, r7
 800d234:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800d238:	4618      	mov	r0, r3
 800d23a:	4790      	blx	r2
                    }
                }
                break;
 800d23c:	e1d3      	b.n	800d5e6 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	689a      	ldr	r2, [r3, #8]
 800d242:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d246:	1c59      	adds	r1, r3, #1
 800d248:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d24c:	4413      	add	r3, r2
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d254:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d004      	beq.n	800d266 <LmhpComplianceOnMcpsIndication+0x3de>
 800d25c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d260:	2b02      	cmp	r3, #2
 800d262:	f040 81c2 	bne.w	800d5ea <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d266:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	bf14      	ite	ne
 800d26e:	2301      	movne	r3, #1
 800d270:	2300      	moveq	r3, #0
 800d272:	b2db      	uxtb	r3, r3
 800d274:	461a      	mov	r2, r3
 800d276:	4b82      	ldr	r3, [pc, #520]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d278:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d27a:	4b80      	ldr	r3, [pc, #512]	@ (800d47c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 81b2 	beq.w	800d5ea <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d286:	4b7d      	ldr	r3, [pc, #500]	@ (800d47c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	4a7c      	ldr	r2, [pc, #496]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d28e:	7a12      	ldrb	r2, [r2, #8]
 800d290:	4610      	mov	r0, r2
 800d292:	4798      	blx	r3
                    }
                }
                break;
 800d294:	e1a9      	b.n	800d5ea <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d296:	4b7a      	ldr	r3, [pc, #488]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d298:	68da      	ldr	r2, [r3, #12]
 800d29a:	4b79      	ldr	r3, [pc, #484]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d29c:	7a9b      	ldrb	r3, [r3, #10]
 800d29e:	1c59      	adds	r1, r3, #1
 800d2a0:	b2c8      	uxtb	r0, r1
 800d2a2:	4977      	ldr	r1, [pc, #476]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d2a4:	7288      	strb	r0, [r1, #10]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	2208      	movs	r2, #8
 800d2aa:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800d2b2:	e019      	b.n	800d2e8 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	689a      	ldr	r2, [r3, #8]
 800d2b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d2bc:	1c59      	adds	r1, r3, #1
 800d2be:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d2c2:	4413      	add	r3, r2
 800d2c4:	781a      	ldrb	r2, [r3, #0]
 800d2c6:	4b6e      	ldr	r3, [pc, #440]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d2c8:	68d9      	ldr	r1, [r3, #12]
 800d2ca:	4b6d      	ldr	r3, [pc, #436]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d2cc:	7a9b      	ldrb	r3, [r3, #10]
 800d2ce:	1c58      	adds	r0, r3, #1
 800d2d0:	b2c4      	uxtb	r4, r0
 800d2d2:	486b      	ldr	r0, [pc, #428]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d2d4:	7284      	strb	r4, [r0, #10]
 800d2d6:	440b      	add	r3, r1
 800d2d8:	3201      	adds	r2, #1
 800d2da:	b2d2      	uxtb	r2, r2
 800d2dc:	701a      	strb	r2, [r3, #0]
                     i++ )
 800d2de:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d2e8:	4b65      	ldr	r3, [pc, #404]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d2ea:	7a5a      	ldrb	r2, [r3, #9]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	7b1b      	ldrb	r3, [r3, #12]
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	bf28      	it	cs
 800d2f4:	4613      	movcs	r3, r2
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d3d9      	bcc.n	800d2b4 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800d300:	e178      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d302:	4b5f      	ldr	r3, [pc, #380]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d304:	68da      	ldr	r2, [r3, #12]
 800d306:	4b5e      	ldr	r3, [pc, #376]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d308:	7a9b      	ldrb	r3, [r3, #10]
 800d30a:	1c59      	adds	r1, r3, #1
 800d30c:	b2c8      	uxtb	r0, r1
 800d30e:	495c      	ldr	r1, [pc, #368]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d310:	7288      	strb	r0, [r1, #10]
 800d312:	4413      	add	r3, r2
 800d314:	2209      	movs	r2, #9
 800d316:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d318:	4b59      	ldr	r3, [pc, #356]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d31a:	8a18      	ldrh	r0, [r3, #16]
 800d31c:	4b58      	ldr	r3, [pc, #352]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d31e:	68da      	ldr	r2, [r3, #12]
 800d320:	4b57      	ldr	r3, [pc, #348]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d322:	7a9b      	ldrb	r3, [r3, #10]
 800d324:	1c59      	adds	r1, r3, #1
 800d326:	b2cc      	uxtb	r4, r1
 800d328:	4955      	ldr	r1, [pc, #340]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d32a:	728c      	strb	r4, [r1, #10]
 800d32c:	4413      	add	r3, r2
 800d32e:	b2c2      	uxtb	r2, r0
 800d330:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d332:	4b53      	ldr	r3, [pc, #332]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d334:	8a1b      	ldrh	r3, [r3, #16]
 800d336:	0a1b      	lsrs	r3, r3, #8
 800d338:	b298      	uxth	r0, r3
 800d33a:	4b51      	ldr	r3, [pc, #324]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d33c:	68da      	ldr	r2, [r3, #12]
 800d33e:	4b50      	ldr	r3, [pc, #320]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d340:	7a9b      	ldrb	r3, [r3, #10]
 800d342:	1c59      	adds	r1, r3, #1
 800d344:	b2cc      	uxtb	r4, r1
 800d346:	494e      	ldr	r1, [pc, #312]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d348:	728c      	strb	r4, [r1, #10]
 800d34a:	4413      	add	r3, r2
 800d34c:	b2c2      	uxtb	r2, r0
 800d34e:	701a      	strb	r2, [r3, #0]
                break;
 800d350:	e150      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800d352:	4b4b      	ldr	r3, [pc, #300]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d354:	2200      	movs	r2, #0
 800d356:	821a      	strh	r2, [r3, #16]
                break;
 800d358:	e14c      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800d35a:	2305      	movs	r3, #5
 800d35c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800d360:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800d364:	4618      	mov	r0, r3
 800d366:	f004 fd9d 	bl	8011ea4 <LoRaMacMlmeRequest>
                break;
 800d36a:	e143      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800d36c:	4b45      	ldr	r3, [pc, #276]	@ (800d484 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800d36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d370:	4798      	blx	r3
                break;
 800d372:	e13f      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d37c:	1c59      	adds	r1, r3, #1
 800d37e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d382:	4413      	add	r3, r2
 800d384:	781a      	ldrb	r2, [r3, #0]
 800d386:	4b3e      	ldr	r3, [pc, #248]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d388:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d38a:	4b3c      	ldr	r3, [pc, #240]	@ (800d47c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 812c 	beq.w	800d5ee <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d396:	4b39      	ldr	r3, [pc, #228]	@ (800d47c <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	4a38      	ldr	r2, [pc, #224]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d39e:	7d52      	ldrb	r2, [r2, #21]
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4798      	blx	r3
                }
                break;
 800d3a4:	e123      	b.n	800d5ee <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	7b1b      	ldrb	r3, [r3, #12]
 800d3aa:	2b07      	cmp	r3, #7
 800d3ac:	f040 8121 	bne.w	800d5f2 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d3b0:	2306      	movs	r3, #6
 800d3b2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689a      	ldr	r2, [r3, #8]
 800d3ba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3be:	4413      	add	r3, r2
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	b21a      	sxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6899      	ldr	r1, [r3, #8]
 800d3c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	440b      	add	r3, r1
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	b21b      	sxth	r3, r3
 800d3d4:	021b      	lsls	r3, r3, #8
 800d3d6:	b21b      	sxth	r3, r3
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	b21b      	sxth	r3, r3
 800d3dc:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800d3de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800d3e2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3e6:	3302      	adds	r3, #2
 800d3e8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	689a      	ldr	r2, [r3, #8]
 800d3f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3f4:	4413      	add	r3, r2
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	689a      	ldr	r2, [r3, #8]
 800d3fe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d402:	3301      	adds	r3, #1
 800d404:	4413      	add	r3, r2
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	021b      	lsls	r3, r3, #8
 800d40a:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6899      	ldr	r1, [r3, #8]
 800d412:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d416:	3302      	adds	r3, #2
 800d418:	440b      	add	r3, r1
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d41e:	4313      	orrs	r3, r2
 800d420:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d422:	2364      	movs	r3, #100	@ 0x64
 800d424:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800d428:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800d42a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d42e:	3303      	adds	r3, #3
 800d430:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	689a      	ldr	r2, [r3, #8]
 800d438:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d43c:	1c59      	adds	r1, r3, #1
 800d43e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d442:	4413      	add	r3, r2
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	b25b      	sxtb	r3, r3
 800d448:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800d44c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d450:	4618      	mov	r0, r3
 800d452:	f004 fd27 	bl	8011ea4 <LoRaMacMlmeRequest>
                }
                break;
 800d456:	e0cc      	b.n	800d5f2 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d458:	233b      	movs	r3, #59	@ 0x3b
 800d45a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800d45e:	2300      	movs	r3, #0
 800d460:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d464:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d468:	4618      	mov	r0, r3
 800d46a:	f004 f919 	bl	80116a0 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800d46e:	4b04      	ldr	r3, [pc, #16]	@ (800d480 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800d470:	2201      	movs	r2, #1
 800d472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800d476:	e0bd      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
 800d478:	0801c2cc 	.word	0x0801c2cc
 800d47c:	200005c0 	.word	0x200005c0
 800d480:	20000588 	.word	0x20000588
 800d484:	200000b8 	.word	0x200000b8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800d488:	232a      	movs	r3, #42	@ 0x2a
 800d48a:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800d48c:	f107 0308 	add.w	r3, r7, #8
 800d490:	4618      	mov	r0, r3
 800d492:	f003 ff2f 	bl	80112f4 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d49e:	4b65      	ldr	r3, [pc, #404]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4a0:	68da      	ldr	r2, [r3, #12]
 800d4a2:	4b64      	ldr	r3, [pc, #400]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4a4:	7a9b      	ldrb	r3, [r3, #10]
 800d4a6:	1c59      	adds	r1, r3, #1
 800d4a8:	b2c8      	uxtb	r0, r1
 800d4aa:	4962      	ldr	r1, [pc, #392]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4ac:	7288      	strb	r0, [r1, #10]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	227f      	movs	r2, #127	@ 0x7f
 800d4b2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d4b4:	4b60      	ldr	r3, [pc, #384]	@ (800d638 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	4b5e      	ldr	r3, [pc, #376]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4ba:	68d9      	ldr	r1, [r3, #12]
 800d4bc:	4b5d      	ldr	r3, [pc, #372]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4be:	7a9b      	ldrb	r3, [r3, #10]
 800d4c0:	1c58      	adds	r0, r3, #1
 800d4c2:	b2c4      	uxtb	r4, r0
 800d4c4:	485b      	ldr	r0, [pc, #364]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4c6:	7284      	strb	r4, [r0, #10]
 800d4c8:	440b      	add	r3, r1
 800d4ca:	78d2      	ldrb	r2, [r2, #3]
 800d4cc:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d4ce:	4b5a      	ldr	r3, [pc, #360]	@ (800d638 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	4b58      	ldr	r3, [pc, #352]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4d4:	68d9      	ldr	r1, [r3, #12]
 800d4d6:	4b57      	ldr	r3, [pc, #348]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4d8:	7a9b      	ldrb	r3, [r3, #10]
 800d4da:	1c58      	adds	r0, r3, #1
 800d4dc:	b2c4      	uxtb	r4, r0
 800d4de:	4855      	ldr	r0, [pc, #340]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4e0:	7284      	strb	r4, [r0, #10]
 800d4e2:	440b      	add	r3, r1
 800d4e4:	7892      	ldrb	r2, [r2, #2]
 800d4e6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d4e8:	4b53      	ldr	r3, [pc, #332]	@ (800d638 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	4b51      	ldr	r3, [pc, #324]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4ee:	68d9      	ldr	r1, [r3, #12]
 800d4f0:	4b50      	ldr	r3, [pc, #320]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4f2:	7a9b      	ldrb	r3, [r3, #10]
 800d4f4:	1c58      	adds	r0, r3, #1
 800d4f6:	b2c4      	uxtb	r4, r0
 800d4f8:	484e      	ldr	r0, [pc, #312]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d4fa:	7284      	strb	r4, [r0, #10]
 800d4fc:	440b      	add	r3, r1
 800d4fe:	7852      	ldrb	r2, [r2, #1]
 800d500:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d502:	4b4d      	ldr	r3, [pc, #308]	@ (800d638 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	4b4b      	ldr	r3, [pc, #300]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d508:	68d9      	ldr	r1, [r3, #12]
 800d50a:	4b4a      	ldr	r3, [pc, #296]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d50c:	7a9b      	ldrb	r3, [r3, #10]
 800d50e:	1c58      	adds	r0, r3, #1
 800d510:	b2c4      	uxtb	r4, r0
 800d512:	4848      	ldr	r0, [pc, #288]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d514:	7284      	strb	r4, [r0, #10]
 800d516:	440b      	add	r3, r1
 800d518:	7812      	ldrb	r2, [r2, #0]
 800d51a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d51c:	4b45      	ldr	r3, [pc, #276]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d51e:	68da      	ldr	r2, [r3, #12]
 800d520:	4b44      	ldr	r3, [pc, #272]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d522:	7a9b      	ldrb	r3, [r3, #10]
 800d524:	1c59      	adds	r1, r3, #1
 800d526:	b2c8      	uxtb	r0, r1
 800d528:	4942      	ldr	r1, [pc, #264]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d52a:	7288      	strb	r0, [r1, #10]
 800d52c:	4413      	add	r3, r2
 800d52e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800d532:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d534:	4b3f      	ldr	r3, [pc, #252]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d536:	68da      	ldr	r2, [r3, #12]
 800d538:	4b3e      	ldr	r3, [pc, #248]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d53a:	7a9b      	ldrb	r3, [r3, #10]
 800d53c:	1c59      	adds	r1, r3, #1
 800d53e:	b2c8      	uxtb	r0, r1
 800d540:	493c      	ldr	r1, [pc, #240]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d542:	7288      	strb	r0, [r1, #10]
 800d544:	4413      	add	r3, r2
 800d546:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800d54a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d54c:	4b39      	ldr	r3, [pc, #228]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d54e:	68da      	ldr	r2, [r3, #12]
 800d550:	4b38      	ldr	r3, [pc, #224]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d552:	7a9b      	ldrb	r3, [r3, #10]
 800d554:	1c59      	adds	r1, r3, #1
 800d556:	b2c8      	uxtb	r0, r1
 800d558:	4936      	ldr	r1, [pc, #216]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d55a:	7288      	strb	r0, [r1, #10]
 800d55c:	4413      	add	r3, r2
 800d55e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800d562:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d564:	4b33      	ldr	r3, [pc, #204]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d566:	68da      	ldr	r2, [r3, #12]
 800d568:	4b32      	ldr	r3, [pc, #200]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d56a:	7a9b      	ldrb	r3, [r3, #10]
 800d56c:	1c59      	adds	r1, r3, #1
 800d56e:	b2c8      	uxtb	r0, r1
 800d570:	4930      	ldr	r1, [pc, #192]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d572:	7288      	strb	r0, [r1, #10]
 800d574:	4413      	add	r3, r2
 800d576:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d57a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d57c:	4b2d      	ldr	r3, [pc, #180]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d57e:	68da      	ldr	r2, [r3, #12]
 800d580:	4b2c      	ldr	r3, [pc, #176]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d582:	7a9b      	ldrb	r3, [r3, #10]
 800d584:	1c59      	adds	r1, r3, #1
 800d586:	b2c8      	uxtb	r0, r1
 800d588:	492a      	ldr	r1, [pc, #168]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d58a:	7288      	strb	r0, [r1, #10]
 800d58c:	4413      	add	r3, r2
 800d58e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d592:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d594:	4b27      	ldr	r3, [pc, #156]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d596:	68da      	ldr	r2, [r3, #12]
 800d598:	4b26      	ldr	r3, [pc, #152]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d59a:	7a9b      	ldrb	r3, [r3, #10]
 800d59c:	1c59      	adds	r1, r3, #1
 800d59e:	b2c8      	uxtb	r0, r1
 800d5a0:	4924      	ldr	r1, [pc, #144]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5a2:	7288      	strb	r0, [r1, #10]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800d5aa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d5ac:	4b21      	ldr	r3, [pc, #132]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5ae:	68da      	ldr	r2, [r3, #12]
 800d5b0:	4b20      	ldr	r3, [pc, #128]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5b2:	7a9b      	ldrb	r3, [r3, #10]
 800d5b4:	1c59      	adds	r1, r3, #1
 800d5b6:	b2c8      	uxtb	r0, r1
 800d5b8:	491e      	ldr	r1, [pc, #120]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5ba:	7288      	strb	r0, [r1, #10]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800d5c2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d5c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5c6:	68da      	ldr	r2, [r3, #12]
 800d5c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5ca:	7a9b      	ldrb	r3, [r3, #10]
 800d5cc:	1c59      	adds	r1, r3, #1
 800d5ce:	b2c8      	uxtb	r0, r1
 800d5d0:	4918      	ldr	r1, [pc, #96]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5d2:	7288      	strb	r0, [r1, #10]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800d5da:	701a      	strb	r2, [r3, #0]
                break;
 800d5dc:	e00a      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800d5de:	bf00      	nop
 800d5e0:	e008      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d5e2:	bf00      	nop
 800d5e4:	e006      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d5e6:	bf00      	nop
 800d5e8:	e004      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d5ea:	bf00      	nop
 800d5ec:	e002      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d5ee:	bf00      	nop
 800d5f0:	e000      	b.n	800d5f4 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800d5f2:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800d5f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d5f6:	7a9b      	ldrb	r3, [r3, #10]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00c      	beq.n	800d616 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800d5fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d63c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800d5fe:	7a5b      	ldrb	r3, [r3, #9]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d114      	bne.n	800d62e <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800d604:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d608:	480c      	ldr	r0, [pc, #48]	@ (800d63c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800d60a:	f00d fbe3 	bl	801add4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800d60e:	480b      	ldr	r0, [pc, #44]	@ (800d63c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800d610:	f00d fb02 	bl	801ac18 <UTIL_TIMER_Start>
 800d614:	e00b      	b.n	800d62e <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800d616:	4809      	ldr	r0, [pc, #36]	@ (800d63c <LmhpComplianceOnMcpsIndication+0x7b4>)
 800d618:	f00d fb6c 	bl	801acf4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800d61c:	4b05      	ldr	r3, [pc, #20]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800d61e:	2200      	movs	r2, #0
 800d620:	705a      	strb	r2, [r3, #1]
 800d622:	e004      	b.n	800d62e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800d624:	bf00      	nop
 800d626:	e002      	b.n	800d62e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800d628:	bf00      	nop
 800d62a:	e000      	b.n	800d62e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800d62c:	bf00      	nop
    }
}
 800d62e:	3790      	adds	r7, #144	@ 0x90
 800d630:	46bd      	mov	sp, r7
 800d632:	bdb0      	pop	{r4, r5, r7, pc}
 800d634:	20000588 	.word	0x20000588
 800d638:	200005c0 	.word	0x200005c0
 800d63c:	200005c4 	.word	0x200005c4

0800d640 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800d648:	bf00      	nop
    }
}
 800d64a:	bf00      	nop
 800d64c:	370c      	adds	r7, #12
 800d64e:	46bd      	mov	sp, r7
 800d650:	bc80      	pop	{r7}
 800d652:	4770      	bx	lr

0800d654 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d65c:	4b05      	ldr	r3, [pc, #20]	@ (800d674 <LmhpComplianceOnMlmeIndication+0x20>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	f083 0301 	eor.w	r3, r3, #1
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b00      	cmp	r3, #0
    {
        return;
 800d668:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bc80      	pop	{r7}
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	20000588 	.word	0x20000588

0800d678 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800d680:	4b08      	ldr	r3, [pc, #32]	@ (800d6a4 <OnProcessTimer+0x2c>)
 800d682:	7a9b      	ldrb	r3, [r3, #10]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800d688:	4b06      	ldr	r3, [pc, #24]	@ (800d6a4 <OnProcessTimer+0x2c>)
 800d68a:	2201      	movs	r2, #1
 800d68c:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800d68e:	4b06      	ldr	r3, [pc, #24]	@ (800d6a8 <OnProcessTimer+0x30>)
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800d696:	4b04      	ldr	r3, [pc, #16]	@ (800d6a8 <OnProcessTimer+0x30>)
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	4798      	blx	r3
    }
}
 800d69c:	bf00      	nop
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	20000588 	.word	0x20000588
 800d6a8:	200000b8 	.word	0x200000b8

0800d6ac <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bc80      	pop	{r7}
 800d6be:	4770      	bx	lr

0800d6c0 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	6039      	str	r1, [r7, #0]
 800d6ca:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800d6cc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bc80      	pop	{r7}
 800d6d8:	4770      	bx	lr
	...

0800d6dc <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800d6dc:	b590      	push	{r4, r7, lr}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d6e2:	f00d fc21 	bl	801af28 <UTIL_TIMER_GetCurrentTime>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	4a0f      	ldr	r2, [pc, #60]	@ (800d728 <OnRadioTxDone+0x4c>)
 800d6ea:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d6ec:	4c0f      	ldr	r4, [pc, #60]	@ (800d72c <OnRadioTxDone+0x50>)
 800d6ee:	463b      	mov	r3, r7
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f00c fdff 	bl	801a2f4 <SysTimeGet>
 800d6f6:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800d6fa:	463a      	mov	r2, r7
 800d6fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d700:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d704:	4a0a      	ldr	r2, [pc, #40]	@ (800d730 <OnRadioTxDone+0x54>)
 800d706:	7813      	ldrb	r3, [r2, #0]
 800d708:	f043 0320 	orr.w	r3, r3, #32
 800d70c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d70e:	f003 f9fb 	bl	8010b08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d712:	4b08      	ldr	r3, [pc, #32]	@ (800d734 <OnRadioTxDone+0x58>)
 800d714:	2201      	movs	r2, #1
 800d716:	2100      	movs	r1, #0
 800d718:	2002      	movs	r0, #2
 800d71a:	f00d fcf5 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
}
 800d71e:	bf00      	nop
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	bd90      	pop	{r4, r7, pc}
 800d726:	bf00      	nop
 800d728:	20001160 	.word	0x20001160
 800d72c:	200005dc 	.word	0x200005dc
 800d730:	2000115c 	.word	0x2000115c
 800d734:	0801c2f8 	.word	0x0801c2f8

0800d738 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	4608      	mov	r0, r1
 800d742:	4611      	mov	r1, r2
 800d744:	461a      	mov	r2, r3
 800d746:	4603      	mov	r3, r0
 800d748:	817b      	strh	r3, [r7, #10]
 800d74a:	460b      	mov	r3, r1
 800d74c:	813b      	strh	r3, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d752:	f00d fbe9 	bl	801af28 <UTIL_TIMER_GetCurrentTime>
 800d756:	4603      	mov	r3, r0
 800d758:	4a11      	ldr	r2, [pc, #68]	@ (800d7a0 <OnRadioRxDone+0x68>)
 800d75a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d75c:	4a10      	ldr	r2, [pc, #64]	@ (800d7a0 <OnRadioRxDone+0x68>)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d762:	4a0f      	ldr	r2, [pc, #60]	@ (800d7a0 <OnRadioRxDone+0x68>)
 800d764:	897b      	ldrh	r3, [r7, #10]
 800d766:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d768:	4a0d      	ldr	r2, [pc, #52]	@ (800d7a0 <OnRadioRxDone+0x68>)
 800d76a:	893b      	ldrh	r3, [r7, #8]
 800d76c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d76e:	4a0c      	ldr	r2, [pc, #48]	@ (800d7a0 <OnRadioRxDone+0x68>)
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d774:	4a0b      	ldr	r2, [pc, #44]	@ (800d7a4 <OnRadioRxDone+0x6c>)
 800d776:	7813      	ldrb	r3, [r2, #0]
 800d778:	f043 0310 	orr.w	r3, r3, #16
 800d77c:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800d77e:	4a09      	ldr	r2, [pc, #36]	@ (800d7a4 <OnRadioRxDone+0x6c>)
 800d780:	7813      	ldrb	r3, [r2, #0]
 800d782:	f043 0301 	orr.w	r3, r3, #1
 800d786:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800d788:	f003 f9be 	bl	8010b08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d78c:	4b06      	ldr	r3, [pc, #24]	@ (800d7a8 <OnRadioRxDone+0x70>)
 800d78e:	2201      	movs	r2, #1
 800d790:	2100      	movs	r1, #0
 800d792:	2002      	movs	r0, #2
 800d794:	f00d fcb8 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
}
 800d798:	bf00      	nop
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	20001164 	.word	0x20001164
 800d7a4:	2000115c 	.word	0x2000115c
 800d7a8:	0801c308 	.word	0x0801c308

0800d7ac <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d7b0:	4a07      	ldr	r2, [pc, #28]	@ (800d7d0 <OnRadioTxTimeout+0x24>)
 800d7b2:	7813      	ldrb	r3, [r2, #0]
 800d7b4:	f043 0308 	orr.w	r3, r3, #8
 800d7b8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d7ba:	f003 f9a5 	bl	8010b08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d7be:	4b05      	ldr	r3, [pc, #20]	@ (800d7d4 <OnRadioTxTimeout+0x28>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	2002      	movs	r0, #2
 800d7c6:	f00d fc9f 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
}
 800d7ca:	bf00      	nop
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	2000115c 	.word	0x2000115c
 800d7d4:	0801c318 	.word	0x0801c318

0800d7d8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d7dc:	4a04      	ldr	r2, [pc, #16]	@ (800d7f0 <OnRadioRxError+0x18>)
 800d7de:	7813      	ldrb	r3, [r2, #0]
 800d7e0:	f043 0304 	orr.w	r3, r3, #4
 800d7e4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d7e6:	f003 f98f 	bl	8010b08 <OnMacProcessNotify>
}
 800d7ea:	bf00      	nop
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	2000115c 	.word	0x2000115c

0800d7f4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d7f8:	4a07      	ldr	r2, [pc, #28]	@ (800d818 <OnRadioRxTimeout+0x24>)
 800d7fa:	7813      	ldrb	r3, [r2, #0]
 800d7fc:	f043 0302 	orr.w	r3, r3, #2
 800d800:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d802:	f003 f981 	bl	8010b08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d806:	4b05      	ldr	r3, [pc, #20]	@ (800d81c <OnRadioRxTimeout+0x28>)
 800d808:	2201      	movs	r2, #1
 800d80a:	2100      	movs	r1, #0
 800d80c:	2002      	movs	r0, #2
 800d80e:	f00d fc7b 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
}
 800d812:	bf00      	nop
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	2000115c 	.word	0x2000115c
 800d81c:	0801c328 	.word	0x0801c328

0800d820 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d824:	4b08      	ldr	r3, [pc, #32]	@ (800d848 <UpdateRxSlotIdleState+0x28>)
 800d826:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d004      	beq.n	800d838 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d82e:	4b07      	ldr	r3, [pc, #28]	@ (800d84c <UpdateRxSlotIdleState+0x2c>)
 800d830:	2206      	movs	r2, #6
 800d832:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d836:	e003      	b.n	800d840 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d838:	4b04      	ldr	r3, [pc, #16]	@ (800d84c <UpdateRxSlotIdleState+0x2c>)
 800d83a:	2202      	movs	r2, #2
 800d83c:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800d840:	bf00      	nop
 800d842:	46bd      	mov	sp, r7
 800d844:	bc80      	pop	{r7}
 800d846:	4770      	bx	lr
 800d848:	20000b10 	.word	0x20000b10
 800d84c:	200005dc 	.word	0x200005dc

0800d850 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b092      	sub	sp, #72	@ 0x48
 800d854:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d856:	4b4a      	ldr	r3, [pc, #296]	@ (800d980 <ProcessRadioTxDone+0x130>)
 800d858:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d85c:	2b02      	cmp	r3, #2
 800d85e:	d002      	beq.n	800d866 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d860:	4b48      	ldr	r3, [pc, #288]	@ (800d984 <ProcessRadioTxDone+0x134>)
 800d862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d864:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d866:	f3ef 8310 	mrs	r3, PRIMASK
 800d86a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800d86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800d870:	b672      	cpsid	i
}
 800d872:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800d874:	f00d fb58 	bl	801af28 <UTIL_TIMER_GetCurrentTime>
 800d878:	4602      	mov	r2, r0
 800d87a:	4b43      	ldr	r3, [pc, #268]	@ (800d988 <ProcessRadioTxDone+0x138>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800d882:	4b42      	ldr	r3, [pc, #264]	@ (800d98c <ProcessRadioTxDone+0x13c>)
 800d884:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800d888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	4619      	mov	r1, r3
 800d88e:	4840      	ldr	r0, [pc, #256]	@ (800d990 <ProcessRadioTxDone+0x140>)
 800d890:	f00d faa0 	bl	801add4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d894:	483e      	ldr	r0, [pc, #248]	@ (800d990 <ProcessRadioTxDone+0x140>)
 800d896:	f00d f9bf 	bl	801ac18 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800d89a:	4b3c      	ldr	r3, [pc, #240]	@ (800d98c <ProcessRadioTxDone+0x13c>)
 800d89c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	483b      	ldr	r0, [pc, #236]	@ (800d994 <ProcessRadioTxDone+0x144>)
 800d8a8:	f00d fa94 	bl	801add4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d8ac:	4839      	ldr	r0, [pc, #228]	@ (800d994 <ProcessRadioTxDone+0x144>)
 800d8ae:	f00d f9b3 	bl	801ac18 <UTIL_TIMER_Start>
 800d8b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8b8:	f383 8810 	msr	PRIMASK, r3
}
 800d8bc:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800d8be:	4b33      	ldr	r3, [pc, #204]	@ (800d98c <ProcessRadioTxDone+0x13c>)
 800d8c0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d01a      	beq.n	800d8fe <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800d8c8:	2315      	movs	r3, #21
 800d8ca:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d8ce:	4b2c      	ldr	r3, [pc, #176]	@ (800d980 <ProcessRadioTxDone+0x130>)
 800d8d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d8d4:	f107 0220 	add.w	r2, r7, #32
 800d8d8:	4611      	mov	r1, r2
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f006 fe8c 	bl	80145f8 <RegionGetPhyParam>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d8e4:	4b29      	ldr	r3, [pc, #164]	@ (800d98c <ProcessRadioTxDone+0x13c>)
 800d8e6:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	4829      	ldr	r0, [pc, #164]	@ (800d998 <ProcessRadioTxDone+0x148>)
 800d8f2:	f00d fa6f 	bl	801add4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800d8f6:	4828      	ldr	r0, [pc, #160]	@ (800d998 <ProcessRadioTxDone+0x148>)
 800d8f8:	f00d f98e 	bl	801ac18 <UTIL_TIMER_Start>
 800d8fc:	e003      	b.n	800d906 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d8fe:	4b23      	ldr	r3, [pc, #140]	@ (800d98c <ProcessRadioTxDone+0x13c>)
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d906:	4b20      	ldr	r3, [pc, #128]	@ (800d988 <ProcessRadioTxDone+0x138>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a1d      	ldr	r2, [pc, #116]	@ (800d980 <ProcessRadioTxDone+0x130>)
 800d90c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d90e:	4b1f      	ldr	r3, [pc, #124]	@ (800d98c <ProcessRadioTxDone+0x13c>)
 800d910:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800d914:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d916:	4b1c      	ldr	r3, [pc, #112]	@ (800d988 <ProcessRadioTxDone+0x138>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d91c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d920:	4618      	mov	r0, r3
 800d922:	f00c fd1f 	bl	801a364 <SysTimeGetMcuTime>
 800d926:	4638      	mov	r0, r7
 800d928:	4b15      	ldr	r3, [pc, #84]	@ (800d980 <ProcessRadioTxDone+0x130>)
 800d92a:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800d92e:	9200      	str	r2, [sp, #0]
 800d930:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d934:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d938:	ca06      	ldmia	r2, {r1, r2}
 800d93a:	f00c fc74 	bl	801a226 <SysTimeSub>
 800d93e:	f107 0314 	add.w	r3, r7, #20
 800d942:	463a      	mov	r2, r7
 800d944:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d948:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d94c:	4b0f      	ldr	r3, [pc, #60]	@ (800d98c <ProcessRadioTxDone+0x13c>)
 800d94e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800d952:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d954:	2301      	movs	r3, #1
 800d956:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d958:	4b09      	ldr	r3, [pc, #36]	@ (800d980 <ProcessRadioTxDone+0x130>)
 800d95a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800d962:	2300      	movs	r3, #0
 800d964:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d966:	4b06      	ldr	r3, [pc, #24]	@ (800d980 <ProcessRadioTxDone+0x130>)
 800d968:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d96c:	f107 0208 	add.w	r2, r7, #8
 800d970:	4611      	mov	r1, r2
 800d972:	4618      	mov	r0, r3
 800d974:	f006 fe58 	bl	8014628 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800d978:	bf00      	nop
 800d97a:	3740      	adds	r7, #64	@ 0x40
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20000b10 	.word	0x20000b10
 800d984:	0801c9c4 	.word	0x0801c9c4
 800d988:	20001160 	.word	0x20001160
 800d98c:	200005dc 	.word	0x200005dc
 800d990:	2000095c 	.word	0x2000095c
 800d994:	20000974 	.word	0x20000974
 800d998:	200009dc 	.word	0x200009dc

0800d99c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d9a0:	4b10      	ldr	r3, [pc, #64]	@ (800d9e4 <PrepareRxDoneAbort+0x48>)
 800d9a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d9a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9aa:	4a0e      	ldr	r2, [pc, #56]	@ (800d9e4 <PrepareRxDoneAbort+0x48>)
 800d9ac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800d9b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e4 <PrepareRxDoneAbort+0x48>)
 800d9b2:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d002      	beq.n	800d9c0 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	f001 fa12 	bl	800ede4 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d9c0:	4a08      	ldr	r2, [pc, #32]	@ (800d9e4 <PrepareRxDoneAbort+0x48>)
 800d9c2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800d9c6:	f043 0302 	orr.w	r3, r3, #2
 800d9ca:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d9ce:	4a05      	ldr	r2, [pc, #20]	@ (800d9e4 <PrepareRxDoneAbort+0x48>)
 800d9d0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800d9d4:	f043 0310 	orr.w	r3, r3, #16
 800d9d8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800d9dc:	f7ff ff20 	bl	800d820 <UpdateRxSlotIdleState>
}
 800d9e0:	bf00      	nop
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	200005dc 	.word	0x200005dc

0800d9e8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d9e8:	b590      	push	{r4, r7, lr}
 800d9ea:	b0a9      	sub	sp, #164	@ 0xa4
 800d9ec:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d9ee:	2312      	movs	r3, #18
 800d9f0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d9f4:	4ba1      	ldr	r3, [pc, #644]	@ (800dc7c <ProcessRadioRxDone+0x294>)
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800d9fc:	4b9f      	ldr	r3, [pc, #636]	@ (800dc7c <ProcessRadioRxDone+0x294>)
 800d9fe:	891b      	ldrh	r3, [r3, #8]
 800da00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800da04:	4b9d      	ldr	r3, [pc, #628]	@ (800dc7c <ProcessRadioRxDone+0x294>)
 800da06:	895b      	ldrh	r3, [r3, #10]
 800da08:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800da0c:	4b9b      	ldr	r3, [pc, #620]	@ (800dc7c <ProcessRadioRxDone+0x294>)
 800da0e:	7b1b      	ldrb	r3, [r3, #12]
 800da10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800da1e:	4b98      	ldr	r3, [pc, #608]	@ (800dc80 <ProcessRadioRxDone+0x298>)
 800da20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800da28:	2300      	movs	r3, #0
 800da2a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800da2e:	2301      	movs	r3, #1
 800da30:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800da34:	2301      	movs	r3, #1
 800da36:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800da3a:	4a92      	ldr	r2, [pc, #584]	@ (800dc84 <ProcessRadioRxDone+0x29c>)
 800da3c:	7813      	ldrb	r3, [r2, #0]
 800da3e:	f023 0301 	bic.w	r3, r3, #1
 800da42:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800da44:	4b90      	ldr	r3, [pc, #576]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da46:	2200      	movs	r2, #0
 800da48:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800da4c:	4a8e      	ldr	r2, [pc, #568]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da4e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800da52:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800da56:	4a8c      	ldr	r2, [pc, #560]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da58:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800da5c:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800da60:	4b89      	ldr	r3, [pc, #548]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da62:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800da66:	4b88      	ldr	r3, [pc, #544]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da68:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800da6c:	4b86      	ldr	r3, [pc, #536]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800da74:	4b84      	ldr	r3, [pc, #528]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da76:	2200      	movs	r2, #0
 800da78:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800da7c:	4b82      	ldr	r3, [pc, #520]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800da84:	4b80      	ldr	r3, [pc, #512]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da86:	2200      	movs	r2, #0
 800da88:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800da8c:	4b7e      	ldr	r3, [pc, #504]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800da94:	4b7c      	ldr	r3, [pc, #496]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da96:	2200      	movs	r2, #0
 800da98:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800da9c:	4b7a      	ldr	r3, [pc, #488]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800daa4:	4b78      	ldr	r3, [pc, #480]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800daac:	4b76      	ldr	r3, [pc, #472]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800dab4:	4b74      	ldr	r3, [pc, #464]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dabc:	4b72      	ldr	r3, [pc, #456]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800dac4:	4b70      	ldr	r3, [pc, #448]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800dac6:	2200      	movs	r2, #0
 800dac8:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800dacc:	4b6f      	ldr	r3, [pc, #444]	@ (800dc8c <ProcessRadioRxDone+0x2a4>)
 800dace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dad0:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800dad2:	4b6d      	ldr	r3, [pc, #436]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800dad4:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800dadc:	486c      	ldr	r0, [pc, #432]	@ (800dc90 <ProcessRadioRxDone+0x2a8>)
 800dade:	f00d f909 	bl	801acf4 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dae2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dae6:	4619      	mov	r1, r3
 800dae8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800daec:	f004 fe06 	bl	80126fc <LoRaMacClassBRxBeacon>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00b      	beq.n	800db0e <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800daf6:	4a64      	ldr	r2, [pc, #400]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800daf8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800dafc:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800db00:	4a61      	ldr	r2, [pc, #388]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800db02:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800db06:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800db0a:	f000 bc8d 	b.w	800e428 <ProcessRadioRxDone+0xa40>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800db0e:	4b5c      	ldr	r3, [pc, #368]	@ (800dc80 <ProcessRadioRxDone+0x298>)
 800db10:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800db14:	2b01      	cmp	r3, #1
 800db16:	d11e      	bne.n	800db56 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800db18:	f004 fe03 	bl	8012722 <LoRaMacClassBIsPingExpected>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00a      	beq.n	800db38 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800db22:	2000      	movs	r0, #0
 800db24:	f004 fdb4 	bl	8012690 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800db28:	2000      	movs	r0, #0
 800db2a:	f004 fdd5 	bl	80126d8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800db2e:	4b56      	ldr	r3, [pc, #344]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800db30:	2204      	movs	r2, #4
 800db32:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800db36:	e00e      	b.n	800db56 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800db38:	f004 fdfa 	bl	8012730 <LoRaMacClassBIsMulticastExpected>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d009      	beq.n	800db56 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800db42:	2000      	movs	r0, #0
 800db44:	f004 fdae 	bl	80126a4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800db48:	2000      	movs	r0, #0
 800db4a:	f004 fdce 	bl	80126ea <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800db4e:	4b4e      	ldr	r3, [pc, #312]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800db50:	2205      	movs	r2, #5
 800db52:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800db56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d107      	bne.n	800db6e <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db5e:	4b4a      	ldr	r3, [pc, #296]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800db60:	2201      	movs	r2, #1
 800db62:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800db66:	f7ff ff19 	bl	800d99c <PrepareRxDoneAbort>
        return;
 800db6a:	f000 bc5d 	b.w	800e428 <ProcessRadioRxDone+0xa40>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800db6e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800db78:	461a      	mov	r2, r3
 800db7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db7e:	4413      	add	r3, r2
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800db86:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800db8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	3b01      	subs	r3, #1
 800db92:	2b06      	cmp	r3, #6
 800db94:	f200 8419 	bhi.w	800e3ca <ProcessRadioRxDone+0x9e2>
 800db98:	a201      	add	r2, pc, #4	@ (adr r2, 800dba0 <ProcessRadioRxDone+0x1b8>)
 800db9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db9e:	bf00      	nop
 800dba0:	0800dbbd 	.word	0x0800dbbd
 800dba4:	0800e3cb 	.word	0x0800e3cb
 800dba8:	0800dddb 	.word	0x0800dddb
 800dbac:	0800e3cb 	.word	0x0800e3cb
 800dbb0:	0800ddd3 	.word	0x0800ddd3
 800dbb4:	0800e3cb 	.word	0x0800e3cb
 800dbb8:	0800e36f 	.word	0x0800e36f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dbbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dbc0:	2b10      	cmp	r3, #16
 800dbc2:	d807      	bhi.n	800dbd4 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbc4:	4b30      	ldr	r3, [pc, #192]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800dbcc:	f7ff fee6 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800dbd0:	f000 bc2a 	b.w	800e428 <ProcessRadioRxDone+0xa40>
            }
            macMsgJoinAccept.Buffer = payload;
 800dbd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dbd8:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800dbda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dbe2:	4b27      	ldr	r3, [pc, #156]	@ (800dc80 <ProcessRadioRxDone+0x298>)
 800dbe4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d007      	beq.n	800dbfc <ProcessRadioRxDone+0x214>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbec:	4b26      	ldr	r3, [pc, #152]	@ (800dc88 <ProcessRadioRxDone+0x2a0>)
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800dbf4:	f7ff fed2 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800dbf8:	f000 bc16 	b.w	800e428 <ProcessRadioRxDone+0xa40>
            }

            SecureElementGetJoinEui( joinEui );
 800dbfc:	1d3b      	adds	r3, r7, #4
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe f88e 	bl	800bd20 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800dc04:	f107 0214 	add.w	r2, r7, #20
 800dc08:	1d3b      	adds	r3, r7, #4
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	20ff      	movs	r0, #255	@ 0xff
 800dc0e:	f005 ff7d 	bl	8013b0c <LoRaMacCryptoHandleJoinAccept>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                macCryptoStatus = LoRaMacCryptoHandleJoinAccept( REJOIN_REQ_2, joinEui, &macMsgJoinAccept );
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dc18:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f040 80cc 	bne.w	800ddba <ProcessRadioRxDone+0x3d2>
            {
                VerifyParams_t verifyRxDr;

                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800dc22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dc26:	f003 030f 	and.w	r3, r3, #15
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	2b0f      	cmp	r3, #15
 800dc2e:	d031      	beq.n	800dc94 <ProcessRadioRxDone+0x2ac>
                {
                    verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dc30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dc34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	b25b      	sxtb	r3, r3
 800dc3c:	703b      	strb	r3, [r7, #0]
                    verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dc3e:	4b10      	ldr	r3, [pc, #64]	@ (800dc80 <ProcessRadioRxDone+0x298>)
 800dc40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800dc44:	707b      	strb	r3, [r7, #1]
                    if( RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR ) == false )
 800dc46:	4b0e      	ldr	r3, [pc, #56]	@ (800dc80 <ProcessRadioRxDone+0x298>)
 800dc48:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dc4c:	4639      	mov	r1, r7
 800dc4e:	2207      	movs	r2, #7
 800dc50:	4618      	mov	r0, r3
 800dc52:	f006 fd0c 	bl	801466e <RegionVerify>
 800dc56:	4603      	mov	r3, r0
 800dc58:	f083 0301 	eor.w	r3, r3, #1
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d018      	beq.n	800dc94 <ProcessRadioRxDone+0x2ac>
                    {
                        // MLME handling
                        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dc62:	2001      	movs	r0, #1
 800dc64:	f005 fa60 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 83b4 	beq.w	800e3d8 <ProcessRadioRxDone+0x9f0>
                        {
                            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800dc70:	2101      	movs	r1, #1
 800dc72:	2007      	movs	r0, #7
 800dc74:	f005 f9cc 	bl	8013010 <LoRaMacConfirmQueueSetStatus>
 800dc78:	e3b1      	b.n	800e3de <ProcessRadioRxDone+0x9f6>
 800dc7a:	bf00      	nop
 800dc7c:	20001164 	.word	0x20001164
 800dc80:	20000b10 	.word	0x20000b10
 800dc84:	2000115c 	.word	0x2000115c
 800dc88:	200005dc 	.word	0x200005dc
 800dc8c:	0801c9c4 	.word	0x0801c9c4
 800dc90:	20000974 	.word	0x20000974
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dc94:	7f7b      	ldrb	r3, [r7, #29]
 800dc96:	461a      	mov	r2, r3
 800dc98:	4ba5      	ldr	r3, [pc, #660]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dc9a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dc9e:	4ba4      	ldr	r3, [pc, #656]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800dca4:	7fbb      	ldrb	r3, [r7, #30]
 800dca6:	021b      	lsls	r3, r3, #8
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	4aa1      	ldr	r2, [pc, #644]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dcac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dcb0:	4b9f      	ldr	r3, [pc, #636]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dcb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800dcb6:	7ffb      	ldrb	r3, [r7, #31]
 800dcb8:	041b      	lsls	r3, r3, #16
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	4a9c      	ldr	r2, [pc, #624]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dcbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	4a9a      	ldr	r2, [pc, #616]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dcc6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800dcca:	4b99      	ldr	r3, [pc, #612]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dccc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	2002      	movs	r0, #2
 800dcd4:	f7fe f83c 	bl	800bd50 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dcd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dcdc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	461a      	mov	r2, r3
 800dce4:	4b92      	ldr	r3, [pc, #584]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dce6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
 800dcea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dcee:	f003 030f 	and.w	r3, r3, #15
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	2b0f      	cmp	r3, #15
 800dcf6:	d011      	beq.n	800dd1c <ProcessRadioRxDone+0x334>
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dcf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dcfc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	461a      	mov	r2, r3
 800dd04:	4b8a      	ldr	r3, [pc, #552]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd06:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	461a      	mov	r2, r3
 800dd16:	4b86      	ldr	r3, [pc, #536]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dd1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd20:	461a      	mov	r2, r3
 800dd22:	4b83      	ldr	r3, [pc, #524]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd24:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dd26:	4b82      	ldr	r3, [pc, #520]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d102      	bne.n	800dd34 <ProcessRadioRxDone+0x34c>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dd2e:	4b80      	ldr	r3, [pc, #512]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd30:	2201      	movs	r2, #1
 800dd32:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800dd34:	4b7e      	ldr	r3, [pc, #504]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dd3c:	fb02 f303 	mul.w	r3, r2, r3
 800dd40:	4a7b      	ldr	r2, [pc, #492]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd42:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800dd44:	4b7a      	ldr	r3, [pc, #488]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd48:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800dd4c:	4a78      	ldr	r2, [pc, #480]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd4e:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800dd50:	4b77      	ldr	r3, [pc, #476]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800dd58:	4b75      	ldr	r3, [pc, #468]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800dd60:	f107 0314 	add.w	r3, r7, #20
 800dd64:	3312      	adds	r3, #18
 800dd66:	67fb      	str	r3, [r7, #124]	@ 0x7c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800dd68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	3b11      	subs	r3, #17
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800dd76:	4b6f      	ldr	r3, [pc, #444]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800dd78:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800dd7c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800dd80:	4b6b      	ldr	r3, [pc, #428]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd82:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dd86:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f006 fc85 	bl	801469c <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dd92:	4b67      	ldr	r3, [pc, #412]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dd94:	2202      	movs	r2, #2
 800dd96:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800dd9a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f005 f9c2 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f000 8318 	beq.w	800e3dc <ProcessRadioRxDone+0x9f4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800ddac:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	f005 f92c 	bl	8013010 <LoRaMacConfirmQueueSetStatus>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }

            break;
 800ddb8:	e310      	b.n	800e3dc <ProcessRadioRxDone+0x9f4>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ddba:	2001      	movs	r0, #1
 800ddbc:	f005 f9b4 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 830a 	beq.w	800e3dc <ProcessRadioRxDone+0x9f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ddc8:	2101      	movs	r1, #1
 800ddca:	2007      	movs	r0, #7
 800ddcc:	f005 f920 	bl	8013010 <LoRaMacConfirmQueueSetStatus>
            break;
 800ddd0:	e304      	b.n	800e3dc <ProcessRadioRxDone+0x9f4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ddd2:	4b58      	ldr	r3, [pc, #352]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ddda:	4b55      	ldr	r3, [pc, #340]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800dddc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800dde0:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800dde4:	4b53      	ldr	r3, [pc, #332]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800dde6:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800ddea:	b25b      	sxtb	r3, r3
 800ddec:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ddf0:	230d      	movs	r3, #13
 800ddf2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ddf6:	4b4e      	ldr	r3, [pc, #312]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800ddf8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <ProcessRadioRxDone+0x41e>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de00:	230e      	movs	r3, #14
 800de02:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de06:	4b4a      	ldr	r3, [pc, #296]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800de08:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800de0c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800de10:	4611      	mov	r1, r2
 800de12:	4618      	mov	r0, r3
 800de14:	f006 fbf0 	bl	80145f8 <RegionGetPhyParam>
 800de18:	4603      	mov	r3, r0
 800de1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800de1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800de20:	3b0d      	subs	r3, #13
 800de22:	b29b      	uxth	r3, r3
 800de24:	b21b      	sxth	r3, r3
 800de26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de2a:	b21a      	sxth	r2, r3
 800de2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de2e:	b21b      	sxth	r3, r3
 800de30:	429a      	cmp	r2, r3
 800de32:	dc03      	bgt.n	800de3c <ProcessRadioRxDone+0x454>
 800de34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800de38:	2b0b      	cmp	r3, #11
 800de3a:	d806      	bhi.n	800de4a <ProcessRadioRxDone+0x462>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de3c:	4b3d      	ldr	r3, [pc, #244]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800de44:	f7ff fdaa 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800de48:	e2ee      	b.n	800e428 <ProcessRadioRxDone+0xa40>
            }
            macMsgData.Buffer = payload;
 800de4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800de50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800de54:	b2db      	uxtb	r3, r3
 800de56:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800de5a:	4b37      	ldr	r3, [pc, #220]	@ (800df38 <ProcessRadioRxDone+0x550>)
 800de5c:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800de5e:	23ff      	movs	r3, #255	@ 0xff
 800de60:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800de64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800de68:	4618      	mov	r0, r3
 800de6a:	f006 f94c 	bl	8014106 <LoRaMacParserData>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d006      	beq.n	800de82 <ProcessRadioRxDone+0x49a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de74:	4b2f      	ldr	r3, [pc, #188]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800de76:	2201      	movs	r2, #1
 800de78:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800de7c:	f7ff fd8e 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800de80:	e2d2      	b.n	800e428 <ProcessRadioRxDone+0xa40>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800de82:	4b2b      	ldr	r3, [pc, #172]	@ (800df30 <ProcessRadioRxDone+0x548>)
 800de84:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d132      	bne.n	800def2 <ProcessRadioRxDone+0x50a>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800de8c:	f004 fc49 	bl	8012722 <LoRaMacClassBIsPingExpected>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d014      	beq.n	800dec0 <ProcessRadioRxDone+0x4d8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800de96:	2000      	movs	r0, #0
 800de98:	f004 fbfa 	bl	8012690 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800de9c:	2000      	movs	r0, #0
 800de9e:	f004 fc1b 	bl	80126d8 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dea2:	4b24      	ldr	r3, [pc, #144]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800dea4:	2204      	movs	r2, #4
 800dea6:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800deaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800deac:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800deb0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f004 fcbb 	bl	8012834 <LoRaMacClassBSetFPendingBit>
 800debe:	e018      	b.n	800def2 <ProcessRadioRxDone+0x50a>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dec0:	f004 fc36 	bl	8012730 <LoRaMacClassBIsMulticastExpected>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d013      	beq.n	800def2 <ProcessRadioRxDone+0x50a>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800deca:	2000      	movs	r0, #0
 800decc:	f004 fbea 	bl	80126a4 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ded0:	2000      	movs	r0, #0
 800ded2:	f004 fc0a 	bl	80126ea <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ded6:	4b17      	ldr	r3, [pc, #92]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800ded8:	2205      	movs	r2, #5
 800deda:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800dede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dee0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dee4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	4619      	mov	r1, r3
 800deec:	4610      	mov	r0, r2
 800deee:	f004 fca1 	bl	8012834 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800def2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800def4:	4a0f      	ldr	r2, [pc, #60]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800def6:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800defa:	f107 020e 	add.w	r2, r7, #14
 800defe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800df02:	4611      	mov	r1, r2
 800df04:	4618      	mov	r0, r3
 800df06:	f002 fcfa 	bl	80108fe <DetermineFrameType>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d006      	beq.n	800df1e <ProcessRadioRxDone+0x536>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df10:	4b08      	ldr	r3, [pc, #32]	@ (800df34 <ProcessRadioRxDone+0x54c>)
 800df12:	2201      	movs	r2, #1
 800df14:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800df18:	f7ff fd40 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800df1c:	e284      	b.n	800e428 <ProcessRadioRxDone+0xa40>
            }

            //Check if it is a multicast message
            multicast = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df28:	2300      	movs	r3, #0
 800df2a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800df2e:	e055      	b.n	800dfdc <ProcessRadioRxDone+0x5f4>
 800df30:	20000b10 	.word	0x20000b10
 800df34:	200005dc 	.word	0x200005dc
 800df38:	20000814 	.word	0x20000814
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df3c:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df40:	499f      	ldr	r1, [pc, #636]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800df42:	4613      	mov	r3, r2
 800df44:	005b      	lsls	r3, r3, #1
 800df46:	4413      	add	r3, r2
 800df48:	011b      	lsls	r3, r3, #4
 800df4a:	440b      	add	r3, r1
 800df4c:	33ec      	adds	r3, #236	@ 0xec
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df52:	429a      	cmp	r2, r3
 800df54:	d13d      	bne.n	800dfd2 <ProcessRadioRxDone+0x5ea>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800df56:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df5a:	4999      	ldr	r1, [pc, #612]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800df5c:	4613      	mov	r3, r2
 800df5e:	005b      	lsls	r3, r3, #1
 800df60:	4413      	add	r3, r2
 800df62:	011b      	lsls	r3, r3, #4
 800df64:	440b      	add	r3, r1
 800df66:	33e9      	adds	r3, #233	@ 0xe9
 800df68:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d031      	beq.n	800dfd2 <ProcessRadioRxDone+0x5ea>
                {
                    multicast = 1;
 800df6e:	2301      	movs	r3, #1
 800df70:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800df74:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df78:	4991      	ldr	r1, [pc, #580]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800df7a:	4613      	mov	r3, r2
 800df7c:	005b      	lsls	r3, r3, #1
 800df7e:	4413      	add	r3, r2
 800df80:	011b      	lsls	r3, r3, #4
 800df82:	440b      	add	r3, r1
 800df84:	33ea      	adds	r3, #234	@ 0xea
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800df8c:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df90:	498b      	ldr	r1, [pc, #556]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800df92:	4613      	mov	r3, r2
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	4413      	add	r3, r2
 800df98:	011b      	lsls	r3, r3, #4
 800df9a:	440b      	add	r3, r1
 800df9c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dfa6:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800dfaa:	4985      	ldr	r1, [pc, #532]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800dfac:	4613      	mov	r3, r2
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	4413      	add	r3, r2
 800dfb2:	011b      	lsls	r3, r3, #4
 800dfb4:	440b      	add	r3, r1
 800dfb6:	33ec      	adds	r3, #236	@ 0xec
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dfbe:	4b80      	ldr	r3, [pc, #512]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800dfc0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d10e      	bne.n	800dfe6 <ProcessRadioRxDone+0x5fe>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dfc8:	4b7e      	ldr	r3, [pc, #504]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800dfca:	2203      	movs	r2, #3
 800dfcc:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800dfd0:	e009      	b.n	800dfe6 <ProcessRadioRxDone+0x5fe>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dfd2:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800dfdc:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d0ab      	beq.n	800df3c <ProcessRadioRxDone+0x554>
 800dfe4:	e000      	b.n	800dfe8 <ProcessRadioRxDone+0x600>
                    break;
 800dfe6:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfe8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d117      	bne.n	800e020 <ProcessRadioRxDone+0x638>
 800dff0:	7bbb      	ldrb	r3, [r7, #14]
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d10d      	bne.n	800e012 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dff6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dffa:	f003 0320 	and.w	r3, r3, #32
 800dffe:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e000:	2b00      	cmp	r3, #0
 800e002:	d106      	bne.n	800e012 <ProcessRadioRxDone+0x62a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e004:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e00c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d006      	beq.n	800e020 <ProcessRadioRxDone+0x638>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e012:	4b6c      	ldr	r3, [pc, #432]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800e01a:	f7ff fcbf 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800e01e:	e203      	b.n	800e428 <ProcessRadioRxDone+0xa40>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e020:	7bb9      	ldrb	r1, [r7, #14]
 800e022:	4c67      	ldr	r4, [pc, #412]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800e024:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e028:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e02c:	f107 0310 	add.w	r3, r7, #16
 800e030:	9301      	str	r3, [sp, #4]
 800e032:	f107 030f 	add.w	r3, r7, #15
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800e03c:	f000 feec 	bl	800ee18 <GetFCntDown>
 800e040:	4603      	mov	r3, r0
 800e042:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e046:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d017      	beq.n	800e07e <ProcessRadioRxDone+0x696>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e04e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e052:	2b07      	cmp	r3, #7
 800e054:	d104      	bne.n	800e060 <ProcessRadioRxDone+0x678>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e056:	4b5b      	ldr	r3, [pc, #364]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e058:	2208      	movs	r2, #8
 800e05a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800e05e:	e003      	b.n	800e068 <ProcessRadioRxDone+0x680>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e060:	4b58      	ldr	r3, [pc, #352]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	4a56      	ldr	r2, [pc, #344]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e06c:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	4a54      	ldr	r2, [pc, #336]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e074:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800e078:	f7ff fc90 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800e07c:	e1d4      	b.n	800e428 <ProcessRadioRxDone+0xa40>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e07e:	7bfa      	ldrb	r2, [r7, #15]
 800e080:	6939      	ldr	r1, [r7, #16]
 800e082:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e086:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	460b      	mov	r3, r1
 800e08e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800e092:	f005 fe9b 	bl	8013dcc <LoRaMacCryptoUnsecureMessage>
 800e096:	4603      	mov	r3, r0
 800e098:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e09c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00f      	beq.n	800e0c4 <ProcessRadioRxDone+0x6dc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e0a4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	d104      	bne.n	800e0b6 <ProcessRadioRxDone+0x6ce>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e0ac:	4b45      	ldr	r3, [pc, #276]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0ae:	220a      	movs	r2, #10
 800e0b0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800e0b4:	e003      	b.n	800e0be <ProcessRadioRxDone+0x6d6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e0b6:	4b43      	ldr	r3, [pc, #268]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0b8:	220b      	movs	r2, #11
 800e0ba:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800e0be:	f7ff fc6d 	bl	800d99c <PrepareRxDoneAbort>
                return;
 800e0c2:	e1b1      	b.n	800e428 <ProcessRadioRxDone+0xa40>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e0c4:	4b3f      	ldr	r3, [pc, #252]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800e0cc:	4a3d      	ldr	r2, [pc, #244]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0ce:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e0d2:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800e0d6:	4b3b      	ldr	r3, [pc, #236]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800e0de:	4b39      	ldr	r3, [pc, #228]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	4a36      	ldr	r2, [pc, #216]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0ea:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	4a34      	ldr	r2, [pc, #208]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e0f2:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e0f6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e0fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	2b00      	cmp	r3, #0
 800e102:	bf14      	ite	ne
 800e104:	2301      	movne	r3, #1
 800e106:	2300      	moveq	r3, #0
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	4b2e      	ldr	r3, [pc, #184]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e10c:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e110:	4b2c      	ldr	r3, [pc, #176]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e112:	2200      	movs	r2, #0
 800e114:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e118:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e11c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	bf14      	ite	ne
 800e126:	2301      	movne	r3, #1
 800e128:	2300      	moveq	r3, #0
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	4b25      	ldr	r3, [pc, #148]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e12e:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e132:	4b24      	ldr	r3, [pc, #144]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e134:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d004      	beq.n	800e146 <ProcessRadioRxDone+0x75e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e13c:	4b21      	ldr	r3, [pc, #132]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e13e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e142:	2b01      	cmp	r3, #1
 800e144:	d106      	bne.n	800e154 <ProcessRadioRxDone+0x76c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e146:	4b1e      	ldr	r3, [pc, #120]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800e148:	2200      	movs	r2, #0
 800e14a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e14c:	4b1c      	ldr	r3, [pc, #112]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e154:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d104      	bne.n	800e166 <ProcessRadioRxDone+0x77e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e15c:	4b19      	ldr	r3, [pc, #100]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e15e:	2202      	movs	r2, #2
 800e160:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800e164:	e03a      	b.n	800e1dc <ProcessRadioRxDone+0x7f4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e166:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800e16a:	f023 031f 	bic.w	r3, r3, #31
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	2ba0      	cmp	r3, #160	@ 0xa0
 800e172:	d12b      	bne.n	800e1cc <ProcessRadioRxDone+0x7e4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e174:	4b12      	ldr	r3, [pc, #72]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800e176:	2201      	movs	r2, #1
 800e178:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e17c:	4b10      	ldr	r3, [pc, #64]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800e17e:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800e182:	2b00      	cmp	r3, #0
 800e184:	d102      	bne.n	800e18c <ProcessRadioRxDone+0x7a4>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e188:	4a0d      	ldr	r2, [pc, #52]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800e18a:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e18c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e194:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e196:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d01e      	beq.n	800e1dc <ProcessRadioRxDone+0x7f4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e19e:	4b09      	ldr	r3, [pc, #36]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e1a0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d019      	beq.n	800e1dc <ProcessRadioRxDone+0x7f4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e1a8:	4b05      	ldr	r3, [pc, #20]	@ (800e1c0 <ProcessRadioRxDone+0x7d8>)
 800e1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1ae:	4a05      	ldr	r2, [pc, #20]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e1b0:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e1b4:	4b04      	ldr	r3, [pc, #16]	@ (800e1c8 <ProcessRadioRxDone+0x7e0>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a02      	ldr	r2, [pc, #8]	@ (800e1c4 <ProcessRadioRxDone+0x7dc>)
 800e1ba:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800e1be:	e00d      	b.n	800e1dc <ProcessRadioRxDone+0x7f4>
 800e1c0:	20000b10 	.word	0x20000b10
 800e1c4:	200005dc 	.word	0x200005dc
 800e1c8:	20001164 	.word	0x20001164
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e1cc:	4b98      	ldr	r3, [pc, #608]	@ (800e430 <ProcessRadioRxDone+0xa48>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e1d4:	4b97      	ldr	r3, [pc, #604]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800e1dc:	4b94      	ldr	r3, [pc, #592]	@ (800e430 <ProcessRadioRxDone+0xa48>)
 800e1de:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <ProcessRadioRxDone+0x80c>
 800e1e6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e1ea:	f003 0310 	and.w	r3, r3, #16
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d004      	beq.n	800e1fe <ProcessRadioRxDone+0x816>
 800e1f4:	4b8e      	ldr	r3, [pc, #568]	@ (800e430 <ProcessRadioRxDone+0xa48>)
 800e1f6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d004      	beq.n	800e208 <ProcessRadioRxDone+0x820>
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) 
 800e1fe:	4b8d      	ldr	r3, [pc, #564]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e200:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
 800e204:	2b00      	cmp	r3, #0
 800e206:	d003      	beq.n	800e210 <ProcessRadioRxDone+0x828>
            //if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800e208:	4b8a      	ldr	r3, [pc, #552]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e210:	4b88      	ldr	r3, [pc, #544]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e212:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e216:	4a87      	ldr	r2, [pc, #540]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e218:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800e21c:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800e220:	4618      	mov	r0, r3
 800e222:	f001 ffa5 	bl	8010170 <RemoveMacCommands>

            switch( fType )
 800e226:	7bbb      	ldrb	r3, [r7, #14]
 800e228:	2b03      	cmp	r3, #3
 800e22a:	d874      	bhi.n	800e316 <ProcessRadioRxDone+0x92e>
 800e22c:	a201      	add	r2, pc, #4	@ (adr r2, 800e234 <ProcessRadioRxDone+0x84c>)
 800e22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e232:	bf00      	nop
 800e234:	0800e245 	.word	0x0800e245
 800e238:	0800e295 	.word	0x0800e295
 800e23c:	0800e2cb 	.word	0x0800e2cb
 800e240:	0800e2f1 	.word	0x0800e2f1
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e244:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e248:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	461c      	mov	r4, r3
 800e250:	4b78      	ldr	r3, [pc, #480]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e252:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e256:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e25a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e25e:	f102 0010 	add.w	r0, r2, #16
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	460b      	mov	r3, r1
 800e266:	4622      	mov	r2, r4
 800e268:	2100      	movs	r1, #0
 800e26a:	f000 ff51 	bl	800f110 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e26e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e272:	4b70      	ldr	r3, [pc, #448]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e274:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e278:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e27a:	4a6e      	ldr	r2, [pc, #440]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e27c:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e280:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e284:	4b6b      	ldr	r3, [pc, #428]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e286:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800e28a:	4b6a      	ldr	r3, [pc, #424]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800e292:	e047      	b.n	800e324 <ProcessRadioRxDone+0x93c>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e294:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e298:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	461c      	mov	r4, r3
 800e2a0:	4b64      	ldr	r3, [pc, #400]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e2a2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e2a6:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e2aa:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e2ae:	f102 0010 	add.w	r0, r2, #16
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4622      	mov	r2, r4
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	f000 ff29 	bl	800f110 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2be:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e2c2:	4b5c      	ldr	r3, [pc, #368]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e2c4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800e2c8:	e02c      	b.n	800e324 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e2ca:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e2cc:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e2d0:	4b58      	ldr	r3, [pc, #352]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e2d2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e2d6:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	2100      	movs	r1, #0
 800e2e0:	f000 ff16 	bl	800f110 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2e4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e2e8:	4b52      	ldr	r3, [pc, #328]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e2ea:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800e2ee:	e019      	b.n	800e324 <ProcessRadioRxDone+0x93c>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2f0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e2f4:	4b4f      	ldr	r3, [pc, #316]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e2f6:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e2fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2fc:	4a4d      	ldr	r2, [pc, #308]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e2fe:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e302:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e306:	4b4b      	ldr	r3, [pc, #300]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e308:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800e30c:	4b49      	ldr	r3, [pc, #292]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800e314:	e006      	b.n	800e324 <ProcessRadioRxDone+0x93c>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e316:	4b47      	ldr	r3, [pc, #284]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800e31e:	f7ff fb3d 	bl	800d99c <PrepareRxDoneAbort>
                    break;
 800e322:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e324:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800e328:	2be0      	cmp	r3, #224	@ 0xe0
 800e32a:	d118      	bne.n	800e35e <ProcessRadioRxDone+0x976>
 800e32c:	4b40      	ldr	r3, [pc, #256]	@ (800e430 <ProcessRadioRxDone+0xa48>)
 800e32e:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800e332:	f083 0301 	eor.w	r3, r3, #1
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d010      	beq.n	800e35e <ProcessRadioRxDone+0x976>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e33c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e340:	4b3c      	ldr	r3, [pc, #240]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e342:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800e346:	4b3b      	ldr	r3, [pc, #236]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e348:	2200      	movs	r2, #0
 800e34a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800e34e:	4b39      	ldr	r3, [pc, #228]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e350:	2200      	movs	r2, #0
 800e352:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800e356:	4b37      	ldr	r3, [pc, #220]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e35e:	4a35      	ldr	r2, [pc, #212]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e360:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e364:	f043 0302 	orr.w	r3, r3, #2
 800e368:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800e36c:	e037      	b.n	800e3de <ProcessRadioRxDone+0x9f6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e36e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e372:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e376:	18d1      	adds	r1, r2, r3
 800e378:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	b29b      	uxth	r3, r3
 800e386:	461a      	mov	r2, r3
 800e388:	482b      	ldr	r0, [pc, #172]	@ (800e438 <ProcessRadioRxDone+0xa50>)
 800e38a:	f008 fb60 	bl	8016a4e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e38e:	4b29      	ldr	r3, [pc, #164]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e390:	2203      	movs	r2, #3
 800e392:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e396:	4b27      	ldr	r3, [pc, #156]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e39e:	4b25      	ldr	r3, [pc, #148]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3a0:	4a25      	ldr	r2, [pc, #148]	@ (800e438 <ProcessRadioRxDone+0xa50>)
 800e3a2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e3a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	4b1f      	ldr	r3, [pc, #124]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3b6:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3bc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e3c0:	f043 0302 	orr.w	r3, r3, #2
 800e3c4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800e3c8:	e009      	b.n	800e3de <ProcessRadioRxDone+0x9f6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e3ca:	4b1a      	ldr	r3, [pc, #104]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800e3d2:	f7ff fae3 	bl	800d99c <PrepareRxDoneAbort>
            break;
 800e3d6:	e002      	b.n	800e3de <ProcessRadioRxDone+0x9f6>
                        break;
 800e3d8:	bf00      	nop
 800e3da:	e000      	b.n	800e3de <ProcessRadioRxDone+0x9f6>
            break;
 800e3dc:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e3de:	4b15      	ldr	r3, [pc, #84]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3e0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d004      	beq.n	800e3f2 <ProcessRadioRxDone+0xa0a>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e3e8:	4b12      	ldr	r3, [pc, #72]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3ea:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d10c      	bne.n	800e40c <ProcessRadioRxDone+0xa24>
    {
        if( MacCtx.NodeAckRequested == true )
 800e3f2:	4b10      	ldr	r3, [pc, #64]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3f4:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d007      	beq.n	800e40c <ProcessRadioRxDone+0xa24>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e3fe:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e402:	2b00      	cmp	r3, #0
 800e404:	d002      	beq.n	800e40c <ProcessRadioRxDone+0xa24>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e406:	2000      	movs	r0, #0
 800e408:	f000 fcec 	bl	800ede4 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e40c:	4b09      	ldr	r3, [pc, #36]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e40e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800e412:	2b02      	cmp	r3, #2
 800e414:	d006      	beq.n	800e424 <ProcessRadioRxDone+0xa3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e416:	4a07      	ldr	r2, [pc, #28]	@ (800e434 <ProcessRadioRxDone+0xa4c>)
 800e418:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e41c:	f043 0310 	orr.w	r3, r3, #16
 800e420:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e424:	f7ff f9fc 	bl	800d820 <UpdateRxSlotIdleState>
}
 800e428:	379c      	adds	r7, #156	@ 0x9c
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd90      	pop	{r4, r7, pc}
 800e42e:	bf00      	nop
 800e430:	20000b10 	.word	0x20000b10
 800e434:	200005dc 	.word	0x200005dc
 800e438:	20000814 	.word	0x20000814

0800e43c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e440:	4b11      	ldr	r3, [pc, #68]	@ (800e488 <ProcessRadioTxTimeout+0x4c>)
 800e442:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e446:	2b02      	cmp	r3, #2
 800e448:	d002      	beq.n	800e450 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e44a:	4b10      	ldr	r3, [pc, #64]	@ (800e48c <ProcessRadioTxTimeout+0x50>)
 800e44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e450:	f7ff f9e6 	bl	800d820 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e454:	4b0e      	ldr	r3, [pc, #56]	@ (800e490 <ProcessRadioTxTimeout+0x54>)
 800e456:	2202      	movs	r2, #2
 800e458:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e45c:	2002      	movs	r0, #2
 800e45e:	f004 fe2f 	bl	80130c0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e462:	4b0b      	ldr	r3, [pc, #44]	@ (800e490 <ProcessRadioTxTimeout+0x54>)
 800e464:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d003      	beq.n	800e474 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800e46c:	4b08      	ldr	r3, [pc, #32]	@ (800e490 <ProcessRadioTxTimeout+0x54>)
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e474:	4a06      	ldr	r2, [pc, #24]	@ (800e490 <ProcessRadioTxTimeout+0x54>)
 800e476:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e47a:	f043 0310 	orr.w	r3, r3, #16
 800e47e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800e482:	bf00      	nop
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	20000b10 	.word	0x20000b10
 800e48c:	0801c9c4 	.word	0x0801c9c4
 800e490:	200005dc 	.word	0x200005dc

0800e494 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	4603      	mov	r3, r0
 800e49c:	460a      	mov	r2, r1
 800e49e:	71fb      	strb	r3, [r7, #7]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e4a8:	4b3d      	ldr	r3, [pc, #244]	@ (800e5a0 <HandleRadioRxErrorTimeout+0x10c>)
 800e4aa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	d002      	beq.n	800e4b8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e4b2:	4b3c      	ldr	r3, [pc, #240]	@ (800e5a4 <HandleRadioRxErrorTimeout+0x110>)
 800e4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e4b8:	f004 f92c 	bl	8012714 <LoRaMacClassBIsBeaconExpected>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d007      	beq.n	800e4d2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e4c2:	2002      	movs	r0, #2
 800e4c4:	f004 f8da 	bl	801267c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	f004 f8fc 	bl	80126c6 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e4d2:	4b33      	ldr	r3, [pc, #204]	@ (800e5a0 <HandleRadioRxErrorTimeout+0x10c>)
 800e4d4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d119      	bne.n	800e510 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e4dc:	f004 f921 	bl	8012722 <LoRaMacClassBIsPingExpected>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d007      	beq.n	800e4f6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	f004 f8d2 	bl	8012690 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	f004 f8f3 	bl	80126d8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e4f6:	f004 f91b 	bl	8012730 <LoRaMacClassBIsMulticastExpected>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d007      	beq.n	800e510 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e500:	2000      	movs	r0, #0
 800e502:	f004 f8cf 	bl	80126a4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e506:	2000      	movs	r0, #0
 800e508:	f004 f8ef 	bl	80126ea <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e50c:	2301      	movs	r3, #1
 800e50e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e510:	7bfb      	ldrb	r3, [r7, #15]
 800e512:	f083 0301 	eor.w	r3, r3, #1
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d03b      	beq.n	800e594 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e51c:	4b22      	ldr	r3, [pc, #136]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e51e:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800e522:	2b00      	cmp	r3, #0
 800e524:	d122      	bne.n	800e56c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e526:	4b20      	ldr	r3, [pc, #128]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e528:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d003      	beq.n	800e538 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e530:	4a1d      	ldr	r2, [pc, #116]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f004 fdc0 	bl	80130c0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e540:	4b17      	ldr	r3, [pc, #92]	@ (800e5a0 <HandleRadioRxErrorTimeout+0x10c>)
 800e542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e544:	4618      	mov	r0, r3
 800e546:	f00c fd01 	bl	801af4c <UTIL_TIMER_GetElapsedTime>
 800e54a:	4602      	mov	r2, r0
 800e54c:	4b16      	ldr	r3, [pc, #88]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e54e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e552:	429a      	cmp	r2, r3
 800e554:	d31e      	bcc.n	800e594 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e556:	4815      	ldr	r0, [pc, #84]	@ (800e5ac <HandleRadioRxErrorTimeout+0x118>)
 800e558:	f00c fbcc 	bl	801acf4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e55c:	4a12      	ldr	r2, [pc, #72]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e55e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e562:	f043 0310 	orr.w	r3, r3, #16
 800e566:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800e56a:	e013      	b.n	800e594 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e56c:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e56e:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e576:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e578:	79bb      	ldrb	r3, [r7, #6]
 800e57a:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e57e:	79bb      	ldrb	r3, [r7, #6]
 800e580:	4618      	mov	r0, r3
 800e582:	f004 fd9d 	bl	80130c0 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800e586:	4a08      	ldr	r2, [pc, #32]	@ (800e5a8 <HandleRadioRxErrorTimeout+0x114>)
 800e588:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e58c:	f043 0310 	orr.w	r3, r3, #16
 800e590:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e594:	f7ff f944 	bl	800d820 <UpdateRxSlotIdleState>
}
 800e598:	bf00      	nop
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20000b10 	.word	0x20000b10
 800e5a4:	0801c9c4 	.word	0x0801c9c4
 800e5a8:	200005dc 	.word	0x200005dc
 800e5ac:	20000974 	.word	0x20000974

0800e5b0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e5b4:	2106      	movs	r1, #6
 800e5b6:	2005      	movs	r0, #5
 800e5b8:	f7ff ff6c 	bl	800e494 <HandleRadioRxErrorTimeout>
}
 800e5bc:	bf00      	nop
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e5c4:	2104      	movs	r1, #4
 800e5c6:	2003      	movs	r0, #3
 800e5c8:	f7ff ff64 	bl	800e494 <HandleRadioRxErrorTimeout>
}
 800e5cc:	bf00      	nop
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e5da:	607b      	str	r3, [r7, #4]
  return(result);
 800e5dc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e5de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5e0:	b672      	cpsid	i
}
 800e5e2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e5e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e65c <LoRaMacHandleIrqEvents+0x8c>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e5ea:	4b1c      	ldr	r3, [pc, #112]	@ (800e65c <LoRaMacHandleIrqEvents+0x8c>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	f383 8810 	msr	PRIMASK, r3
}
 800e5fa:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d027      	beq.n	800e652 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e602:	783b      	ldrb	r3, [r7, #0]
 800e604:	f003 0320 	and.w	r3, r3, #32
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d001      	beq.n	800e612 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e60e:	f7ff f91f 	bl	800d850 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e612:	783b      	ldrb	r3, [r7, #0]
 800e614:	f003 0310 	and.w	r3, r3, #16
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e61e:	f7ff f9e3 	bl	800d9e8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e622:	783b      	ldrb	r3, [r7, #0]
 800e624:	f003 0308 	and.w	r3, r3, #8
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e62e:	f7ff ff05 	bl	800e43c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e632:	783b      	ldrb	r3, [r7, #0]
 800e634:	f003 0304 	and.w	r3, r3, #4
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d001      	beq.n	800e642 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e63e:	f7ff ffb7 	bl	800e5b0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e642:	783b      	ldrb	r3, [r7, #0]
 800e644:	f003 0302 	and.w	r3, r3, #2
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d001      	beq.n	800e652 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e64e:	f7ff ffb7 	bl	800e5c0 <ProcessRadioRxTimeout>
        }
    }
}
 800e652:	bf00      	nop
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	2000115c 	.word	0x2000115c

0800e660 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e660:	b480      	push	{r7}
 800e662:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e664:	4b10      	ldr	r3, [pc, #64]	@ (800e6a8 <LoRaMacIsBusy+0x48>)
 800e666:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d101      	bne.n	800e672 <LoRaMacIsBusy+0x12>
    {
        return false;
 800e66e:	2300      	movs	r3, #0
 800e670:	e015      	b.n	800e69e <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e672:	4b0e      	ldr	r3, [pc, #56]	@ (800e6ac <LoRaMacIsBusy+0x4c>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	f003 0301 	and.w	r3, r3, #1
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <LoRaMacIsBusy+0x24>
    {
        return true;
 800e680:	2301      	movs	r3, #1
 800e682:	e00c      	b.n	800e69e <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e684:	4b08      	ldr	r3, [pc, #32]	@ (800e6a8 <LoRaMacIsBusy+0x48>)
 800e686:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d106      	bne.n	800e69c <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e68e:	4b06      	ldr	r3, [pc, #24]	@ (800e6a8 <LoRaMacIsBusy+0x48>)
 800e690:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e694:	2b01      	cmp	r3, #1
 800e696:	d101      	bne.n	800e69c <LoRaMacIsBusy+0x3c>
    {
        return false;
 800e698:	2300      	movs	r3, #0
 800e69a:	e000      	b.n	800e69e <LoRaMacIsBusy+0x3e>
    }
    return true;
 800e69c:	2301      	movs	r3, #1
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bc80      	pop	{r7}
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	200005dc 	.word	0x200005dc
 800e6ac:	2000115c 	.word	0x2000115c

0800e6b0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e6b4:	4b05      	ldr	r3, [pc, #20]	@ (800e6cc <LoRaMacIsStopped+0x1c>)
 800e6b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d101      	bne.n	800e6c2 <LoRaMacIsStopped+0x12>
    {
        return true;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e000      	b.n	800e6c4 <LoRaMacIsStopped+0x14>
    }
    return false;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bc80      	pop	{r7}
 800e6ca:	4770      	bx	lr
 800e6cc:	200005dc 	.word	0x200005dc

0800e6d0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e6da:	4a04      	ldr	r2, [pc, #16]	@ (800e6ec <LoRaMacEnableRequests+0x1c>)
 800e6dc:	79fb      	ldrb	r3, [r7, #7]
 800e6de:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800e6e2:	bf00      	nop
 800e6e4:	370c      	adds	r7, #12
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bc80      	pop	{r7}
 800e6ea:	4770      	bx	lr
 800e6ec:	200005dc 	.word	0x200005dc

0800e6f0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e6f6:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e6f8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e6fc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e6fe:	4b2a      	ldr	r3, [pc, #168]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e700:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e704:	2b00      	cmp	r3, #0
 800e706:	d14a      	bne.n	800e79e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e708:	4b27      	ldr	r3, [pc, #156]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e70a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e70e:	f003 0301 	and.w	r3, r3, #1
 800e712:	b2db      	uxtb	r3, r3
 800e714:	2b00      	cmp	r3, #0
 800e716:	d006      	beq.n	800e726 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e718:	4a23      	ldr	r2, [pc, #140]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e71a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e71e:	f023 0301 	bic.w	r3, r3, #1
 800e722:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e726:	4b20      	ldr	r3, [pc, #128]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e728:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e72c:	f003 0304 	and.w	r3, r3, #4
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d006      	beq.n	800e744 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e736:	4a1c      	ldr	r2, [pc, #112]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e738:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e73c:	f023 0304 	bic.w	r3, r3, #4
 800e740:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e744:	2001      	movs	r0, #1
 800e746:	f7ff ffc3 	bl	800e6d0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e74a:	793b      	ldrb	r3, [r7, #4]
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d005      	beq.n	800e762 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e756:	4b14      	ldr	r3, [pc, #80]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e758:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4813      	ldr	r0, [pc, #76]	@ (800e7ac <LoRaMacHandleRequestEvents+0xbc>)
 800e760:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e762:	793b      	ldrb	r3, [r7, #4]
 800e764:	f003 0304 	and.w	r3, r3, #4
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00e      	beq.n	800e78c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e76e:	4810      	ldr	r0, [pc, #64]	@ (800e7b0 <LoRaMacHandleRequestEvents+0xc0>)
 800e770:	f004 fcf4 	bl	801315c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e774:	f004 fd44 	bl	8013200 <LoRaMacConfirmQueueGetCnt>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d006      	beq.n	800e78c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e77e:	4a0a      	ldr	r2, [pc, #40]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e780:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e784:	f043 0304 	orr.w	r3, r3, #4
 800e788:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e78c:	f003 ffee 	bl	801276c <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e790:	4a05      	ldr	r2, [pc, #20]	@ (800e7a8 <LoRaMacHandleRequestEvents+0xb8>)
 800e792:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e796:	f023 0310 	bic.w	r3, r3, #16
 800e79a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800e79e:	bf00      	nop
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	200005dc 	.word	0x200005dc
 800e7ac:	20000a1c 	.word	0x20000a1c
 800e7b0:	20000a30 	.word	0x20000a30

0800e7b4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e7b8:	4b16      	ldr	r3, [pc, #88]	@ (800e814 <LoRaMacHandleIndicationEvents+0x60>)
 800e7ba:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e7be:	f003 0308 	and.w	r3, r3, #8
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00d      	beq.n	800e7e4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e7c8:	4a12      	ldr	r2, [pc, #72]	@ (800e814 <LoRaMacHandleIndicationEvents+0x60>)
 800e7ca:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e7ce:	f023 0308 	bic.w	r3, r3, #8
 800e7d2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e814 <LoRaMacHandleIndicationEvents+0x60>)
 800e7d8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	490e      	ldr	r1, [pc, #56]	@ (800e818 <LoRaMacHandleIndicationEvents+0x64>)
 800e7e0:	480e      	ldr	r0, [pc, #56]	@ (800e81c <LoRaMacHandleIndicationEvents+0x68>)
 800e7e2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e814 <LoRaMacHandleIndicationEvents+0x60>)
 800e7e6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e7ea:	f003 0302 	and.w	r3, r3, #2
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00d      	beq.n	800e810 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e7f4:	4a07      	ldr	r2, [pc, #28]	@ (800e814 <LoRaMacHandleIndicationEvents+0x60>)
 800e7f6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e7fa:	f023 0302 	bic.w	r3, r3, #2
 800e7fe:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e802:	4b04      	ldr	r3, [pc, #16]	@ (800e814 <LoRaMacHandleIndicationEvents+0x60>)
 800e804:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	4903      	ldr	r1, [pc, #12]	@ (800e818 <LoRaMacHandleIndicationEvents+0x64>)
 800e80c:	4804      	ldr	r0, [pc, #16]	@ (800e820 <LoRaMacHandleIndicationEvents+0x6c>)
 800e80e:	4798      	blx	r3
    }
}
 800e810:	bf00      	nop
 800e812:	bd80      	pop	{r7, pc}
 800e814:	200005dc 	.word	0x200005dc
 800e818:	20000a68 	.word	0x20000a68
 800e81c:	20000a44 	.word	0x20000a44
 800e820:	200009fc 	.word	0x200009fc

0800e824 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e82a:	4b2a      	ldr	r3, [pc, #168]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e82c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e830:	f003 0301 	and.w	r3, r3, #1
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d048      	beq.n	800e8cc <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800e83a:	2300      	movs	r3, #0
 800e83c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e83e:	2300      	movs	r3, #0
 800e840:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e842:	4b24      	ldr	r3, [pc, #144]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e844:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d004      	beq.n	800e856 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e84c:	4b21      	ldr	r3, [pc, #132]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e84e:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e852:	2b03      	cmp	r3, #3
 800e854:	d104      	bne.n	800e860 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e856:	f002 f8b5 	bl	80109c4 <CheckRetransUnconfirmedUplink>
 800e85a:	4603      	mov	r3, r0
 800e85c:	71fb      	strb	r3, [r7, #7]
 800e85e:	e010      	b.n	800e882 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e860:	4b1c      	ldr	r3, [pc, #112]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e862:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800e866:	2b01      	cmp	r3, #1
 800e868:	d10b      	bne.n	800e882 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800e86a:	4b1a      	ldr	r3, [pc, #104]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e86c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800e870:	2b00      	cmp	r3, #0
 800e872:	d004      	beq.n	800e87e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e874:	f002 f8d2 	bl	8010a1c <CheckRetransConfirmedUplink>
 800e878:	4603      	mov	r3, r0
 800e87a:	71fb      	strb	r3, [r7, #7]
 800e87c:	e001      	b.n	800e882 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800e87e:	2301      	movs	r3, #1
 800e880:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00d      	beq.n	800e8a4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e888:	4813      	ldr	r0, [pc, #76]	@ (800e8d8 <LoRaMacHandleMcpsRequest+0xb4>)
 800e88a:	f00c fa33 	bl	801acf4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e88e:	4b11      	ldr	r3, [pc, #68]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e890:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e894:	f023 0320 	bic.w	r3, r3, #32
 800e898:	4a0e      	ldr	r2, [pc, #56]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e89a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800e89e:	f002 f8f7 	bl	8010a90 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e8a2:	e013      	b.n	800e8cc <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800e8a4:	79bb      	ldrb	r3, [r7, #6]
 800e8a6:	f083 0301 	eor.w	r3, r3, #1
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00d      	beq.n	800e8cc <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e8b0:	4a08      	ldr	r2, [pc, #32]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e8b2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800e8b6:	f023 0310 	bic.w	r3, r3, #16
 800e8ba:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800e8be:	4b05      	ldr	r3, [pc, #20]	@ (800e8d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	f000 f9c8 	bl	800ec5c <OnTxDelayedTimerEvent>
}
 800e8cc:	bf00      	nop
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	200005dc 	.word	0x200005dc
 800e8d8:	20000944 	.word	0x20000944

0800e8dc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e8e0:	4b18      	ldr	r3, [pc, #96]	@ (800e944 <LoRaMacHandleMlmeRequest+0x68>)
 800e8e2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e8e6:	f003 0304 	and.w	r3, r3, #4
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d026      	beq.n	800e93e <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	f004 fc19 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d012      	beq.n	800e922 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e8fc:	2001      	movs	r0, #1
 800e8fe:	f004 fbb5 	bl	801306c <LoRaMacConfirmQueueGetStatus>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d103      	bne.n	800e910 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e908:	4b0e      	ldr	r3, [pc, #56]	@ (800e944 <LoRaMacHandleMlmeRequest+0x68>)
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e910:	4b0c      	ldr	r3, [pc, #48]	@ (800e944 <LoRaMacHandleMlmeRequest+0x68>)
 800e912:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e916:	f023 0302 	bic.w	r3, r3, #2
 800e91a:	4a0a      	ldr	r2, [pc, #40]	@ (800e944 <LoRaMacHandleMlmeRequest+0x68>)
 800e91c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800e920:	e00d      	b.n	800e93e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800e922:	2006      	movs	r0, #6
 800e924:	f004 fc00 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d007      	beq.n	800e93e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e92e:	4b05      	ldr	r3, [pc, #20]	@ (800e944 <LoRaMacHandleMlmeRequest+0x68>)
 800e930:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e934:	f023 0302 	bic.w	r3, r3, #2
 800e938:	4a02      	ldr	r2, [pc, #8]	@ (800e944 <LoRaMacHandleMlmeRequest+0x68>)
 800e93a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800e93e:	bf00      	nop
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	200005dc 	.word	0x200005dc

0800e948 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e94c:	200b      	movs	r0, #11
 800e94e:	f004 fbeb 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d019      	beq.n	800e98c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e958:	4b0e      	ldr	r3, [pc, #56]	@ (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e95a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e95e:	f003 0301 	and.w	r3, r3, #1
 800e962:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e964:	2b00      	cmp	r3, #0
 800e966:	d111      	bne.n	800e98c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e968:	4b0a      	ldr	r3, [pc, #40]	@ (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e96a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800e96e:	f003 0304 	and.w	r3, r3, #4
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	d009      	beq.n	800e98c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e978:	4b06      	ldr	r3, [pc, #24]	@ (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e97a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e97e:	f023 0302 	bic.w	r3, r3, #2
 800e982:	4a04      	ldr	r2, [pc, #16]	@ (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e984:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800e988:	2301      	movs	r3, #1
 800e98a:	e000      	b.n	800e98e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	200005dc 	.word	0x200005dc

0800e998 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	71fb      	strb	r3, [r7, #7]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	71bb      	strb	r3, [r7, #6]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800e9aa:	79fb      	ldrb	r3, [r7, #7]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00a      	beq.n	800e9c6 <CheckForMinimumAbpDatarate+0x2e>
 800e9b0:	79bb      	ldrb	r3, [r7, #6]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d107      	bne.n	800e9c6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800e9b6:	797b      	ldrb	r3, [r7, #5]
 800e9b8:	f083 0301 	eor.w	r3, r3, #1
 800e9bc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e000      	b.n	800e9c8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bc80      	pop	{r7}
 800e9d0:	4770      	bx	lr
	...

0800e9d4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e9d8:	4b0d      	ldr	r3, [pc, #52]	@ (800ea10 <LoRaMacCheckForRxAbort+0x3c>)
 800e9da:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00f      	beq.n	800ea06 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800ea10 <LoRaMacCheckForRxAbort+0x3c>)
 800e9e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9f0:	4a07      	ldr	r2, [pc, #28]	@ (800ea10 <LoRaMacCheckForRxAbort+0x3c>)
 800e9f2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e9f6:	4b06      	ldr	r3, [pc, #24]	@ (800ea10 <LoRaMacCheckForRxAbort+0x3c>)
 800e9f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9fc:	f023 0302 	bic.w	r3, r3, #2
 800ea00:	4a03      	ldr	r2, [pc, #12]	@ (800ea10 <LoRaMacCheckForRxAbort+0x3c>)
 800ea02:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800ea06:	bf00      	nop
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bc80      	pop	{r7}
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	200005dc 	.word	0x200005dc

0800ea14 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ea20:	2300      	movs	r3, #0
 800ea22:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800ea24:	4b51      	ldr	r3, [pc, #324]	@ (800eb6c <LoRaMacHandleNvm+0x158>)
 800ea26:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f040 8099 	bne.w	800eb62 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2124      	movs	r1, #36	@ 0x24
 800ea34:	4618      	mov	r0, r3
 800ea36:	f008 f85f 	bl	8016af8 <Crc32>
 800ea3a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea40:	68ba      	ldr	r2, [r7, #8]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d006      	beq.n	800ea54 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	68ba      	ldr	r2, [r7, #8]
 800ea4a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ea4c:	89fb      	ldrh	r3, [r7, #14]
 800ea4e:	f043 0301 	orr.w	r3, r3, #1
 800ea52:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	3328      	adds	r3, #40	@ 0x28
 800ea58:	211c      	movs	r1, #28
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f008 f84c 	bl	8016af8 <Crc32>
 800ea60:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d006      	beq.n	800ea7a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ea72:	89fb      	ldrh	r3, [r7, #14]
 800ea74:	f043 0302 	orr.w	r3, r3, #2
 800ea78:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	3348      	adds	r3, #72	@ 0x48
 800ea7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ea82:	4618      	mov	r0, r3
 800ea84:	f008 f838 	bl	8016af8 <Crc32>
 800ea88:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d007      	beq.n	800eaa6 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ea9e:	89fb      	ldrh	r3, [r7, #14]
 800eaa0:	f043 0304 	orr.w	r3, r3, #4
 800eaa4:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800eaac:	21d4      	movs	r1, #212	@ 0xd4
 800eaae:	4618      	mov	r0, r3
 800eab0:	f008 f822 	bl	8016af8 <Crc32>
 800eab4:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d007      	beq.n	800ead2 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	68ba      	ldr	r2, [r7, #8]
 800eac6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800eaca:	89fb      	ldrh	r3, [r7, #14]
 800eacc:	f043 0308 	orr.w	r3, r3, #8
 800ead0:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800ead8:	2100      	movs	r1, #0
 800eada:	4618      	mov	r0, r3
 800eadc:	f008 f80c 	bl	8016af8 <Crc32>
 800eae0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d007      	beq.n	800eafe <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68ba      	ldr	r2, [r7, #8]
 800eaf2:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800eaf6:	89fb      	ldrh	r3, [r7, #14]
 800eaf8:	f043 0310 	orr.w	r3, r3, #16
 800eafc:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 800eb04:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f007 fff5 	bl	8016af8 <Crc32>
 800eb0e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d007      	beq.n	800eb2c <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800eb24:	89fb      	ldrh	r3, [r7, #14]
 800eb26:	f043 0320 	orr.w	r3, r3, #32
 800eb2a:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f203 53a4 	addw	r3, r3, #1444	@ 0x5a4
 800eb32:	2114      	movs	r1, #20
 800eb34:	4618      	mov	r0, r3
 800eb36:	f007 ffdf 	bl	8016af8 <Crc32>
 800eb3a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 35b8 	ldr.w	r3, [r3, #1464]	@ 0x5b8
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d007      	beq.n	800eb58 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	68ba      	ldr	r2, [r7, #8]
 800eb4c:	f8c3 25b8 	str.w	r2, [r3, #1464]	@ 0x5b8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800eb50:	89fb      	ldrh	r3, [r7, #14]
 800eb52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb56:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800eb58:	89fb      	ldrh	r3, [r7, #14]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f001 ffea 	bl	8010b34 <CallNvmDataChangeCallback>
 800eb60:	e000      	b.n	800eb64 <LoRaMacHandleNvm+0x150>
        return;
 800eb62:	bf00      	nop
}
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	200005dc 	.word	0x200005dc

0800eb70 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00d      	beq.n	800eb9c <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800eb80:	6838      	ldr	r0, [r7, #0]
 800eb82:	f00c f9e3 	bl	801af4c <UTIL_TIMER_GetElapsedTime>
 800eb86:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d905      	bls.n	800eb9c <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800eb90:	4b05      	ldr	r3, [pc, #20]	@ (800eba8 <LoRaMacHandleResponseTimeout+0x38>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e000      	b.n	800eb9e <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20000b10 	.word	0x20000b10

0800ebac <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800ebb6:	f7ff fd0b 	bl	800e5d0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ebba:	f003 fe46 	bl	801284a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ebbe:	4b25      	ldr	r3, [pc, #148]	@ (800ec54 <LoRaMacProcess+0xa8>)
 800ebc0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ebc4:	f003 0310 	and.w	r3, r3, #16
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d023      	beq.n	800ec16 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ebce:	2000      	movs	r0, #0
 800ebd0:	f7ff fd7e 	bl	800e6d0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ebd4:	f7ff fefe 	bl	800e9d4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ebd8:	f001 ffca 	bl	8010b70 <IsRequestPending>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d006      	beq.n	800ebf0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ebe2:	f7ff feb1 	bl	800e948 <LoRaMacCheckForBeaconAcquisition>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	461a      	mov	r2, r3
 800ebea:	79fb      	ldrb	r3, [r7, #7]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800ebf0:	79fb      	ldrb	r3, [r7, #7]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d103      	bne.n	800ebfe <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800ebf6:	f7ff fe71 	bl	800e8dc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ebfa:	f7ff fe13 	bl	800e824 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ebfe:	f7ff fd77 	bl	800e6f0 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ec02:	2001      	movs	r0, #1
 800ec04:	f7ff fd64 	bl	800e6d0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ec08:	4a12      	ldr	r2, [pc, #72]	@ (800ec54 <LoRaMacProcess+0xa8>)
 800ec0a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ec0e:	f043 0320 	orr.w	r3, r3, #32
 800ec12:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800ec16:	f7ff fdcd 	bl	800e7b4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ec1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ec54 <LoRaMacProcess+0xa8>)
 800ec1c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d101      	bne.n	800ec28 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800ec24:	f001 fc32 	bl	801048c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ec28:	4b0a      	ldr	r3, [pc, #40]	@ (800ec54 <LoRaMacProcess+0xa8>)
 800ec2a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ec2e:	f003 0320 	and.w	r3, r3, #32
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d009      	beq.n	800ec4c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ec38:	4a06      	ldr	r2, [pc, #24]	@ (800ec54 <LoRaMacProcess+0xa8>)
 800ec3a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ec3e:	f023 0320 	bic.w	r3, r3, #32
 800ec42:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800ec46:	4804      	ldr	r0, [pc, #16]	@ (800ec58 <LoRaMacProcess+0xac>)
 800ec48:	f7ff fee4 	bl	800ea14 <LoRaMacHandleNvm>
    }
}
 800ec4c:	bf00      	nop
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	200005dc 	.word	0x200005dc
 800ec58:	20000b10 	.word	0x20000b10

0800ec5c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ec64:	481e      	ldr	r0, [pc, #120]	@ (800ece0 <OnTxDelayedTimerEvent+0x84>)
 800ec66:	f00c f845 	bl	801acf4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ec6a:	4b1e      	ldr	r3, [pc, #120]	@ (800ece4 <OnTxDelayedTimerEvent+0x88>)
 800ec6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ec70:	f023 0320 	bic.w	r3, r3, #32
 800ec74:	4a1b      	ldr	r2, [pc, #108]	@ (800ece4 <OnTxDelayedTimerEvent+0x88>)
 800ec76:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ec7a:	4b1b      	ldr	r3, [pc, #108]	@ (800ece8 <OnTxDelayedTimerEvent+0x8c>)
 800ec7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec80:	4a18      	ldr	r2, [pc, #96]	@ (800ece4 <OnTxDelayedTimerEvent+0x88>)
 800ec82:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800ec86:	4611      	mov	r1, r2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7ff ff71 	bl	800eb70 <LoRaMacHandleResponseTimeout>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d11e      	bne.n	800ecd2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ec94:	2001      	movs	r0, #1
 800ec96:	f001 f943 	bl	800ff20 <ScheduleTx>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d01a      	beq.n	800ecd6 <OnTxDelayedTimerEvent+0x7a>
 800eca0:	2b0b      	cmp	r3, #11
 800eca2:	d018      	beq.n	800ecd6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800eca4:	4b10      	ldr	r3, [pc, #64]	@ (800ece8 <OnTxDelayedTimerEvent+0x8c>)
 800eca6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ecaa:	b2da      	uxtb	r2, r3
 800ecac:	4b0d      	ldr	r3, [pc, #52]	@ (800ece4 <OnTxDelayedTimerEvent+0x88>)
 800ecae:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ecb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ece4 <OnTxDelayedTimerEvent+0x88>)
 800ecb4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800ecb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ece4 <OnTxDelayedTimerEvent+0x88>)
 800ecba:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ecbe:	4b09      	ldr	r3, [pc, #36]	@ (800ece4 <OnTxDelayedTimerEvent+0x88>)
 800ecc0:	2209      	movs	r2, #9
 800ecc2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ecc6:	2009      	movs	r0, #9
 800ecc8:	f004 f9fa 	bl	80130c0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800eccc:	f001 fee0 	bl	8010a90 <StopRetransmission>
            break;
 800ecd0:	e002      	b.n	800ecd8 <OnTxDelayedTimerEvent+0x7c>
        return;
 800ecd2:	bf00      	nop
 800ecd4:	e000      	b.n	800ecd8 <OnTxDelayedTimerEvent+0x7c>
            break;
 800ecd6:	bf00      	nop
        }
    }
}
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	20000944 	.word	0x20000944
 800ece4:	200005dc 	.word	0x200005dc
 800ece8:	20000b10 	.word	0x20000b10

0800ecec <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ecf4:	4b17      	ldr	r3, [pc, #92]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ecf6:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800ecfa:	4b16      	ldr	r3, [pc, #88]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ecfc:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ed00:	4b15      	ldr	r3, [pc, #84]	@ (800ed58 <OnRxWindow1TimerEvent+0x6c>)
 800ed02:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800ed06:	b25a      	sxtb	r2, r3
 800ed08:	4b12      	ldr	r3, [pc, #72]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ed0a:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ed0e:	4b12      	ldr	r3, [pc, #72]	@ (800ed58 <OnRxWindow1TimerEvent+0x6c>)
 800ed10:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ed14:	4b0f      	ldr	r3, [pc, #60]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ed16:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ed1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ed58 <OnRxWindow1TimerEvent+0x6c>)
 800ed1c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800ed20:	4b0c      	ldr	r3, [pc, #48]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ed22:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ed26:	4b0b      	ldr	r3, [pc, #44]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ed2e:	4b09      	ldr	r3, [pc, #36]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ed36:	4b08      	ldr	r3, [pc, #32]	@ (800ed58 <OnRxWindow1TimerEvent+0x6c>)
 800ed38:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800ed3c:	4b05      	ldr	r3, [pc, #20]	@ (800ed54 <OnRxWindow1TimerEvent+0x68>)
 800ed3e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ed42:	4906      	ldr	r1, [pc, #24]	@ (800ed5c <OnRxWindow1TimerEvent+0x70>)
 800ed44:	4806      	ldr	r0, [pc, #24]	@ (800ed60 <OnRxWindow1TimerEvent+0x74>)
 800ed46:	f001 fb6d 	bl	8010424 <RxWindowSetup>
}
 800ed4a:	bf00      	nop
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	200005dc 	.word	0x200005dc
 800ed58:	20000b10 	.word	0x20000b10
 800ed5c:	20000994 	.word	0x20000994
 800ed60:	2000095c 	.word	0x2000095c

0800ed64 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ed6c:	4b19      	ldr	r3, [pc, #100]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800ed6e:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d029      	beq.n	800edca <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ed76:	4b17      	ldr	r3, [pc, #92]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800ed78:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800ed7c:	4b15      	ldr	r3, [pc, #84]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800ed7e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ed82:	4b15      	ldr	r3, [pc, #84]	@ (800edd8 <OnRxWindow2TimerEvent+0x74>)
 800ed84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed86:	4a13      	ldr	r2, [pc, #76]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800ed88:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ed8c:	4b12      	ldr	r3, [pc, #72]	@ (800edd8 <OnRxWindow2TimerEvent+0x74>)
 800ed8e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ed92:	4b10      	ldr	r3, [pc, #64]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800ed94:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ed98:	4b0f      	ldr	r3, [pc, #60]	@ (800edd8 <OnRxWindow2TimerEvent+0x74>)
 800ed9a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800ed9e:	4b0d      	ldr	r3, [pc, #52]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800eda0:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800eda4:	4b0b      	ldr	r3, [pc, #44]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800edac:	4b09      	ldr	r3, [pc, #36]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800edb4:	4b08      	ldr	r3, [pc, #32]	@ (800edd8 <OnRxWindow2TimerEvent+0x74>)
 800edb6:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800edba:	4b06      	ldr	r3, [pc, #24]	@ (800edd4 <OnRxWindow2TimerEvent+0x70>)
 800edbc:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800edc0:	4906      	ldr	r1, [pc, #24]	@ (800eddc <OnRxWindow2TimerEvent+0x78>)
 800edc2:	4807      	ldr	r0, [pc, #28]	@ (800ede0 <OnRxWindow2TimerEvent+0x7c>)
 800edc4:	f001 fb2e 	bl	8010424 <RxWindowSetup>
 800edc8:	e000      	b.n	800edcc <OnRxWindow2TimerEvent+0x68>
        return;
 800edca:	bf00      	nop
}
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	200005dc 	.word	0x200005dc
 800edd8:	20000b10 	.word	0x20000b10
 800eddc:	200009ac 	.word	0x200009ac
 800ede0:	20000974 	.word	0x20000974

0800ede4 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800edec:	4808      	ldr	r0, [pc, #32]	@ (800ee10 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800edee:	f00b ff81 	bl	801acf4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800edf2:	4b08      	ldr	r3, [pc, #32]	@ (800ee14 <OnRetransmitTimeoutTimerEvent+0x30>)
 800edf4:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d003      	beq.n	800ee04 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800edfc:	4b05      	ldr	r3, [pc, #20]	@ (800ee14 <OnRetransmitTimeoutTimerEvent+0x30>)
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800ee04:	f001 fe80 	bl	8010b08 <OnMacProcessNotify>
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	200009dc 	.word	0x200009dc
 800ee14:	200005dc 	.word	0x200005dc

0800ee18 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60ba      	str	r2, [r7, #8]
 800ee20:	607b      	str	r3, [r7, #4]
 800ee22:	4603      	mov	r3, r0
 800ee24:	73fb      	strb	r3, [r7, #15]
 800ee26:	460b      	mov	r3, r1
 800ee28:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d005      	beq.n	800ee3c <GetFCntDown+0x24>
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <GetFCntDown+0x24>
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ee3c:	2309      	movs	r3, #9
 800ee3e:	e028      	b.n	800ee92 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ee40:	7bfb      	ldrb	r3, [r7, #15]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d016      	beq.n	800ee74 <GetFCntDown+0x5c>
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d118      	bne.n	800ee7c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ee4a:	79bb      	ldrb	r3, [r7, #6]
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d10d      	bne.n	800ee6c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ee50:	7bbb      	ldrb	r3, [r7, #14]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d002      	beq.n	800ee5c <GetFCntDown+0x44>
 800ee56:	7bbb      	ldrb	r3, [r7, #14]
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d103      	bne.n	800ee64 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	2202      	movs	r2, #2
 800ee60:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ee62:	e00d      	b.n	800ee80 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	2201      	movs	r2, #1
 800ee68:	701a      	strb	r2, [r3, #0]
            break;
 800ee6a:	e009      	b.n	800ee80 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	2203      	movs	r2, #3
 800ee70:	701a      	strb	r2, [r3, #0]
            break;
 800ee72:	e005      	b.n	800ee80 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	2204      	movs	r2, #4
 800ee78:	701a      	strb	r2, [r3, #0]
            break;
 800ee7a:	e001      	b.n	800ee80 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800ee7c:	2305      	movs	r3, #5
 800ee7e:	e008      	b.n	800ee92 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	7818      	ldrb	r0, [r3, #0]
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	89db      	ldrh	r3, [r3, #14]
 800ee88:	69fa      	ldr	r2, [r7, #28]
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	f004 fd52 	bl	8013934 <LoRaMacCryptoGetFCntDown>
 800ee90:	4603      	mov	r3, r0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
	...

0800ee9c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ee9c:	b5b0      	push	{r4, r5, r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	4603      	mov	r3, r0
 800eea4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eea6:	2303      	movs	r3, #3
 800eea8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800eeaa:	4b6e      	ldr	r3, [pc, #440]	@ (800f064 <SwitchClass+0x1c8>)
 800eeac:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	f000 80bb 	beq.w	800f02c <SwitchClass+0x190>
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	f300 80ce 	bgt.w	800f058 <SwitchClass+0x1bc>
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d003      	beq.n	800eec8 <SwitchClass+0x2c>
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	f000 80a5 	beq.w	800f010 <SwitchClass+0x174>
 800eec6:	e0c7      	b.n	800f058 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800eec8:	79fb      	ldrb	r3, [r7, #7]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d109      	bne.n	800eee2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800eece:	4b65      	ldr	r3, [pc, #404]	@ (800f064 <SwitchClass+0x1c8>)
 800eed0:	4a64      	ldr	r2, [pc, #400]	@ (800f064 <SwitchClass+0x1c8>)
 800eed2:	3374      	adds	r3, #116	@ 0x74
 800eed4:	326c      	adds	r2, #108	@ 0x6c
 800eed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eeda:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800eee2:	79fb      	ldrb	r3, [r7, #7]
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d10c      	bne.n	800ef02 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800eee8:	79fb      	ldrb	r3, [r7, #7]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f003 fc44 	bl	8012778 <LoRaMacClassBSwitchClass>
 800eef0:	4603      	mov	r3, r0
 800eef2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d103      	bne.n	800ef02 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800eefa:	4a5a      	ldr	r2, [pc, #360]	@ (800f064 <SwitchClass+0x1c8>)
 800eefc:	79fb      	ldrb	r3, [r7, #7]
 800eefe:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800ef02:	79fb      	ldrb	r3, [r7, #7]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	f040 80a2 	bne.w	800f04e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef0a:	4a56      	ldr	r2, [pc, #344]	@ (800f064 <SwitchClass+0x1c8>)
 800ef0c:	79fb      	ldrb	r3, [r7, #7]
 800ef0e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ef12:	4a55      	ldr	r2, [pc, #340]	@ (800f068 <SwitchClass+0x1cc>)
 800ef14:	4b54      	ldr	r3, [pc, #336]	@ (800f068 <SwitchClass+0x1cc>)
 800ef16:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800ef1a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800ef1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef22:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef26:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ef2a:	4b4f      	ldr	r3, [pc, #316]	@ (800f068 <SwitchClass+0x1cc>)
 800ef2c:	2202      	movs	r2, #2
 800ef2e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ef32:	2300      	movs	r3, #0
 800ef34:	73bb      	strb	r3, [r7, #14]
 800ef36:	e05b      	b.n	800eff0 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800ef38:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800ef3c:	4949      	ldr	r1, [pc, #292]	@ (800f064 <SwitchClass+0x1c8>)
 800ef3e:	4613      	mov	r3, r2
 800ef40:	005b      	lsls	r3, r3, #1
 800ef42:	4413      	add	r3, r2
 800ef44:	011b      	lsls	r3, r3, #4
 800ef46:	440b      	add	r3, r1
 800ef48:	33e9      	adds	r3, #233	@ 0xe9
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d049      	beq.n	800efe4 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800ef50:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800ef54:	4943      	ldr	r1, [pc, #268]	@ (800f064 <SwitchClass+0x1c8>)
 800ef56:	4613      	mov	r3, r2
 800ef58:	005b      	lsls	r3, r3, #1
 800ef5a:	4413      	add	r3, r2
 800ef5c:	011b      	lsls	r3, r3, #4
 800ef5e:	440b      	add	r3, r1
 800ef60:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ef64:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800ef66:	2b02      	cmp	r3, #2
 800ef68:	d13c      	bne.n	800efe4 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800ef6a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800ef6e:	493d      	ldr	r1, [pc, #244]	@ (800f064 <SwitchClass+0x1c8>)
 800ef70:	4613      	mov	r3, r2
 800ef72:	005b      	lsls	r3, r3, #1
 800ef74:	4413      	add	r3, r2
 800ef76:	011b      	lsls	r3, r3, #4
 800ef78:	440b      	add	r3, r1
 800ef7a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a38      	ldr	r2, [pc, #224]	@ (800f064 <SwitchClass+0x1c8>)
 800ef82:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800ef84:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800ef88:	4936      	ldr	r1, [pc, #216]	@ (800f064 <SwitchClass+0x1c8>)
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	011b      	lsls	r3, r3, #4
 800ef92:	440b      	add	r3, r1
 800ef94:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800ef98:	f993 3000 	ldrsb.w	r3, [r3]
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	4b31      	ldr	r3, [pc, #196]	@ (800f064 <SwitchClass+0x1c8>)
 800efa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800efa4:	4b30      	ldr	r3, [pc, #192]	@ (800f068 <SwitchClass+0x1cc>)
 800efa6:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800efaa:	4b2f      	ldr	r3, [pc, #188]	@ (800f068 <SwitchClass+0x1cc>)
 800efac:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800efb0:	4b2c      	ldr	r3, [pc, #176]	@ (800f064 <SwitchClass+0x1c8>)
 800efb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efb4:	4a2c      	ldr	r2, [pc, #176]	@ (800f068 <SwitchClass+0x1cc>)
 800efb6:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800efba:	4b2a      	ldr	r3, [pc, #168]	@ (800f064 <SwitchClass+0x1c8>)
 800efbc:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800efc0:	4b29      	ldr	r3, [pc, #164]	@ (800f068 <SwitchClass+0x1cc>)
 800efc2:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800efc6:	4b27      	ldr	r3, [pc, #156]	@ (800f064 <SwitchClass+0x1c8>)
 800efc8:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800efcc:	4b26      	ldr	r3, [pc, #152]	@ (800f068 <SwitchClass+0x1cc>)
 800efce:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800efd2:	4b25      	ldr	r3, [pc, #148]	@ (800f068 <SwitchClass+0x1cc>)
 800efd4:	2203      	movs	r2, #3
 800efd6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800efda:	4b23      	ldr	r3, [pc, #140]	@ (800f068 <SwitchClass+0x1cc>)
 800efdc:	2201      	movs	r2, #1
 800efde:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800efe2:	e009      	b.n	800eff8 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800efe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	3301      	adds	r3, #1
 800efec:	b2db      	uxtb	r3, r3
 800efee:	73bb      	strb	r3, [r7, #14]
 800eff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	dd9f      	ble.n	800ef38 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800eff8:	4b1b      	ldr	r3, [pc, #108]	@ (800f068 <SwitchClass+0x1cc>)
 800effa:	2200      	movs	r2, #0
 800effc:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f000:	4b1a      	ldr	r3, [pc, #104]	@ (800f06c <SwitchClass+0x1d0>)
 800f002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f004:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f006:	f001 fa41 	bl	801048c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f00e:	e01e      	b.n	800f04e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f010:	79fb      	ldrb	r3, [r7, #7]
 800f012:	4618      	mov	r0, r3
 800f014:	f003 fbb0 	bl	8012778 <LoRaMacClassBSwitchClass>
 800f018:	4603      	mov	r3, r0
 800f01a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d117      	bne.n	800f052 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f022:	4a10      	ldr	r2, [pc, #64]	@ (800f064 <SwitchClass+0x1c8>)
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800f02a:	e012      	b.n	800f052 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f02c:	79fb      	ldrb	r3, [r7, #7]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d111      	bne.n	800f056 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800f032:	4b0d      	ldr	r3, [pc, #52]	@ (800f068 <SwitchClass+0x1cc>)
 800f034:	2206      	movs	r2, #6
 800f036:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f03a:	4a0a      	ldr	r2, [pc, #40]	@ (800f064 <SwitchClass+0x1c8>)
 800f03c:	79fb      	ldrb	r3, [r7, #7]
 800f03e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f042:	4b0a      	ldr	r3, [pc, #40]	@ (800f06c <SwitchClass+0x1d0>)
 800f044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f046:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800f04c:	e003      	b.n	800f056 <SwitchClass+0x1ba>
            break;
 800f04e:	bf00      	nop
 800f050:	e002      	b.n	800f058 <SwitchClass+0x1bc>
            break;
 800f052:	bf00      	nop
 800f054:	e000      	b.n	800f058 <SwitchClass+0x1bc>
            break;
 800f056:	bf00      	nop
        }
    }

    return status;
 800f058:	7bfb      	ldrb	r3, [r7, #15]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bdb0      	pop	{r4, r5, r7, pc}
 800f062:	bf00      	nop
 800f064:	20000b10 	.word	0x20000b10
 800f068:	200005dc 	.word	0x200005dc
 800f06c:	0801c9c4 	.word	0x0801c9c4

0800f070 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f07a:	4b10      	ldr	r3, [pc, #64]	@ (800f0bc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f07c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f080:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f082:	79fb      	ldrb	r3, [r7, #7]
 800f084:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f086:	230d      	movs	r3, #13
 800f088:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f08a:	4b0c      	ldr	r3, [pc, #48]	@ (800f0bc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f08c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f094:	230e      	movs	r3, #14
 800f096:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f098:	4b08      	ldr	r3, [pc, #32]	@ (800f0bc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f09a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f09e:	f107 0210 	add.w	r2, r7, #16
 800f0a2:	4611      	mov	r1, r2
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f005 faa7 	bl	80145f8 <RegionGetPhyParam>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	b2db      	uxtb	r3, r3
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	20000b10 	.word	0x20000b10

0800f0c0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	71fb      	strb	r3, [r7, #7]
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	71bb      	strb	r3, [r7, #6]
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f0da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff ffc6 	bl	800f070 <GetMaxAppPayloadWithoutFOptsLength>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f0e8:	79fb      	ldrb	r3, [r7, #7]
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	797b      	ldrb	r3, [r7, #5]
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	4413      	add	r3, r2
 800f0f2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f0f4:	89ba      	ldrh	r2, [r7, #12]
 800f0f6:	89fb      	ldrh	r3, [r7, #14]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d804      	bhi.n	800f106 <ValidatePayloadLength+0x46>
 800f0fc:	89bb      	ldrh	r3, [r7, #12]
 800f0fe:	2bff      	cmp	r3, #255	@ 0xff
 800f100:	d801      	bhi.n	800f106 <ValidatePayloadLength+0x46>
    {
        return true;
 800f102:	2301      	movs	r3, #1
 800f104:	e000      	b.n	800f108 <ValidatePayloadLength+0x48>
    }
    return false;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f110:	b590      	push	{r4, r7, lr}
 800f112:	b0a5      	sub	sp, #148	@ 0x94
 800f114:	af02      	add	r7, sp, #8
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	4608      	mov	r0, r1
 800f11a:	4611      	mov	r1, r2
 800f11c:	461a      	mov	r2, r3
 800f11e:	4603      	mov	r3, r0
 800f120:	70fb      	strb	r3, [r7, #3]
 800f122:	460b      	mov	r3, r1
 800f124:	70bb      	strb	r3, [r7, #2]
 800f126:	4613      	mov	r3, r2
 800f128:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f130:	2300      	movs	r3, #0
 800f132:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f136:	2300      	movs	r3, #0
 800f138:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f13c:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f140:	2b00      	cmp	r3, #0
 800f142:	f000 84c3 	beq.w	800facc <ProcessMacCommands+0x9bc>
 800f146:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	f040 84c4 	bne.w	800fad8 <ProcessMacCommands+0x9c8>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f150:	f000 bcbc 	b.w	800facc <ProcessMacCommands+0x9bc>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f154:	78fb      	ldrb	r3, [r7, #3]
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	4413      	add	r3, r2
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f003 fe0b 	bl	8012d78 <LoRaMacCommandsGetCmdSize>
 800f162:	4603      	mov	r3, r0
 800f164:	461a      	mov	r2, r3
 800f166:	78fb      	ldrb	r3, [r7, #3]
 800f168:	441a      	add	r2, r3
 800f16a:	78bb      	ldrb	r3, [r7, #2]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	f300 84b5 	bgt.w	800fadc <ProcessMacCommands+0x9cc>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f172:	78fb      	ldrb	r3, [r7, #3]
 800f174:	1c5a      	adds	r2, r3, #1
 800f176:	70fa      	strb	r2, [r7, #3]
 800f178:	461a      	mov	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4413      	add	r3, r2
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	3b02      	subs	r3, #2
 800f182:	2b11      	cmp	r3, #17
 800f184:	f200 84ac 	bhi.w	800fae0 <ProcessMacCommands+0x9d0>
 800f188:	a201      	add	r2, pc, #4	@ (adr r2, 800f190 <ProcessMacCommands+0x80>)
 800f18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18e:	bf00      	nop
 800f190:	0800f1d9 	.word	0x0800f1d9
 800f194:	0800f21b 	.word	0x0800f21b
 800f198:	0800f397 	.word	0x0800f397
 800f19c:	0800f3d5 	.word	0x0800f3d5
 800f1a0:	0800f4e1 	.word	0x0800f4e1
 800f1a4:	0800f531 	.word	0x0800f531
 800f1a8:	0800f5ed 	.word	0x0800f5ed
 800f1ac:	0800f643 	.word	0x0800f643
 800f1b0:	0800f729 	.word	0x0800f729
 800f1b4:	0800fae1 	.word	0x0800fae1
 800f1b8:	0800fae1 	.word	0x0800fae1
 800f1bc:	0800f7d1 	.word	0x0800f7d1
 800f1c0:	0800fae1 	.word	0x0800fae1
 800f1c4:	0800fae1 	.word	0x0800fae1
 800f1c8:	0800f8f1 	.word	0x0800f8f1
 800f1cc:	0800f925 	.word	0x0800f925
 800f1d0:	0800f9b5 	.word	0x0800f9b5
 800f1d4:	0800fa2d 	.word	0x0800fa2d
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f1d8:	2005      	movs	r0, #5
 800f1da:	f003 ffa5 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 8466 	beq.w	800fab2 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f1e6:	2105      	movs	r1, #5
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	f003 ff11 	bl	8013010 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f1ee:	78fb      	ldrb	r3, [r7, #3]
 800f1f0:	1c5a      	adds	r2, r3, #1
 800f1f2:	70fa      	strb	r2, [r7, #3]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	781a      	ldrb	r2, [r3, #0]
 800f1fc:	4bb5      	ldr	r3, [pc, #724]	@ (800f4d4 <ProcessMacCommands+0x3c4>)
 800f1fe:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f202:	78fb      	ldrb	r3, [r7, #3]
 800f204:	1c5a      	adds	r2, r3, #1
 800f206:	70fa      	strb	r2, [r7, #3]
 800f208:	461a      	mov	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4413      	add	r3, r2
 800f20e:	781a      	ldrb	r2, [r3, #0]
 800f210:	4bb0      	ldr	r3, [pc, #704]	@ (800f4d4 <ProcessMacCommands+0x3c4>)
 800f212:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 800f216:	f000 bc4c 	b.w	800fab2 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f220:	2300      	movs	r3, #0
 800f222:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f226:	2300      	movs	r3, #0
 800f228:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800f232:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f236:	f083 0301 	eor.w	r3, r3, #1
 800f23a:	b2db      	uxtb	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 80a6 	beq.w	800f38e <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f242:	2301      	movs	r3, #1
 800f244:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f252:	4ba1      	ldr	r3, [pc, #644]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f254:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f258:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f25c:	4b9e      	ldr	r3, [pc, #632]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f25e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f262:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f266:	4b9c      	ldr	r3, [pc, #624]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f268:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f26c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f270:	4b99      	ldr	r3, [pc, #612]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f272:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f276:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f27a:	4b97      	ldr	r3, [pc, #604]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f27c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f280:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f284:	4b94      	ldr	r3, [pc, #592]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f286:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800f28a:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f28c:	4b92      	ldr	r3, [pc, #584]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f28e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f296:	78ba      	ldrb	r2, [r7, #2]
 800f298:	78fb      	ldrb	r3, [r7, #3]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	3301      	adds	r3, #1
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f2a6:	e002      	b.n	800f2ae <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f2a8:	2305      	movs	r3, #5
 800f2aa:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f2ae:	4b8a      	ldr	r3, [pc, #552]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f2b0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f2b4:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f2b8:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f2bc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f2c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f2c4:	9301      	str	r3, [sp, #4]
 800f2c6:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4623      	mov	r3, r4
 800f2ce:	f005 fa50 	bl	8014772 <RegionLinkAdrReq>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f2d8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f2dc:	f003 0307 	and.w	r3, r3, #7
 800f2e0:	2b07      	cmp	r3, #7
 800f2e2:	d119      	bne.n	800f318 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f2e4:	4b7c      	ldr	r3, [pc, #496]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f2e6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f2ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	da03      	bge.n	800f2fa <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f2f2:	4b79      	ldr	r3, [pc, #484]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f2fa:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f2fe:	4b76      	ldr	r3, [pc, #472]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f300:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f304:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f308:	4b73      	ldr	r3, [pc, #460]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f30a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f30e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f312:	4b71      	ldr	r3, [pc, #452]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f314:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f318:	2300      	movs	r3, #0
 800f31a:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f31e:	e00b      	b.n	800f338 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f320:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f324:	2201      	movs	r2, #1
 800f326:	4619      	mov	r1, r3
 800f328:	2003      	movs	r0, #3
 800f32a:	f003 fbc5 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f32e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f332:	3301      	adds	r3, #1
 800f334:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f338:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f33c:	4a67      	ldr	r2, [pc, #412]	@ (800f4dc <ProcessMacCommands+0x3cc>)
 800f33e:	fba2 2303 	umull	r2, r3, r2, r3
 800f342:	089b      	lsrs	r3, r3, #2
 800f344:	b2db      	uxtb	r3, r3
 800f346:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d3e8      	bcc.n	800f320 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f34e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f352:	78fb      	ldrb	r3, [r7, #3]
 800f354:	4413      	add	r3, r2
 800f356:	b2db      	uxtb	r3, r3
 800f358:	3b01      	subs	r3, #1
 800f35a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f35c:	78fa      	ldrb	r2, [r7, #3]
 800f35e:	78bb      	ldrb	r3, [r7, #2]
 800f360:	429a      	cmp	r2, r3
 800f362:	d20a      	bcs.n	800f37a <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f364:	78fb      	ldrb	r3, [r7, #3]
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	70fa      	strb	r2, [r7, #3]
 800f36a:	461a      	mov	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4413      	add	r3, r2
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b03      	cmp	r3, #3
 800f374:	f43f af68 	beq.w	800f248 <ProcessMacCommands+0x138>
 800f378:	e000      	b.n	800f37c <ProcessMacCommands+0x26c>
                            break;
 800f37a:	bf00      	nop

                    if( macIndex < commandsSize )
 800f37c:	78fa      	ldrb	r2, [r7, #3]
 800f37e:	78bb      	ldrb	r3, [r7, #2]
 800f380:	429a      	cmp	r2, r3
 800f382:	f080 8398 	bcs.w	800fab6 <ProcessMacCommands+0x9a6>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f386:	78fb      	ldrb	r3, [r7, #3]
 800f388:	3b01      	subs	r3, #1
 800f38a:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f38c:	e393      	b.n	800fab6 <ProcessMacCommands+0x9a6>
                    macIndex += 4;
 800f38e:	78fb      	ldrb	r3, [r7, #3]
 800f390:	3304      	adds	r3, #4
 800f392:	70fb      	strb	r3, [r7, #3]
                break;
 800f394:	e38f      	b.n	800fab6 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f396:	78fb      	ldrb	r3, [r7, #3]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	70fa      	strb	r2, [r7, #3]
 800f39c:	461a      	mov	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	f003 030f 	and.w	r3, r3, #15
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	4b4b      	ldr	r3, [pc, #300]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f3ac:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f3b0:	4b49      	ldr	r3, [pc, #292]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f3b2:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	4093      	lsls	r3, r2
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	4b46      	ldr	r3, [pc, #280]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f3c0:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f3c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	2004      	movs	r0, #4
 800f3ce:	f003 fb73 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                break;
 800f3d2:	e37b      	b.n	800facc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f3d4:	2307      	movs	r3, #7
 800f3d6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f3da:	78fb      	ldrb	r3, [r7, #3]
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	4413      	add	r3, r2
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	091b      	lsrs	r3, r3, #4
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	b25b      	sxtb	r3, r3
 800f3e8:	f003 0307 	and.w	r3, r3, #7
 800f3ec:	b25b      	sxtb	r3, r3
 800f3ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f3f2:	78fb      	ldrb	r3, [r7, #3]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	b25b      	sxtb	r3, r3
 800f3fc:	f003 030f 	and.w	r3, r3, #15
 800f400:	b25b      	sxtb	r3, r3
 800f402:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800f406:	78fb      	ldrb	r3, [r7, #3]
 800f408:	3301      	adds	r3, #1
 800f40a:	70fb      	strb	r3, [r7, #3]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( rxParamSetupReq.Datarate == 0x0F )
 800f40c:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f410:	2b0f      	cmp	r3, #15
 800f412:	d105      	bne.n	800f420 <ProcessMacCommands+0x310>
                {
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
 800f414:	4b30      	ldr	r3, [pc, #192]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f416:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800f41a:	b25b      	sxtb	r3, r3
 800f41c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	70fa      	strb	r2, [r7, #3]
 800f426:	461a      	mov	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4413      	add	r3, r2
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f430:	78fb      	ldrb	r3, [r7, #3]
 800f432:	1c5a      	adds	r2, r3, #1
 800f434:	70fa      	strb	r2, [r7, #3]
 800f436:	461a      	mov	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4413      	add	r3, r2
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	021a      	lsls	r2, r3, #8
 800f440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f442:	4313      	orrs	r3, r2
 800f444:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f446:	78fb      	ldrb	r3, [r7, #3]
 800f448:	1c5a      	adds	r2, r3, #1
 800f44a:	70fa      	strb	r2, [r7, #3]
 800f44c:	461a      	mov	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4413      	add	r3, r2
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	041a      	lsls	r2, r3, #16
 800f456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f458:	4313      	orrs	r3, r2
 800f45a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800f45c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f45e:	2264      	movs	r2, #100	@ 0x64
 800f460:	fb02 f303 	mul.w	r3, r2, r3
 800f464:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f466:	4b1c      	ldr	r3, [pc, #112]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f468:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f46c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f470:	4611      	mov	r1, r2
 800f472:	4618      	mov	r0, r3
 800f474:	f005 f997 	bl	80147a6 <RegionRxParamSetupReq>
 800f478:	4603      	mov	r3, r0
 800f47a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f47e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f482:	f003 0307 	and.w	r3, r3, #7
 800f486:	2b07      	cmp	r3, #7
 800f488:	d117      	bne.n	800f4ba <ProcessMacCommands+0x3aa>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f48a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f48e:	b2da      	uxtb	r2, r3
 800f490:	4b11      	ldr	r3, [pc, #68]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f492:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f496:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f49a:	b2da      	uxtb	r2, r3
 800f49c:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f49e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f4a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4a4:	4a0c      	ldr	r2, [pc, #48]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f4a6:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f4a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4aa:	4a0b      	ldr	r2, [pc, #44]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f4ac:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f4ae:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800f4b2:	b2da      	uxtb	r2, r3
 800f4b4:	4b08      	ldr	r3, [pc, #32]	@ (800f4d8 <ProcessMacCommands+0x3c8>)
 800f4b6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800f4ba:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f4be:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f4c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	2005      	movs	r0, #5
 800f4cc:	f003 faf4 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                break;
 800f4d0:	e2fc      	b.n	800facc <ProcessMacCommands+0x9bc>
 800f4d2:	bf00      	nop
 800f4d4:	200005dc 	.word	0x200005dc
 800f4d8:	20000b10 	.word	0x20000b10
 800f4dc:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f4e0:	23ff      	movs	r3, #255	@ 0xff
 800f4e2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f4e6:	4bb7      	ldr	r3, [pc, #732]	@ (800f7c4 <ProcessMacCommands+0x6b4>)
 800f4e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00d      	beq.n	800f50c <ProcessMacCommands+0x3fc>
 800f4f0:	4bb4      	ldr	r3, [pc, #720]	@ (800f7c4 <ProcessMacCommands+0x6b4>)
 800f4f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d007      	beq.n	800f50c <ProcessMacCommands+0x3fc>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f4fc:	4bb1      	ldr	r3, [pc, #708]	@ (800f7c4 <ProcessMacCommands+0x6b4>)
 800f4fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4798      	blx	r3
 800f506:	4603      	mov	r3, r0
 800f508:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f50c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f510:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f514:	787b      	ldrb	r3, [r7, #1]
 800f516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f520:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f524:	2202      	movs	r2, #2
 800f526:	4619      	mov	r1, r3
 800f528:	2006      	movs	r0, #6
 800f52a:	f003 fac5 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                break;
 800f52e:	e2cd      	b.n	800facc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f530:	2303      	movs	r3, #3
 800f532:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f536:	78fb      	ldrb	r3, [r7, #3]
 800f538:	1c5a      	adds	r2, r3, #1
 800f53a:	70fa      	strb	r2, [r7, #3]
 800f53c:	461a      	mov	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4413      	add	r3, r2
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	b25b      	sxtb	r3, r3
 800f546:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800f54a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f54e:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f550:	78fb      	ldrb	r3, [r7, #3]
 800f552:	1c5a      	adds	r2, r3, #1
 800f554:	70fa      	strb	r2, [r7, #3]
 800f556:	461a      	mov	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4413      	add	r3, r2
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f560:	78fb      	ldrb	r3, [r7, #3]
 800f562:	1c5a      	adds	r2, r3, #1
 800f564:	70fa      	strb	r2, [r7, #3]
 800f566:	461a      	mov	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4413      	add	r3, r2
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	021a      	lsls	r2, r3, #8
 800f570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f572:	4313      	orrs	r3, r2
 800f574:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f576:	78fb      	ldrb	r3, [r7, #3]
 800f578:	1c5a      	adds	r2, r3, #1
 800f57a:	70fa      	strb	r2, [r7, #3]
 800f57c:	461a      	mov	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4413      	add	r3, r2
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	041a      	lsls	r2, r3, #16
 800f586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f588:	4313      	orrs	r3, r2
 800f58a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800f58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58e:	2264      	movs	r2, #100	@ 0x64
 800f590:	fb02 f303 	mul.w	r3, r2, r3
 800f594:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800f596:	2300      	movs	r3, #0
 800f598:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f59a:	78fb      	ldrb	r3, [r7, #3]
 800f59c:	1c5a      	adds	r2, r3, #1
 800f59e:	70fa      	strb	r2, [r7, #3]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4413      	add	r3, r2
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	b25b      	sxtb	r3, r3
 800f5aa:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f5ae:	4b86      	ldr	r3, [pc, #536]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f5b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f5b4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f005 f906 	bl	80147cc <RegionNewChannelReq>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f5c8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f5cc:	b25b      	sxtb	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f2c0 8273 	blt.w	800faba <ProcessMacCommands+0x9aa>
                {
                    macCmdPayload[0] = status;
 800f5d4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f5d8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f5dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	2007      	movs	r0, #7
 800f5e6:	f003 fa67 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f5ea:	e266      	b.n	800faba <ProcessMacCommands+0x9aa>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f5ec:	78fb      	ldrb	r3, [r7, #3]
 800f5ee:	1c5a      	adds	r2, r3, #1
 800f5f0:	70fa      	strb	r2, [r7, #3]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	f003 030f 	and.w	r3, r3, #15
 800f5fe:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800f602:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f606:	2b00      	cmp	r3, #0
 800f608:	d104      	bne.n	800f614 <ProcessMacCommands+0x504>
                {
                    delay++;
 800f60a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f60e:	3301      	adds	r3, #1
 800f610:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f614:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f618:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f61c:	fb02 f303 	mul.w	r3, r2, r3
 800f620:	461a      	mov	r2, r3
 800f622:	4b69      	ldr	r3, [pc, #420]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f624:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f626:	4b68      	ldr	r3, [pc, #416]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f62a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f62e:	4a66      	ldr	r2, [pc, #408]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f630:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f632:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f636:	2200      	movs	r2, #0
 800f638:	4619      	mov	r1, r3
 800f63a:	2008      	movs	r0, #8
 800f63c:	f003 fa3c 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                break;
 800f640:	e244      	b.n	800facc <ProcessMacCommands+0x9bc>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f642:	78fb      	ldrb	r3, [r7, #3]
 800f644:	1c5a      	adds	r2, r3, #1
 800f646:	70fa      	strb	r2, [r7, #3]
 800f648:	461a      	mov	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4413      	add	r3, r2
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f654:	2300      	movs	r3, #0
 800f656:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f65a:	2300      	movs	r3, #0
 800f65c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f660:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f664:	f003 0320 	and.w	r3, r3, #32
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d002      	beq.n	800f672 <ProcessMacCommands+0x562>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f66c:	2301      	movs	r3, #1
 800f66e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f672:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f676:	f003 0310 	and.w	r3, r3, #16
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d002      	beq.n	800f684 <ProcessMacCommands+0x574>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f67e:	2301      	movs	r3, #1
 800f680:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f684:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f688:	f003 030f 	and.w	r3, r3, #15
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f692:	4b4d      	ldr	r3, [pc, #308]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f694:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f698:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f005 f8a7 	bl	80147f2 <RegionTxParamSetupReq>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6aa:	f000 8208 	beq.w	800fabe <ProcessMacCommands+0x9ae>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f6ae:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f6b2:	4b45      	ldr	r3, [pc, #276]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f6b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f6b8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f6bc:	4b42      	ldr	r3, [pc, #264]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f6be:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f6c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	4b40      	ldr	r3, [pc, #256]	@ (800f7cc <ProcessMacCommands+0x6bc>)
 800f6ca:	5c9b      	ldrb	r3, [r3, r2]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f1 f8d1 	bl	8000874 <__aeabi_ui2f>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	4a3c      	ldr	r2, [pc, #240]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f6d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f6da:	2302      	movs	r3, #2
 800f6dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f6e0:	4b39      	ldr	r3, [pc, #228]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f6e2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f6e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f6ea:	4b37      	ldr	r3, [pc, #220]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f6ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f6f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f004 ff7e 	bl	80145f8 <RegionGetPhyParam>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f702:	b25a      	sxtb	r2, r3
 800f704:	4b30      	ldr	r3, [pc, #192]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f706:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f70a:	4293      	cmp	r3, r2
 800f70c:	bfb8      	it	lt
 800f70e:	4613      	movlt	r3, r2
 800f710:	b25a      	sxtb	r2, r3
 800f712:	4b2d      	ldr	r3, [pc, #180]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f714:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f718:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f71c:	2200      	movs	r2, #0
 800f71e:	4619      	mov	r1, r3
 800f720:	2009      	movs	r0, #9
 800f722:	f003 f9c9 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f726:	e1ca      	b.n	800fabe <ProcessMacCommands+0x9ae>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f728:	2303      	movs	r3, #3
 800f72a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f72e:	78fb      	ldrb	r3, [r7, #3]
 800f730:	1c5a      	adds	r2, r3, #1
 800f732:	70fa      	strb	r2, [r7, #3]
 800f734:	461a      	mov	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4413      	add	r3, r2
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f740:	78fb      	ldrb	r3, [r7, #3]
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	70fa      	strb	r2, [r7, #3]
 800f746:	461a      	mov	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4413      	add	r3, r2
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f750:	78fb      	ldrb	r3, [r7, #3]
 800f752:	1c5a      	adds	r2, r3, #1
 800f754:	70fa      	strb	r2, [r7, #3]
 800f756:	461a      	mov	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4413      	add	r3, r2
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	021a      	lsls	r2, r3, #8
 800f760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f762:	4313      	orrs	r3, r2
 800f764:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f766:	78fb      	ldrb	r3, [r7, #3]
 800f768:	1c5a      	adds	r2, r3, #1
 800f76a:	70fa      	strb	r2, [r7, #3]
 800f76c:	461a      	mov	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4413      	add	r3, r2
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	041a      	lsls	r2, r3, #16
 800f776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f778:	4313      	orrs	r3, r2
 800f77a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f77e:	2264      	movs	r2, #100	@ 0x64
 800f780:	fb02 f303 	mul.w	r3, r2, r3
 800f784:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f786:	4b10      	ldr	r3, [pc, #64]	@ (800f7c8 <ProcessMacCommands+0x6b8>)
 800f788:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f78c:	f107 0220 	add.w	r2, r7, #32
 800f790:	4611      	mov	r1, r2
 800f792:	4618      	mov	r0, r3
 800f794:	f005 f840 	bl	8014818 <RegionDlChannelReq>
 800f798:	4603      	mov	r3, r0
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f7a0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f7a4:	b25b      	sxtb	r3, r3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f2c0 818b 	blt.w	800fac2 <ProcessMacCommands+0x9b2>
                {
                    macCmdPayload[0] = status;
 800f7ac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f7b0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f7b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	200a      	movs	r0, #10
 800f7be:	f003 f97b 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                }
                break;
 800f7c2:	e17e      	b.n	800fac2 <ProcessMacCommands+0x9b2>
 800f7c4:	200005dc 	.word	0x200005dc
 800f7c8:	20000b10 	.word	0x20000b10
 800f7cc:	0801c97c 	.word	0x0801c97c
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f7d0:	2009      	movs	r0, #9
 800f7d2:	f003 fca9 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 8084 	beq.w	800f8e6 <ProcessMacCommands+0x7d6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f7de:	2109      	movs	r1, #9
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	f003 fc15 	bl	8013010 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f7e6:	f107 0318 	add.w	r3, r7, #24
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f7f0:	f107 0310 	add.w	r3, r7, #16
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	601a      	str	r2, [r3, #0]
 800f7f8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f7fa:	f107 0308 	add.w	r3, r7, #8
 800f7fe:	2200      	movs	r2, #0
 800f800:	601a      	str	r2, [r3, #0]
 800f802:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f804:	78fb      	ldrb	r3, [r7, #3]
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	70fa      	strb	r2, [r7, #3]
 800f80a:	461a      	mov	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4413      	add	r3, r2
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f814:	78fb      	ldrb	r3, [r7, #3]
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	70fa      	strb	r2, [r7, #3]
 800f81a:	461a      	mov	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	4413      	add	r3, r2
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	021a      	lsls	r2, r3, #8
 800f824:	69bb      	ldr	r3, [r7, #24]
 800f826:	4313      	orrs	r3, r2
 800f828:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f82a:	78fb      	ldrb	r3, [r7, #3]
 800f82c:	1c5a      	adds	r2, r3, #1
 800f82e:	70fa      	strb	r2, [r7, #3]
 800f830:	461a      	mov	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4413      	add	r3, r2
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	041a      	lsls	r2, r3, #16
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f840:	78fb      	ldrb	r3, [r7, #3]
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	70fa      	strb	r2, [r7, #3]
 800f846:	461a      	mov	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4413      	add	r3, r2
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	061a      	lsls	r2, r3, #24
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	4313      	orrs	r3, r2
 800f854:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f856:	78fb      	ldrb	r3, [r7, #3]
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	70fa      	strb	r2, [r7, #3]
 800f85c:	461a      	mov	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4413      	add	r3, r2
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	b21b      	sxth	r3, r3
 800f866:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f868:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f86c:	461a      	mov	r2, r3
 800f86e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f872:	fb02 f303 	mul.w	r3, r2, r3
 800f876:	121b      	asrs	r3, r3, #8
 800f878:	b21b      	sxth	r3, r3
 800f87a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f87c:	f107 0310 	add.w	r3, r7, #16
 800f880:	f107 0218 	add.w	r2, r7, #24
 800f884:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f888:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f88c:	693a      	ldr	r2, [r7, #16]
 800f88e:	4b96      	ldr	r3, [pc, #600]	@ (800fae8 <ProcessMacCommands+0x9d8>)
 800f890:	4413      	add	r3, r2
 800f892:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f894:	f107 0308 	add.w	r3, r7, #8
 800f898:	4618      	mov	r0, r3
 800f89a:	f00a fd2b 	bl	801a2f4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f89e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800f8a2:	4b92      	ldr	r3, [pc, #584]	@ (800faec <ProcessMacCommands+0x9dc>)
 800f8a4:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800f8a8:	9200      	str	r2, [sp, #0]
 800f8aa:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800f8ae:	f107 0210 	add.w	r2, r7, #16
 800f8b2:	ca06      	ldmia	r2, {r1, r2}
 800f8b4:	f00a fcb7 	bl	801a226 <SysTimeSub>
 800f8b8:	f107 0010 	add.w	r0, r7, #16
 800f8bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8c2:	f107 0208 	add.w	r2, r7, #8
 800f8c6:	ca06      	ldmia	r2, {r1, r2}
 800f8c8:	f00a fc74 	bl	801a1b4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f8cc:	f107 0310 	add.w	r3, r7, #16
 800f8d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f8d4:	f00a fce0 	bl	801a298 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f8d8:	f002 ff8c 	bl	80127f4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f8dc:	4b83      	ldr	r3, [pc, #524]	@ (800faec <ProcessMacCommands+0x9dc>)
 800f8de:	2201      	movs	r2, #1
 800f8e0:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f8e4:	e0f2      	b.n	800facc <ProcessMacCommands+0x9bc>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f8e6:	4b81      	ldr	r3, [pc, #516]	@ (800faec <ProcessMacCommands+0x9dc>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 800f8ee:	e0ed      	b.n	800facc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f8f0:	200c      	movs	r0, #12
 800f8f2:	f003 fc19 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f000 80e4 	beq.w	800fac6 <ProcessMacCommands+0x9b6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f8fe:	210c      	movs	r1, #12
 800f900:	2000      	movs	r0, #0
 800f902:	f003 fb85 	bl	8013010 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f906:	4b79      	ldr	r3, [pc, #484]	@ (800faec <ProcessMacCommands+0x9dc>)
 800f908:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	f000 80da 	beq.w	800fac6 <ProcessMacCommands+0x9b6>
 800f912:	4b76      	ldr	r3, [pc, #472]	@ (800faec <ProcessMacCommands+0x9dc>)
 800f914:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800f918:	2b05      	cmp	r3, #5
 800f91a:	f000 80d4 	beq.w	800fac6 <ProcessMacCommands+0x9b6>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f91e:	f002 ff4a 	bl	80127b6 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f922:	e0d0      	b.n	800fac6 <ProcessMacCommands+0x9b6>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f924:	2303      	movs	r3, #3
 800f926:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800f92a:	2300      	movs	r3, #0
 800f92c:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f92e:	78fb      	ldrb	r3, [r7, #3]
 800f930:	1c5a      	adds	r2, r3, #1
 800f932:	70fa      	strb	r2, [r7, #3]
 800f934:	461a      	mov	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4413      	add	r3, r2
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f93e:	78fb      	ldrb	r3, [r7, #3]
 800f940:	1c5a      	adds	r2, r3, #1
 800f942:	70fa      	strb	r2, [r7, #3]
 800f944:	461a      	mov	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4413      	add	r3, r2
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	021b      	lsls	r3, r3, #8
 800f94e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f950:	4313      	orrs	r3, r2
 800f952:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f954:	78fb      	ldrb	r3, [r7, #3]
 800f956:	1c5a      	adds	r2, r3, #1
 800f958:	70fa      	strb	r2, [r7, #3]
 800f95a:	461a      	mov	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4413      	add	r3, r2
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	041b      	lsls	r3, r3, #16
 800f964:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f966:	4313      	orrs	r3, r2
 800f968:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800f96a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f96c:	2264      	movs	r2, #100	@ 0x64
 800f96e:	fb02 f303 	mul.w	r3, r2, r3
 800f972:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f974:	78fb      	ldrb	r3, [r7, #3]
 800f976:	1c5a      	adds	r2, r3, #1
 800f978:	70fa      	strb	r2, [r7, #3]
 800f97a:	461a      	mov	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4413      	add	r3, r2
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	f003 030f 	and.w	r3, r3, #15
 800f986:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f98a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f98e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f990:	4618      	mov	r0, r3
 800f992:	f002 ff16 	bl	80127c2 <LoRaMacClassBPingSlotChannelReq>
 800f996:	4603      	mov	r3, r0
 800f998:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800f99c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f9a0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800f9a4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	2011      	movs	r0, #17
 800f9ae:	f003 f883 	bl	8012ab8 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 800f9b2:	e08b      	b.n	800facc <ProcessMacCommands+0x9bc>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f9b4:	200d      	movs	r0, #13
 800f9b6:	f003 fbb7 	bl	8013128 <LoRaMacConfirmQueueIsCmdActive>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 8084 	beq.w	800faca <ProcessMacCommands+0x9ba>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f9c2:	210d      	movs	r1, #13
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	f003 fb23 	bl	8013010 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f9d6:	78fb      	ldrb	r3, [r7, #3]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	70fa      	strb	r2, [r7, #3]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f9e8:	78fb      	ldrb	r3, [r7, #3]
 800f9ea:	1c5a      	adds	r2, r3, #1
 800f9ec:	70fa      	strb	r2, [r7, #3]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4413      	add	r3, r2
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	021b      	lsls	r3, r3, #8
 800f9f8:	b21a      	sxth	r2, r3
 800f9fa:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	b21b      	sxth	r3, r3
 800fa02:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800fa06:	78fb      	ldrb	r3, [r7, #3]
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	70fa      	strb	r2, [r7, #3]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4413      	add	r3, r2
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800fa18:	4b35      	ldr	r3, [pc, #212]	@ (800faf0 <ProcessMacCommands+0x9e0>)
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800fa20:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800fa24:	4618      	mov	r0, r3
 800fa26:	f002 fed8 	bl	80127da <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800fa2a:	e04e      	b.n	800faca <ProcessMacCommands+0x9ba>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800fa32:	78fb      	ldrb	r3, [r7, #3]
 800fa34:	1c5a      	adds	r2, r3, #1
 800fa36:	70fa      	strb	r2, [r7, #3]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fa44:	78fb      	ldrb	r3, [r7, #3]
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	70fa      	strb	r2, [r7, #3]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4413      	add	r3, r2
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	021b      	lsls	r3, r3, #8
 800fa54:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fa5e:	78fb      	ldrb	r3, [r7, #3]
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	70fa      	strb	r2, [r7, #3]
 800fa64:	461a      	mov	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4413      	add	r3, r2
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	041b      	lsls	r3, r3, #16
 800fa6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fa72:	4313      	orrs	r3, r2
 800fa74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800fa78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fa7c:	2264      	movs	r2, #100	@ 0x64
 800fa7e:	fb02 f303 	mul.w	r3, r2, r3
 800fa82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fa86:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800fa8a:	f002 feb9 	bl	8012800 <LoRaMacClassBBeaconFreqReq>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d003      	beq.n	800fa9c <ProcessMacCommands+0x98c>
                    {
                        macCmdPayload[0] = 1;
 800fa94:	2301      	movs	r3, #1
 800fa96:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800fa9a:	e002      	b.n	800faa2 <ProcessMacCommands+0x992>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800faa2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800faa6:	2201      	movs	r2, #1
 800faa8:	4619      	mov	r1, r3
 800faaa:	2013      	movs	r0, #19
 800faac:	f003 f804 	bl	8012ab8 <LoRaMacCommandsAddCmd>
                }
                break;
 800fab0:	e00c      	b.n	800facc <ProcessMacCommands+0x9bc>
                break;
 800fab2:	bf00      	nop
 800fab4:	e00a      	b.n	800facc <ProcessMacCommands+0x9bc>
                break;
 800fab6:	bf00      	nop
 800fab8:	e008      	b.n	800facc <ProcessMacCommands+0x9bc>
                break;
 800faba:	bf00      	nop
 800fabc:	e006      	b.n	800facc <ProcessMacCommands+0x9bc>
                break;
 800fabe:	bf00      	nop
 800fac0:	e004      	b.n	800facc <ProcessMacCommands+0x9bc>
                break;
 800fac2:	bf00      	nop
 800fac4:	e002      	b.n	800facc <ProcessMacCommands+0x9bc>
                break;
 800fac6:	bf00      	nop
 800fac8:	e000      	b.n	800facc <ProcessMacCommands+0x9bc>
                break;
 800faca:	bf00      	nop
    while( macIndex < commandsSize )
 800facc:	78fa      	ldrb	r2, [r7, #3]
 800face:	78bb      	ldrb	r3, [r7, #2]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	f4ff ab3f 	bcc.w	800f154 <ProcessMacCommands+0x44>
 800fad6:	e004      	b.n	800fae2 <ProcessMacCommands+0x9d2>
        return;
 800fad8:	bf00      	nop
 800fada:	e002      	b.n	800fae2 <ProcessMacCommands+0x9d2>
            return;
 800fadc:	bf00      	nop
 800fade:	e000      	b.n	800fae2 <ProcessMacCommands+0x9d2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800fae0:	bf00      	nop
        }
    }
}
 800fae2:	378c      	adds	r7, #140	@ 0x8c
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd90      	pop	{r4, r7, pc}
 800fae8:	12d53d80 	.word	0x12d53d80
 800faec:	200005dc 	.word	0x200005dc
 800faf0:	20001164 	.word	0x20001164

0800faf4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b08e      	sub	sp, #56	@ 0x38
 800faf8:	af02      	add	r7, sp, #8
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	607a      	str	r2, [r7, #4]
 800fafe:	461a      	mov	r2, r3
 800fb00:	460b      	mov	r3, r1
 800fb02:	72fb      	strb	r3, [r7, #11]
 800fb04:	4613      	mov	r3, r2
 800fb06:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb08:	2303      	movs	r3, #3
 800fb0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fb0e:	4b66      	ldr	r3, [pc, #408]	@ (800fca8 <Send+0x1b4>)
 800fb10:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800fb14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fb18:	4b63      	ldr	r3, [pc, #396]	@ (800fca8 <Send+0x1b4>)
 800fb1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fb1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fb22:	4b61      	ldr	r3, [pc, #388]	@ (800fca8 <Send+0x1b4>)
 800fb24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb26:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fb28:	4b5f      	ldr	r3, [pc, #380]	@ (800fca8 <Send+0x1b4>)
 800fb2a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d101      	bne.n	800fb36 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fb32:	2307      	movs	r3, #7
 800fb34:	e0b4      	b.n	800fca0 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fb36:	4b5c      	ldr	r3, [pc, #368]	@ (800fca8 <Send+0x1b4>)
 800fb38:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d102      	bne.n	800fb46 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fb40:	4b59      	ldr	r3, [pc, #356]	@ (800fca8 <Send+0x1b4>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fb4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fb50:	f023 030f 	bic.w	r3, r3, #15
 800fb54:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fb58:	4b53      	ldr	r3, [pc, #332]	@ (800fca8 <Send+0x1b4>)
 800fb5a:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800fb5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fb62:	f362 13c7 	bfi	r3, r2, #7, #1
 800fb66:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fb6a:	4b4f      	ldr	r3, [pc, #316]	@ (800fca8 <Send+0x1b4>)
 800fb6c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d106      	bne.n	800fb82 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fb74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fb78:	f043 0310 	orr.w	r3, r3, #16
 800fb7c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800fb80:	e005      	b.n	800fb8e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fb82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fb86:	f023 0310 	bic.w	r3, r3, #16
 800fb8a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fb8e:	4b46      	ldr	r3, [pc, #280]	@ (800fca8 <Send+0x1b4>)
 800fb90:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d005      	beq.n	800fba4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fb98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fb9c:	f043 0320 	orr.w	r3, r3, #32
 800fba0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800fba4:	2301      	movs	r3, #1
 800fba6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fba8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fbac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	bf14      	ite	ne
 800fbb6:	2301      	movne	r3, #1
 800fbb8:	2300      	moveq	r3, #0
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fbbe:	4b3a      	ldr	r3, [pc, #232]	@ (800fca8 <Send+0x1b4>)
 800fbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc2:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800fbc4:	4b38      	ldr	r3, [pc, #224]	@ (800fca8 <Send+0x1b4>)
 800fbc6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800fbca:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800fbcc:	4b36      	ldr	r3, [pc, #216]	@ (800fca8 <Send+0x1b4>)
 800fbce:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800fbd2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbd4:	4b34      	ldr	r3, [pc, #208]	@ (800fca8 <Send+0x1b4>)
 800fbd6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fbda:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbde:	4b32      	ldr	r3, [pc, #200]	@ (800fca8 <Send+0x1b4>)
 800fbe0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fbe4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fbe8:	4b2f      	ldr	r3, [pc, #188]	@ (800fca8 <Send+0x1b4>)
 800fbea:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fbee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800fbf2:	4b2d      	ldr	r3, [pc, #180]	@ (800fca8 <Send+0x1b4>)
 800fbf4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fbf8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fbfc:	4b2a      	ldr	r3, [pc, #168]	@ (800fca8 <Send+0x1b4>)
 800fbfe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fc02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fc06:	f107 0014 	add.w	r0, r7, #20
 800fc0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	4b26      	ldr	r3, [pc, #152]	@ (800fcac <Send+0x1b8>)
 800fc12:	4a27      	ldr	r2, [pc, #156]	@ (800fcb0 <Send+0x1bc>)
 800fc14:	4927      	ldr	r1, [pc, #156]	@ (800fcb4 <Send+0x1c0>)
 800fc16:	f002 fc6d 	bl	80124f4 <LoRaMacAdrCalcNext>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc22:	f362 1386 	bfi	r3, r2, #6, #1
 800fc26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fc2a:	7afa      	ldrb	r2, [r7, #11]
 800fc2c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800fc30:	893b      	ldrh	r3, [r7, #8]
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f000 fc72 	bl	8010520 <PrepareFrame>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fc42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <Send+0x15e>
 800fc4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fc4e:	2b0a      	cmp	r3, #10
 800fc50:	d107      	bne.n	800fc62 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800fc52:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800fc56:	4618      	mov	r0, r3
 800fc58:	f000 f962 	bl	800ff20 <ScheduleTx>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fc62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00a      	beq.n	800fc80 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fc6a:	4a0f      	ldr	r2, [pc, #60]	@ (800fca8 <Send+0x1b4>)
 800fc6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fc70:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fc74:	4a0c      	ldr	r2, [pc, #48]	@ (800fca8 <Send+0x1b4>)
 800fc76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fc7a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800fc7e:	e00d      	b.n	800fc9c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fc80:	4b09      	ldr	r3, [pc, #36]	@ (800fca8 <Send+0x1b4>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc8a:	4a07      	ldr	r2, [pc, #28]	@ (800fca8 <Send+0x1b4>)
 800fc8c:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fc8e:	f002 ffb9 	bl	8012c04 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fc98:	2313      	movs	r3, #19
 800fc9a:	e001      	b.n	800fca0 <Send+0x1ac>
        }
    }
    return status;
 800fc9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3730      	adds	r7, #48	@ 0x30
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	20000b10 	.word	0x20000b10
 800fcac:	20000b78 	.word	0x20000b78
 800fcb0:	20000b48 	.word	0x20000b48
 800fcb4:	20000b49 	.word	0x20000b49

0800fcb8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fcca:	2301      	movs	r3, #1
 800fccc:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fcce:	79fb      	ldrb	r3, [r7, #7]
 800fcd0:	2bff      	cmp	r3, #255	@ 0xff
 800fcd2:	d11f      	bne.n	800fd14 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	f7ff f8e1 	bl	800ee9c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fcda:	4b15      	ldr	r3, [pc, #84]	@ (800fd30 <SendReJoinReq+0x78>)
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fce2:	4b13      	ldr	r3, [pc, #76]	@ (800fd30 <SendReJoinReq+0x78>)
 800fce4:	4a13      	ldr	r2, [pc, #76]	@ (800fd34 <SendReJoinReq+0x7c>)
 800fce6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fcea:	4b11      	ldr	r3, [pc, #68]	@ (800fd30 <SendReJoinReq+0x78>)
 800fcec:	22ff      	movs	r2, #255	@ 0xff
 800fcee:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fcf2:	7b3b      	ldrb	r3, [r7, #12]
 800fcf4:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800fcf8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fcfa:	7b3a      	ldrb	r2, [r7, #12]
 800fcfc:	4b0c      	ldr	r3, [pc, #48]	@ (800fd30 <SendReJoinReq+0x78>)
 800fcfe:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800fd02:	480d      	ldr	r0, [pc, #52]	@ (800fd38 <SendReJoinReq+0x80>)
 800fd04:	f7fc f80c 	bl	800bd20 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800fd08:	480c      	ldr	r0, [pc, #48]	@ (800fd3c <SendReJoinReq+0x84>)
 800fd0a:	f7fb ffd9 	bl	800bcc0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	73fb      	strb	r3, [r7, #15]

            break;
 800fd12:	e002      	b.n	800fd1a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fd14:	2302      	movs	r3, #2
 800fd16:	73bb      	strb	r3, [r7, #14]
            break;
 800fd18:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fd1a:	7bfb      	ldrb	r3, [r7, #15]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f000 f8ff 	bl	800ff20 <ScheduleTx>
 800fd22:	4603      	mov	r3, r0
 800fd24:	73bb      	strb	r3, [r7, #14]
    return status;
 800fd26:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	200005dc 	.word	0x200005dc
 800fd34:	200005de 	.word	0x200005de
 800fd38:	200006ea 	.word	0x200006ea
 800fd3c:	200006f2 	.word	0x200006f2

0800fd40 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fd44:	f002 fce6 	bl	8012714 <LoRaMacClassBIsBeaconExpected>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fd4e:	230e      	movs	r3, #14
 800fd50:	e013      	b.n	800fd7a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fd52:	4b0b      	ldr	r3, [pc, #44]	@ (800fd80 <CheckForClassBCollision+0x40>)
 800fd54:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d10d      	bne.n	800fd78 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fd5c:	f002 fce1 	bl	8012722 <LoRaMacClassBIsPingExpected>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d001      	beq.n	800fd6a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fd66:	230f      	movs	r3, #15
 800fd68:	e007      	b.n	800fd7a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fd6a:	f002 fce1 	bl	8012730 <LoRaMacClassBIsMulticastExpected>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fd74:	230f      	movs	r3, #15
 800fd76:	e000      	b.n	800fd7a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	20000b10 	.word	0x20000b10

0800fd84 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fd84:	b590      	push	{r4, r7, lr}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fd8a:	4b2d      	ldr	r3, [pc, #180]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fd8c:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fd90:	4b2b      	ldr	r3, [pc, #172]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fd92:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fd96:	4b2a      	ldr	r3, [pc, #168]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fd98:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800fd9c:	4b28      	ldr	r3, [pc, #160]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fd9e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fda2:	4b27      	ldr	r3, [pc, #156]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fda4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fda8:	b25b      	sxtb	r3, r3
 800fdaa:	f004 fd7a 	bl	80148a2 <RegionApplyDrOffset>
 800fdae:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fdb0:	b259      	sxtb	r1, r3
 800fdb2:	4b23      	ldr	r3, [pc, #140]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fdb4:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800fdb8:	4b21      	ldr	r3, [pc, #132]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fdba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdbc:	4821      	ldr	r0, [pc, #132]	@ (800fe44 <ComputeRxWindowParameters+0xc0>)
 800fdbe:	9000      	str	r0, [sp, #0]
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f004 fc90 	bl	80146e6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fdc6:	4b1e      	ldr	r3, [pc, #120]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fdc8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fdcc:	4b1c      	ldr	r3, [pc, #112]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fdce:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fdd2:	b259      	sxtb	r1, r3
 800fdd4:	4b1a      	ldr	r3, [pc, #104]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fdd6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800fdda:	4b19      	ldr	r3, [pc, #100]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdde:	4c1a      	ldr	r4, [pc, #104]	@ (800fe48 <ComputeRxWindowParameters+0xc4>)
 800fde0:	9400      	str	r4, [sp, #0]
 800fde2:	f004 fc80 	bl	80146e6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fde6:	4b16      	ldr	r3, [pc, #88]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fde8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fdea:	4a18      	ldr	r2, [pc, #96]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fdec:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fdf0:	4413      	add	r3, r2
 800fdf2:	4a16      	ldr	r2, [pc, #88]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fdf4:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fdf8:	4b11      	ldr	r3, [pc, #68]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fdfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fdfc:	4a13      	ldr	r2, [pc, #76]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fdfe:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800fe02:	4413      	add	r3, r2
 800fe04:	4a11      	ldr	r2, [pc, #68]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fe06:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800fe0a:	4b10      	ldr	r3, [pc, #64]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fe0c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fe10:	2b04      	cmp	r3, #4
 800fe12:	d011      	beq.n	800fe38 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fe14:	4b0a      	ldr	r3, [pc, #40]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fe16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe18:	4a0c      	ldr	r2, [pc, #48]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fe1a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fe1e:	4413      	add	r3, r2
 800fe20:	4a0a      	ldr	r2, [pc, #40]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fe22:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fe26:	4b06      	ldr	r3, [pc, #24]	@ (800fe40 <ComputeRxWindowParameters+0xbc>)
 800fe28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe2a:	4a08      	ldr	r2, [pc, #32]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fe2c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800fe30:	4413      	add	r3, r2
 800fe32:	4a06      	ldr	r2, [pc, #24]	@ (800fe4c <ComputeRxWindowParameters+0xc8>)
 800fe34:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800fe38:	bf00      	nop
 800fe3a:	3704      	adds	r7, #4
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd90      	pop	{r4, r7, pc}
 800fe40:	20000b10 	.word	0x20000b10
 800fe44:	20000994 	.word	0x20000994
 800fe48:	200009ac 	.word	0x200009ac
 800fe4c:	200005dc 	.word	0x200005dc

0800fe50 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fe56:	2300      	movs	r3, #0
 800fe58:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fe5a:	4b13      	ldr	r3, [pc, #76]	@ (800fea8 <VerifyTxFrame+0x58>)
 800fe5c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d01b      	beq.n	800fe9c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fe64:	1d3b      	adds	r3, r7, #4
 800fe66:	4618      	mov	r0, r3
 800fe68:	f002 ff1c 	bl	8012ca4 <LoRaMacCommandsGetSizeSerializedCmds>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe72:	2313      	movs	r3, #19
 800fe74:	e013      	b.n	800fe9e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fe76:	4b0d      	ldr	r3, [pc, #52]	@ (800feac <VerifyTxFrame+0x5c>)
 800fe78:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fe7c:	4a0a      	ldr	r2, [pc, #40]	@ (800fea8 <VerifyTxFrame+0x58>)
 800fe7e:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	b2d2      	uxtb	r2, r2
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7ff f91a 	bl	800f0c0 <ValidatePayloadLength>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	f083 0301 	eor.w	r3, r3, #1
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d001      	beq.n	800fe9c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fe98:	2308      	movs	r3, #8
 800fe9a:	e000      	b.n	800fe9e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3708      	adds	r7, #8
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	20000b10 	.word	0x20000b10
 800feac:	200005dc 	.word	0x200005dc

0800feb0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800feb6:	4b18      	ldr	r3, [pc, #96]	@ (800ff18 <SerializeTxFrame+0x68>)
 800feb8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <SerializeTxFrame+0x16>
 800fec0:	2b04      	cmp	r3, #4
 800fec2:	d011      	beq.n	800fee8 <SerializeTxFrame+0x38>
 800fec4:	e021      	b.n	800ff0a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fec6:	4815      	ldr	r0, [pc, #84]	@ (800ff1c <SerializeTxFrame+0x6c>)
 800fec8:	f004 fa0f 	bl	80142ea <LoRaMacSerializerJoinRequest>
 800fecc:	4603      	mov	r3, r0
 800fece:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fed0:	79fb      	ldrb	r3, [r7, #7]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d001      	beq.n	800feda <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fed6:	2311      	movs	r3, #17
 800fed8:	e01a      	b.n	800ff10 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800feda:	4b0f      	ldr	r3, [pc, #60]	@ (800ff18 <SerializeTxFrame+0x68>)
 800fedc:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fee0:	461a      	mov	r2, r3
 800fee2:	4b0d      	ldr	r3, [pc, #52]	@ (800ff18 <SerializeTxFrame+0x68>)
 800fee4:	801a      	strh	r2, [r3, #0]
            break;
 800fee6:	e012      	b.n	800ff0e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fee8:	480c      	ldr	r0, [pc, #48]	@ (800ff1c <SerializeTxFrame+0x6c>)
 800feea:	f004 fa80 	bl	80143ee <LoRaMacSerializerData>
 800feee:	4603      	mov	r3, r0
 800fef0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fef2:	79fb      	ldrb	r3, [r7, #7]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d001      	beq.n	800fefc <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fef8:	2311      	movs	r3, #17
 800fefa:	e009      	b.n	800ff10 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fefc:	4b06      	ldr	r3, [pc, #24]	@ (800ff18 <SerializeTxFrame+0x68>)
 800fefe:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ff02:	461a      	mov	r2, r3
 800ff04:	4b04      	ldr	r3, [pc, #16]	@ (800ff18 <SerializeTxFrame+0x68>)
 800ff06:	801a      	strh	r2, [r3, #0]
            break;
 800ff08:	e001      	b.n	800ff0e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff0a:	2303      	movs	r3, #3
 800ff0c:	e000      	b.n	800ff10 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800ff0e:	2300      	movs	r3, #0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	200005dc 	.word	0x200005dc
 800ff1c:	200006e4 	.word	0x200006e4

0800ff20 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b090      	sub	sp, #64	@ 0x40
 800ff24:	af02      	add	r7, sp, #8
 800ff26:	4603      	mov	r3, r0
 800ff28:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff2a:	2303      	movs	r3, #3
 800ff2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800ff30:	f7ff ff06 	bl	800fd40 <CheckForClassBCollision>
 800ff34:	4603      	mov	r3, r0
 800ff36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800ff3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d002      	beq.n	800ff48 <ScheduleTx+0x28>
    {
        return status;
 800ff42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff46:	e092      	b.n	801006e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800ff48:	f000 f8f8 	bl	801013c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800ff4c:	f7ff ffb0 	bl	800feb0 <SerializeTxFrame>
 800ff50:	4603      	mov	r3, r0
 800ff52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800ff56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d002      	beq.n	800ff64 <ScheduleTx+0x44>
    {
        return status;
 800ff5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff62:	e084      	b.n	801006e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800ff64:	4b44      	ldr	r3, [pc, #272]	@ (8010078 <ScheduleTx+0x158>)
 800ff66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff68:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ff6a:	4b43      	ldr	r3, [pc, #268]	@ (8010078 <ScheduleTx+0x158>)
 800ff6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ff70:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800ff72:	4b41      	ldr	r3, [pc, #260]	@ (8010078 <ScheduleTx+0x158>)
 800ff74:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ff78:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ff7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f00a f9f0 	bl	801a364 <SysTimeGetMcuTime>
 800ff84:	4638      	mov	r0, r7
 800ff86:	4b3c      	ldr	r3, [pc, #240]	@ (8010078 <ScheduleTx+0x158>)
 800ff88:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800ff8c:	9200      	str	r2, [sp, #0]
 800ff8e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ff92:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ff96:	ca06      	ldmia	r2, {r1, r2}
 800ff98:	f00a f945 	bl	801a226 <SysTimeSub>
 800ff9c:	f107 0320 	add.w	r3, r7, #32
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffa6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800ffaa:	4b33      	ldr	r3, [pc, #204]	@ (8010078 <ScheduleTx+0x158>)
 800ffac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffae:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800ffba:	4b30      	ldr	r3, [pc, #192]	@ (801007c <ScheduleTx+0x15c>)
 800ffbc:	881b      	ldrh	r3, [r3, #0]
 800ffbe:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ffc0:	4b2d      	ldr	r3, [pc, #180]	@ (8010078 <ScheduleTx+0x158>)
 800ffc2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d104      	bne.n	800ffd4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ffd4:	4b28      	ldr	r3, [pc, #160]	@ (8010078 <ScheduleTx+0x158>)
 800ffd6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ffda:	f107 0114 	add.w	r1, r7, #20
 800ffde:	4b28      	ldr	r3, [pc, #160]	@ (8010080 <ScheduleTx+0x160>)
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	4b28      	ldr	r3, [pc, #160]	@ (8010084 <ScheduleTx+0x164>)
 800ffe4:	4a28      	ldr	r2, [pc, #160]	@ (8010088 <ScheduleTx+0x168>)
 800ffe6:	f004 fc44 	bl	8014872 <RegionNextChannel>
 800ffea:	4603      	mov	r3, r0
 800ffec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800fff0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d025      	beq.n	8010044 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800fff8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fffc:	2b0b      	cmp	r3, #11
 800fffe:	d11e      	bne.n	801003e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010000:	4b1e      	ldr	r3, [pc, #120]	@ (801007c <ScheduleTx+0x15c>)
 8010002:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8010006:	2b00      	cmp	r3, #0
 8010008:	d01c      	beq.n	8010044 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 801000a:	7bfb      	ldrb	r3, [r7, #15]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d013      	beq.n	8010038 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010010:	4b1a      	ldr	r3, [pc, #104]	@ (801007c <ScheduleTx+0x15c>)
 8010012:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010016:	f043 0320 	orr.w	r3, r3, #32
 801001a:	4a18      	ldr	r2, [pc, #96]	@ (801007c <ScheduleTx+0x15c>)
 801001c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010020:	4b16      	ldr	r3, [pc, #88]	@ (801007c <ScheduleTx+0x15c>)
 8010022:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8010026:	4619      	mov	r1, r3
 8010028:	4818      	ldr	r0, [pc, #96]	@ (801008c <ScheduleTx+0x16c>)
 801002a:	f00a fed3 	bl	801add4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801002e:	4817      	ldr	r0, [pc, #92]	@ (801008c <ScheduleTx+0x16c>)
 8010030:	f00a fdf2 	bl	801ac18 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8010034:	2300      	movs	r3, #0
 8010036:	e01a      	b.n	801006e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010038:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801003c:	e017      	b.n	801006e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801003e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010042:	e014      	b.n	801006e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010044:	f7ff fe9e 	bl	800fd84 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010048:	f7ff ff02 	bl	800fe50 <VerifyTxFrame>
 801004c:	4603      	mov	r3, r0
 801004e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010052:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <ScheduleTx+0x140>
    {
        return status;
 801005a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801005e:	e006      	b.n	801006e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010060:	4b06      	ldr	r3, [pc, #24]	@ (801007c <ScheduleTx+0x15c>)
 8010062:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8010066:	4618      	mov	r0, r3
 8010068:	f000 fb74 	bl	8010754 <SendFrameOnChannel>
 801006c:	4603      	mov	r3, r0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3738      	adds	r7, #56	@ 0x38
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	20000b10 	.word	0x20000b10
 801007c:	200005dc 	.word	0x200005dc
 8010080:	20000b40 	.word	0x20000b40
 8010084:	20000a70 	.word	0x20000a70
 8010088:	200009f7 	.word	0x200009f7
 801008c:	20000944 	.word	0x20000944

08010090 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	4603      	mov	r3, r0
 8010098:	460a      	mov	r2, r1
 801009a:	71fb      	strb	r3, [r7, #7]
 801009c:	4613      	mov	r3, r2
 801009e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80100a0:	2312      	movs	r3, #18
 80100a2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80100a4:	2300      	movs	r3, #0
 80100a6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80100a8:	4b22      	ldr	r3, [pc, #136]	@ (8010134 <SecureFrame+0xa4>)
 80100aa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d002      	beq.n	80100b8 <SecureFrame+0x28>
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	d011      	beq.n	80100da <SecureFrame+0x4a>
 80100b6:	e036      	b.n	8010126 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80100b8:	481f      	ldr	r0, [pc, #124]	@ (8010138 <SecureFrame+0xa8>)
 80100ba:	f003 fce9 	bl	8013a90 <LoRaMacCryptoPrepareJoinRequest>
 80100be:	4603      	mov	r3, r0
 80100c0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80100c2:	7bfb      	ldrb	r3, [r7, #15]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d001      	beq.n	80100cc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80100c8:	2311      	movs	r3, #17
 80100ca:	e02f      	b.n	801012c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80100cc:	4b19      	ldr	r3, [pc, #100]	@ (8010134 <SecureFrame+0xa4>)
 80100ce:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80100d2:	461a      	mov	r2, r3
 80100d4:	4b17      	ldr	r3, [pc, #92]	@ (8010134 <SecureFrame+0xa4>)
 80100d6:	801a      	strh	r2, [r3, #0]
            break;
 80100d8:	e027      	b.n	801012a <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80100da:	f107 0308 	add.w	r3, r7, #8
 80100de:	4618      	mov	r0, r3
 80100e0:	f003 fc10 	bl	8013904 <LoRaMacCryptoGetFCntUp>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d001      	beq.n	80100ee <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80100ea:	2312      	movs	r3, #18
 80100ec:	e01e      	b.n	801012c <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80100ee:	4b11      	ldr	r3, [pc, #68]	@ (8010134 <SecureFrame+0xa4>)
 80100f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	3b01      	subs	r3, #1
 80100fc:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80100fe:	68b8      	ldr	r0, [r7, #8]
 8010100:	79ba      	ldrb	r2, [r7, #6]
 8010102:	79f9      	ldrb	r1, [r7, #7]
 8010104:	4b0c      	ldr	r3, [pc, #48]	@ (8010138 <SecureFrame+0xa8>)
 8010106:	f003 fde9 	bl	8013cdc <LoRaMacCryptoSecureMessage>
 801010a:	4603      	mov	r3, r0
 801010c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801010e:	7bfb      	ldrb	r3, [r7, #15]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d001      	beq.n	8010118 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010114:	2311      	movs	r3, #17
 8010116:	e009      	b.n	801012c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010118:	4b06      	ldr	r3, [pc, #24]	@ (8010134 <SecureFrame+0xa4>)
 801011a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801011e:	461a      	mov	r2, r3
 8010120:	4b04      	ldr	r3, [pc, #16]	@ (8010134 <SecureFrame+0xa4>)
 8010122:	801a      	strh	r2, [r3, #0]
            break;
 8010124:	e001      	b.n	801012a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010126:	2303      	movs	r3, #3
 8010128:	e000      	b.n	801012c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	200005dc 	.word	0x200005dc
 8010138:	200006e4 	.word	0x200006e4

0801013c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801013c:	b480      	push	{r7}
 801013e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010140:	4b09      	ldr	r3, [pc, #36]	@ (8010168 <CalculateBackOff+0x2c>)
 8010142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10a      	bne.n	801015e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010148:	4b07      	ldr	r3, [pc, #28]	@ (8010168 <CalculateBackOff+0x2c>)
 801014a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 801014e:	3b01      	subs	r3, #1
 8010150:	4a06      	ldr	r2, [pc, #24]	@ (801016c <CalculateBackOff+0x30>)
 8010152:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 8010156:	fb02 f303 	mul.w	r3, r2, r3
 801015a:	4a03      	ldr	r2, [pc, #12]	@ (8010168 <CalculateBackOff+0x2c>)
 801015c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801015e:	bf00      	nop
 8010160:	46bd      	mov	sp, r7
 8010162:	bc80      	pop	{r7}
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	20000b10 	.word	0x20000b10
 801016c:	200005dc 	.word	0x200005dc

08010170 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	7139      	strb	r1, [r7, #4]
 801017a:	71fb      	strb	r3, [r7, #7]
 801017c:	4613      	mov	r3, r2
 801017e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d002      	beq.n	801018c <RemoveMacCommands+0x1c>
 8010186:	79fb      	ldrb	r3, [r7, #7]
 8010188:	2b01      	cmp	r3, #1
 801018a:	d10d      	bne.n	80101a8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801018c:	79bb      	ldrb	r3, [r7, #6]
 801018e:	2b01      	cmp	r3, #1
 8010190:	d108      	bne.n	80101a4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010192:	793b      	ldrb	r3, [r7, #4]
 8010194:	f003 0320 	and.w	r3, r3, #32
 8010198:	b2db      	uxtb	r3, r3
 801019a:	2b00      	cmp	r3, #0
 801019c:	d004      	beq.n	80101a8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801019e:	f002 fd55 	bl	8012c4c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80101a2:	e001      	b.n	80101a8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80101a4:	f002 fd52 	bl	8012c4c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80101a8:	bf00      	nop
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80101b0:	b5b0      	push	{r4, r5, r7, lr}
 80101b2:	b092      	sub	sp, #72	@ 0x48
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	f083 0301 	eor.w	r3, r3, #1
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d003      	beq.n	80101ce <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80101c6:	4b88      	ldr	r3, [pc, #544]	@ (80103e8 <ResetMacParameters+0x238>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80101ce:	4b86      	ldr	r3, [pc, #536]	@ (80103e8 <ResetMacParameters+0x238>)
 80101d0:	2200      	movs	r2, #0
 80101d2:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80101d4:	4b85      	ldr	r3, [pc, #532]	@ (80103ec <ResetMacParameters+0x23c>)
 80101d6:	2200      	movs	r2, #0
 80101d8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80101dc:	4b83      	ldr	r3, [pc, #524]	@ (80103ec <ResetMacParameters+0x23c>)
 80101de:	2200      	movs	r2, #0
 80101e0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 80101e4:	4b81      	ldr	r3, [pc, #516]	@ (80103ec <ResetMacParameters+0x23c>)
 80101e6:	2200      	movs	r2, #0
 80101e8:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80101ec:	4b7e      	ldr	r3, [pc, #504]	@ (80103e8 <ResetMacParameters+0x238>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80101f4:	4b7c      	ldr	r3, [pc, #496]	@ (80103e8 <ResetMacParameters+0x238>)
 80101f6:	2201      	movs	r2, #1
 80101f8:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80101fc:	4b7a      	ldr	r3, [pc, #488]	@ (80103e8 <ResetMacParameters+0x238>)
 80101fe:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8010202:	4b79      	ldr	r3, [pc, #484]	@ (80103e8 <ResetMacParameters+0x238>)
 8010204:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010208:	4b77      	ldr	r3, [pc, #476]	@ (80103e8 <ResetMacParameters+0x238>)
 801020a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801020e:	4b76      	ldr	r3, [pc, #472]	@ (80103e8 <ResetMacParameters+0x238>)
 8010210:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010214:	4b74      	ldr	r3, [pc, #464]	@ (80103e8 <ResetMacParameters+0x238>)
 8010216:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 801021a:	4b73      	ldr	r3, [pc, #460]	@ (80103e8 <ResetMacParameters+0x238>)
 801021c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010220:	4b71      	ldr	r3, [pc, #452]	@ (80103e8 <ResetMacParameters+0x238>)
 8010222:	4a71      	ldr	r2, [pc, #452]	@ (80103e8 <ResetMacParameters+0x238>)
 8010224:	336c      	adds	r3, #108	@ 0x6c
 8010226:	32b4      	adds	r2, #180	@ 0xb4
 8010228:	e892 0003 	ldmia.w	r2, {r0, r1}
 801022c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010230:	4b6d      	ldr	r3, [pc, #436]	@ (80103e8 <ResetMacParameters+0x238>)
 8010232:	4a6d      	ldr	r2, [pc, #436]	@ (80103e8 <ResetMacParameters+0x238>)
 8010234:	3374      	adds	r3, #116	@ 0x74
 8010236:	32bc      	adds	r2, #188	@ 0xbc
 8010238:	e892 0003 	ldmia.w	r2, {r0, r1}
 801023c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010240:	4b69      	ldr	r3, [pc, #420]	@ (80103e8 <ResetMacParameters+0x238>)
 8010242:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8010246:	4b68      	ldr	r3, [pc, #416]	@ (80103e8 <ResetMacParameters+0x238>)
 8010248:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801024c:	4b66      	ldr	r3, [pc, #408]	@ (80103e8 <ResetMacParameters+0x238>)
 801024e:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8010252:	4b65      	ldr	r3, [pc, #404]	@ (80103e8 <ResetMacParameters+0x238>)
 8010254:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010258:	4b63      	ldr	r3, [pc, #396]	@ (80103e8 <ResetMacParameters+0x238>)
 801025a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801025e:	4a62      	ldr	r2, [pc, #392]	@ (80103e8 <ResetMacParameters+0x238>)
 8010260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010264:	4b60      	ldr	r3, [pc, #384]	@ (80103e8 <ResetMacParameters+0x238>)
 8010266:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801026a:	4a5f      	ldr	r2, [pc, #380]	@ (80103e8 <ResetMacParameters+0x238>)
 801026c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010270:	4b5d      	ldr	r3, [pc, #372]	@ (80103e8 <ResetMacParameters+0x238>)
 8010272:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8010276:	4b5c      	ldr	r3, [pc, #368]	@ (80103e8 <ResetMacParameters+0x238>)
 8010278:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801027c:	4b5a      	ldr	r3, [pc, #360]	@ (80103e8 <ResetMacParameters+0x238>)
 801027e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8010282:	4b59      	ldr	r3, [pc, #356]	@ (80103e8 <ResetMacParameters+0x238>)
 8010284:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 8010288:	4b58      	ldr	r3, [pc, #352]	@ (80103ec <ResetMacParameters+0x23c>)
 801028a:	2200      	movs	r2, #0
 801028c:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8010290:	4b55      	ldr	r3, [pc, #340]	@ (80103e8 <ResetMacParameters+0x238>)
 8010292:	2200      	movs	r2, #0
 8010294:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010298:	4b53      	ldr	r3, [pc, #332]	@ (80103e8 <ResetMacParameters+0x238>)
 801029a:	2200      	movs	r2, #0
 801029c:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80102a0:	4b51      	ldr	r3, [pc, #324]	@ (80103e8 <ResetMacParameters+0x238>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80102a8:	4b4f      	ldr	r3, [pc, #316]	@ (80103e8 <ResetMacParameters+0x238>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80102b0:	4b4d      	ldr	r3, [pc, #308]	@ (80103e8 <ResetMacParameters+0x238>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80102b8:	4b4b      	ldr	r3, [pc, #300]	@ (80103e8 <ResetMacParameters+0x238>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80102c0:	4b49      	ldr	r3, [pc, #292]	@ (80103e8 <ResetMacParameters+0x238>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80102c8:	4b47      	ldr	r3, [pc, #284]	@ (80103e8 <ResetMacParameters+0x238>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80102d0:	4b45      	ldr	r3, [pc, #276]	@ (80103e8 <ResetMacParameters+0x238>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80102d8:	4b43      	ldr	r3, [pc, #268]	@ (80103e8 <ResetMacParameters+0x238>)
 80102da:	2200      	movs	r2, #0
 80102dc:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80102e0:	4b41      	ldr	r3, [pc, #260]	@ (80103e8 <ResetMacParameters+0x238>)
 80102e2:	2200      	movs	r2, #0
 80102e4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80102e8:	2301      	movs	r3, #1
 80102ea:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80102ec:	4b40      	ldr	r3, [pc, #256]	@ (80103f0 <ResetMacParameters+0x240>)
 80102ee:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80102f0:	4b40      	ldr	r3, [pc, #256]	@ (80103f4 <ResetMacParameters+0x244>)
 80102f2:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 80102f4:	4b40      	ldr	r3, [pc, #256]	@ (80103f8 <ResetMacParameters+0x248>)
 80102f6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80102f8:	4b3b      	ldr	r3, [pc, #236]	@ (80103e8 <ResetMacParameters+0x238>)
 80102fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102fe:	f107 020c 	add.w	r2, r7, #12
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f004 f9a0 	bl	801464a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801030a:	4b38      	ldr	r3, [pc, #224]	@ (80103ec <ResetMacParameters+0x23c>)
 801030c:	2200      	movs	r2, #0
 801030e:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010312:	4b36      	ldr	r3, [pc, #216]	@ (80103ec <ResetMacParameters+0x23c>)
 8010314:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010318:	4b34      	ldr	r3, [pc, #208]	@ (80103ec <ResetMacParameters+0x23c>)
 801031a:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801031e:	4b32      	ldr	r3, [pc, #200]	@ (80103e8 <ResetMacParameters+0x238>)
 8010320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010322:	4a32      	ldr	r2, [pc, #200]	@ (80103ec <ResetMacParameters+0x23c>)
 8010324:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010328:	4b2f      	ldr	r3, [pc, #188]	@ (80103e8 <ResetMacParameters+0x238>)
 801032a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 801032e:	4b2f      	ldr	r3, [pc, #188]	@ (80103ec <ResetMacParameters+0x23c>)
 8010330:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010334:	4b2c      	ldr	r3, [pc, #176]	@ (80103e8 <ResetMacParameters+0x238>)
 8010336:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801033a:	4b2c      	ldr	r3, [pc, #176]	@ (80103ec <ResetMacParameters+0x23c>)
 801033c:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010340:	4b2a      	ldr	r3, [pc, #168]	@ (80103ec <ResetMacParameters+0x23c>)
 8010342:	2200      	movs	r2, #0
 8010344:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010348:	4b28      	ldr	r3, [pc, #160]	@ (80103ec <ResetMacParameters+0x23c>)
 801034a:	2201      	movs	r2, #1
 801034c:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010350:	4b25      	ldr	r3, [pc, #148]	@ (80103e8 <ResetMacParameters+0x238>)
 8010352:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010356:	4b25      	ldr	r3, [pc, #148]	@ (80103ec <ResetMacParameters+0x23c>)
 8010358:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801035c:	4a23      	ldr	r2, [pc, #140]	@ (80103ec <ResetMacParameters+0x23c>)
 801035e:	4b23      	ldr	r3, [pc, #140]	@ (80103ec <ResetMacParameters+0x23c>)
 8010360:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010364:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801036a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801036c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010370:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010374:	4b1d      	ldr	r3, [pc, #116]	@ (80103ec <ResetMacParameters+0x23c>)
 8010376:	2201      	movs	r2, #1
 8010378:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801037c:	4b1b      	ldr	r3, [pc, #108]	@ (80103ec <ResetMacParameters+0x23c>)
 801037e:	2202      	movs	r2, #2
 8010380:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010384:	2300      	movs	r3, #0
 8010386:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8010388:	2300      	movs	r3, #0
 801038a:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 801038c:	4b17      	ldr	r3, [pc, #92]	@ (80103ec <ResetMacParameters+0x23c>)
 801038e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010392:	2b00      	cmp	r3, #0
 8010394:	d009      	beq.n	80103aa <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010396:	4b15      	ldr	r3, [pc, #84]	@ (80103ec <ResetMacParameters+0x23c>)
 8010398:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80103a0:	4b12      	ldr	r3, [pc, #72]	@ (80103ec <ResetMacParameters+0x23c>)
 80103a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80103a6:	695b      	ldr	r3, [r3, #20]
 80103a8:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80103aa:	4b14      	ldr	r3, [pc, #80]	@ (80103fc <ResetMacParameters+0x24c>)
 80103ac:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80103ae:	4b14      	ldr	r3, [pc, #80]	@ (8010400 <ResetMacParameters+0x250>)
 80103b0:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80103b2:	4b14      	ldr	r3, [pc, #80]	@ (8010404 <ResetMacParameters+0x254>)
 80103b4:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80103b6:	4b14      	ldr	r3, [pc, #80]	@ (8010408 <ResetMacParameters+0x258>)
 80103b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80103ba:	4b14      	ldr	r3, [pc, #80]	@ (801040c <ResetMacParameters+0x25c>)
 80103bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80103be:	4b14      	ldr	r3, [pc, #80]	@ (8010410 <ResetMacParameters+0x260>)
 80103c0:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80103c2:	4b14      	ldr	r3, [pc, #80]	@ (8010414 <ResetMacParameters+0x264>)
 80103c4:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80103c6:	4b14      	ldr	r3, [pc, #80]	@ (8010418 <ResetMacParameters+0x268>)
 80103c8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80103ca:	4b14      	ldr	r3, [pc, #80]	@ (801041c <ResetMacParameters+0x26c>)
 80103cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80103ce:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80103d2:	f107 031c 	add.w	r3, r7, #28
 80103d6:	4a12      	ldr	r2, [pc, #72]	@ (8010420 <ResetMacParameters+0x270>)
 80103d8:	4618      	mov	r0, r3
 80103da:	f002 f944 	bl	8012666 <LoRaMacClassBInit>
}
 80103de:	bf00      	nop
 80103e0:	3748      	adds	r7, #72	@ 0x48
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bdb0      	pop	{r4, r5, r7, pc}
 80103e6:	bf00      	nop
 80103e8:	20000b10 	.word	0x20000b10
 80103ec:	200005dc 	.word	0x200005dc
 80103f0:	20000d34 	.word	0x20000d34
 80103f4:	20000d38 	.word	0x20000d38
 80103f8:	200010cc 	.word	0x200010cc
 80103fc:	20000a44 	.word	0x20000a44
 8010400:	200009fc 	.word	0x200009fc
 8010404:	20000a30 	.word	0x20000a30
 8010408:	20000a6d 	.word	0x20000a6d
 801040c:	20000bf4 	.word	0x20000bf4
 8010410:	20000b58 	.word	0x20000b58
 8010414:	20000b5c 	.word	0x20000b5c
 8010418:	20000bf8 	.word	0x20000bf8
 801041c:	20000c40 	.word	0x20000c40
 8010420:	200010b4 	.word	0x200010b4

08010424 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f00a fc60 	bl	801acf4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010434:	4b11      	ldr	r3, [pc, #68]	@ (801047c <RxWindowSetup+0x58>)
 8010436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010438:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801043a:	4b11      	ldr	r3, [pc, #68]	@ (8010480 <RxWindowSetup+0x5c>)
 801043c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010440:	4a10      	ldr	r2, [pc, #64]	@ (8010484 <RxWindowSetup+0x60>)
 8010442:	6839      	ldr	r1, [r7, #0]
 8010444:	4618      	mov	r0, r3
 8010446:	f004 f968 	bl	801471a <RegionRxConfig>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d010      	beq.n	8010472 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010450:	4b0d      	ldr	r3, [pc, #52]	@ (8010488 <RxWindowSetup+0x64>)
 8010452:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 8010456:	4b0c      	ldr	r3, [pc, #48]	@ (8010488 <RxWindowSetup+0x64>)
 8010458:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801045c:	4b07      	ldr	r3, [pc, #28]	@ (801047c <RxWindowSetup+0x58>)
 801045e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010460:	4a07      	ldr	r2, [pc, #28]	@ (8010480 <RxWindowSetup+0x5c>)
 8010462:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8010464:	4610      	mov	r0, r2
 8010466:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	7cda      	ldrb	r2, [r3, #19]
 801046c:	4b06      	ldr	r3, [pc, #24]	@ (8010488 <RxWindowSetup+0x64>)
 801046e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8010472:	bf00      	nop
 8010474:	3708      	adds	r7, #8
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	0801c9c4 	.word	0x0801c9c4
 8010480:	20000b10 	.word	0x20000b10
 8010484:	20000a00 	.word	0x20000a00
 8010488:	200005dc 	.word	0x200005dc

0801048c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801048c:	b590      	push	{r4, r7, lr}
 801048e:	b083      	sub	sp, #12
 8010490:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010492:	4b1e      	ldr	r3, [pc, #120]	@ (801050c <OpenContinuousRxCWindow+0x80>)
 8010494:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010498:	4b1c      	ldr	r3, [pc, #112]	@ (801050c <OpenContinuousRxCWindow+0x80>)
 801049a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801049e:	b259      	sxtb	r1, r3
 80104a0:	4b1a      	ldr	r3, [pc, #104]	@ (801050c <OpenContinuousRxCWindow+0x80>)
 80104a2:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80104a6:	4b19      	ldr	r3, [pc, #100]	@ (801050c <OpenContinuousRxCWindow+0x80>)
 80104a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80104aa:	4c19      	ldr	r4, [pc, #100]	@ (8010510 <OpenContinuousRxCWindow+0x84>)
 80104ac:	9400      	str	r4, [sp, #0]
 80104ae:	f004 f91a 	bl	80146e6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80104b2:	4b18      	ldr	r3, [pc, #96]	@ (8010514 <OpenContinuousRxCWindow+0x88>)
 80104b4:	2202      	movs	r2, #2
 80104b6:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80104ba:	4b14      	ldr	r3, [pc, #80]	@ (801050c <OpenContinuousRxCWindow+0x80>)
 80104bc:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80104c0:	4b14      	ldr	r3, [pc, #80]	@ (8010514 <OpenContinuousRxCWindow+0x88>)
 80104c2:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80104c6:	4b13      	ldr	r3, [pc, #76]	@ (8010514 <OpenContinuousRxCWindow+0x88>)
 80104c8:	2201      	movs	r2, #1
 80104ca:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80104ce:	4b0f      	ldr	r3, [pc, #60]	@ (801050c <OpenContinuousRxCWindow+0x80>)
 80104d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80104d4:	4a10      	ldr	r2, [pc, #64]	@ (8010518 <OpenContinuousRxCWindow+0x8c>)
 80104d6:	490e      	ldr	r1, [pc, #56]	@ (8010510 <OpenContinuousRxCWindow+0x84>)
 80104d8:	4618      	mov	r0, r3
 80104da:	f004 f91e 	bl	801471a <RegionRxConfig>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00f      	beq.n	8010504 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80104e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010514 <OpenContinuousRxCWindow+0x88>)
 80104e6:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 80104ea:	4b0a      	ldr	r3, [pc, #40]	@ (8010514 <OpenContinuousRxCWindow+0x88>)
 80104ec:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80104f0:	4b0a      	ldr	r3, [pc, #40]	@ (801051c <OpenContinuousRxCWindow+0x90>)
 80104f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104f4:	2000      	movs	r0, #0
 80104f6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80104f8:	4b06      	ldr	r3, [pc, #24]	@ (8010514 <OpenContinuousRxCWindow+0x88>)
 80104fa:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 80104fe:	4b05      	ldr	r3, [pc, #20]	@ (8010514 <OpenContinuousRxCWindow+0x88>)
 8010500:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8010504:	bf00      	nop
 8010506:	3704      	adds	r7, #4
 8010508:	46bd      	mov	sp, r7
 801050a:	bd90      	pop	{r4, r7, pc}
 801050c:	20000b10 	.word	0x20000b10
 8010510:	200009c4 	.word	0x200009c4
 8010514:	200005dc 	.word	0x200005dc
 8010518:	20000a00 	.word	0x20000a00
 801051c:	0801c9c4 	.word	0x0801c9c4

08010520 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b088      	sub	sp, #32
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	603b      	str	r3, [r7, #0]
 801052c:	4613      	mov	r3, r2
 801052e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010530:	4b81      	ldr	r3, [pc, #516]	@ (8010738 <PrepareFrame+0x218>)
 8010532:	2200      	movs	r2, #0
 8010534:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010536:	4b80      	ldr	r3, [pc, #512]	@ (8010738 <PrepareFrame+0x218>)
 8010538:	2200      	movs	r2, #0
 801053a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 801053e:	2300      	movs	r3, #0
 8010540:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010542:	2300      	movs	r3, #0
 8010544:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010546:	2300      	movs	r3, #0
 8010548:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d101      	bne.n	8010554 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010550:	2300      	movs	r3, #0
 8010552:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010554:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010556:	461a      	mov	r2, r3
 8010558:	6839      	ldr	r1, [r7, #0]
 801055a:	4878      	ldr	r0, [pc, #480]	@ (801073c <PrepareFrame+0x21c>)
 801055c:	f006 fa77 	bl	8016a4e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010560:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010562:	b2da      	uxtb	r2, r3
 8010564:	4b74      	ldr	r3, [pc, #464]	@ (8010738 <PrepareFrame+0x218>)
 8010566:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	781a      	ldrb	r2, [r3, #0]
 801056e:	4b72      	ldr	r3, [pc, #456]	@ (8010738 <PrepareFrame+0x218>)
 8010570:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801057a:	b2db      	uxtb	r3, r3
 801057c:	2b07      	cmp	r3, #7
 801057e:	f000 80b9 	beq.w	80106f4 <PrepareFrame+0x1d4>
 8010582:	2b07      	cmp	r3, #7
 8010584:	f300 80ce 	bgt.w	8010724 <PrepareFrame+0x204>
 8010588:	2b02      	cmp	r3, #2
 801058a:	d006      	beq.n	801059a <PrepareFrame+0x7a>
 801058c:	2b04      	cmp	r3, #4
 801058e:	f040 80c9 	bne.w	8010724 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010592:	4b69      	ldr	r3, [pc, #420]	@ (8010738 <PrepareFrame+0x218>)
 8010594:	2201      	movs	r2, #1
 8010596:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801059a:	4b67      	ldr	r3, [pc, #412]	@ (8010738 <PrepareFrame+0x218>)
 801059c:	2204      	movs	r2, #4
 801059e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80105a2:	4b65      	ldr	r3, [pc, #404]	@ (8010738 <PrepareFrame+0x218>)
 80105a4:	4a66      	ldr	r2, [pc, #408]	@ (8010740 <PrepareFrame+0x220>)
 80105a6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80105aa:	4b63      	ldr	r3, [pc, #396]	@ (8010738 <PrepareFrame+0x218>)
 80105ac:	22ff      	movs	r2, #255	@ 0xff
 80105ae:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	781a      	ldrb	r2, [r3, #0]
 80105b6:	4b60      	ldr	r3, [pc, #384]	@ (8010738 <PrepareFrame+0x218>)
 80105b8:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80105bc:	4a5e      	ldr	r2, [pc, #376]	@ (8010738 <PrepareFrame+0x218>)
 80105be:	79fb      	ldrb	r3, [r7, #7]
 80105c0:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80105c4:	4b5f      	ldr	r3, [pc, #380]	@ (8010744 <PrepareFrame+0x224>)
 80105c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80105ca:	4a5b      	ldr	r2, [pc, #364]	@ (8010738 <PrepareFrame+0x218>)
 80105cc:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	781a      	ldrb	r2, [r3, #0]
 80105d4:	4b58      	ldr	r3, [pc, #352]	@ (8010738 <PrepareFrame+0x218>)
 80105d6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80105da:	4b57      	ldr	r3, [pc, #348]	@ (8010738 <PrepareFrame+0x218>)
 80105dc:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 80105e0:	4b55      	ldr	r3, [pc, #340]	@ (8010738 <PrepareFrame+0x218>)
 80105e2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80105e6:	4b54      	ldr	r3, [pc, #336]	@ (8010738 <PrepareFrame+0x218>)
 80105e8:	4a54      	ldr	r2, [pc, #336]	@ (801073c <PrepareFrame+0x21c>)
 80105ea:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80105ee:	f107 0318 	add.w	r3, r7, #24
 80105f2:	4618      	mov	r0, r3
 80105f4:	f003 f986 	bl	8013904 <LoRaMacCryptoGetFCntUp>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d001      	beq.n	8010602 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80105fe:	2312      	movs	r3, #18
 8010600:	e096      	b.n	8010730 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010602:	69bb      	ldr	r3, [r7, #24]
 8010604:	b29a      	uxth	r2, r3
 8010606:	4b4c      	ldr	r3, [pc, #304]	@ (8010738 <PrepareFrame+0x218>)
 8010608:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 801060c:	4b4a      	ldr	r3, [pc, #296]	@ (8010738 <PrepareFrame+0x218>)
 801060e:	2200      	movs	r2, #0
 8010610:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010614:	4b48      	ldr	r3, [pc, #288]	@ (8010738 <PrepareFrame+0x218>)
 8010616:	2200      	movs	r2, #0
 8010618:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801061c:	69bb      	ldr	r3, [r7, #24]
 801061e:	4a46      	ldr	r2, [pc, #280]	@ (8010738 <PrepareFrame+0x218>)
 8010620:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010624:	f107 0314 	add.w	r3, r7, #20
 8010628:	4618      	mov	r0, r3
 801062a:	f002 fb3b 	bl	8012ca4 <LoRaMacCommandsGetSizeSerializedCmds>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d001      	beq.n	8010638 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010634:	2313      	movs	r3, #19
 8010636:	e07b      	b.n	8010730 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d074      	beq.n	8010728 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801063e:	4b41      	ldr	r3, [pc, #260]	@ (8010744 <PrepareFrame+0x224>)
 8010640:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010644:	4618      	mov	r0, r3
 8010646:	f7fe fd13 	bl	800f070 <GetMaxAppPayloadWithoutFOptsLength>
 801064a:	4603      	mov	r3, r0
 801064c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801064e:	4b3a      	ldr	r3, [pc, #232]	@ (8010738 <PrepareFrame+0x218>)
 8010650:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010654:	2b00      	cmp	r3, #0
 8010656:	d01d      	beq.n	8010694 <PrepareFrame+0x174>
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	2b0f      	cmp	r3, #15
 801065c:	d81a      	bhi.n	8010694 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801065e:	f107 0314 	add.w	r3, r7, #20
 8010662:	4a39      	ldr	r2, [pc, #228]	@ (8010748 <PrepareFrame+0x228>)
 8010664:	4619      	mov	r1, r3
 8010666:	200f      	movs	r0, #15
 8010668:	f002 fb32 	bl	8012cd0 <LoRaMacCommandsSerializeCmds>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d001      	beq.n	8010676 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010672:	2313      	movs	r3, #19
 8010674:	e05c      	b.n	8010730 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	f003 030f 	and.w	r3, r3, #15
 801067c:	b2d9      	uxtb	r1, r3
 801067e:	68ba      	ldr	r2, [r7, #8]
 8010680:	7813      	ldrb	r3, [r2, #0]
 8010682:	f361 0303 	bfi	r3, r1, #0, #4
 8010686:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	781a      	ldrb	r2, [r3, #0]
 801068c:	4b2a      	ldr	r3, [pc, #168]	@ (8010738 <PrepareFrame+0x218>)
 801068e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010692:	e049      	b.n	8010728 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010694:	4b28      	ldr	r3, [pc, #160]	@ (8010738 <PrepareFrame+0x218>)
 8010696:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801069a:	2b00      	cmp	r3, #0
 801069c:	d010      	beq.n	80106c0 <PrepareFrame+0x1a0>
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	2b0f      	cmp	r3, #15
 80106a2:	d90d      	bls.n	80106c0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80106a4:	7ffb      	ldrb	r3, [r7, #31]
 80106a6:	f107 0114 	add.w	r1, r7, #20
 80106aa:	4a28      	ldr	r2, [pc, #160]	@ (801074c <PrepareFrame+0x22c>)
 80106ac:	4618      	mov	r0, r3
 80106ae:	f002 fb0f 	bl	8012cd0 <LoRaMacCommandsSerializeCmds>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d001      	beq.n	80106bc <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106b8:	2313      	movs	r3, #19
 80106ba:	e039      	b.n	8010730 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80106bc:	230a      	movs	r3, #10
 80106be:	e037      	b.n	8010730 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80106c0:	7ffb      	ldrb	r3, [r7, #31]
 80106c2:	f107 0114 	add.w	r1, r7, #20
 80106c6:	4a21      	ldr	r2, [pc, #132]	@ (801074c <PrepareFrame+0x22c>)
 80106c8:	4618      	mov	r0, r3
 80106ca:	f002 fb01 	bl	8012cd0 <LoRaMacCommandsSerializeCmds>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106d4:	2313      	movs	r3, #19
 80106d6:	e02b      	b.n	8010730 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80106d8:	4b17      	ldr	r3, [pc, #92]	@ (8010738 <PrepareFrame+0x218>)
 80106da:	2200      	movs	r2, #0
 80106dc:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80106e0:	4b15      	ldr	r3, [pc, #84]	@ (8010738 <PrepareFrame+0x218>)
 80106e2:	4a1a      	ldr	r2, [pc, #104]	@ (801074c <PrepareFrame+0x22c>)
 80106e4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	b2da      	uxtb	r2, r3
 80106ec:	4b12      	ldr	r3, [pc, #72]	@ (8010738 <PrepareFrame+0x218>)
 80106ee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 80106f2:	e019      	b.n	8010728 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d018      	beq.n	801072c <PrepareFrame+0x20c>
 80106fa:	4b0f      	ldr	r3, [pc, #60]	@ (8010738 <PrepareFrame+0x218>)
 80106fc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010700:	2b00      	cmp	r3, #0
 8010702:	d013      	beq.n	801072c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010704:	4812      	ldr	r0, [pc, #72]	@ (8010750 <PrepareFrame+0x230>)
 8010706:	4b0c      	ldr	r3, [pc, #48]	@ (8010738 <PrepareFrame+0x218>)
 8010708:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801070c:	461a      	mov	r2, r3
 801070e:	6839      	ldr	r1, [r7, #0]
 8010710:	f006 f99d 	bl	8016a4e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010714:	4b08      	ldr	r3, [pc, #32]	@ (8010738 <PrepareFrame+0x218>)
 8010716:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801071a:	3301      	adds	r3, #1
 801071c:	b29a      	uxth	r2, r3
 801071e:	4b06      	ldr	r3, [pc, #24]	@ (8010738 <PrepareFrame+0x218>)
 8010720:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010722:	e003      	b.n	801072c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010724:	2302      	movs	r3, #2
 8010726:	e003      	b.n	8010730 <PrepareFrame+0x210>
            break;
 8010728:	bf00      	nop
 801072a:	e000      	b.n	801072e <PrepareFrame+0x20e>
            break;
 801072c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	3720      	adds	r7, #32
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	200005dc 	.word	0x200005dc
 801073c:	20000714 	.word	0x20000714
 8010740:	200005de 	.word	0x200005de
 8010744:	20000b10 	.word	0x20000b10
 8010748:	200006f4 	.word	0x200006f4
 801074c:	20000a90 	.word	0x20000a90
 8010750:	200005df 	.word	0x200005df

08010754 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b08a      	sub	sp, #40	@ 0x28
 8010758:	af00      	add	r7, sp, #0
 801075a:	4603      	mov	r3, r0
 801075c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801075e:	2303      	movs	r3, #3
 8010760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010764:	2300      	movs	r3, #0
 8010766:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010768:	79fb      	ldrb	r3, [r7, #7]
 801076a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801076c:	4b4b      	ldr	r3, [pc, #300]	@ (801089c <SendFrameOnChannel+0x148>)
 801076e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010772:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010774:	4b49      	ldr	r3, [pc, #292]	@ (801089c <SendFrameOnChannel+0x148>)
 8010776:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801077a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801077c:	4b47      	ldr	r3, [pc, #284]	@ (801089c <SendFrameOnChannel+0x148>)
 801077e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010782:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010784:	4b45      	ldr	r3, [pc, #276]	@ (801089c <SendFrameOnChannel+0x148>)
 8010786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801078a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801078c:	4b44      	ldr	r3, [pc, #272]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 801078e:	881b      	ldrh	r3, [r3, #0]
 8010790:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010792:	4b42      	ldr	r3, [pc, #264]	@ (801089c <SendFrameOnChannel+0x148>)
 8010794:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8010798:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801079a:	4b40      	ldr	r3, [pc, #256]	@ (801089c <SendFrameOnChannel+0x148>)
 801079c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80107a0:	f107 020f 	add.w	r2, r7, #15
 80107a4:	f107 0110 	add.w	r1, r7, #16
 80107a8:	4b3e      	ldr	r3, [pc, #248]	@ (80108a4 <SendFrameOnChannel+0x150>)
 80107aa:	f003 ffcb 	bl	8014744 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80107ae:	4b3c      	ldr	r3, [pc, #240]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107b0:	2201      	movs	r2, #1
 80107b2:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107b6:	4b39      	ldr	r3, [pc, #228]	@ (801089c <SendFrameOnChannel+0x148>)
 80107b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	4b38      	ldr	r3, [pc, #224]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107c0:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 80107c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80107c8:	4b35      	ldr	r3, [pc, #212]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107ca:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80107ce:	79fb      	ldrb	r3, [r7, #7]
 80107d0:	4a33      	ldr	r2, [pc, #204]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107d2:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80107d6:	4b32      	ldr	r3, [pc, #200]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107d8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 80107dc:	4a30      	ldr	r2, [pc, #192]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107de:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80107e2:	4b2f      	ldr	r3, [pc, #188]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107e4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 80107e8:	4a2d      	ldr	r2, [pc, #180]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107ea:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80107ee:	f001 ffa6 	bl	801273e <LoRaMacClassBIsBeaconModeActive>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00b      	beq.n	8010810 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80107f8:	4b29      	ldr	r3, [pc, #164]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 80107fa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 80107fe:	4618      	mov	r0, r3
 8010800:	f002 f808 	bl	8012814 <LoRaMacClassBIsUplinkCollision>
 8010804:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010806:	6a3b      	ldr	r3, [r7, #32]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d001      	beq.n	8010810 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 801080c:	2310      	movs	r3, #16
 801080e:	e040      	b.n	8010892 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010810:	4b22      	ldr	r3, [pc, #136]	@ (801089c <SendFrameOnChannel+0x148>)
 8010812:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010816:	2b01      	cmp	r3, #1
 8010818:	d101      	bne.n	801081e <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801081a:	f002 f805 	bl	8012828 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801081e:	f001 ff9f 	bl	8012760 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010822:	4b1e      	ldr	r3, [pc, #120]	@ (801089c <SendFrameOnChannel+0x148>)
 8010824:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010828:	b2db      	uxtb	r3, r3
 801082a:	4a1d      	ldr	r2, [pc, #116]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 801082c:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8010830:	4611      	mov	r1, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff fc2c 	bl	8010090 <SecureFrame>
 8010838:	4603      	mov	r3, r0
 801083a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 801083e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010842:	2b00      	cmp	r3, #0
 8010844:	d002      	beq.n	801084c <SendFrameOnChannel+0xf8>
    {
        return status;
 8010846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801084a:	e022      	b.n	8010892 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801084c:	4b14      	ldr	r3, [pc, #80]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 801084e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010852:	f043 0302 	orr.w	r3, r3, #2
 8010856:	4a12      	ldr	r2, [pc, #72]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 8010858:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 801085c:	4b10      	ldr	r3, [pc, #64]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 801085e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010862:	3301      	adds	r3, #1
 8010864:	b2da      	uxtb	r2, r3
 8010866:	4b0e      	ldr	r3, [pc, #56]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 8010868:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 801086c:	4b0c      	ldr	r3, [pc, #48]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 801086e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010872:	4b0b      	ldr	r3, [pc, #44]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 8010874:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8010878:	4b09      	ldr	r3, [pc, #36]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 801087a:	2200      	movs	r2, #0
 801087c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010880:	4b09      	ldr	r3, [pc, #36]	@ (80108a8 <SendFrameOnChannel+0x154>)
 8010882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010884:	4a06      	ldr	r2, [pc, #24]	@ (80108a0 <SendFrameOnChannel+0x14c>)
 8010886:	8812      	ldrh	r2, [r2, #0]
 8010888:	b2d2      	uxtb	r2, r2
 801088a:	4611      	mov	r1, r2
 801088c:	4807      	ldr	r0, [pc, #28]	@ (80108ac <SendFrameOnChannel+0x158>)
 801088e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010890:	2300      	movs	r3, #0
}
 8010892:	4618      	mov	r0, r3
 8010894:	3728      	adds	r7, #40	@ 0x28
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	20000b10 	.word	0x20000b10
 80108a0:	200005dc 	.word	0x200005dc
 80108a4:	200009f8 	.word	0x200009f8
 80108a8:	0801c9c4 	.word	0x0801c9c4
 80108ac:	200005de 	.word	0x200005de

080108b0 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	4603      	mov	r3, r0
 80108b8:	6039      	str	r1, [r7, #0]
 80108ba:	80fb      	strh	r3, [r7, #6]
 80108bc:	4613      	mov	r3, r2
 80108be:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80108c0:	4b09      	ldr	r3, [pc, #36]	@ (80108e8 <SetTxContinuousWave+0x38>)
 80108c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80108c8:	88fa      	ldrh	r2, [r7, #6]
 80108ca:	6838      	ldr	r0, [r7, #0]
 80108cc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80108ce:	4b07      	ldr	r3, [pc, #28]	@ (80108ec <SetTxContinuousWave+0x3c>)
 80108d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80108d4:	f043 0302 	orr.w	r3, r3, #2
 80108d8:	4a04      	ldr	r2, [pc, #16]	@ (80108ec <SetTxContinuousWave+0x3c>)
 80108da:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	0801c9c4 	.word	0x0801c9c4
 80108ec:	200005dc 	.word	0x200005dc

080108f0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80108f0:	b480      	push	{r7}
 80108f2:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bc80      	pop	{r7}
 80108fc:	4770      	bx	lr

080108fe <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80108fe:	b480      	push	{r7}
 8010900:	b083      	sub	sp, #12
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <DetermineFrameType+0x16>
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d101      	bne.n	8010918 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010914:	2303      	movs	r3, #3
 8010916:	e03b      	b.n	8010990 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	7b1b      	ldrb	r3, [r3, #12]
 801091c:	f003 030f 	and.w	r3, r3, #15
 8010920:	b2db      	uxtb	r3, r3
 8010922:	2b00      	cmp	r3, #0
 8010924:	d008      	beq.n	8010938 <DetermineFrameType+0x3a>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f893 3020 	ldrb.w	r3, [r3, #32]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d003      	beq.n	8010938 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	2200      	movs	r2, #0
 8010934:	701a      	strb	r2, [r3, #0]
 8010936:	e02a      	b.n	801098e <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801093e:	2b00      	cmp	r3, #0
 8010940:	d103      	bne.n	801094a <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	2201      	movs	r2, #1
 8010946:	701a      	strb	r2, [r3, #0]
 8010948:	e021      	b.n	801098e <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	7b1b      	ldrb	r3, [r3, #12]
 801094e:	f003 030f 	and.w	r3, r3, #15
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d108      	bne.n	801096a <DetermineFrameType+0x6c>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d103      	bne.n	801096a <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	2202      	movs	r2, #2
 8010966:	701a      	strb	r2, [r3, #0]
 8010968:	e011      	b.n	801098e <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	7b1b      	ldrb	r3, [r3, #12]
 801096e:	f003 030f 	and.w	r3, r3, #15
 8010972:	b2db      	uxtb	r3, r3
 8010974:	2b00      	cmp	r3, #0
 8010976:	d108      	bne.n	801098a <DetermineFrameType+0x8c>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d003      	beq.n	801098a <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	2203      	movs	r2, #3
 8010986:	701a      	strb	r2, [r3, #0]
 8010988:	e001      	b.n	801098e <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801098a:	2318      	movs	r3, #24
 801098c:	e000      	b.n	8010990 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	bc80      	pop	{r7}
 8010998:	4770      	bx	lr

0801099a <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 801099a:	b480      	push	{r7}
 801099c:	b083      	sub	sp, #12
 801099e:	af00      	add	r7, sp, #0
 80109a0:	4603      	mov	r3, r0
 80109a2:	460a      	mov	r2, r1
 80109a4:	71fb      	strb	r3, [r7, #7]
 80109a6:	4613      	mov	r3, r2
 80109a8:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80109aa:	79fa      	ldrb	r2, [r7, #7]
 80109ac:	79bb      	ldrb	r3, [r7, #6]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d301      	bcc.n	80109b6 <CheckRetrans+0x1c>
    {
        return true;
 80109b2:	2301      	movs	r3, #1
 80109b4:	e000      	b.n	80109b8 <CheckRetrans+0x1e>
    }
    return false;
 80109b6:	2300      	movs	r3, #0
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	bc80      	pop	{r7}
 80109c0:	4770      	bx	lr
	...

080109c4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80109c8:	4b12      	ldr	r3, [pc, #72]	@ (8010a14 <CheckRetransUnconfirmedUplink+0x50>)
 80109ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80109ce:	4a12      	ldr	r2, [pc, #72]	@ (8010a18 <CheckRetransUnconfirmedUplink+0x54>)
 80109d0:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7ff ffdf 	bl	801099a <CheckRetrans>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d001      	beq.n	80109e6 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80109e2:	2301      	movs	r3, #1
 80109e4:	e014      	b.n	8010a10 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80109e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010a14 <CheckRetransUnconfirmedUplink+0x50>)
 80109e8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80109ec:	f003 0302 	and.w	r3, r3, #2
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00b      	beq.n	8010a0e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80109f6:	4b07      	ldr	r3, [pc, #28]	@ (8010a14 <CheckRetransUnconfirmedUplink+0x50>)
 80109f8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d004      	beq.n	8010a0a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010a00:	4b04      	ldr	r3, [pc, #16]	@ (8010a14 <CheckRetransUnconfirmedUplink+0x50>)
 8010a02:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d101      	bne.n	8010a0e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e000      	b.n	8010a10 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8010a0e:	2300      	movs	r3, #0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	200005dc 	.word	0x200005dc
 8010a18:	20000b10 	.word	0x20000b10

08010a1c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010a20:	4b10      	ldr	r3, [pc, #64]	@ (8010a64 <CheckRetransConfirmedUplink+0x48>)
 8010a22:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8010a26:	4a10      	ldr	r2, [pc, #64]	@ (8010a68 <CheckRetransConfirmedUplink+0x4c>)
 8010a28:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8010a2c:	4611      	mov	r1, r2
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7ff ffb3 	bl	801099a <CheckRetrans>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d001      	beq.n	8010a3e <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e00f      	b.n	8010a5e <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010a3e:	4b09      	ldr	r3, [pc, #36]	@ (8010a64 <CheckRetransConfirmedUplink+0x48>)
 8010a40:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010a44:	f003 0302 	and.w	r3, r3, #2
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d006      	beq.n	8010a5c <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010a4e:	4b05      	ldr	r3, [pc, #20]	@ (8010a64 <CheckRetransConfirmedUplink+0x48>)
 8010a50:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d001      	beq.n	8010a5c <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e000      	b.n	8010a5e <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	200005dc 	.word	0x200005dc
 8010a68:	20000b10 	.word	0x20000b10

08010a6c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a7a:	d002      	beq.n	8010a82 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	3301      	adds	r3, #1
 8010a80:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8010a82:	687b      	ldr	r3, [r7, #4]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	370c      	adds	r7, #12
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bc80      	pop	{r7}
 8010a8c:	4770      	bx	lr
	...

08010a90 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010a94:	4b1a      	ldr	r3, [pc, #104]	@ (8010b00 <StopRetransmission+0x70>)
 8010a96:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010a9a:	f003 0302 	and.w	r3, r3, #2
 8010a9e:	b2db      	uxtb	r3, r3
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d009      	beq.n	8010ab8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010aa4:	4b16      	ldr	r3, [pc, #88]	@ (8010b00 <StopRetransmission+0x70>)
 8010aa6:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d011      	beq.n	8010ad2 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010aae:	4b14      	ldr	r3, [pc, #80]	@ (8010b00 <StopRetransmission+0x70>)
 8010ab0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d00c      	beq.n	8010ad2 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010ab8:	4b12      	ldr	r3, [pc, #72]	@ (8010b04 <StopRetransmission+0x74>)
 8010aba:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d007      	beq.n	8010ad2 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8010ac2:	4b10      	ldr	r3, [pc, #64]	@ (8010b04 <StopRetransmission+0x74>)
 8010ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7ff ffd0 	bl	8010a6c <IncreaseAdrAckCounter>
 8010acc:	4603      	mov	r3, r0
 8010ace:	4a0d      	ldr	r2, [pc, #52]	@ (8010b04 <StopRetransmission+0x74>)
 8010ad0:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8010b00 <StopRetransmission+0x70>)
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8010ada:	4b09      	ldr	r3, [pc, #36]	@ (8010b00 <StopRetransmission+0x70>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8010ae2:	4b07      	ldr	r3, [pc, #28]	@ (8010b00 <StopRetransmission+0x70>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010aea:	4b05      	ldr	r3, [pc, #20]	@ (8010b00 <StopRetransmission+0x70>)
 8010aec:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010af0:	f023 0302 	bic.w	r3, r3, #2
 8010af4:	4a02      	ldr	r2, [pc, #8]	@ (8010b00 <StopRetransmission+0x70>)
 8010af6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8010afa:	2301      	movs	r3, #1
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	200005dc 	.word	0x200005dc
 8010b04:	20000b10 	.word	0x20000b10

08010b08 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010b0c:	4b08      	ldr	r3, [pc, #32]	@ (8010b30 <OnMacProcessNotify+0x28>)
 8010b0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d00a      	beq.n	8010b2c <OnMacProcessNotify+0x24>
 8010b16:	4b06      	ldr	r3, [pc, #24]	@ (8010b30 <OnMacProcessNotify+0x28>)
 8010b18:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b1c:	695b      	ldr	r3, [r3, #20]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d004      	beq.n	8010b2c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010b22:	4b03      	ldr	r3, [pc, #12]	@ (8010b30 <OnMacProcessNotify+0x28>)
 8010b24:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b28:	695b      	ldr	r3, [r3, #20]
 8010b2a:	4798      	blx	r3
    }
}
 8010b2c:	bf00      	nop
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	200005dc 	.word	0x200005dc

08010b34 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b6c <CallNvmDataChangeCallback+0x38>)
 8010b40:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d00c      	beq.n	8010b62 <CallNvmDataChangeCallback+0x2e>
 8010b48:	4b08      	ldr	r3, [pc, #32]	@ (8010b6c <CallNvmDataChangeCallback+0x38>)
 8010b4a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b4e:	691b      	ldr	r3, [r3, #16]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d006      	beq.n	8010b62 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010b54:	4b05      	ldr	r3, [pc, #20]	@ (8010b6c <CallNvmDataChangeCallback+0x38>)
 8010b56:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	88fa      	ldrh	r2, [r7, #6]
 8010b5e:	4610      	mov	r0, r2
 8010b60:	4798      	blx	r3
    }
}
 8010b62:	bf00      	nop
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	200005dc 	.word	0x200005dc

08010b70 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010b70:	b480      	push	{r7}
 8010b72:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b74:	4b0b      	ldr	r3, [pc, #44]	@ (8010ba4 <IsRequestPending+0x34>)
 8010b76:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010b7a:	f003 0304 	and.w	r3, r3, #4
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d107      	bne.n	8010b94 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010b84:	4b07      	ldr	r3, [pc, #28]	@ (8010ba4 <IsRequestPending+0x34>)
 8010b86:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010b8a:	f003 0301 	and.w	r3, r3, #1
 8010b8e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d001      	beq.n	8010b98 <IsRequestPending+0x28>
    {
        return 1;
 8010b94:	2301      	movs	r3, #1
 8010b96:	e000      	b.n	8010b9a <IsRequestPending+0x2a>
    }
    return 0;
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bc80      	pop	{r7}
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	200005dc 	.word	0x200005dc

08010ba8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010ba8:	b590      	push	{r4, r7, lr}
 8010baa:	b091      	sub	sp, #68	@ 0x44
 8010bac:	af02      	add	r7, sp, #8
 8010bae:	6178      	str	r0, [r7, #20]
 8010bb0:	6139      	str	r1, [r7, #16]
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d002      	beq.n	8010bc2 <LoRaMacInitialization+0x1a>
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	e27a      	b.n	80110bc <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00b      	beq.n	8010be6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d007      	beq.n	8010be6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d003      	beq.n	8010be6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d101      	bne.n	8010bea <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010be6:	2303      	movs	r3, #3
 8010be8:	e268      	b.n	80110bc <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f003 fcf3 	bl	80145d8 <RegionIsActive>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	f083 0301 	eor.w	r3, r3, #1
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d001      	beq.n	8010c02 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010bfe:	2309      	movs	r3, #9
 8010c00:	e25c      	b.n	80110bc <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010c02:	6978      	ldr	r0, [r7, #20]
 8010c04:	f002 f986 	bl	8012f14 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010c08:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	48c7      	ldr	r0, [pc, #796]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c10:	f005 ff58 	bl	8016ac4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010c14:	f240 5234 	movw	r2, #1332	@ 0x534
 8010c18:	2100      	movs	r1, #0
 8010c1a:	48c5      	ldr	r0, [pc, #788]	@ (8010f30 <LoRaMacInitialization+0x388>)
 8010c1c:	f005 ff52 	bl	8016ac4 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010c20:	4ac2      	ldr	r2, [pc, #776]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c22:	7bfb      	ldrb	r3, [r7, #15]
 8010c24:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010c28:	4bc0      	ldr	r3, [pc, #768]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8010c30:	4bbe      	ldr	r3, [pc, #760]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c32:	2200      	movs	r2, #0
 8010c34:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010c38:	4bbc      	ldr	r3, [pc, #752]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c3a:	4abe      	ldr	r2, [pc, #760]	@ (8010f34 <LoRaMacInitialization+0x38c>)
 8010c3c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010c40:	2300      	movs	r3, #0
 8010c42:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010c46:	4bbc      	ldr	r3, [pc, #752]	@ (8010f38 <LoRaMacInitialization+0x390>)
 8010c48:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010c4a:	4bbc      	ldr	r3, [pc, #752]	@ (8010f3c <LoRaMacInitialization+0x394>)
 8010c4c:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8010c4e:	4bbc      	ldr	r3, [pc, #752]	@ (8010f40 <LoRaMacInitialization+0x398>)
 8010c50:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010c52:	4bb6      	ldr	r3, [pc, #728]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c54:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c58:	f107 021c 	add.w	r2, r7, #28
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f003 fcf3 	bl	801464a <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010c64:	230f      	movs	r3, #15
 8010c66:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c6a:	4bb0      	ldr	r3, [pc, #704]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c6c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c70:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010c74:	4611      	mov	r1, r2
 8010c76:	4618      	mov	r0, r3
 8010c78:	f003 fcbe 	bl	80145f8 <RegionGetPhyParam>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	bf14      	ite	ne
 8010c86:	2301      	movne	r3, #1
 8010c88:	2300      	moveq	r3, #0
 8010c8a:	b2da      	uxtb	r2, r3
 8010c8c:	4ba7      	ldr	r3, [pc, #668]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c8e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010c92:	230a      	movs	r3, #10
 8010c94:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c98:	4ba4      	ldr	r3, [pc, #656]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010c9a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ca2:	4611      	mov	r1, r2
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f003 fca7 	bl	80145f8 <RegionGetPhyParam>
 8010caa:	4603      	mov	r3, r0
 8010cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cb0:	b25a      	sxtb	r2, r3
 8010cb2:	4b9e      	ldr	r3, [pc, #632]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010cb4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010cb8:	2306      	movs	r3, #6
 8010cba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cbe:	4b9b      	ldr	r3, [pc, #620]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010cc0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010cc4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010cc8:	4611      	mov	r1, r2
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f003 fc94 	bl	80145f8 <RegionGetPhyParam>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cd6:	b25a      	sxtb	r2, r3
 8010cd8:	4b94      	ldr	r3, [pc, #592]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010cda:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010cde:	2310      	movs	r3, #16
 8010ce0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ce4:	4b91      	ldr	r3, [pc, #580]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010ce6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010cea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010cee:	4611      	mov	r1, r2
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f003 fc81 	bl	80145f8 <RegionGetPhyParam>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfc:	4a8b      	ldr	r2, [pc, #556]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010cfe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010d02:	2311      	movs	r3, #17
 8010d04:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d08:	4b88      	ldr	r3, [pc, #544]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d0a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d0e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d12:	4611      	mov	r1, r2
 8010d14:	4618      	mov	r0, r3
 8010d16:	f003 fc6f 	bl	80145f8 <RegionGetPhyParam>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d20:	4a82      	ldr	r2, [pc, #520]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d22:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010d26:	2312      	movs	r3, #18
 8010d28:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d2c:	4b7f      	ldr	r3, [pc, #508]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d2e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d32:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d36:	4611      	mov	r1, r2
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f003 fc5d 	bl	80145f8 <RegionGetPhyParam>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d44:	4a79      	ldr	r2, [pc, #484]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d46:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010d4a:	2313      	movs	r3, #19
 8010d4c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d50:	4b76      	ldr	r3, [pc, #472]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d52:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d56:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f003 fc4b 	bl	80145f8 <RegionGetPhyParam>
 8010d62:	4603      	mov	r3, r0
 8010d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d68:	4a70      	ldr	r2, [pc, #448]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d6a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010d6e:	2314      	movs	r3, #20
 8010d70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d74:	4b6d      	ldr	r3, [pc, #436]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d76:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d7a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d7e:	4611      	mov	r1, r2
 8010d80:	4618      	mov	r0, r3
 8010d82:	f003 fc39 	bl	80145f8 <RegionGetPhyParam>
 8010d86:	4603      	mov	r3, r0
 8010d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d8c:	4a67      	ldr	r2, [pc, #412]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d8e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010d92:	2316      	movs	r3, #22
 8010d94:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d98:	4b64      	ldr	r3, [pc, #400]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010d9a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010da2:	4611      	mov	r1, r2
 8010da4:	4618      	mov	r0, r3
 8010da6:	f003 fc27 	bl	80145f8 <RegionGetPhyParam>
 8010daa:	4603      	mov	r3, r0
 8010dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010db0:	b2da      	uxtb	r2, r3
 8010db2:	4b5e      	ldr	r3, [pc, #376]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010db4:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010db8:	2317      	movs	r3, #23
 8010dba:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010dc0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010dc4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010dc8:	4611      	mov	r1, r2
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f003 fc14 	bl	80145f8 <RegionGetPhyParam>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd6:	4a55      	ldr	r2, [pc, #340]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010dd8:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dde:	4a53      	ldr	r2, [pc, #332]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010de0:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010de4:	2318      	movs	r3, #24
 8010de6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dea:	4b50      	ldr	r3, [pc, #320]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010dec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010df0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010df4:	4611      	mov	r1, r2
 8010df6:	4618      	mov	r0, r3
 8010df8:	f003 fbfe 	bl	80145f8 <RegionGetPhyParam>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e02:	b2da      	uxtb	r2, r3
 8010e04:	4b49      	ldr	r3, [pc, #292]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e06:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	4b47      	ldr	r3, [pc, #284]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e10:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010e14:	231d      	movs	r3, #29
 8010e16:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e1a:	4b44      	ldr	r3, [pc, #272]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010e20:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e24:	4611      	mov	r1, r2
 8010e26:	4618      	mov	r0, r3
 8010e28:	f003 fbe6 	bl	80145f8 <RegionGetPhyParam>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	4b3d      	ldr	r3, [pc, #244]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e36:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010e3a:	231e      	movs	r3, #30
 8010e3c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e40:	4b3a      	ldr	r3, [pc, #232]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e42:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010e46:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f003 fbd3 	bl	80145f8 <RegionGetPhyParam>
 8010e52:	4603      	mov	r3, r0
 8010e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e58:	b2da      	uxtb	r2, r3
 8010e5a:	4b34      	ldr	r3, [pc, #208]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e5c:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010e60:	231f      	movs	r3, #31
 8010e62:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e66:	4b31      	ldr	r3, [pc, #196]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e68:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010e6c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e70:	4611      	mov	r1, r2
 8010e72:	4618      	mov	r0, r3
 8010e74:	f003 fbc0 	bl	80145f8 <RegionGetPhyParam>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e80:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010e84:	2320      	movs	r3, #32
 8010e86:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e8a:	4b28      	ldr	r3, [pc, #160]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010e8c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010e90:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e94:	4611      	mov	r1, r2
 8010e96:	4618      	mov	r0, r3
 8010e98:	f003 fbae 	bl	80145f8 <RegionGetPhyParam>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea2:	4a22      	ldr	r2, [pc, #136]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010ea4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010ea8:	230b      	movs	r3, #11
 8010eaa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eae:	4b1f      	ldr	r3, [pc, #124]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010eb0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010eb4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f003 fb9c 	bl	80145f8 <RegionGetPhyParam>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8010ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	4b18      	ldr	r3, [pc, #96]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010eca:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010ece:	230c      	movs	r3, #12
 8010ed0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ed4:	4b15      	ldr	r3, [pc, #84]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010ed6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010eda:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ede:	4611      	mov	r1, r2
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f003 fb89 	bl	80145f8 <RegionGetPhyParam>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8010eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	4b0f      	ldr	r3, [pc, #60]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010ef0:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010efc:	4b0b      	ldr	r3, [pc, #44]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010efe:	220a      	movs	r2, #10
 8010f00:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010f04:	4b09      	ldr	r3, [pc, #36]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010f06:	2206      	movs	r2, #6
 8010f08:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010f0c:	4b07      	ldr	r3, [pc, #28]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010f12:	4a06      	ldr	r2, [pc, #24]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010f16:	4b05      	ldr	r3, [pc, #20]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010f18:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8010f1c:	4b03      	ldr	r3, [pc, #12]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010f22:	4b02      	ldr	r3, [pc, #8]	@ (8010f2c <LoRaMacInitialization+0x384>)
 8010f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010f28:	e00c      	b.n	8010f44 <LoRaMacInitialization+0x39c>
 8010f2a:	bf00      	nop
 8010f2c:	20000b10 	.word	0x20000b10
 8010f30:	200005dc 	.word	0x200005dc
 8010f34:	01000400 	.word	0x01000400
 8010f38:	20000d34 	.word	0x20000d34
 8010f3c:	20000d38 	.word	0x20000d38
 8010f40:	200010cc 	.word	0x200010cc
 8010f44:	4a5f      	ldr	r2, [pc, #380]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f46:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010f48:	4b5e      	ldr	r3, [pc, #376]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010f4e:	4a5d      	ldr	r2, [pc, #372]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f50:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010f52:	4b5c      	ldr	r3, [pc, #368]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010f58:	4a5a      	ldr	r2, [pc, #360]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f5a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010f5c:	4b59      	ldr	r3, [pc, #356]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010f62:	4a58      	ldr	r2, [pc, #352]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f64:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010f66:	4b57      	ldr	r3, [pc, #348]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010f6c:	4a55      	ldr	r2, [pc, #340]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f6e:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010f70:	4b54      	ldr	r3, [pc, #336]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f72:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8010f76:	4b53      	ldr	r3, [pc, #332]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8010f7c:	4b51      	ldr	r3, [pc, #324]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f7e:	2201      	movs	r2, #1
 8010f80:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010f84:	4a50      	ldr	r2, [pc, #320]	@ (80110c8 <LoRaMacInitialization+0x520>)
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	f7ff f90f 	bl	80101b0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010f92:	4b4c      	ldr	r3, [pc, #304]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010f94:	2201      	movs	r2, #1
 8010f96:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8010f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80110c8 <LoRaMacInitialization+0x520>)
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8010fa2:	4b49      	ldr	r3, [pc, #292]	@ (80110c8 <LoRaMacInitialization+0x520>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8010faa:	4b47      	ldr	r3, [pc, #284]	@ (80110c8 <LoRaMacInitialization+0x520>)
 8010fac:	2201      	movs	r2, #1
 8010fae:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010fb2:	4b44      	ldr	r3, [pc, #272]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010fb8:	4b42      	ldr	r3, [pc, #264]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8010fba:	2200      	movs	r2, #0
 8010fbc:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	4b42      	ldr	r3, [pc, #264]	@ (80110cc <LoRaMacInitialization+0x524>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8010fca:	4841      	ldr	r0, [pc, #260]	@ (80110d0 <LoRaMacInitialization+0x528>)
 8010fcc:	f009 fdee 	bl	801abac <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	9300      	str	r3, [sp, #0]
 8010fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80110d4 <LoRaMacInitialization+0x52c>)
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8010fdc:	483e      	ldr	r0, [pc, #248]	@ (80110d8 <LoRaMacInitialization+0x530>)
 8010fde:	f009 fde5 	bl	801abac <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80110dc <LoRaMacInitialization+0x534>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f04f 31ff 	mov.w	r1, #4294967295
 8010fee:	483c      	ldr	r0, [pc, #240]	@ (80110e0 <LoRaMacInitialization+0x538>)
 8010ff0:	f009 fddc 	bl	801abac <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	9300      	str	r3, [sp, #0]
 8010ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80110e4 <LoRaMacInitialization+0x53c>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8011000:	4839      	ldr	r0, [pc, #228]	@ (80110e8 <LoRaMacInitialization+0x540>)
 8011002:	f009 fdd3 	bl	801abac <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011006:	4c2f      	ldr	r4, [pc, #188]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8011008:	463b      	mov	r3, r7
 801100a:	4618      	mov	r0, r3
 801100c:	f009 f9aa 	bl	801a364 <SysTimeGetMcuTime>
 8011010:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8011014:	463a      	mov	r2, r7
 8011016:	e892 0003 	ldmia.w	r2, {r0, r1}
 801101a:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 801101e:	4b33      	ldr	r3, [pc, #204]	@ (80110ec <LoRaMacInitialization+0x544>)
 8011020:	2200      	movs	r2, #0
 8011022:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011024:	4b28      	ldr	r3, [pc, #160]	@ (80110c8 <LoRaMacInitialization+0x520>)
 8011026:	4a32      	ldr	r2, [pc, #200]	@ (80110f0 <LoRaMacInitialization+0x548>)
 8011028:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801102c:	4b26      	ldr	r3, [pc, #152]	@ (80110c8 <LoRaMacInitialization+0x520>)
 801102e:	4a31      	ldr	r2, [pc, #196]	@ (80110f4 <LoRaMacInitialization+0x54c>)
 8011030:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011034:	4b24      	ldr	r3, [pc, #144]	@ (80110c8 <LoRaMacInitialization+0x520>)
 8011036:	4a30      	ldr	r2, [pc, #192]	@ (80110f8 <LoRaMacInitialization+0x550>)
 8011038:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801103c:	4b22      	ldr	r3, [pc, #136]	@ (80110c8 <LoRaMacInitialization+0x520>)
 801103e:	4a2f      	ldr	r2, [pc, #188]	@ (80110fc <LoRaMacInitialization+0x554>)
 8011040:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011044:	4b20      	ldr	r3, [pc, #128]	@ (80110c8 <LoRaMacInitialization+0x520>)
 8011046:	4a2e      	ldr	r2, [pc, #184]	@ (8011100 <LoRaMacInitialization+0x558>)
 8011048:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801104c:	4b2d      	ldr	r3, [pc, #180]	@ (8011104 <LoRaMacInitialization+0x55c>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	482d      	ldr	r0, [pc, #180]	@ (8011108 <LoRaMacInitialization+0x560>)
 8011052:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011054:	482d      	ldr	r0, [pc, #180]	@ (801110c <LoRaMacInitialization+0x564>)
 8011056:	f7fa fb75 	bl	800b744 <SecureElementInit>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d001      	beq.n	8011064 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011060:	2311      	movs	r3, #17
 8011062:	e02b      	b.n	80110bc <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011064:	4817      	ldr	r0, [pc, #92]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 8011066:	f002 fc11 	bl	801388c <LoRaMacCryptoInit>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d001      	beq.n	8011074 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011070:	2311      	movs	r3, #17
 8011072:	e023      	b.n	80110bc <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011074:	f001 fd10 	bl	8012a98 <LoRaMacCommandsInit>
 8011078:	4603      	mov	r3, r0
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801107e:	2313      	movs	r3, #19
 8011080:	e01c      	b.n	80110bc <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011082:	4823      	ldr	r0, [pc, #140]	@ (8011110 <LoRaMacInitialization+0x568>)
 8011084:	f002 fca2 	bl	80139cc <LoRaMacCryptoSetMulticastReference>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801108e:	2311      	movs	r3, #17
 8011090:	e014      	b.n	80110bc <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011092:	4b1c      	ldr	r3, [pc, #112]	@ (8011104 <LoRaMacInitialization+0x55c>)
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	4798      	blx	r3
 8011098:	4603      	mov	r3, r0
 801109a:	4618      	mov	r0, r3
 801109c:	f005 fcb2 	bl	8016a04 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80110a0:	4b18      	ldr	r3, [pc, #96]	@ (8011104 <LoRaMacInitialization+0x55c>)
 80110a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110a4:	4a07      	ldr	r2, [pc, #28]	@ (80110c4 <LoRaMacInitialization+0x51c>)
 80110a6:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80110aa:	4610      	mov	r0, r2
 80110ac:	4798      	blx	r3
    Radio.Sleep( );
 80110ae:	4b15      	ldr	r3, [pc, #84]	@ (8011104 <LoRaMacInitialization+0x55c>)
 80110b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110b2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80110b4:	2001      	movs	r0, #1
 80110b6:	f7fd fb0b 	bl	800e6d0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80110ba:	2300      	movs	r3, #0
}
 80110bc:	4618      	mov	r0, r3
 80110be:	373c      	adds	r7, #60	@ 0x3c
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd90      	pop	{r4, r7, pc}
 80110c4:	20000b10 	.word	0x20000b10
 80110c8:	200005dc 	.word	0x200005dc
 80110cc:	0800ec5d 	.word	0x0800ec5d
 80110d0:	20000944 	.word	0x20000944
 80110d4:	0800eced 	.word	0x0800eced
 80110d8:	2000095c 	.word	0x2000095c
 80110dc:	0800ed65 	.word	0x0800ed65
 80110e0:	20000974 	.word	0x20000974
 80110e4:	0800ede5 	.word	0x0800ede5
 80110e8:	200009dc 	.word	0x200009dc
 80110ec:	2000115c 	.word	0x2000115c
 80110f0:	0800d6dd 	.word	0x0800d6dd
 80110f4:	0800d739 	.word	0x0800d739
 80110f8:	0800d7d9 	.word	0x0800d7d9
 80110fc:	0800d7ad 	.word	0x0800d7ad
 8011100:	0800d7f5 	.word	0x0800d7f5
 8011104:	0801c9c4 	.word	0x0801c9c4
 8011108:	20000928 	.word	0x20000928
 801110c:	20000c5c 	.word	0x20000c5c
 8011110:	20000bf8 	.word	0x20000bf8

08011114 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011118:	4b04      	ldr	r3, [pc, #16]	@ (801112c <LoRaMacStart+0x18>)
 801111a:	2200      	movs	r2, #0
 801111c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8011120:	f7fc fb7e 	bl	800d820 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011124:	2300      	movs	r3, #0
}
 8011126:	4618      	mov	r0, r3
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	200005dc 	.word	0x200005dc

08011130 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011134:	f7fd fa94 	bl	800e660 <LoRaMacIsBusy>
 8011138:	4603      	mov	r3, r0
 801113a:	f083 0301 	eor.w	r3, r3, #1
 801113e:	b2db      	uxtb	r3, r3
 8011140:	2b00      	cmp	r3, #0
 8011142:	d00d      	beq.n	8011160 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011144:	4b0b      	ldr	r3, [pc, #44]	@ (8011174 <LoRaMacStop+0x44>)
 8011146:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801114a:	2b02      	cmp	r3, #2
 801114c:	d102      	bne.n	8011154 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801114e:	4b0a      	ldr	r3, [pc, #40]	@ (8011178 <LoRaMacStop+0x48>)
 8011150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011152:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8011154:	4b09      	ldr	r3, [pc, #36]	@ (801117c <LoRaMacStop+0x4c>)
 8011156:	2201      	movs	r2, #1
 8011158:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 801115c:	2300      	movs	r3, #0
 801115e:	e007      	b.n	8011170 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011160:	4b06      	ldr	r3, [pc, #24]	@ (801117c <LoRaMacStop+0x4c>)
 8011162:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011166:	2b01      	cmp	r3, #1
 8011168:	d101      	bne.n	801116e <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801116a:	2300      	movs	r3, #0
 801116c:	e000      	b.n	8011170 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801116e:	2301      	movs	r3, #1
}
 8011170:	4618      	mov	r0, r3
 8011172:	bd80      	pop	{r7, pc}
 8011174:	20000b10 	.word	0x20000b10
 8011178:	0801c9c4 	.word	0x0801c9c4
 801117c:	200005dc 	.word	0x200005dc

08011180 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011184:	480d      	ldr	r0, [pc, #52]	@ (80111bc <LoRaMacHalt+0x3c>)
 8011186:	f009 fdb5 	bl	801acf4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801118a:	480d      	ldr	r0, [pc, #52]	@ (80111c0 <LoRaMacHalt+0x40>)
 801118c:	f009 fdb2 	bl	801acf4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011190:	480c      	ldr	r0, [pc, #48]	@ (80111c4 <LoRaMacHalt+0x44>)
 8011192:	f009 fdaf 	bl	801acf4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011196:	480c      	ldr	r0, [pc, #48]	@ (80111c8 <LoRaMacHalt+0x48>)
 8011198:	f009 fdac 	bl	801acf4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801119c:	f001 fae0 	bl	8012760 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80111a0:	4b0a      	ldr	r3, [pc, #40]	@ (80111cc <LoRaMacHalt+0x4c>)
 80111a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111a4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80111a6:	4b0a      	ldr	r3, [pc, #40]	@ (80111d0 <LoRaMacHalt+0x50>)
 80111a8:	2200      	movs	r2, #0
 80111aa:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80111ae:	4b08      	ldr	r3, [pc, #32]	@ (80111d0 <LoRaMacHalt+0x50>)
 80111b0:	2201      	movs	r2, #1
 80111b2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80111b6:	2300      	movs	r3, #0
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	bd80      	pop	{r7, pc}
 80111bc:	20000944 	.word	0x20000944
 80111c0:	2000095c 	.word	0x2000095c
 80111c4:	20000974 	.word	0x20000974
 80111c8:	200009dc 	.word	0x200009dc
 80111cc:	0801c9c4 	.word	0x0801c9c4
 80111d0:	200005dc 	.word	0x200005dc

080111d4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80111d4:	b590      	push	{r4, r7, lr}
 80111d6:	b08d      	sub	sp, #52	@ 0x34
 80111d8:	af02      	add	r7, sp, #8
 80111da:	4603      	mov	r3, r0
 80111dc:	6039      	str	r1, [r7, #0]
 80111de:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80111e0:	4b42      	ldr	r3, [pc, #264]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 80111e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111e4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80111e6:	4b41      	ldr	r3, [pc, #260]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 80111e8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 80111ec:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80111ee:	4b3f      	ldr	r3, [pc, #252]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 80111f0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 80111f4:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80111f6:	4b3e      	ldr	r3, [pc, #248]	@ (80112f0 <LoRaMacQueryTxPossible+0x11c>)
 80111f8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80111fc:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011208:	2303      	movs	r3, #3
 801120a:	e06b      	b.n	80112e4 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801120c:	2300      	movs	r3, #0
 801120e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011210:	4b36      	ldr	r3, [pc, #216]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 8011212:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011216:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011218:	4b34      	ldr	r3, [pc, #208]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 801121a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801121c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801121e:	4b33      	ldr	r3, [pc, #204]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 8011220:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011224:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011226:	4b31      	ldr	r3, [pc, #196]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 8011228:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 801122c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801122e:	4b2f      	ldr	r3, [pc, #188]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 8011230:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011234:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011238:	4b2c      	ldr	r3, [pc, #176]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 801123a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801123e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011242:	4b2b      	ldr	r3, [pc, #172]	@ (80112f0 <LoRaMacQueryTxPossible+0x11c>)
 8011244:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801124c:	4b27      	ldr	r3, [pc, #156]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 801124e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011256:	4b25      	ldr	r3, [pc, #148]	@ (80112ec <LoRaMacQueryTxPossible+0x118>)
 8011258:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801125c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011260:	f107 040d 	add.w	r4, r7, #13
 8011264:	f107 020e 	add.w	r2, r7, #14
 8011268:	f107 010f 	add.w	r1, r7, #15
 801126c:	f107 0014 	add.w	r0, r7, #20
 8011270:	f107 0310 	add.w	r3, r7, #16
 8011274:	9300      	str	r3, [sp, #0]
 8011276:	4623      	mov	r3, r4
 8011278:	f001 f93c 	bl	80124f4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801127c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011280:	4618      	mov	r0, r3
 8011282:	f7fd fef5 	bl	800f070 <GetMaxAppPayloadWithoutFOptsLength>
 8011286:	4603      	mov	r3, r0
 8011288:	461a      	mov	r2, r3
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801128e:	f107 0308 	add.w	r3, r7, #8
 8011292:	4618      	mov	r0, r3
 8011294:	f001 fd06 	bl	8012ca4 <LoRaMacCommandsGetSizeSerializedCmds>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d001      	beq.n	80112a2 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801129e:	2313      	movs	r3, #19
 80112a0:	e020      	b.n	80112e4 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	2b0f      	cmp	r3, #15
 80112a6:	d819      	bhi.n	80112dc <LoRaMacQueryTxPossible+0x108>
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	785b      	ldrb	r3, [r3, #1]
 80112ac:	461a      	mov	r2, r3
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d313      	bcc.n	80112dc <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	785a      	ldrb	r2, [r3, #1]
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	785b      	ldrb	r3, [r3, #1]
 80112c8:	4619      	mov	r1, r3
 80112ca:	79fa      	ldrb	r2, [r7, #7]
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	4413      	add	r3, r2
 80112d0:	4299      	cmp	r1, r3
 80112d2:	d301      	bcc.n	80112d8 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	e005      	b.n	80112e4 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80112d8:	2308      	movs	r3, #8
 80112da:	e003      	b.n	80112e4 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	2200      	movs	r2, #0
 80112e0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80112e2:	2308      	movs	r3, #8
    }
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	372c      	adds	r7, #44	@ 0x2c
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd90      	pop	{r4, r7, pc}
 80112ec:	20000b10 	.word	0x20000b10
 80112f0:	200005dc 	.word	0x200005dc

080112f4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80112f4:	b590      	push	{r4, r7, lr}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80112fc:	2300      	movs	r3, #0
 80112fe:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011306:	2303      	movs	r3, #3
 8011308:	e1c4      	b.n	8011694 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	2b41      	cmp	r3, #65	@ 0x41
 8011310:	f200 81b9 	bhi.w	8011686 <LoRaMacMibGetRequestConfirm+0x392>
 8011314:	a201      	add	r2, pc, #4	@ (adr r2, 801131c <LoRaMacMibGetRequestConfirm+0x28>)
 8011316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131a:	bf00      	nop
 801131c:	08011425 	.word	0x08011425
 8011320:	08011431 	.word	0x08011431
 8011324:	0801143d 	.word	0x0801143d
 8011328:	08011449 	.word	0x08011449
 801132c:	08011455 	.word	0x08011455
 8011330:	08011461 	.word	0x08011461
 8011334:	0801146d 	.word	0x0801146d
 8011338:	08011687 	.word	0x08011687
 801133c:	08011687 	.word	0x08011687
 8011340:	08011687 	.word	0x08011687
 8011344:	08011687 	.word	0x08011687
 8011348:	08011687 	.word	0x08011687
 801134c:	08011687 	.word	0x08011687
 8011350:	08011687 	.word	0x08011687
 8011354:	08011687 	.word	0x08011687
 8011358:	08011481 	.word	0x08011481
 801135c:	0801148d 	.word	0x0801148d
 8011360:	08011499 	.word	0x08011499
 8011364:	080114bb 	.word	0x080114bb
 8011368:	080114cd 	.word	0x080114cd
 801136c:	080114df 	.word	0x080114df
 8011370:	080114f1 	.word	0x080114f1
 8011374:	08011525 	.word	0x08011525
 8011378:	08011503 	.word	0x08011503
 801137c:	08011547 	.word	0x08011547
 8011380:	08011553 	.word	0x08011553
 8011384:	0801155d 	.word	0x0801155d
 8011388:	08011567 	.word	0x08011567
 801138c:	08011571 	.word	0x08011571
 8011390:	0801157b 	.word	0x0801157b
 8011394:	08011585 	.word	0x08011585
 8011398:	080115b1 	.word	0x080115b1
 801139c:	080115bd 	.word	0x080115bd
 80113a0:	080115d5 	.word	0x080115d5
 80113a4:	080115c9 	.word	0x080115c9
 80113a8:	080115e1 	.word	0x080115e1
 80113ac:	080115eb 	.word	0x080115eb
 80113b0:	080115f7 	.word	0x080115f7
 80113b4:	08011613 	.word	0x08011613
 80113b8:	08011603 	.word	0x08011603
 80113bc:	0801160b 	.word	0x0801160b
 80113c0:	08011687 	.word	0x08011687
 80113c4:	0801161f 	.word	0x0801161f
 80113c8:	08011687 	.word	0x08011687
 80113cc:	08011687 	.word	0x08011687
 80113d0:	08011687 	.word	0x08011687
 80113d4:	08011687 	.word	0x08011687
 80113d8:	08011687 	.word	0x08011687
 80113dc:	08011687 	.word	0x08011687
 80113e0:	08011687 	.word	0x08011687
 80113e4:	08011687 	.word	0x08011687
 80113e8:	08011687 	.word	0x08011687
 80113ec:	08011687 	.word	0x08011687
 80113f0:	08011687 	.word	0x08011687
 80113f4:	08011687 	.word	0x08011687
 80113f8:	08011687 	.word	0x08011687
 80113fc:	08011687 	.word	0x08011687
 8011400:	08011687 	.word	0x08011687
 8011404:	08011633 	.word	0x08011633
 8011408:	0801163f 	.word	0x0801163f
 801140c:	0801164b 	.word	0x0801164b
 8011410:	08011657 	.word	0x08011657
 8011414:	08011663 	.word	0x08011663
 8011418:	0801166f 	.word	0x0801166f
 801141c:	0801167b 	.word	0x0801167b
 8011420:	08011681 	.word	0x08011681
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011424:	4b9d      	ldr	r3, [pc, #628]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011426:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	711a      	strb	r2, [r3, #4]
            break;
 801142e:	e130      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011430:	4b9a      	ldr	r3, [pc, #616]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011432:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	711a      	strb	r2, [r3, #4]
            break;
 801143a:	e12a      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	4618      	mov	r0, r3
 8011442:	f7fa fc3d 	bl	800bcc0 <SecureElementGetDevEui>
            break;
 8011446:	e124      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	4618      	mov	r0, r3
 801144e:	f7fa fc67 	bl	800bd20 <SecureElementGetJoinEui>
            break;
 8011452:	e11e      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011454:	4b91      	ldr	r3, [pc, #580]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011456:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	711a      	strb	r2, [r3, #4]
            break;
 801145e:	e118      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011460:	4b8e      	ldr	r3, [pc, #568]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011462:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	605a      	str	r2, [r3, #4]
            break;
 801146a:	e112      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801146c:	4b8b      	ldr	r3, [pc, #556]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801146e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	3304      	adds	r3, #4
 8011476:	4619      	mov	r1, r3
 8011478:	4610      	mov	r0, r2
 801147a:	f7fa fc83 	bl	800bd84 <SecureElementGetDevAddr>
            break;
 801147e:	e108      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011480:	4b86      	ldr	r3, [pc, #536]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011482:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	711a      	strb	r2, [r3, #4]
            break;
 801148a:	e102      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801148c:	4b83      	ldr	r3, [pc, #524]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801148e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	711a      	strb	r2, [r3, #4]
            break;
 8011496:	e0fc      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011498:	231c      	movs	r3, #28
 801149a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801149c:	4b7f      	ldr	r3, [pc, #508]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801149e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114a2:	f107 0210 	add.w	r2, r7, #16
 80114a6:	4611      	mov	r1, r2
 80114a8:	4618      	mov	r0, r3
 80114aa:	f003 f8a5 	bl	80145f8 <RegionGetPhyParam>
 80114ae:	4603      	mov	r3, r0
 80114b0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	605a      	str	r2, [r3, #4]
            break;
 80114b8:	e0eb      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4a77      	ldr	r2, [pc, #476]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114be:	3304      	adds	r3, #4
 80114c0:	326c      	adds	r2, #108	@ 0x6c
 80114c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114c6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80114ca:	e0e2      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4a73      	ldr	r2, [pc, #460]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114d0:	3304      	adds	r3, #4
 80114d2:	32b4      	adds	r2, #180	@ 0xb4
 80114d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114d8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80114dc:	e0d9      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4a6e      	ldr	r2, [pc, #440]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114e2:	3304      	adds	r3, #4
 80114e4:	3274      	adds	r2, #116	@ 0x74
 80114e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114ea:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80114ee:	e0d0      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	4a6a      	ldr	r2, [pc, #424]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114f4:	3304      	adds	r3, #4
 80114f6:	32bc      	adds	r2, #188	@ 0xbc
 80114f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114fc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011500:	e0c7      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011502:	231a      	movs	r3, #26
 8011504:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011506:	4b65      	ldr	r3, [pc, #404]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011508:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801150c:	f107 0210 	add.w	r2, r7, #16
 8011510:	4611      	mov	r1, r2
 8011512:	4618      	mov	r0, r3
 8011514:	f003 f870 	bl	80145f8 <RegionGetPhyParam>
 8011518:	4603      	mov	r3, r0
 801151a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801151c:	68fa      	ldr	r2, [r7, #12]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	605a      	str	r2, [r3, #4]
            break;
 8011522:	e0b6      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011524:	2319      	movs	r3, #25
 8011526:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011528:	4b5c      	ldr	r3, [pc, #368]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801152a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801152e:	f107 0210 	add.w	r2, r7, #16
 8011532:	4611      	mov	r1, r2
 8011534:	4618      	mov	r0, r3
 8011536:	f003 f85f 	bl	80145f8 <RegionGetPhyParam>
 801153a:	4603      	mov	r3, r0
 801153c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	605a      	str	r2, [r3, #4]
            break;
 8011544:	e0a5      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011546:	4b55      	ldr	r3, [pc, #340]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011548:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	711a      	strb	r2, [r3, #4]
            break;
 8011550:	e09f      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011552:	4b52      	ldr	r3, [pc, #328]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	605a      	str	r2, [r3, #4]
            break;
 801155a:	e09a      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801155c:	4b4f      	ldr	r3, [pc, #316]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801155e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	605a      	str	r2, [r3, #4]
            break;
 8011564:	e095      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011566:	4b4d      	ldr	r3, [pc, #308]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011568:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	605a      	str	r2, [r3, #4]
            break;
 801156e:	e090      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011570:	4b4a      	ldr	r3, [pc, #296]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011572:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	605a      	str	r2, [r3, #4]
            break;
 8011578:	e08b      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801157a:	4b48      	ldr	r3, [pc, #288]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801157c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	605a      	str	r2, [r3, #4]
            break;
 8011582:	e086      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8011584:	2302      	movs	r3, #2
 8011586:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011588:	4b44      	ldr	r3, [pc, #272]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801158a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801158e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011590:	4b42      	ldr	r3, [pc, #264]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011592:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011596:	f107 0210 	add.w	r2, r7, #16
 801159a:	4611      	mov	r1, r2
 801159c:	4618      	mov	r0, r3
 801159e:	f003 f82b 	bl	80145f8 <RegionGetPhyParam>
 80115a2:	4603      	mov	r3, r0
 80115a4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	b25a      	sxtb	r2, r3
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	711a      	strb	r2, [r3, #4]
            break;
 80115ae:	e070      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80115b0:	4b3a      	ldr	r3, [pc, #232]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115b2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	711a      	strb	r2, [r3, #4]
            break;
 80115ba:	e06a      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80115bc:	4b37      	ldr	r3, [pc, #220]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115be:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	711a      	strb	r2, [r3, #4]
            break;
 80115c6:	e064      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80115c8:	4b34      	ldr	r3, [pc, #208]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115ca:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	711a      	strb	r2, [r3, #4]
            break;
 80115d2:	e05e      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80115d4:	4b31      	ldr	r3, [pc, #196]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115d6:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	711a      	strb	r2, [r3, #4]
            break;
 80115de:	e058      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80115e0:	4b2e      	ldr	r3, [pc, #184]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	605a      	str	r2, [r3, #4]
            break;
 80115e8:	e053      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80115ea:	4b2c      	ldr	r3, [pc, #176]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115ec:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	711a      	strb	r2, [r3, #4]
            break;
 80115f4:	e04d      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80115f6:	4b29      	ldr	r3, [pc, #164]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115f8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	605a      	str	r2, [r3, #4]
            break;
 8011600:	e047      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4a25      	ldr	r2, [pc, #148]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011606:	605a      	str	r2, [r3, #4]
            break;
 8011608:	e043      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2200      	movs	r2, #0
 801160e:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8011610:	e03f      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011612:	4b22      	ldr	r3, [pc, #136]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011614:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	605a      	str	r2, [r3, #4]
            break;
 801161c:	e039      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	4a1e      	ldr	r2, [pc, #120]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011622:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8011626:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011628:	687c      	ldr	r4, [r7, #4]
 801162a:	f003 f95b 	bl	80148e4 <RegionGetVersion>
 801162e:	60a0      	str	r0, [r4, #8]
            break;
 8011630:	e02f      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011632:	4b1a      	ldr	r3, [pc, #104]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011634:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	605a      	str	r2, [r3, #4]
            break;
 801163c:	e029      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801163e:	4b17      	ldr	r3, [pc, #92]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011640:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	711a      	strb	r2, [r3, #4]
            break;
 8011648:	e023      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801164a:	4b14      	ldr	r3, [pc, #80]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801164c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	809a      	strh	r2, [r3, #4]
            break;
 8011654:	e01d      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011656:	4b11      	ldr	r3, [pc, #68]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011658:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	809a      	strh	r2, [r3, #4]
            break;
 8011660:	e017      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8011662:	4b0e      	ldr	r3, [pc, #56]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011664:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	809a      	strh	r2, [r3, #4]
            break;
 801166c:	e011      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801166e:	4b0b      	ldr	r3, [pc, #44]	@ (801169c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011670:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	809a      	strh	r2, [r3, #4]
            break;
 8011678:	e00b      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801167a:	2318      	movs	r3, #24
 801167c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801167e:	e008      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011680:	2318      	movs	r3, #24
 8011682:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011684:	e005      	b.n	8011692 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f001 f881 	bl	801278e <LoRaMacClassBMibGetRequestConfirm>
 801168c:	4603      	mov	r3, r0
 801168e:	75fb      	strb	r3, [r7, #23]
            break;
 8011690:	bf00      	nop
        }
    }
    return status;
 8011692:	7dfb      	ldrb	r3, [r7, #23]
}
 8011694:	4618      	mov	r0, r3
 8011696:	371c      	adds	r7, #28
 8011698:	46bd      	mov	sp, r7
 801169a:	bd90      	pop	{r4, r7, pc}
 801169c:	20000b10 	.word	0x20000b10

080116a0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b086      	sub	sp, #24
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80116a8:	2300      	movs	r3, #0
 80116aa:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d101      	bne.n	80116b6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80116b2:	2303      	movs	r3, #3
 80116b4:	e39e      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80116b6:	4bbd      	ldr	r3, [pc, #756]	@ (80119ac <LoRaMacMibSetRequestConfirm+0x30c>)
 80116b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80116bc:	f003 0302 	and.w	r3, r3, #2
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d001      	beq.n	80116c8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80116c4:	2301      	movs	r3, #1
 80116c6:	e395      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
    }

    switch( mibSet->Type )
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	2b41      	cmp	r3, #65	@ 0x41
 80116ce:	f200 8365 	bhi.w	8011d9c <LoRaMacMibSetRequestConfirm+0x6fc>
 80116d2:	a201      	add	r2, pc, #4	@ (adr r2, 80116d8 <LoRaMacMibSetRequestConfirm+0x38>)
 80116d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d8:	080117e1 	.word	0x080117e1
 80116dc:	080117f1 	.word	0x080117f1
 80116e0:	0801180b 	.word	0x0801180b
 80116e4:	08011823 	.word	0x08011823
 80116e8:	0801183b 	.word	0x0801183b
 80116ec:	08011847 	.word	0x08011847
 80116f0:	08011853 	.word	0x08011853
 80116f4:	0801187d 	.word	0x0801187d
 80116f8:	080118a3 	.word	0x080118a3
 80116fc:	080118c9 	.word	0x080118c9
 8011700:	080118ef 	.word	0x080118ef
 8011704:	08011915 	.word	0x08011915
 8011708:	0801193b 	.word	0x0801193b
 801170c:	08011961 	.word	0x08011961
 8011710:	08011987 	.word	0x08011987
 8011714:	080119b5 	.word	0x080119b5
 8011718:	080119d5 	.word	0x080119d5
 801171c:	08011d9d 	.word	0x08011d9d
 8011720:	080119e1 	.word	0x080119e1
 8011724:	08011a51 	.word	0x08011a51
 8011728:	08011a91 	.word	0x08011a91
 801172c:	08011af3 	.word	0x08011af3
 8011730:	08011b63 	.word	0x08011b63
 8011734:	08011b33 	.word	0x08011b33
 8011738:	08011b93 	.word	0x08011b93
 801173c:	08011bb5 	.word	0x08011bb5
 8011740:	08011bbf 	.word	0x08011bbf
 8011744:	08011bc9 	.word	0x08011bc9
 8011748:	08011bd3 	.word	0x08011bd3
 801174c:	08011bdd 	.word	0x08011bdd
 8011750:	08011d9d 	.word	0x08011d9d
 8011754:	08011be7 	.word	0x08011be7
 8011758:	08011c19 	.word	0x08011c19
 801175c:	08011c8d 	.word	0x08011c8d
 8011760:	08011c53 	.word	0x08011c53
 8011764:	08011cbf 	.word	0x08011cbf
 8011768:	08011ce5 	.word	0x08011ce5
 801176c:	08011cfd 	.word	0x08011cfd
 8011770:	08011d09 	.word	0x08011d09
 8011774:	08011d15 	.word	0x08011d15
 8011778:	08011d9d 	.word	0x08011d9d
 801177c:	08011d1f 	.word	0x08011d1f
 8011780:	08011d9d 	.word	0x08011d9d
 8011784:	08011d9d 	.word	0x08011d9d
 8011788:	08011d9d 	.word	0x08011d9d
 801178c:	08011d9d 	.word	0x08011d9d
 8011790:	08011d9d 	.word	0x08011d9d
 8011794:	08011d9d 	.word	0x08011d9d
 8011798:	08011d9d 	.word	0x08011d9d
 801179c:	08011d9d 	.word	0x08011d9d
 80117a0:	08011d9d 	.word	0x08011d9d
 80117a4:	08011d9d 	.word	0x08011d9d
 80117a8:	08011d9d 	.word	0x08011d9d
 80117ac:	08011d9d 	.word	0x08011d9d
 80117b0:	08011d9d 	.word	0x08011d9d
 80117b4:	08011d9d 	.word	0x08011d9d
 80117b8:	08011d9d 	.word	0x08011d9d
 80117bc:	08011d9d 	.word	0x08011d9d
 80117c0:	08011d49 	.word	0x08011d49
 80117c4:	08011d55 	.word	0x08011d55
 80117c8:	08011d61 	.word	0x08011d61
 80117cc:	08011d6d 	.word	0x08011d6d
 80117d0:	08011d79 	.word	0x08011d79
 80117d4:	08011d85 	.word	0x08011d85
 80117d8:	08011d91 	.word	0x08011d91
 80117dc:	08011d97 	.word	0x08011d97
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	791b      	ldrb	r3, [r3, #4]
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7fd fb59 	bl	800ee9c <SwitchClass>
 80117ea:	4603      	mov	r3, r0
 80117ec:	75fb      	strb	r3, [r7, #23]
            break;
 80117ee:	e2f6      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	791b      	ldrb	r3, [r3, #4]
 80117f4:	2b02      	cmp	r3, #2
 80117f6:	d005      	beq.n	8011804 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	791a      	ldrb	r2, [r3, #4]
 80117fc:	4b6c      	ldr	r3, [pc, #432]	@ (80119b0 <LoRaMacMibSetRequestConfirm+0x310>)
 80117fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011802:	e2ec      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011804:	2303      	movs	r3, #3
 8011806:	75fb      	strb	r3, [r7, #23]
            break;
 8011808:	e2e9      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	4618      	mov	r0, r3
 8011810:	f7fa fa3e 	bl	800bc90 <SecureElementSetDevEui>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	f000 82c6 	beq.w	8011da8 <LoRaMacMibSetRequestConfirm+0x708>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801181c:	2303      	movs	r3, #3
 801181e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011820:	e2c2      	b.n	8011da8 <LoRaMacMibSetRequestConfirm+0x708>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	4618      	mov	r0, r3
 8011828:	f7fa fa62 	bl	800bcf0 <SecureElementSetJoinEui>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	f000 82bc 	beq.w	8011dac <LoRaMacMibSetRequestConfirm+0x70c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011834:	2303      	movs	r3, #3
 8011836:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011838:	e2b8      	b.n	8011dac <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	791a      	ldrb	r2, [r3, #4]
 801183e:	4b5c      	ldr	r3, [pc, #368]	@ (80119b0 <LoRaMacMibSetRequestConfirm+0x310>)
 8011840:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8011844:	e2cb      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	4a59      	ldr	r2, [pc, #356]	@ (80119b0 <LoRaMacMibSetRequestConfirm+0x310>)
 801184c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8011850:	e2c5      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8011852:	4b57      	ldr	r3, [pc, #348]	@ (80119b0 <LoRaMacMibSetRequestConfirm+0x310>)
 8011854:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	4619      	mov	r1, r3
 801185e:	4610      	mov	r0, r2
 8011860:	f7fa fa76 	bl	800bd50 <SecureElementSetDevAddr>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d002      	beq.n	8011870 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801186a:	2303      	movs	r3, #3
 801186c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801186e:	e2b6      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	4a4e      	ldr	r2, [pc, #312]	@ (80119b0 <LoRaMacMibSetRequestConfirm+0x310>)
 8011876:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 801187a:	e2b0      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d00b      	beq.n	801189c <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	685b      	ldr	r3, [r3, #4]
 8011888:	4619      	mov	r1, r3
 801188a:	2000      	movs	r0, #0
 801188c:	f002 f8c8 	bl	8013a20 <LoRaMacCryptoSetKey>
 8011890:	4603      	mov	r3, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	f000 828c 	beq.w	8011db0 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011898:	2311      	movs	r3, #17
 801189a:	e2ab      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801189c:	2303      	movs	r3, #3
 801189e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118a0:	e286      	b.n	8011db0 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00b      	beq.n	80118c2 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	4619      	mov	r1, r3
 80118b0:	2001      	movs	r0, #1
 80118b2:	f002 f8b5 	bl	8013a20 <LoRaMacCryptoSetKey>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 827b 	beq.w	8011db4 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118be:	2311      	movs	r3, #17
 80118c0:	e298      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118c2:	2303      	movs	r3, #3
 80118c4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118c6:	e275      	b.n	8011db4 <LoRaMacMibSetRequestConfirm+0x714>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d00b      	beq.n	80118e8 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	4619      	mov	r1, r3
 80118d6:	2008      	movs	r0, #8
 80118d8:	f002 f8a2 	bl	8013a20 <LoRaMacCryptoSetKey>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f000 826a 	beq.w	8011db8 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118e4:	2311      	movs	r3, #17
 80118e6:	e285      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118e8:	2303      	movs	r3, #3
 80118ea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118ec:	e264      	b.n	8011db8 <LoRaMacMibSetRequestConfirm+0x718>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00b      	beq.n	801190e <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	4619      	mov	r1, r3
 80118fc:	2009      	movs	r0, #9
 80118fe:	f002 f88f 	bl	8013a20 <LoRaMacCryptoSetKey>
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 8259 	beq.w	8011dbc <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801190a:	2311      	movs	r3, #17
 801190c:	e272      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801190e:	2303      	movs	r3, #3
 8011910:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011912:	e253      	b.n	8011dbc <LoRaMacMibSetRequestConfirm+0x71c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00b      	beq.n	8011934 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	4619      	mov	r1, r3
 8011922:	200c      	movs	r0, #12
 8011924:	f002 f87c 	bl	8013a20 <LoRaMacCryptoSetKey>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	f000 8248 	beq.w	8011dc0 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011930:	2311      	movs	r3, #17
 8011932:	e25f      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011934:	2303      	movs	r3, #3
 8011936:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011938:	e242      	b.n	8011dc0 <LoRaMacMibSetRequestConfirm+0x720>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d00b      	beq.n	801195a <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	4619      	mov	r1, r3
 8011948:	200d      	movs	r0, #13
 801194a:	f002 f869 	bl	8013a20 <LoRaMacCryptoSetKey>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	f000 8237 	beq.w	8011dc4 <LoRaMacMibSetRequestConfirm+0x724>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011956:	2311      	movs	r3, #17
 8011958:	e24c      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801195a:	2303      	movs	r3, #3
 801195c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801195e:	e231      	b.n	8011dc4 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00b      	beq.n	8011980 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	4619      	mov	r1, r3
 801196e:	200e      	movs	r0, #14
 8011970:	f002 f856 	bl	8013a20 <LoRaMacCryptoSetKey>
 8011974:	4603      	mov	r3, r0
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 8226 	beq.w	8011dc8 <LoRaMacMibSetRequestConfirm+0x728>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801197c:	2311      	movs	r3, #17
 801197e:	e239      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011980:	2303      	movs	r3, #3
 8011982:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011984:	e220      	b.n	8011dc8 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00b      	beq.n	80119a6 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	4619      	mov	r1, r3
 8011994:	200f      	movs	r0, #15
 8011996:	f002 f843 	bl	8013a20 <LoRaMacCryptoSetKey>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	f000 8215 	beq.w	8011dcc <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119a2:	2311      	movs	r3, #17
 80119a4:	e226      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119a6:	2303      	movs	r3, #3
 80119a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119aa:	e20f      	b.n	8011dcc <LoRaMacMibSetRequestConfirm+0x72c>
 80119ac:	200005dc 	.word	0x200005dc
 80119b0:	20000b10 	.word	0x20000b10
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	791a      	ldrb	r2, [r3, #4]
 80119b8:	4bb2      	ldr	r3, [pc, #712]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80119ba:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80119be:	4bb2      	ldr	r3, [pc, #712]	@ (8011c88 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80119c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80119c2:	4ab0      	ldr	r2, [pc, #704]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80119c4:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80119c8:	4610      	mov	r0, r2
 80119ca:	4798      	blx	r3
            Radio.Sleep( );
 80119cc:	4bae      	ldr	r3, [pc, #696]	@ (8011c88 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80119ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119d0:	4798      	blx	r3
            break;
 80119d2:	e204      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	791a      	ldrb	r2, [r3, #4]
 80119d8:	4baa      	ldr	r3, [pc, #680]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80119da:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 80119de:	e1fe      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	7a1b      	ldrb	r3, [r3, #8]
 80119e4:	b25b      	sxtb	r3, r3
 80119e6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80119e8:	4ba6      	ldr	r3, [pc, #664]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80119ea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80119ee:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80119f0:	4ba4      	ldr	r3, [pc, #656]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80119f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80119f6:	f107 0108 	add.w	r1, r7, #8
 80119fa:	2207      	movs	r2, #7
 80119fc:	4618      	mov	r0, r3
 80119fe:	f002 fe36 	bl	801466e <RegionVerify>
 8011a02:	4603      	mov	r3, r0
 8011a04:	f083 0301 	eor.w	r3, r3, #1
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d002      	beq.n	8011a14 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a0e:	2303      	movs	r3, #3
 8011a10:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8011a12:	e1e4      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011a1a:	4b9a      	ldr	r3, [pc, #616]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011a1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a20:	f107 0108 	add.w	r1, r7, #8
 8011a24:	2200      	movs	r2, #0
 8011a26:	4618      	mov	r0, r3
 8011a28:	f002 fe21 	bl	801466e <RegionVerify>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	f083 0301 	eor.w	r3, r3, #1
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d002      	beq.n	8011a3e <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a38:	2303      	movs	r3, #3
 8011a3a:	75fb      	strb	r3, [r7, #23]
            break;
 8011a3c:	e1cf      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011a3e:	4b91      	ldr	r3, [pc, #580]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	336c      	adds	r3, #108	@ 0x6c
 8011a44:	3204      	adds	r2, #4
 8011a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a4a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011a4e:	e1c6      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	7a1b      	ldrb	r3, [r3, #8]
 8011a54:	b25b      	sxtb	r3, r3
 8011a56:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011a58:	4b8a      	ldr	r3, [pc, #552]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011a5a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011a5e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011a60:	4b88      	ldr	r3, [pc, #544]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011a62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a66:	f107 0108 	add.w	r1, r7, #8
 8011a6a:	2207      	movs	r2, #7
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f002 fdfe 	bl	801466e <RegionVerify>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d008      	beq.n	8011a8a <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011a78:	4b82      	ldr	r3, [pc, #520]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	33b4      	adds	r3, #180	@ 0xb4
 8011a7e:	3204      	adds	r2, #4
 8011a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a84:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a88:	e1a9      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a8a:	2303      	movs	r3, #3
 8011a8c:	75fb      	strb	r3, [r7, #23]
            break;
 8011a8e:	e1a6      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	7a1b      	ldrb	r3, [r3, #8]
 8011a94:	b25b      	sxtb	r3, r3
 8011a96:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011a98:	4b7a      	ldr	r3, [pc, #488]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011a9a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011a9e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011aa0:	4b78      	ldr	r3, [pc, #480]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011aa2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011aa6:	f107 0108 	add.w	r1, r7, #8
 8011aaa:	2207      	movs	r2, #7
 8011aac:	4618      	mov	r0, r3
 8011aae:	f002 fdde 	bl	801466e <RegionVerify>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d019      	beq.n	8011aec <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011ab8:	4b72      	ldr	r3, [pc, #456]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	3374      	adds	r3, #116	@ 0x74
 8011abe:	3204      	adds	r2, #4
 8011ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ac4:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011aca:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	f040 817e 	bne.w	8011dd0 <LoRaMacMibSetRequestConfirm+0x730>
 8011ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011ad6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f000 8178 	beq.w	8011dd0 <LoRaMacMibSetRequestConfirm+0x730>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011ae0:	4b69      	ldr	r3, [pc, #420]	@ (8011c88 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8011ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ae4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011ae6:	f7fe fcd1 	bl	801048c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011aea:	e171      	b.n	8011dd0 <LoRaMacMibSetRequestConfirm+0x730>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011aec:	2303      	movs	r3, #3
 8011aee:	75fb      	strb	r3, [r7, #23]
            break;
 8011af0:	e16e      	b.n	8011dd0 <LoRaMacMibSetRequestConfirm+0x730>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	7a1b      	ldrb	r3, [r3, #8]
 8011af6:	b25b      	sxtb	r3, r3
 8011af8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011afa:	4b62      	ldr	r3, [pc, #392]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011afc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011b00:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011b02:	4b60      	ldr	r3, [pc, #384]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011b04:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b08:	f107 0108 	add.w	r1, r7, #8
 8011b0c:	2207      	movs	r2, #7
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f002 fdad 	bl	801466e <RegionVerify>
 8011b14:	4603      	mov	r3, r0
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d008      	beq.n	8011b2c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011b1a:	4b5a      	ldr	r3, [pc, #360]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	33bc      	adds	r3, #188	@ 0xbc
 8011b20:	3204      	adds	r2, #4
 8011b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b26:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b2a:	e158      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b2c:	2303      	movs	r3, #3
 8011b2e:	75fb      	strb	r3, [r7, #23]
            break;
 8011b30:	e155      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011b38:	2301      	movs	r3, #1
 8011b3a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011b3c:	4b51      	ldr	r3, [pc, #324]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011b3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b42:	f107 020c 	add.w	r2, r7, #12
 8011b46:	4611      	mov	r1, r2
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f002 fdb9 	bl	80146c0 <RegionChanMaskSet>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	f083 0301 	eor.w	r3, r3, #1
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f000 813c 	beq.w	8011dd4 <LoRaMacMibSetRequestConfirm+0x734>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b5c:	2303      	movs	r3, #3
 8011b5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b60:	e138      	b.n	8011dd4 <LoRaMacMibSetRequestConfirm+0x734>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011b6c:	4b45      	ldr	r3, [pc, #276]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011b6e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b72:	f107 020c 	add.w	r2, r7, #12
 8011b76:	4611      	mov	r1, r2
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f002 fda1 	bl	80146c0 <RegionChanMaskSet>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	f083 0301 	eor.w	r3, r3, #1
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 8126 	beq.w	8011dd8 <LoRaMacMibSetRequestConfirm+0x738>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b8c:	2303      	movs	r3, #3
 8011b8e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b90:	e122      	b.n	8011dd8 <LoRaMacMibSetRequestConfirm+0x738>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	791b      	ldrb	r3, [r3, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d009      	beq.n	8011bae <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011b9e:	2b0f      	cmp	r3, #15
 8011ba0:	d805      	bhi.n	8011bae <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	791a      	ldrb	r2, [r3, #4]
 8011ba6:	4b37      	ldr	r3, [pc, #220]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011ba8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011bac:	e117      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bae:	2303      	movs	r3, #3
 8011bb0:	75fb      	strb	r3, [r7, #23]
            break;
 8011bb2:	e114      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	4a32      	ldr	r2, [pc, #200]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011bba:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8011bbc:	e10f      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	4a30      	ldr	r2, [pc, #192]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011bc4:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8011bc6:	e10a      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011bce:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8011bd0:	e105      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011bd8:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8011bda:	e100      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	4a28      	ldr	r2, [pc, #160]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011be2:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8011be4:	e0fb      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011bec:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011bee:	4b25      	ldr	r3, [pc, #148]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011bf0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011bf4:	f107 0108 	add.w	r1, r7, #8
 8011bf8:	2206      	movs	r2, #6
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f002 fd37 	bl	801466e <RegionVerify>
 8011c00:	4603      	mov	r3, r0
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d005      	beq.n	8011c12 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011c06:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011c0c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c10:	e0e5      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c12:	2303      	movs	r3, #3
 8011c14:	75fb      	strb	r3, [r7, #23]
            break;
 8011c16:	e0e2      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011c1e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c20:	4b18      	ldr	r3, [pc, #96]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011c22:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011c26:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011c28:	4b16      	ldr	r3, [pc, #88]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011c2a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c2e:	f107 0108 	add.w	r1, r7, #8
 8011c32:	2205      	movs	r2, #5
 8011c34:	4618      	mov	r0, r3
 8011c36:	f002 fd1a 	bl	801466e <RegionVerify>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d005      	beq.n	8011c4c <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011c40:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011c44:	4b0f      	ldr	r3, [pc, #60]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011c46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c4a:	e0c8      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c4c:	2303      	movs	r3, #3
 8011c4e:	75fb      	strb	r3, [r7, #23]
            break;
 8011c50:	e0c5      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011c58:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011c5c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c60:	f107 0108 	add.w	r1, r7, #8
 8011c64:	220a      	movs	r2, #10
 8011c66:	4618      	mov	r0, r3
 8011c68:	f002 fd01 	bl	801466e <RegionVerify>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d005      	beq.n	8011c7e <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011c72:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011c76:	4b03      	ldr	r3, [pc, #12]	@ (8011c84 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011c78:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c7c:	e0af      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c7e:	2303      	movs	r3, #3
 8011c80:	75fb      	strb	r3, [r7, #23]
            break;
 8011c82:	e0ac      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
 8011c84:	20000b10 	.word	0x20000b10
 8011c88:	0801c9c4 	.word	0x0801c9c4
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011c92:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011c94:	4b59      	ldr	r3, [pc, #356]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011c96:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011c9a:	f107 0108 	add.w	r1, r7, #8
 8011c9e:	2209      	movs	r2, #9
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f002 fce4 	bl	801466e <RegionVerify>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d005      	beq.n	8011cb8 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011cac:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011cb0:	4b52      	ldr	r3, [pc, #328]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011cb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011cb6:	e092      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cb8:	2303      	movs	r3, #3
 8011cba:	75fb      	strb	r3, [r7, #23]
            break;
 8011cbc:	e08f      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mibSet->Param.SystemMaxRxError <= 500 )
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8011cc6:	d80a      	bhi.n	8011cde <LoRaMacMibSetRequestConfirm+0x63e>
            { // Only apply the new value if in range 0..500 ms else keep current value.
                Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011cce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8011cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011cd8:	4a48      	ldr	r2, [pc, #288]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
#endif
            break;
 8011cdc:	e07f      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cde:	2303      	movs	r3, #3
 8011ce0:	75fb      	strb	r3, [r7, #23]
            break;
 8011ce2:	e07c      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	791a      	ldrb	r2, [r3, #4]
 8011ce8:	4b44      	ldr	r3, [pc, #272]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011cea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8011cee:	4b43      	ldr	r3, [pc, #268]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011cf0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8011cf4:	4b41      	ldr	r3, [pc, #260]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8011cfa:	e070      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	4a3e      	ldr	r2, [pc, #248]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d02:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8011d06:	e06a      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d0e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8011d12:	e064      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011d14:	f7fe fdec 	bl	80108f0 <RestoreNvmData>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8011d1c:	e05f      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	799b      	ldrb	r3, [r3, #6]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	d80d      	bhi.n	8011d42 <LoRaMacMibSetRequestConfirm+0x6a2>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011d26:	4a35      	ldr	r2, [pc, #212]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6858      	ldr	r0, [r3, #4]
 8011d34:	f001 fdd6 	bl	80138e4 <LoRaMacCryptoSetLrWanVersion>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d04e      	beq.n	8011ddc <LoRaMacMibSetRequestConfirm+0x73c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d3e:	2311      	movs	r3, #17
 8011d40:	e058      	b.n	8011df4 <LoRaMacMibSetRequestConfirm+0x754>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d42:	2303      	movs	r3, #3
 8011d44:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d46:	e049      	b.n	8011ddc <LoRaMacMibSetRequestConfirm+0x73c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8011d52:	e044      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	791a      	ldrb	r2, [r3, #4]
 8011d58:	4b28      	ldr	r3, [pc, #160]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d5a:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 8011d5e:	e03e      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	889a      	ldrh	r2, [r3, #4]
 8011d64:	4b25      	ldr	r3, [pc, #148]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d66:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8011d6a:	e038      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	889a      	ldrh	r2, [r3, #4]
 8011d70:	4b22      	ldr	r3, [pc, #136]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d72:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8011d76:	e032      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	889a      	ldrh	r2, [r3, #4]
 8011d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d7e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8011d82:	e02c      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	889a      	ldrh	r2, [r3, #4]
 8011d88:	4b1c      	ldr	r3, [pc, #112]	@ (8011dfc <LoRaMacMibSetRequestConfirm+0x75c>)
 8011d8a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 8011d8e:	e026      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011d90:	2318      	movs	r3, #24
 8011d92:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011d94:	e023      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011d96:	2318      	movs	r3, #24
 8011d98:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011d9a:	e020      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 fd00 	bl	80127a2 <LoRaMacMibClassBSetRequestConfirm>
 8011da2:	4603      	mov	r3, r0
 8011da4:	75fb      	strb	r3, [r7, #23]
            break;
 8011da6:	e01a      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011da8:	bf00      	nop
 8011daa:	e018      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dac:	bf00      	nop
 8011dae:	e016      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011db0:	bf00      	nop
 8011db2:	e014      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011db4:	bf00      	nop
 8011db6:	e012      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011db8:	bf00      	nop
 8011dba:	e010      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dbc:	bf00      	nop
 8011dbe:	e00e      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dc0:	bf00      	nop
 8011dc2:	e00c      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dc4:	bf00      	nop
 8011dc6:	e00a      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dc8:	bf00      	nop
 8011dca:	e008      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dcc:	bf00      	nop
 8011dce:	e006      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dd0:	bf00      	nop
 8011dd2:	e004      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dd4:	bf00      	nop
 8011dd6:	e002      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011dd8:	bf00      	nop
 8011dda:	e000      	b.n	8011dde <LoRaMacMibSetRequestConfirm+0x73e>
            break;
 8011ddc:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8011dde:	7dfb      	ldrb	r3, [r7, #23]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d106      	bne.n	8011df2 <LoRaMacMibSetRequestConfirm+0x752>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011de4:	4a06      	ldr	r2, [pc, #24]	@ (8011e00 <LoRaMacMibSetRequestConfirm+0x760>)
 8011de6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8011dea:	f043 0320 	orr.w	r3, r3, #32
 8011dee:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	20000b10 	.word	0x20000b10
 8011e00:	200005dc 	.word	0x200005dc

08011e04 <OnAbpJoinPendingTimerEvent>:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
/*!
 * \brief Function executed on AbpJoinPendingTimer timer event
 */
static void OnAbpJoinPendingTimerEvent( void *context )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
    MacCtx.MacState &= ~LORAMAC_ABP_JOIN_PENDING;
 8011e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8011e38 <OnAbpJoinPendingTimerEvent+0x34>)
 8011e0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011e16:	4a08      	ldr	r2, [pc, #32]	@ (8011e38 <OnAbpJoinPendingTimerEvent+0x34>)
 8011e18:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011e1c:	4a06      	ldr	r2, [pc, #24]	@ (8011e38 <OnAbpJoinPendingTimerEvent+0x34>)
 8011e1e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8011e22:	f043 0310 	orr.w	r3, r3, #16
 8011e26:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    OnMacProcessNotify( );
 8011e2a:	f7fe fe6d 	bl	8010b08 <OnMacProcessNotify>
}
 8011e2e:	bf00      	nop
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	200005dc 	.word	0x200005dc

08011e3c <AbpJoinPendingStart>:

/*!
 * \brief Start ABP join simulation
 */
static void AbpJoinPendingStart( void )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af02      	add	r7, sp, #8
    static bool initialized = false;

    if( initialized == false )
 8011e42:	4b14      	ldr	r3, [pc, #80]	@ (8011e94 <AbpJoinPendingStart+0x58>)
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	f083 0301 	eor.w	r3, r3, #1
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00b      	beq.n	8011e68 <AbpJoinPendingStart+0x2c>
    {
        initialized = true;
 8011e50:	4b10      	ldr	r3, [pc, #64]	@ (8011e94 <AbpJoinPendingStart+0x58>)
 8011e52:	2201      	movs	r2, #1
 8011e54:	701a      	strb	r2, [r3, #0]
        TimerInit( &MacCtx.AbpJoinPendingTimer, OnAbpJoinPendingTimerEvent );
 8011e56:	2300      	movs	r3, #0
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8011e98 <AbpJoinPendingStart+0x5c>)
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8011e62:	480e      	ldr	r0, [pc, #56]	@ (8011e9c <AbpJoinPendingStart+0x60>)
 8011e64:	f008 fea2 	bl	801abac <UTIL_TIMER_Create>
    }

    MacCtx.MacState |= LORAMAC_ABP_JOIN_PENDING;
 8011e68:	4b0d      	ldr	r3, [pc, #52]	@ (8011ea0 <AbpJoinPendingStart+0x64>)
 8011e6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011e72:	4a0b      	ldr	r2, [pc, #44]	@ (8011ea0 <AbpJoinPendingStart+0x64>)
 8011e74:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    TimerStop( &MacCtx.AbpJoinPendingTimer );
 8011e78:	4808      	ldr	r0, [pc, #32]	@ (8011e9c <AbpJoinPendingStart+0x60>)
 8011e7a:	f008 ff3b 	bl	801acf4 <UTIL_TIMER_Stop>
    TimerSetValue( &MacCtx.AbpJoinPendingTimer, ABP_JOIN_PENDING_DELAY_MS );
 8011e7e:	210a      	movs	r1, #10
 8011e80:	4806      	ldr	r0, [pc, #24]	@ (8011e9c <AbpJoinPendingStart+0x60>)
 8011e82:	f008 ffa7 	bl	801add4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.AbpJoinPendingTimer );
 8011e86:	4805      	ldr	r0, [pc, #20]	@ (8011e9c <AbpJoinPendingStart+0x60>)
 8011e88:	f008 fec6 	bl	801ac18 <UTIL_TIMER_Start>
}
 8011e8c:	bf00      	nop
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	20001174 	.word	0x20001174
 8011e98:	08011e05 	.word	0x08011e05
 8011e9c:	20000a78 	.word	0x20000a78
 8011ea0:	200005dc 	.word	0x200005dc

08011ea4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b08a      	sub	sp, #40	@ 0x28
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011eac:	2302      	movs	r3, #2
 8011eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011eb8:	2300      	movs	r3, #0
 8011eba:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d101      	bne.n	8011ec6 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ec2:	2303      	movs	r3, #3
 8011ec4:	e188      	b.n	80121d8 <LoRaMacMlmeRequest+0x334>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011ecc:	f7fc fbc8 	bl	800e660 <LoRaMacIsBusy>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e17e      	b.n	80121d8 <LoRaMacMlmeRequest+0x334>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011eda:	f001 f99d 	bl	8013218 <LoRaMacConfirmQueueIsFull>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d001      	beq.n	8011ee8 <LoRaMacMlmeRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	e177      	b.n	80121d8 <LoRaMacMlmeRequest+0x334>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011ee8:	f001 f98a 	bl	8013200 <LoRaMacConfirmQueueGetCnt>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d104      	bne.n	8011efc <LoRaMacMlmeRequest+0x58>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011ef2:	2214      	movs	r2, #20
 8011ef4:	2100      	movs	r1, #0
 8011ef6:	48ba      	ldr	r0, [pc, #744]	@ (80121e0 <LoRaMacMlmeRequest+0x33c>)
 8011ef8:	f004 fde4 	bl	8016ac4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011efc:	4bb9      	ldr	r3, [pc, #740]	@ (80121e4 <LoRaMacMlmeRequest+0x340>)
 8011efe:	2201      	movs	r2, #1
 8011f00:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011f04:	4ab7      	ldr	r2, [pc, #732]	@ (80121e4 <LoRaMacMlmeRequest+0x340>)
 8011f06:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8011f0a:	f043 0304 	orr.w	r3, r3, #4
 8011f0e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8011f20:	2300      	movs	r3, #0
 8011f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8011f26:	2300      	movs	r3, #0
 8011f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	2b0c      	cmp	r3, #12
 8011f34:	f200 811e 	bhi.w	8012174 <LoRaMacMlmeRequest+0x2d0>
 8011f38:	a201      	add	r2, pc, #4	@ (adr r2, 8011f40 <LoRaMacMlmeRequest+0x9c>)
 8011f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f3e:	bf00      	nop
 8011f40:	08011f75 	.word	0x08011f75
 8011f44:	08012175 	.word	0x08012175
 8011f48:	08012175 	.word	0x08012175
 8011f4c:	08012175 	.word	0x08012175
 8011f50:	08012059 	.word	0x08012059
 8011f54:	0801207d 	.word	0x0801207d
 8011f58:	08012175 	.word	0x08012175
 8011f5c:	08012175 	.word	0x08012175
 8011f60:	0801209b 	.word	0x0801209b
 8011f64:	08012175 	.word	0x08012175
 8011f68:	08012143 	.word	0x08012143
 8011f6c:	080120d7 	.word	0x080120d7
 8011f70:	08012121 	.word	0x08012121
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011f74:	4b9b      	ldr	r3, [pc, #620]	@ (80121e4 <LoRaMacMlmeRequest+0x340>)
 8011f76:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f7a:	f003 0320 	and.w	r3, r3, #32
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d001      	beq.n	8011f86 <LoRaMacMlmeRequest+0xe2>
            {
                return LORAMAC_STATUS_BUSY;
 8011f82:	2301      	movs	r3, #1
 8011f84:	e128      	b.n	80121d8 <LoRaMacMlmeRequest+0x334>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	791b      	ldrb	r3, [r3, #4]
 8011f8a:	2b02      	cmp	r3, #2
 8011f8c:	d135      	bne.n	8011ffa <LoRaMacMlmeRequest+0x156>
            {
                ResetMacParameters( false );
 8011f8e:	2000      	movs	r0, #0
 8011f90:	f7fe f90e 	bl	80101b0 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011f94:	4b94      	ldr	r3, [pc, #592]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8011f96:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	795b      	ldrb	r3, [r3, #5]
 8011f9e:	b25b      	sxtb	r3, r3
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	f002 fc4b 	bl	801483e <RegionAlternateDr>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	461a      	mov	r2, r3
 8011fac:	4b8e      	ldr	r3, [pc, #568]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8011fae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8011fb8:	4b8b      	ldr	r3, [pc, #556]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8011fba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011fbe:	2307      	movs	r3, #7
 8011fc0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8011fc4:	20ff      	movs	r0, #255	@ 0xff
 8011fc6:	f7fd fe77 	bl	800fcb8 <SendReJoinReq>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8011fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f000 80cf 	beq.w	8012178 <LoRaMacMlmeRequest+0x2d4>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011fda:	4b83      	ldr	r3, [pc, #524]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8011fdc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	795b      	ldrb	r3, [r3, #5]
 8011fe4:	b25b      	sxtb	r3, r3
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	4619      	mov	r1, r3
 8011fea:	f002 fc28 	bl	801483e <RegionAlternateDr>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8011ff4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011ff8:	e0be      	b.n	8012178 <LoRaMacMlmeRequest+0x2d4>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	791b      	ldrb	r3, [r3, #4]
 8011ffe:	2b01      	cmp	r3, #1
 8012000:	f040 80ba 	bne.w	8012178 <LoRaMacMlmeRequest+0x2d4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012004:	4b78      	ldr	r3, [pc, #480]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8012006:	2200      	movs	r2, #0
 8012008:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801200c:	2302      	movs	r3, #2
 801200e:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012010:	4b75      	ldr	r3, [pc, #468]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8012012:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012016:	f107 020c 	add.w	r2, r7, #12
 801201a:	4611      	mov	r1, r2
 801201c:	4618      	mov	r0, r3
 801201e:	f002 fb14 	bl	801464a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	791a      	ldrb	r2, [r3, #4]
 8012026:	4b70      	ldr	r3, [pc, #448]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 8012028:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801202c:	2300      	movs	r3, #0
 801202e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8012032:	2301      	movs	r3, #1
 8012034:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 8012038:	f7fe fd66 	bl	8010b08 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801203c:	4a69      	ldr	r2, [pc, #420]	@ (80121e4 <LoRaMacMlmeRequest+0x340>)
 801203e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012042:	f043 0310 	orr.w	r3, r3, #16
 8012046:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                isAbpJoinPending = true;
 801204a:	2301      	movs	r3, #1
 801204c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                status = LORAMAC_STATUS_OK;
 8012050:	2300      	movs	r3, #0
 8012052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012056:	e08f      	b.n	8012178 <LoRaMacMlmeRequest+0x2d4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801205e:	f107 031c 	add.w	r3, r7, #28
 8012062:	2200      	movs	r2, #0
 8012064:	4619      	mov	r1, r3
 8012066:	2002      	movs	r0, #2
 8012068:	f000 fd26 	bl	8012ab8 <LoRaMacCommandsAddCmd>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	f000 8084 	beq.w	801217c <LoRaMacMlmeRequest+0x2d8>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012074:	2313      	movs	r3, #19
 8012076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801207a:	e07f      	b.n	801217c <LoRaMacMlmeRequest+0x2d8>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	8898      	ldrh	r0, [r3, #4]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6899      	ldr	r1, [r3, #8]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801208a:	b2db      	uxtb	r3, r3
 801208c:	461a      	mov	r2, r3
 801208e:	f7fe fc0f 	bl	80108b0 <SetTxContinuousWave>
 8012092:	4603      	mov	r3, r0
 8012094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012098:	e077      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80120a0:	f107 0308 	add.w	r3, r7, #8
 80120a4:	4619      	mov	r1, r3
 80120a6:	200d      	movs	r0, #13
 80120a8:	f000 fd86 	bl	8012bb8 <LoRaMacCommandsGetCmd>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d103      	bne.n	80120ba <LoRaMacMlmeRequest+0x216>
            {
                status = LORAMAC_STATUS_OK;
 80120b2:	2300      	movs	r3, #0
 80120b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80120b8:	e062      	b.n	8012180 <LoRaMacMlmeRequest+0x2dc>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80120ba:	f107 031c 	add.w	r3, r7, #28
 80120be:	2200      	movs	r2, #0
 80120c0:	4619      	mov	r1, r3
 80120c2:	200d      	movs	r0, #13
 80120c4:	f000 fcf8 	bl	8012ab8 <LoRaMacCommandsAddCmd>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d058      	beq.n	8012180 <LoRaMacMlmeRequest+0x2dc>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120ce:	2313      	movs	r3, #19
 80120d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80120d4:	e054      	b.n	8012180 <LoRaMacMlmeRequest+0x2dc>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80120d6:	4b44      	ldr	r3, [pc, #272]	@ (80121e8 <LoRaMacMlmeRequest+0x344>)
 80120d8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d151      	bne.n	8012184 <LoRaMacMlmeRequest+0x2e0>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	791b      	ldrb	r3, [r3, #4]
 80120e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	791b      	ldrb	r3, [r3, #4]
 80120ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 fb2a 	bl	801274c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80120f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80120fc:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80120fe:	2300      	movs	r3, #0
 8012100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012104:	f107 031c 	add.w	r3, r7, #28
 8012108:	2201      	movs	r2, #1
 801210a:	4619      	mov	r1, r3
 801210c:	2010      	movs	r0, #16
 801210e:	f000 fcd3 	bl	8012ab8 <LoRaMacCommandsAddCmd>
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d035      	beq.n	8012184 <LoRaMacMlmeRequest+0x2e0>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012118:	2313      	movs	r3, #19
 801211a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 801211e:	e031      	b.n	8012184 <LoRaMacMlmeRequest+0x2e0>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012120:	2300      	movs	r3, #0
 8012122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012126:	f107 031c 	add.w	r3, r7, #28
 801212a:	2200      	movs	r2, #0
 801212c:	4619      	mov	r1, r3
 801212e:	2012      	movs	r0, #18
 8012130:	f000 fcc2 	bl	8012ab8 <LoRaMacCommandsAddCmd>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d026      	beq.n	8012188 <LoRaMacMlmeRequest+0x2e4>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801213a:	2313      	movs	r3, #19
 801213c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012140:	e022      	b.n	8012188 <LoRaMacMlmeRequest+0x2e4>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012142:	2301      	movs	r3, #1
 8012144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012148:	f000 fab6 	bl	80126b8 <LoRaMacClassBIsAcquisitionInProgress>
 801214c:	4603      	mov	r3, r0
 801214e:	f083 0301 	eor.w	r3, r3, #1
 8012152:	b2db      	uxtb	r3, r3
 8012154:	2b00      	cmp	r3, #0
 8012156:	d009      	beq.n	801216c <LoRaMacMlmeRequest+0x2c8>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012158:	2000      	movs	r0, #0
 801215a:	f000 fa8f 	bl	801267c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801215e:	2000      	movs	r0, #0
 8012160:	f000 fab1 	bl	80126c6 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012164:	2300      	movs	r3, #0
 8012166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801216a:	e00e      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
                status = LORAMAC_STATUS_BUSY;
 801216c:	2301      	movs	r3, #1
 801216e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012172:	e00a      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
        }
        default:
            break;
 8012174:	bf00      	nop
 8012176:	e008      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
            break;
 8012178:	bf00      	nop
 801217a:	e006      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
            break;
 801217c:	bf00      	nop
 801217e:	e004      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
            break;
 8012180:	bf00      	nop
 8012182:	e002      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
            break;
 8012184:	bf00      	nop
 8012186:	e000      	b.n	801218a <LoRaMacMlmeRequest+0x2e6>
            break;
 8012188:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801218a:	4b16      	ldr	r3, [pc, #88]	@ (80121e4 <LoRaMacMlmeRequest+0x340>)
 801218c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012198:	2b00      	cmp	r3, #0
 801219a:	d010      	beq.n	80121be <LoRaMacMlmeRequest+0x31a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801219c:	f001 f830 	bl	8013200 <LoRaMacConfirmQueueGetCnt>
 80121a0:	4603      	mov	r3, r0
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d116      	bne.n	80121d4 <LoRaMacMlmeRequest+0x330>
        {
            MacCtx.NodeAckRequested = false;
 80121a6:	4b0f      	ldr	r3, [pc, #60]	@ (80121e4 <LoRaMacMlmeRequest+0x340>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80121ae:	4a0d      	ldr	r2, [pc, #52]	@ (80121e4 <LoRaMacMlmeRequest+0x340>)
 80121b0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80121b4:	f023 0304 	bic.w	r3, r3, #4
 80121b8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80121bc:	e00a      	b.n	80121d4 <LoRaMacMlmeRequest+0x330>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80121be:	f107 0320 	add.w	r3, r7, #32
 80121c2:	4618      	mov	r0, r3
 80121c4:	f000 fec8 	bl	8012f58 <LoRaMacConfirmQueueAdd>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        if( isAbpJoinPending == true )
 80121c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <LoRaMacMlmeRequest+0x330>
        {
            AbpJoinPendingStart( );
 80121d0:	f7ff fe34 	bl	8011e3c <AbpJoinPendingStart>
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 80121d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3728      	adds	r7, #40	@ 0x28
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	20000a30 	.word	0x20000a30
 80121e4:	200005dc 	.word	0x200005dc
 80121e8:	20000b10 	.word	0x20000b10

080121ec <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80121ec:	b5b0      	push	{r4, r5, r7, lr}
 80121ee:	b092      	sub	sp, #72	@ 0x48
 80121f0:	af02      	add	r7, sp, #8
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	460b      	mov	r3, r1
 80121f6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80121f8:	2302      	movs	r3, #2
 80121fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 8012204:	2300      	movs	r3, #0
 8012206:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012208:	2300      	movs	r3, #0
 801220a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 801220e:	2300      	movs	r3, #0
 8012210:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d101      	bne.n	801221e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801221a:	2303      	movs	r3, #3
 801221c:	e113      	b.n	8012446 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2200      	movs	r2, #0
 8012222:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012224:	f7fc fa1c 	bl	800e660 <LoRaMacIsBusy>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d001      	beq.n	8012232 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801222e:	2301      	movs	r3, #1
 8012230:	e109      	b.n	8012446 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f107 040c 	add.w	r4, r7, #12
 8012238:	461d      	mov	r5, r3
 801223a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801223c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801223e:	682b      	ldr	r3, [r5, #0]
 8012240:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012242:	2300      	movs	r3, #0
 8012244:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012248:	2214      	movs	r2, #20
 801224a:	2100      	movs	r1, #0
 801224c:	4880      	ldr	r0, [pc, #512]	@ (8012450 <LoRaMacMcpsRequest+0x264>)
 801224e:	f004 fc39 	bl	8016ac4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012252:	4b80      	ldr	r3, [pc, #512]	@ (8012454 <LoRaMacMcpsRequest+0x268>)
 8012254:	2201      	movs	r2, #1
 8012256:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801225a:	4b7f      	ldr	r3, [pc, #508]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 801225c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8012260:	2b02      	cmp	r3, #2
 8012262:	d111      	bne.n	8012288 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012264:	4b7c      	ldr	r3, [pc, #496]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 8012266:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801226a:	2b02      	cmp	r3, #2
 801226c:	d10c      	bne.n	8012288 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801226e:	4b7a      	ldr	r3, [pc, #488]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 8012270:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8012274:	f083 0301 	eor.w	r3, r3, #1
 8012278:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801227a:	2b00      	cmp	r3, #0
 801227c:	d004      	beq.n	8012288 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801227e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012284:	2301      	movs	r3, #1
 8012286:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012288:	7b3b      	ldrb	r3, [r7, #12]
 801228a:	2b03      	cmp	r3, #3
 801228c:	d030      	beq.n	80122f0 <LoRaMacMcpsRequest+0x104>
 801228e:	2b03      	cmp	r3, #3
 8012290:	dc3f      	bgt.n	8012312 <LoRaMacMcpsRequest+0x126>
 8012292:	2b00      	cmp	r3, #0
 8012294:	d002      	beq.n	801229c <LoRaMacMcpsRequest+0xb0>
 8012296:	2b01      	cmp	r3, #1
 8012298:	d015      	beq.n	80122c6 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801229a:	e03a      	b.n	8012312 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 801229c:	2301      	movs	r3, #1
 801229e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80122a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80122a6:	2202      	movs	r2, #2
 80122a8:	f362 1347 	bfi	r3, r2, #5, #3
 80122ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80122b0:	7c3b      	ldrb	r3, [r7, #16]
 80122b2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80122ba:	8b3b      	ldrh	r3, [r7, #24]
 80122bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80122be:	7ebb      	ldrb	r3, [r7, #26]
 80122c0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80122c4:	e026      	b.n	8012314 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80122c6:	2301      	movs	r3, #1
 80122c8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80122cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80122d0:	2204      	movs	r2, #4
 80122d2:	f362 1347 	bfi	r3, r2, #5, #3
 80122d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 80122da:	7c3b      	ldrb	r3, [r7, #16]
 80122dc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80122e4:	8b3b      	ldrh	r3, [r7, #24]
 80122e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 80122e8:	7ebb      	ldrb	r3, [r7, #26]
 80122ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80122ee:	e011      	b.n	8012314 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80122f0:	2301      	movs	r3, #1
 80122f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80122f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80122fa:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80122fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012306:	8abb      	ldrh	r3, [r7, #20]
 8012308:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 801230a:	7dbb      	ldrb	r3, [r7, #22]
 801230c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012310:	e000      	b.n	8012314 <LoRaMacMcpsRequest+0x128>
            break;
 8012312:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012314:	2302      	movs	r3, #2
 8012316:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801231a:	4b4f      	ldr	r3, [pc, #316]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 801231c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012320:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012324:	4b4c      	ldr	r3, [pc, #304]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 8012326:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801232a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801232e:	4611      	mov	r1, r2
 8012330:	4618      	mov	r0, r3
 8012332:	f002 f961 	bl	80145f8 <RegionGetPhyParam>
 8012336:	4603      	mov	r3, r0
 8012338:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801233c:	b25b      	sxtb	r3, r3
 801233e:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8012342:	4293      	cmp	r3, r2
 8012344:	bfb8      	it	lt
 8012346:	4613      	movlt	r3, r2
 8012348:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801234c:	4b42      	ldr	r3, [pc, #264]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 801234e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012352:	4a41      	ldr	r2, [pc, #260]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 8012354:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8012358:	4a3f      	ldr	r2, [pc, #252]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 801235a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801235e:	4618      	mov	r0, r3
 8012360:	f7fc fb1a 	bl	800e998 <CheckForMinimumAbpDatarate>
 8012364:	4603      	mov	r3, r0
 8012366:	2b00      	cmp	r3, #0
 8012368:	d002      	beq.n	8012370 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801236c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8012370:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012374:	2b00      	cmp	r3, #0
 8012376:	d05f      	beq.n	8012438 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012378:	4b37      	ldr	r3, [pc, #220]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 801237a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801237e:	f083 0301 	eor.w	r3, r3, #1
 8012382:	b2db      	uxtb	r3, r3
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10e      	bne.n	80123a6 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012388:	4b33      	ldr	r3, [pc, #204]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 801238a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801238e:	4a32      	ldr	r2, [pc, #200]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 8012390:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8012394:	4a30      	ldr	r2, [pc, #192]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 8012396:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801239a:	4618      	mov	r0, r3
 801239c:	f7fc fafc 	bl	800e998 <CheckForMinimumAbpDatarate>
 80123a0:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d01c      	beq.n	80123e0 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 80123a6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80123aa:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80123ae:	4b2a      	ldr	r3, [pc, #168]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 80123b0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80123b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80123b8:	4b27      	ldr	r3, [pc, #156]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 80123ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80123be:	f107 0120 	add.w	r1, r7, #32
 80123c2:	2205      	movs	r2, #5
 80123c4:	4618      	mov	r0, r3
 80123c6:	f002 f952 	bl	801466e <RegionVerify>
 80123ca:	4603      	mov	r3, r0
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d005      	beq.n	80123dc <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80123d0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80123d4:	4b20      	ldr	r3, [pc, #128]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 80123d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80123da:	e001      	b.n	80123e0 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80123dc:	2303      	movs	r3, #3
 80123de:	e032      	b.n	8012446 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80123e0:	4b1d      	ldr	r3, [pc, #116]	@ (8012458 <LoRaMacMcpsRequest+0x26c>)
 80123e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123e6:	4a1b      	ldr	r2, [pc, #108]	@ (8012454 <LoRaMacMcpsRequest+0x268>)
 80123e8:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 80123ec:	4611      	mov	r1, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fc fbbe 	bl	800eb70 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80123f4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80123f6:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80123fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80123fe:	78fb      	ldrb	r3, [r7, #3]
 8012400:	9300      	str	r3, [sp, #0]
 8012402:	4613      	mov	r3, r2
 8012404:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012406:	f7fd fb75 	bl	800faf4 <Send>
 801240a:	4603      	mov	r3, r0
 801240c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8012410:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10b      	bne.n	8012430 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012418:	7b3a      	ldrb	r2, [r7, #12]
 801241a:	4b0e      	ldr	r3, [pc, #56]	@ (8012454 <LoRaMacMcpsRequest+0x268>)
 801241c:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012420:	4a0c      	ldr	r2, [pc, #48]	@ (8012454 <LoRaMacMcpsRequest+0x268>)
 8012422:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012426:	f043 0301 	orr.w	r3, r3, #1
 801242a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 801242e:	e003      	b.n	8012438 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012430:	4b08      	ldr	r3, [pc, #32]	@ (8012454 <LoRaMacMcpsRequest+0x268>)
 8012432:	2200      	movs	r2, #0
 8012434:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012438:	4b06      	ldr	r3, [pc, #24]	@ (8012454 <LoRaMacMcpsRequest+0x268>)
 801243a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	611a      	str	r2, [r3, #16]

    return status;
 8012442:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012446:	4618      	mov	r0, r3
 8012448:	3740      	adds	r7, #64	@ 0x40
 801244a:	46bd      	mov	sp, r7
 801244c:	bdb0      	pop	{r4, r5, r7, pc}
 801244e:	bf00      	nop
 8012450:	20000a1c 	.word	0x20000a1c
 8012454:	200005dc 	.word	0x200005dc
 8012458:	20000b10 	.word	0x20000b10

0801245c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	4603      	mov	r3, r0
 8012464:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012466:	79fb      	ldrb	r3, [r7, #7]
 8012468:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801246a:	4b0d      	ldr	r3, [pc, #52]	@ (80124a0 <LoRaMacTestSetDutyCycleOn+0x44>)
 801246c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012470:	f107 010c 	add.w	r1, r7, #12
 8012474:	220f      	movs	r2, #15
 8012476:	4618      	mov	r0, r3
 8012478:	f002 f8f9 	bl	801466e <RegionVerify>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00a      	beq.n	8012498 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012482:	4a07      	ldr	r2, [pc, #28]	@ (80124a0 <LoRaMacTestSetDutyCycleOn+0x44>)
 8012484:	79fb      	ldrb	r3, [r7, #7]
 8012486:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801248a:	4a06      	ldr	r2, [pc, #24]	@ (80124a4 <LoRaMacTestSetDutyCycleOn+0x48>)
 801248c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8012490:	f043 0320 	orr.w	r3, r3, #32
 8012494:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 8012498:	bf00      	nop
 801249a:	3710      	adds	r7, #16
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	20000b10 	.word	0x20000b10
 80124a4:	200005dc 	.word	0x200005dc

080124a8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80124ac:	f7fe fe40 	bl	8011130 <LoRaMacStop>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d112      	bne.n	80124dc <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80124b6:	480b      	ldr	r0, [pc, #44]	@ (80124e4 <LoRaMacDeInitialization+0x3c>)
 80124b8:	f008 fc1c 	bl	801acf4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80124bc:	480a      	ldr	r0, [pc, #40]	@ (80124e8 <LoRaMacDeInitialization+0x40>)
 80124be:	f008 fc19 	bl	801acf4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80124c2:	480a      	ldr	r0, [pc, #40]	@ (80124ec <LoRaMacDeInitialization+0x44>)
 80124c4:	f008 fc16 	bl	801acf4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80124c8:	f000 f94a 	bl	8012760 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80124cc:	2000      	movs	r0, #0
 80124ce:	f7fd fe6f 	bl	80101b0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80124d2:	4b07      	ldr	r3, [pc, #28]	@ (80124f0 <LoRaMacDeInitialization+0x48>)
 80124d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124d6:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80124d8:	2300      	movs	r3, #0
 80124da:	e000      	b.n	80124de <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80124dc:	2301      	movs	r3, #1
    }
}
 80124de:	4618      	mov	r0, r3
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	20000944 	.word	0x20000944
 80124e8:	2000095c 	.word	0x2000095c
 80124ec:	20000974 	.word	0x20000974
 80124f0:	0801c9c4 	.word	0x0801c9c4

080124f4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b08c      	sub	sp, #48	@ 0x30
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
 8012500:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012502:	2300      	movs	r3, #0
 8012504:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	7b1b      	ldrb	r3, [r3, #12]
 801250c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	7b5b      	ldrb	r3, [r3, #13]
 8012514:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	7b9b      	ldrb	r3, [r3, #14]
 801251c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	685a      	ldr	r2, [r3, #4]
 8012524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012526:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	785b      	ldrb	r3, [r3, #1]
 801252c:	2b00      	cmp	r3, #0
 801252e:	f000 8088 	beq.w	8012642 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012532:	2302      	movs	r3, #2
 8012534:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	7bdb      	ldrb	r3, [r3, #15]
 801253c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	7c1b      	ldrb	r3, [r3, #16]
 8012544:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012548:	4611      	mov	r1, r2
 801254a:	4618      	mov	r0, r3
 801254c:	f002 f854 	bl	80145f8 <RegionGetPhyParam>
 8012550:	4603      	mov	r3, r0
 8012552:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801255a:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 801255e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012562:	4293      	cmp	r3, r2
 8012564:	bfb8      	it	lt
 8012566:	4613      	movlt	r3, r2
 8012568:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	68fa      	ldr	r2, [r7, #12]
 8012572:	8912      	ldrh	r2, [r2, #8]
 8012574:	4293      	cmp	r3, r2
 8012576:	d302      	bcc.n	801257e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012578:	2301      	movs	r3, #1
 801257a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	68fa      	ldr	r2, [r7, #12]
 8012584:	8912      	ldrh	r2, [r2, #8]
 8012586:	4611      	mov	r1, r2
 8012588:	68fa      	ldr	r2, [r7, #12]
 801258a:	8952      	ldrh	r2, [r2, #10]
 801258c:	440a      	add	r2, r1
 801258e:	4293      	cmp	r3, r2
 8012590:	d30f      	bcc.n	80125b2 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012592:	230a      	movs	r3, #10
 8012594:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	7c1b      	ldrb	r3, [r3, #16]
 801259c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80125a0:	4611      	mov	r1, r2
 80125a2:	4618      	mov	r0, r3
 80125a4:	f002 f828 	bl	80145f8 <RegionGetPhyParam>
 80125a8:	4603      	mov	r3, r0
 80125aa:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80125ac:	6a3b      	ldr	r3, [r7, #32]
 80125ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	8912      	ldrh	r2, [r2, #8]
 80125ba:	4611      	mov	r1, r2
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	8952      	ldrh	r2, [r2, #10]
 80125c0:	0052      	lsls	r2, r2, #1
 80125c2:	440a      	add	r2, r1
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d33c      	bcc.n	8012642 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	68fa      	ldr	r2, [r7, #12]
 80125ce:	8912      	ldrh	r2, [r2, #8]
 80125d0:	1a9b      	subs	r3, r3, r2
 80125d2:	68fa      	ldr	r2, [r7, #12]
 80125d4:	8952      	ldrh	r2, [r2, #10]
 80125d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80125da:	fb01 f202 	mul.w	r2, r1, r2
 80125de:	1a9b      	subs	r3, r3, r2
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d12e      	bne.n	8012642 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80125e4:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80125e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d110      	bne.n	8012612 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d009      	beq.n	801260c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80125f8:	2302      	movs	r3, #2
 80125fa:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	7c1b      	ldrb	r3, [r3, #16]
 8012600:	f107 0210 	add.w	r2, r7, #16
 8012604:	4611      	mov	r1, r2
 8012606:	4618      	mov	r0, r3
 8012608:	f002 f81f 	bl	801464a <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 801260c:	2301      	movs	r3, #1
 801260e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012612:	2321      	movs	r3, #33	@ 0x21
 8012614:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012618:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801261c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	7bdb      	ldrb	r3, [r3, #15]
 8012624:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	7c1b      	ldrb	r3, [r3, #16]
 801262c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f001 ffe0 	bl	80145f8 <RegionGetPhyParam>
 8012638:	4603      	mov	r3, r0
 801263a:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 801263c:	6a3b      	ldr	r3, [r7, #32]
 801263e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012648:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012650:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012658:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801265a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801265e:	4618      	mov	r0, r3
 8012660:	3730      	adds	r7, #48	@ 0x30
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012666:	b480      	push	{r7}
 8012668:	b085      	sub	sp, #20
 801266a:	af00      	add	r7, sp, #0
 801266c:	60f8      	str	r0, [r7, #12]
 801266e:	60b9      	str	r1, [r7, #8]
 8012670:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012672:	bf00      	nop
 8012674:	3714      	adds	r7, #20
 8012676:	46bd      	mov	sp, r7
 8012678:	bc80      	pop	{r7}
 801267a:	4770      	bx	lr

0801267c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	4603      	mov	r3, r0
 8012684:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012686:	bf00      	nop
 8012688:	370c      	adds	r7, #12
 801268a:	46bd      	mov	sp, r7
 801268c:	bc80      	pop	{r7}
 801268e:	4770      	bx	lr

08012690 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	4603      	mov	r3, r0
 8012698:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801269a:	bf00      	nop
 801269c:	370c      	adds	r7, #12
 801269e:	46bd      	mov	sp, r7
 80126a0:	bc80      	pop	{r7}
 80126a2:	4770      	bx	lr

080126a4 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	4603      	mov	r3, r0
 80126ac:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126ae:	bf00      	nop
 80126b0:	370c      	adds	r7, #12
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bc80      	pop	{r7}
 80126b6:	4770      	bx	lr

080126b8 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80126b8:	b480      	push	{r7}
 80126ba:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80126bc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126be:	4618      	mov	r0, r3
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bc80      	pop	{r7}
 80126c4:	4770      	bx	lr

080126c6 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80126c6:	b480      	push	{r7}
 80126c8:	b083      	sub	sp, #12
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126ce:	bf00      	nop
 80126d0:	370c      	adds	r7, #12
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bc80      	pop	{r7}
 80126d6:	4770      	bx	lr

080126d8 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80126d8:	b480      	push	{r7}
 80126da:	b083      	sub	sp, #12
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126e0:	bf00      	nop
 80126e2:	370c      	adds	r7, #12
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bc80      	pop	{r7}
 80126e8:	4770      	bx	lr

080126ea <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80126ea:	b480      	push	{r7}
 80126ec:	b083      	sub	sp, #12
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126f2:	bf00      	nop
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bc80      	pop	{r7}
 80126fa:	4770      	bx	lr

080126fc <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	460b      	mov	r3, r1
 8012706:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012708:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801270a:	4618      	mov	r0, r3
 801270c:	370c      	adds	r7, #12
 801270e:	46bd      	mov	sp, r7
 8012710:	bc80      	pop	{r7}
 8012712:	4770      	bx	lr

08012714 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012714:	b480      	push	{r7}
 8012716:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012718:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801271a:	4618      	mov	r0, r3
 801271c:	46bd      	mov	sp, r7
 801271e:	bc80      	pop	{r7}
 8012720:	4770      	bx	lr

08012722 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012722:	b480      	push	{r7}
 8012724:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012726:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012728:	4618      	mov	r0, r3
 801272a:	46bd      	mov	sp, r7
 801272c:	bc80      	pop	{r7}
 801272e:	4770      	bx	lr

08012730 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012730:	b480      	push	{r7}
 8012732:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012734:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012736:	4618      	mov	r0, r3
 8012738:	46bd      	mov	sp, r7
 801273a:	bc80      	pop	{r7}
 801273c:	4770      	bx	lr

0801273e <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801273e:	b480      	push	{r7}
 8012740:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012742:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012744:	4618      	mov	r0, r3
 8012746:	46bd      	mov	sp, r7
 8012748:	bc80      	pop	{r7}
 801274a:	4770      	bx	lr

0801274c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012756:	bf00      	nop
 8012758:	370c      	adds	r7, #12
 801275a:	46bd      	mov	sp, r7
 801275c:	bc80      	pop	{r7}
 801275e:	4770      	bx	lr

08012760 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012760:	b480      	push	{r7}
 8012762:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012764:	bf00      	nop
 8012766:	46bd      	mov	sp, r7
 8012768:	bc80      	pop	{r7}
 801276a:	4770      	bx	lr

0801276c <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801276c:	b480      	push	{r7}
 801276e:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012770:	bf00      	nop
 8012772:	46bd      	mov	sp, r7
 8012774:	bc80      	pop	{r7}
 8012776:	4770      	bx	lr

08012778 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	4603      	mov	r3, r0
 8012780:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012782:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012784:	4618      	mov	r0, r3
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	bc80      	pop	{r7}
 801278c:	4770      	bx	lr

0801278e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801278e:	b480      	push	{r7}
 8012790:	b083      	sub	sp, #12
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012796:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012798:	4618      	mov	r0, r3
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	bc80      	pop	{r7}
 80127a0:	4770      	bx	lr

080127a2 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80127a2:	b480      	push	{r7}
 80127a4:	b083      	sub	sp, #12
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80127aa:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bc80      	pop	{r7}
 80127b4:	4770      	bx	lr

080127b6 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80127b6:	b480      	push	{r7}
 80127b8:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127ba:	bf00      	nop
 80127bc:	46bd      	mov	sp, r7
 80127be:	bc80      	pop	{r7}
 80127c0:	4770      	bx	lr

080127c2 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80127c2:	b480      	push	{r7}
 80127c4:	b083      	sub	sp, #12
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	4603      	mov	r3, r0
 80127ca:	6039      	str	r1, [r7, #0]
 80127cc:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80127ce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bc80      	pop	{r7}
 80127d8:	4770      	bx	lr

080127da <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80127da:	b480      	push	{r7}
 80127dc:	b083      	sub	sp, #12
 80127de:	af00      	add	r7, sp, #0
 80127e0:	4603      	mov	r3, r0
 80127e2:	603a      	str	r2, [r7, #0]
 80127e4:	80fb      	strh	r3, [r7, #6]
 80127e6:	460b      	mov	r3, r1
 80127e8:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127ea:	bf00      	nop
 80127ec:	370c      	adds	r7, #12
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bc80      	pop	{r7}
 80127f2:	4770      	bx	lr

080127f4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80127f4:	b480      	push	{r7}
 80127f6:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127f8:	bf00      	nop
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bc80      	pop	{r7}
 80127fe:	4770      	bx	lr

08012800 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012808:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	bc80      	pop	{r7}
 8012812:	4770      	bx	lr

08012814 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801281c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801281e:	4618      	mov	r0, r3
 8012820:	370c      	adds	r7, #12
 8012822:	46bd      	mov	sp, r7
 8012824:	bc80      	pop	{r7}
 8012826:	4770      	bx	lr

08012828 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012828:	b480      	push	{r7}
 801282a:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801282c:	bf00      	nop
 801282e:	46bd      	mov	sp, r7
 8012830:	bc80      	pop	{r7}
 8012832:	4770      	bx	lr

08012834 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8012834:	b480      	push	{r7}
 8012836:	b083      	sub	sp, #12
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	460b      	mov	r3, r1
 801283e:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012840:	bf00      	nop
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	bc80      	pop	{r7}
 8012848:	4770      	bx	lr

0801284a <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801284a:	b480      	push	{r7}
 801284c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801284e:	bf00      	nop
 8012850:	46bd      	mov	sp, r7
 8012852:	bc80      	pop	{r7}
 8012854:	4770      	bx	lr

08012856 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012856:	b480      	push	{r7}
 8012858:	b085      	sub	sp, #20
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012862:	2300      	movs	r3, #0
 8012864:	81fb      	strh	r3, [r7, #14]
 8012866:	e00a      	b.n	801287e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012868:	89fb      	ldrh	r3, [r7, #14]
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	4413      	add	r3, r2
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d001      	beq.n	8012878 <IsSlotFree+0x22>
        {
            return false;
 8012874:	2300      	movs	r3, #0
 8012876:	e006      	b.n	8012886 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012878:	89fb      	ldrh	r3, [r7, #14]
 801287a:	3301      	adds	r3, #1
 801287c:	81fb      	strh	r3, [r7, #14]
 801287e:	89fb      	ldrh	r3, [r7, #14]
 8012880:	2b0f      	cmp	r3, #15
 8012882:	d9f1      	bls.n	8012868 <IsSlotFree+0x12>
        }
    }
    return true;
 8012884:	2301      	movs	r3, #1
}
 8012886:	4618      	mov	r0, r3
 8012888:	3714      	adds	r7, #20
 801288a:	46bd      	mov	sp, r7
 801288c:	bc80      	pop	{r7}
 801288e:	4770      	bx	lr

08012890 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012896:	2300      	movs	r3, #0
 8012898:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801289a:	e007      	b.n	80128ac <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801289c:	79fb      	ldrb	r3, [r7, #7]
 801289e:	3301      	adds	r3, #1
 80128a0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80128a2:	79fb      	ldrb	r3, [r7, #7]
 80128a4:	2b20      	cmp	r3, #32
 80128a6:	d101      	bne.n	80128ac <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80128a8:	2300      	movs	r3, #0
 80128aa:	e012      	b.n	80128d2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80128ac:	79fb      	ldrb	r3, [r7, #7]
 80128ae:	011b      	lsls	r3, r3, #4
 80128b0:	3308      	adds	r3, #8
 80128b2:	4a0a      	ldr	r2, [pc, #40]	@ (80128dc <MallocNewMacCommandSlot+0x4c>)
 80128b4:	4413      	add	r3, r2
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7ff ffcd 	bl	8012856 <IsSlotFree>
 80128bc:	4603      	mov	r3, r0
 80128be:	f083 0301 	eor.w	r3, r3, #1
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1e9      	bne.n	801289c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80128c8:	79fb      	ldrb	r3, [r7, #7]
 80128ca:	011b      	lsls	r3, r3, #4
 80128cc:	3308      	adds	r3, #8
 80128ce:	4a03      	ldr	r2, [pc, #12]	@ (80128dc <MallocNewMacCommandSlot+0x4c>)
 80128d0:	4413      	add	r3, r2
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3708      	adds	r7, #8
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	20001178 	.word	0x20001178

080128e0 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d101      	bne.n	80128f2 <FreeMacCommandSlot+0x12>
    {
        return false;
 80128ee:	2300      	movs	r3, #0
 80128f0:	e005      	b.n	80128fe <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80128f2:	2210      	movs	r2, #16
 80128f4:	2100      	movs	r1, #0
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f004 f8e4 	bl	8016ac4 <memset1>

    return true;
 80128fc:	2301      	movs	r3, #1
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012906:	b480      	push	{r7}
 8012908:	b083      	sub	sp, #12
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d101      	bne.n	8012918 <LinkedListInit+0x12>
    {
        return false;
 8012914:	2300      	movs	r3, #0
 8012916:	e006      	b.n	8012926 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2200      	movs	r2, #0
 801291c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2200      	movs	r2, #0
 8012922:	605a      	str	r2, [r3, #4]

    return true;
 8012924:	2301      	movs	r3, #1
}
 8012926:	4618      	mov	r0, r3
 8012928:	370c      	adds	r7, #12
 801292a:	46bd      	mov	sp, r7
 801292c:	bc80      	pop	{r7}
 801292e:	4770      	bx	lr

08012930 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
 8012938:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d002      	beq.n	8012946 <LinkedListAdd+0x16>
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d101      	bne.n	801294a <LinkedListAdd+0x1a>
    {
        return false;
 8012946:	2300      	movs	r3, #0
 8012948:	e015      	b.n	8012976 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d102      	bne.n	8012958 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	683a      	ldr	r2, [r7, #0]
 8012956:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d003      	beq.n	8012968 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	683a      	ldr	r2, [r7, #0]
 8012966:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	2200      	movs	r2, #0
 801296c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	683a      	ldr	r2, [r7, #0]
 8012972:	605a      	str	r2, [r3, #4]

    return true;
 8012974:	2301      	movs	r3, #1
}
 8012976:	4618      	mov	r0, r3
 8012978:	370c      	adds	r7, #12
 801297a:	46bd      	mov	sp, r7
 801297c:	bc80      	pop	{r7}
 801297e:	4770      	bx	lr

08012980 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <LinkedListGetPrevious+0x16>
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d101      	bne.n	801299a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012996:	2300      	movs	r3, #0
 8012998:	e016      	b.n	80129c8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80129a0:	683a      	ldr	r2, [r7, #0]
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d00c      	beq.n	80129c2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80129a8:	e002      	b.n	80129b0 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d007      	beq.n	80129c6 <LinkedListGetPrevious+0x46>
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	683a      	ldr	r2, [r7, #0]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d1f4      	bne.n	80129aa <LinkedListGetPrevious+0x2a>
 80129c0:	e001      	b.n	80129c6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80129c2:	2300      	movs	r3, #0
 80129c4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80129c6:	68fb      	ldr	r3, [r7, #12]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3714      	adds	r7, #20
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bc80      	pop	{r7}
 80129d0:	4770      	bx	lr

080129d2 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b084      	sub	sp, #16
 80129d6:	af00      	add	r7, sp, #0
 80129d8:	6078      	str	r0, [r7, #4]
 80129da:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d002      	beq.n	80129e8 <LinkedListRemove+0x16>
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d101      	bne.n	80129ec <LinkedListRemove+0x1a>
    {
        return false;
 80129e8:	2300      	movs	r3, #0
 80129ea:	e020      	b.n	8012a2e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80129ec:	6839      	ldr	r1, [r7, #0]
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f7ff ffc6 	bl	8012980 <LinkedListGetPrevious>
 80129f4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d103      	bne.n	8012a08 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	683a      	ldr	r2, [r7, #0]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d102      	bne.n	8012a18 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d003      	beq.n	8012a26 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]

    return true;
 8012a2c:	2301      	movs	r3, #1
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3710      	adds	r7, #16
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
	...

08012a38 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	4603      	mov	r3, r0
 8012a40:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012a42:	79fb      	ldrb	r3, [r7, #7]
 8012a44:	2b11      	cmp	r3, #17
 8012a46:	bf8c      	ite	hi
 8012a48:	2201      	movhi	r2, #1
 8012a4a:	2200      	movls	r2, #0
 8012a4c:	b2d2      	uxtb	r2, r2
 8012a4e:	2a00      	cmp	r2, #0
 8012a50:	d10d      	bne.n	8012a6e <IsSticky+0x36>
 8012a52:	4a0a      	ldr	r2, [pc, #40]	@ (8012a7c <IsSticky+0x44>)
 8012a54:	fa22 f303 	lsr.w	r3, r2, r3
 8012a58:	f003 0301 	and.w	r3, r3, #1
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	bf14      	ite	ne
 8012a60:	2301      	movne	r3, #1
 8012a62:	2300      	moveq	r3, #0
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d001      	beq.n	8012a6e <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e000      	b.n	8012a70 <IsSticky+0x38>
        default:
            return false;
 8012a6e:	2300      	movs	r3, #0
    }
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	370c      	adds	r7, #12
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bc80      	pop	{r7}
 8012a78:	4770      	bx	lr
 8012a7a:	bf00      	nop
 8012a7c:	00020720 	.word	0x00020720

08012a80 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8012a80:	b480      	push	{r7}
 8012a82:	b083      	sub	sp, #12
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	4603      	mov	r3, r0
 8012a88:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8012a8a:	2300      	movs	r3, #0
    }
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	370c      	adds	r7, #12
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bc80      	pop	{r7}
 8012a94:	4770      	bx	lr
	...

08012a98 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012a9c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	4804      	ldr	r0, [pc, #16]	@ (8012ab4 <LoRaMacCommandsInit+0x1c>)
 8012aa4:	f004 f80e 	bl	8016ac4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012aa8:	4802      	ldr	r0, [pc, #8]	@ (8012ab4 <LoRaMacCommandsInit+0x1c>)
 8012aaa:	f7ff ff2c 	bl	8012906 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	bd80      	pop	{r7, pc}
 8012ab4:	20001178 	.word	0x20001178

08012ab8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b086      	sub	sp, #24
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	4603      	mov	r3, r0
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	607a      	str	r2, [r7, #4]
 8012ac4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d101      	bne.n	8012ad0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012acc:	2301      	movs	r3, #1
 8012ace:	e03b      	b.n	8012b48 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012ad0:	f7ff fede 	bl	8012890 <MallocNewMacCommandSlot>
 8012ad4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d101      	bne.n	8012ae0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012adc:	2302      	movs	r3, #2
 8012ade:	e033      	b.n	8012b48 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012ae0:	6979      	ldr	r1, [r7, #20]
 8012ae2:	481b      	ldr	r0, [pc, #108]	@ (8012b50 <LoRaMacCommandsAddCmd+0x98>)
 8012ae4:	f7ff ff24 	bl	8012930 <LinkedListAdd>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	f083 0301 	eor.w	r3, r3, #1
 8012aee:	b2db      	uxtb	r3, r3
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d001      	beq.n	8012af8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012af4:	2305      	movs	r3, #5
 8012af6:	e027      	b.n	8012b48 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	7bfa      	ldrb	r2, [r7, #15]
 8012afc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	3305      	adds	r3, #5
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	b292      	uxth	r2, r2
 8012b0c:	68b9      	ldr	r1, [r7, #8]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f003 ff9d 	bl	8016a4e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012b14:	7bfb      	ldrb	r3, [r7, #15]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7ff ff8e 	bl	8012a38 <IsSticky>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	461a      	mov	r2, r3
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8012b24:	7bfb      	ldrb	r3, [r7, #15]
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7ff ffaa 	bl	8012a80 <IsConfirmationRequired>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	461a      	mov	r2, r3
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012b34:	4b06      	ldr	r3, [pc, #24]	@ (8012b50 <LoRaMacCommandsAddCmd+0x98>)
 8012b36:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	3301      	adds	r3, #1
 8012b40:	4a03      	ldr	r2, [pc, #12]	@ (8012b50 <LoRaMacCommandsAddCmd+0x98>)
 8012b42:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012b46:	2300      	movs	r3, #0
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3718      	adds	r7, #24
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	20001178 	.word	0x20001178

08012b54 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d101      	bne.n	8012b66 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012b62:	2301      	movs	r3, #1
 8012b64:	e021      	b.n	8012baa <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012b66:	6879      	ldr	r1, [r7, #4]
 8012b68:	4812      	ldr	r0, [pc, #72]	@ (8012bb4 <LoRaMacCommandsRemoveCmd+0x60>)
 8012b6a:	f7ff ff32 	bl	80129d2 <LinkedListRemove>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	f083 0301 	eor.w	r3, r3, #1
 8012b74:	b2db      	uxtb	r3, r3
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d001      	beq.n	8012b7e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012b7a:	2303      	movs	r3, #3
 8012b7c:	e015      	b.n	8012baa <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8012bb4 <LoRaMacCommandsRemoveCmd+0x60>)
 8012b80:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	689b      	ldr	r3, [r3, #8]
 8012b88:	1ad3      	subs	r3, r2, r3
 8012b8a:	3b01      	subs	r3, #1
 8012b8c:	4a09      	ldr	r2, [pc, #36]	@ (8012bb4 <LoRaMacCommandsRemoveCmd+0x60>)
 8012b8e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f7ff fea4 	bl	80128e0 <FreeMacCommandSlot>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	f083 0301 	eor.w	r3, r3, #1
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012ba4:	2305      	movs	r3, #5
 8012ba6:	e000      	b.n	8012baa <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012ba8:	2300      	movs	r3, #0
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3708      	adds	r7, #8
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	20001178 	.word	0x20001178

08012bb8 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	6039      	str	r1, [r7, #0]
 8012bc2:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8012c00 <LoRaMacCommandsGetCmd+0x48>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8012bca:	e002      	b.n	8012bd2 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d004      	beq.n	8012be2 <LoRaMacCommandsGetCmd+0x2a>
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	791b      	ldrb	r3, [r3, #4]
 8012bdc:	79fa      	ldrb	r2, [r7, #7]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d1f4      	bne.n	8012bcc <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d101      	bne.n	8012bf2 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012bee:	2303      	movs	r3, #3
 8012bf0:	e000      	b.n	8012bf4 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8012bf2:	2300      	movs	r3, #0
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bc80      	pop	{r7}
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	20001178 	.word	0x20001178

08012c04 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8012c48 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012c10:	e012      	b.n	8012c38 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	7b1b      	ldrb	r3, [r3, #12]
 8012c16:	f083 0301 	eor.w	r3, r3, #1
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d008      	beq.n	8012c32 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7ff ff94 	bl	8012b54 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	607b      	str	r3, [r7, #4]
 8012c30:	e002      	b.n	8012c38 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d1e9      	bne.n	8012c12 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012c3e:	2300      	movs	r3, #0
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	20001178 	.word	0x20001178

08012c4c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012c52:	4b13      	ldr	r3, [pc, #76]	@ (8012ca0 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012c58:	e01a      	b.n	8012c90 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	791b      	ldrb	r3, [r3, #4]
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7ff fee7 	bl	8012a38 <IsSticky>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00d      	beq.n	8012c8c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	791b      	ldrb	r3, [r3, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7ff ff03 	bl	8012a80 <IsConfirmationRequired>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	f083 0301 	eor.w	r3, r3, #1
 8012c80:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d002      	beq.n	8012c8c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f7ff ff64 	bl	8012b54 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d1e1      	bne.n	8012c5a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012c96:	2300      	movs	r3, #0
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	20001178 	.word	0x20001178

08012ca4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d101      	bne.n	8012cb6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e005      	b.n	8012cc2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012cb6:	4b05      	ldr	r3, [pc, #20]	@ (8012ccc <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012cb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	370c      	adds	r7, #12
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bc80      	pop	{r7}
 8012cca:	4770      	bx	lr
 8012ccc:	20001178 	.word	0x20001178

08012cd0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b088      	sub	sp, #32
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	60f8      	str	r0, [r7, #12]
 8012cd8:	60b9      	str	r1, [r7, #8]
 8012cda:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012cdc:	4b25      	ldr	r3, [pc, #148]	@ (8012d74 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d002      	beq.n	8012cf2 <LoRaMacCommandsSerializeCmds+0x22>
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d126      	bne.n	8012d40 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	e039      	b.n	8012d6a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012cf6:	7efb      	ldrb	r3, [r7, #27]
 8012cf8:	68fa      	ldr	r2, [r7, #12]
 8012cfa:	1ad2      	subs	r2, r2, r3
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	689b      	ldr	r3, [r3, #8]
 8012d00:	3301      	adds	r3, #1
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d320      	bcc.n	8012d48 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012d06:	7efb      	ldrb	r3, [r7, #27]
 8012d08:	1c5a      	adds	r2, r3, #1
 8012d0a:	76fa      	strb	r2, [r7, #27]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4413      	add	r3, r2
 8012d12:	69fa      	ldr	r2, [r7, #28]
 8012d14:	7912      	ldrb	r2, [r2, #4]
 8012d16:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012d18:	7efb      	ldrb	r3, [r7, #27]
 8012d1a:	687a      	ldr	r2, [r7, #4]
 8012d1c:	18d0      	adds	r0, r2, r3
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	1d59      	adds	r1, r3, #5
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	689b      	ldr	r3, [r3, #8]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	461a      	mov	r2, r3
 8012d2a:	f003 fe90 	bl	8016a4e <memcpy1>
            itr += curElement->PayloadSize;
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	689b      	ldr	r3, [r3, #8]
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	7efb      	ldrb	r3, [r7, #27]
 8012d36:	4413      	add	r3, r2
 8012d38:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d1d7      	bne.n	8012cf6 <LoRaMacCommandsSerializeCmds+0x26>
 8012d46:	e009      	b.n	8012d5c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012d48:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012d4a:	e007      	b.n	8012d5c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012d52:	69f8      	ldr	r0, [r7, #28]
 8012d54:	f7ff fefe 	bl	8012b54 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d1f4      	bne.n	8012d4c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012d62:	68b8      	ldr	r0, [r7, #8]
 8012d64:	f7ff ff9e 	bl	8012ca4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012d68:	2300      	movs	r3, #0
}
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3720      	adds	r7, #32
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	20001178 	.word	0x20001178

08012d78 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b085      	sub	sp, #20
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	4603      	mov	r3, r0
 8012d80:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012d82:	2300      	movs	r3, #0
 8012d84:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012d86:	79fb      	ldrb	r3, [r7, #7]
 8012d88:	3b02      	subs	r3, #2
 8012d8a:	2b11      	cmp	r3, #17
 8012d8c:	d850      	bhi.n	8012e30 <LoRaMacCommandsGetCmdSize+0xb8>
 8012d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8012d94 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d94:	08012ddd 	.word	0x08012ddd
 8012d98:	08012de3 	.word	0x08012de3
 8012d9c:	08012de9 	.word	0x08012de9
 8012da0:	08012def 	.word	0x08012def
 8012da4:	08012df5 	.word	0x08012df5
 8012da8:	08012dfb 	.word	0x08012dfb
 8012dac:	08012e01 	.word	0x08012e01
 8012db0:	08012e07 	.word	0x08012e07
 8012db4:	08012e0d 	.word	0x08012e0d
 8012db8:	08012e31 	.word	0x08012e31
 8012dbc:	08012e31 	.word	0x08012e31
 8012dc0:	08012e13 	.word	0x08012e13
 8012dc4:	08012e31 	.word	0x08012e31
 8012dc8:	08012e31 	.word	0x08012e31
 8012dcc:	08012e19 	.word	0x08012e19
 8012dd0:	08012e1f 	.word	0x08012e1f
 8012dd4:	08012e25 	.word	0x08012e25
 8012dd8:	08012e2b 	.word	0x08012e2b
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012ddc:	2303      	movs	r3, #3
 8012dde:	73fb      	strb	r3, [r7, #15]
            break;
 8012de0:	e027      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012de2:	2305      	movs	r3, #5
 8012de4:	73fb      	strb	r3, [r7, #15]
            break;
 8012de6:	e024      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012de8:	2302      	movs	r3, #2
 8012dea:	73fb      	strb	r3, [r7, #15]
            break;
 8012dec:	e021      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012dee:	2305      	movs	r3, #5
 8012df0:	73fb      	strb	r3, [r7, #15]
            break;
 8012df2:	e01e      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012df4:	2301      	movs	r3, #1
 8012df6:	73fb      	strb	r3, [r7, #15]
            break;
 8012df8:	e01b      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012dfa:	2306      	movs	r3, #6
 8012dfc:	73fb      	strb	r3, [r7, #15]
            break;
 8012dfe:	e018      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012e00:	2302      	movs	r3, #2
 8012e02:	73fb      	strb	r3, [r7, #15]
            break;
 8012e04:	e015      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012e06:	2302      	movs	r3, #2
 8012e08:	73fb      	strb	r3, [r7, #15]
            break;
 8012e0a:	e012      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012e0c:	2305      	movs	r3, #5
 8012e0e:	73fb      	strb	r3, [r7, #15]
            break;
 8012e10:	e00f      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012e12:	2306      	movs	r3, #6
 8012e14:	73fb      	strb	r3, [r7, #15]
            break;
 8012e16:	e00c      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012e18:	2301      	movs	r3, #1
 8012e1a:	73fb      	strb	r3, [r7, #15]
            break;
 8012e1c:	e009      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012e1e:	2305      	movs	r3, #5
 8012e20:	73fb      	strb	r3, [r7, #15]
            break;
 8012e22:	e006      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012e24:	2304      	movs	r3, #4
 8012e26:	73fb      	strb	r3, [r7, #15]
            break;
 8012e28:	e003      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012e2a:	2304      	movs	r3, #4
 8012e2c:	73fb      	strb	r3, [r7, #15]
            break;
 8012e2e:	e000      	b.n	8012e32 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012e30:	bf00      	nop
        }
    }
    return cidSize;
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3714      	adds	r7, #20
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bc80      	pop	{r7}
 8012e3c:	4770      	bx	lr
 8012e3e:	bf00      	nop

08012e40 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	4a07      	ldr	r2, [pc, #28]	@ (8012e68 <IncreaseBufferPointer+0x28>)
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d102      	bne.n	8012e56 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e50:	4b06      	ldr	r3, [pc, #24]	@ (8012e6c <IncreaseBufferPointer+0x2c>)
 8012e52:	607b      	str	r3, [r7, #4]
 8012e54:	e002      	b.n	8012e5c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	3304      	adds	r3, #4
 8012e5a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012e5c:	687b      	ldr	r3, [r7, #4]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	370c      	adds	r7, #12
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bc80      	pop	{r7}
 8012e66:	4770      	bx	lr
 8012e68:	200013a0 	.word	0x200013a0
 8012e6c:	20001390 	.word	0x20001390

08012e70 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	4603      	mov	r3, r0
 8012e78:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012e7a:	79fb      	ldrb	r3, [r7, #7]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d101      	bne.n	8012e84 <IsListEmpty+0x14>
    {
        return true;
 8012e80:	2301      	movs	r3, #1
 8012e82:	e000      	b.n	8012e86 <IsListEmpty+0x16>
    }
    return false;
 8012e84:	2300      	movs	r3, #0
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	370c      	adds	r7, #12
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bc80      	pop	{r7}
 8012e8e:	4770      	bx	lr

08012e90 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	4603      	mov	r3, r0
 8012e98:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012e9a:	79fb      	ldrb	r3, [r7, #7]
 8012e9c:	2b04      	cmp	r3, #4
 8012e9e:	d901      	bls.n	8012ea4 <IsListFull+0x14>
    {
        return true;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	e000      	b.n	8012ea6 <IsListFull+0x16>
    }
    return false;
 8012ea4:	2300      	movs	r3, #0
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	370c      	adds	r7, #12
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bc80      	pop	{r7}
 8012eae:	4770      	bx	lr

08012eb0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
 8012ebc:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012ec2:	4b13      	ldr	r3, [pc, #76]	@ (8012f10 <GetElement+0x60>)
 8012ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7ff ffd1 	bl	8012e70 <IsListEmpty>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <GetElement+0x28>
    {
        return NULL;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	e017      	b.n	8012f08 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012ed8:	2300      	movs	r3, #0
 8012eda:	74fb      	strb	r3, [r7, #19]
 8012edc:	e00d      	b.n	8012efa <GetElement+0x4a>
    {
        if( element->Request == request )
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	781b      	ldrb	r3, [r3, #0]
 8012ee2:	7bfa      	ldrb	r2, [r7, #15]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d101      	bne.n	8012eec <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	e00d      	b.n	8012f08 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012eec:	6978      	ldr	r0, [r7, #20]
 8012eee:	f7ff ffa7 	bl	8012e40 <IncreaseBufferPointer>
 8012ef2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012ef4:	7cfb      	ldrb	r3, [r7, #19]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	74fb      	strb	r3, [r7, #19]
 8012efa:	4b05      	ldr	r3, [pc, #20]	@ (8012f10 <GetElement+0x60>)
 8012efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f00:	7cfa      	ldrb	r2, [r7, #19]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d3eb      	bcc.n	8012ede <GetElement+0x2e>
    }

    return NULL;
 8012f06:	2300      	movs	r3, #0
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3718      	adds	r7, #24
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	20001384 	.word	0x20001384

08012f14 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8012f50 <LoRaMacConfirmQueueInit+0x3c>)
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012f22:	4b0b      	ldr	r3, [pc, #44]	@ (8012f50 <LoRaMacConfirmQueueInit+0x3c>)
 8012f24:	2200      	movs	r2, #0
 8012f26:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012f2a:	4b09      	ldr	r3, [pc, #36]	@ (8012f50 <LoRaMacConfirmQueueInit+0x3c>)
 8012f2c:	4a09      	ldr	r2, [pc, #36]	@ (8012f54 <LoRaMacConfirmQueueInit+0x40>)
 8012f2e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012f30:	4b07      	ldr	r3, [pc, #28]	@ (8012f50 <LoRaMacConfirmQueueInit+0x3c>)
 8012f32:	4a08      	ldr	r2, [pc, #32]	@ (8012f54 <LoRaMacConfirmQueueInit+0x40>)
 8012f34:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012f36:	2214      	movs	r2, #20
 8012f38:	21ff      	movs	r1, #255	@ 0xff
 8012f3a:	4806      	ldr	r0, [pc, #24]	@ (8012f54 <LoRaMacConfirmQueueInit+0x40>)
 8012f3c:	f003 fdc2 	bl	8016ac4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012f40:	4b03      	ldr	r3, [pc, #12]	@ (8012f50 <LoRaMacConfirmQueueInit+0x3c>)
 8012f42:	2201      	movs	r2, #1
 8012f44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8012f48:	bf00      	nop
 8012f4a:	3708      	adds	r7, #8
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}
 8012f50:	20001384 	.word	0x20001384
 8012f54:	20001390 	.word	0x20001390

08012f58 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012f60:	4b19      	ldr	r3, [pc, #100]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ff ff92 	bl	8012e90 <IsListFull>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d001      	beq.n	8012f76 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012f72:	2300      	movs	r3, #0
 8012f74:	e024      	b.n	8012fc0 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012f76:	4b14      	ldr	r3, [pc, #80]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012f78:	689b      	ldr	r3, [r3, #8]
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	7812      	ldrb	r2, [r2, #0]
 8012f7e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012f80:	4b11      	ldr	r3, [pc, #68]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012f82:	689b      	ldr	r3, [r3, #8]
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	7852      	ldrb	r2, [r2, #1]
 8012f88:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012f8c:	689b      	ldr	r3, [r3, #8]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	78d2      	ldrb	r2, [r2, #3]
 8012f92:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8012f94:	4b0c      	ldr	r3, [pc, #48]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	687a      	ldr	r2, [r7, #4]
 8012f9a:	7892      	ldrb	r2, [r2, #2]
 8012f9c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	b2da      	uxtb	r2, r3
 8012fa8:	4b07      	ldr	r3, [pc, #28]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012faa:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012fae:	4b06      	ldr	r3, [pc, #24]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012fb0:	689b      	ldr	r3, [r3, #8]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7ff ff44 	bl	8012e40 <IncreaseBufferPointer>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	4a03      	ldr	r2, [pc, #12]	@ (8012fc8 <LoRaMacConfirmQueueAdd+0x70>)
 8012fbc:	6093      	str	r3, [r2, #8]

    return true;
 8012fbe:	2301      	movs	r3, #1
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3708      	adds	r7, #8
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	20001384 	.word	0x20001384

08012fcc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012fd0:	4b0e      	ldr	r3, [pc, #56]	@ (801300c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7ff ff4a 	bl	8012e70 <IsListEmpty>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d001      	beq.n	8012fe6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	e010      	b.n	8013008 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012fe6:	4b09      	ldr	r3, [pc, #36]	@ (801300c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fec:	3b01      	subs	r3, #1
 8012fee:	b2da      	uxtb	r2, r3
 8012ff0:	4b06      	ldr	r3, [pc, #24]	@ (801300c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ff2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012ff6:	4b05      	ldr	r3, [pc, #20]	@ (801300c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7ff ff20 	bl	8012e40 <IncreaseBufferPointer>
 8013000:	4603      	mov	r3, r0
 8013002:	4a02      	ldr	r2, [pc, #8]	@ (801300c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013004:	6053      	str	r3, [r2, #4]

    return true;
 8013006:	2301      	movs	r3, #1
}
 8013008:	4618      	mov	r0, r3
 801300a:	bd80      	pop	{r7, pc}
 801300c:	20001384 	.word	0x20001384

08013010 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	4603      	mov	r3, r0
 8013018:	460a      	mov	r2, r1
 801301a:	71fb      	strb	r3, [r7, #7]
 801301c:	4613      	mov	r3, r2
 801301e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013020:	2300      	movs	r3, #0
 8013022:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013024:	4b10      	ldr	r3, [pc, #64]	@ (8013068 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013026:	f893 3020 	ldrb.w	r3, [r3, #32]
 801302a:	4618      	mov	r0, r3
 801302c:	f7ff ff20 	bl	8012e70 <IsListEmpty>
 8013030:	4603      	mov	r3, r0
 8013032:	f083 0301 	eor.w	r3, r3, #1
 8013036:	b2db      	uxtb	r3, r3
 8013038:	2b00      	cmp	r3, #0
 801303a:	d011      	beq.n	8013060 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801303c:	4b0a      	ldr	r3, [pc, #40]	@ (8013068 <LoRaMacConfirmQueueSetStatus+0x58>)
 801303e:	6859      	ldr	r1, [r3, #4]
 8013040:	4b09      	ldr	r3, [pc, #36]	@ (8013068 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013042:	689a      	ldr	r2, [r3, #8]
 8013044:	79bb      	ldrb	r3, [r7, #6]
 8013046:	4618      	mov	r0, r3
 8013048:	f7ff ff32 	bl	8012eb0 <GetElement>
 801304c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d005      	beq.n	8013060 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	79fa      	ldrb	r2, [r7, #7]
 8013058:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2201      	movs	r2, #1
 801305e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013060:	bf00      	nop
 8013062:	3710      	adds	r7, #16
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	20001384 	.word	0x20001384

0801306c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b084      	sub	sp, #16
 8013070:	af00      	add	r7, sp, #0
 8013072:	4603      	mov	r3, r0
 8013074:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013076:	2300      	movs	r3, #0
 8013078:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801307a:	4b10      	ldr	r3, [pc, #64]	@ (80130bc <LoRaMacConfirmQueueGetStatus+0x50>)
 801307c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013080:	4618      	mov	r0, r3
 8013082:	f7ff fef5 	bl	8012e70 <IsListEmpty>
 8013086:	4603      	mov	r3, r0
 8013088:	f083 0301 	eor.w	r3, r3, #1
 801308c:	b2db      	uxtb	r3, r3
 801308e:	2b00      	cmp	r3, #0
 8013090:	d00e      	beq.n	80130b0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013092:	4b0a      	ldr	r3, [pc, #40]	@ (80130bc <LoRaMacConfirmQueueGetStatus+0x50>)
 8013094:	6859      	ldr	r1, [r3, #4]
 8013096:	4b09      	ldr	r3, [pc, #36]	@ (80130bc <LoRaMacConfirmQueueGetStatus+0x50>)
 8013098:	689a      	ldr	r2, [r3, #8]
 801309a:	79fb      	ldrb	r3, [r7, #7]
 801309c:	4618      	mov	r0, r3
 801309e:	f7ff ff07 	bl	8012eb0 <GetElement>
 80130a2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d002      	beq.n	80130b0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	785b      	ldrb	r3, [r3, #1]
 80130ae:	e000      	b.n	80130b2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80130b0:	2301      	movs	r3, #1
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3710      	adds	r7, #16
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	20001384 	.word	0x20001384

080130c0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	4603      	mov	r3, r0
 80130c8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80130ca:	4b16      	ldr	r3, [pc, #88]	@ (8013124 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80130d0:	4a14      	ldr	r2, [pc, #80]	@ (8013124 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80130d2:	79fb      	ldrb	r3, [r7, #7]
 80130d4:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80130d8:	4b12      	ldr	r3, [pc, #72]	@ (8013124 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80130da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7ff fec6 	bl	8012e70 <IsListEmpty>
 80130e4:	4603      	mov	r3, r0
 80130e6:	f083 0301 	eor.w	r3, r3, #1
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d015      	beq.n	801311c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	79fa      	ldrb	r2, [r7, #7]
 80130f4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	78db      	ldrb	r3, [r3, #3]
 80130fa:	f083 0301 	eor.w	r3, r3, #1
 80130fe:	b2db      	uxtb	r3, r3
 8013100:	2b00      	cmp	r3, #0
 8013102:	d002      	beq.n	801310a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2201      	movs	r2, #1
 8013108:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f7ff fe98 	bl	8012e40 <IncreaseBufferPointer>
 8013110:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013112:	4b04      	ldr	r3, [pc, #16]	@ (8013124 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013114:	689b      	ldr	r3, [r3, #8]
 8013116:	68fa      	ldr	r2, [r7, #12]
 8013118:	429a      	cmp	r2, r3
 801311a:	d1e9      	bne.n	80130f0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801311c:	bf00      	nop
 801311e:	3710      	adds	r7, #16
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	20001384 	.word	0x20001384

08013128 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	4603      	mov	r3, r0
 8013130:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013132:	4b09      	ldr	r3, [pc, #36]	@ (8013158 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013134:	6859      	ldr	r1, [r3, #4]
 8013136:	4b08      	ldr	r3, [pc, #32]	@ (8013158 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013138:	689a      	ldr	r2, [r3, #8]
 801313a:	79fb      	ldrb	r3, [r7, #7]
 801313c:	4618      	mov	r0, r3
 801313e:	f7ff feb7 	bl	8012eb0 <GetElement>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d001      	beq.n	801314c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013148:	2301      	movs	r3, #1
 801314a:	e000      	b.n	801314e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801314c:	2300      	movs	r3, #0
}
 801314e:	4618      	mov	r0, r3
 8013150:	3708      	adds	r7, #8
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	20001384 	.word	0x20001384

0801315c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013164:	4b25      	ldr	r3, [pc, #148]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013166:	f893 3020 	ldrb.w	r3, [r3, #32]
 801316a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801316c:	2300      	movs	r3, #0
 801316e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8013170:	f107 0308 	add.w	r3, r7, #8
 8013174:	2204      	movs	r2, #4
 8013176:	2100      	movs	r1, #0
 8013178:	4618      	mov	r0, r3
 801317a:	f003 fca3 	bl	8016ac4 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801317e:	2300      	movs	r3, #0
 8013180:	73fb      	strb	r3, [r7, #15]
 8013182:	e032      	b.n	80131ea <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013184:	4b1d      	ldr	r3, [pc, #116]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	781a      	ldrb	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801318e:	4b1b      	ldr	r3, [pc, #108]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	785a      	ldrb	r2, [r3, #1]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013198:	4b18      	ldr	r3, [pc, #96]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	789b      	ldrb	r3, [r3, #2]
 801319e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80131a0:	7b7b      	ldrb	r3, [r7, #13]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d005      	beq.n	80131b2 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80131a6:	4b15      	ldr	r3, [pc, #84]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	4798      	blx	r3
 80131b0:	e00b      	b.n	80131ca <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80131b2:	4b12      	ldr	r3, [pc, #72]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80131ba:	4b10      	ldr	r3, [pc, #64]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	785b      	ldrb	r3, [r3, #1]
 80131c0:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80131c2:	4b0e      	ldr	r3, [pc, #56]	@ (80131fc <LoRaMacConfirmQueueHandleCb+0xa0>)
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	78db      	ldrb	r3, [r3, #3]
 80131c8:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80131ca:	f7ff feff 	bl	8012fcc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80131ce:	7b7b      	ldrb	r3, [r7, #13]
 80131d0:	f083 0301 	eor.w	r3, r3, #1
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d004      	beq.n	80131e4 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80131da:	f107 0308 	add.w	r3, r7, #8
 80131de:	4618      	mov	r0, r3
 80131e0:	f7ff feba 	bl	8012f58 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80131e4:	7bfb      	ldrb	r3, [r7, #15]
 80131e6:	3301      	adds	r3, #1
 80131e8:	73fb      	strb	r3, [r7, #15]
 80131ea:	7bfa      	ldrb	r2, [r7, #15]
 80131ec:	7bbb      	ldrb	r3, [r7, #14]
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d3c8      	bcc.n	8013184 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80131f2:	bf00      	nop
 80131f4:	bf00      	nop
 80131f6:	3710      	adds	r7, #16
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	20001384 	.word	0x20001384

08013200 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013200:	b480      	push	{r7}
 8013202:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013204:	4b03      	ldr	r3, [pc, #12]	@ (8013214 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013206:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801320a:	4618      	mov	r0, r3
 801320c:	46bd      	mov	sp, r7
 801320e:	bc80      	pop	{r7}
 8013210:	4770      	bx	lr
 8013212:	bf00      	nop
 8013214:	20001384 	.word	0x20001384

08013218 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801321c:	4b06      	ldr	r3, [pc, #24]	@ (8013238 <LoRaMacConfirmQueueIsFull+0x20>)
 801321e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013222:	4618      	mov	r0, r3
 8013224:	f7ff fe34 	bl	8012e90 <IsListFull>
 8013228:	4603      	mov	r3, r0
 801322a:	2b00      	cmp	r3, #0
 801322c:	d001      	beq.n	8013232 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801322e:	2301      	movs	r3, #1
 8013230:	e000      	b.n	8013234 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013232:	2300      	movs	r3, #0
    }
}
 8013234:	4618      	mov	r0, r3
 8013236:	bd80      	pop	{r7, pc}
 8013238:	20001384 	.word	0x20001384

0801323c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b08e      	sub	sp, #56	@ 0x38
 8013240:	af00      	add	r7, sp, #0
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	607b      	str	r3, [r7, #4]
 8013246:	460b      	mov	r3, r1
 8013248:	817b      	strh	r3, [r7, #10]
 801324a:	4613      	mov	r3, r2
 801324c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d101      	bne.n	8013258 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013254:	2309      	movs	r3, #9
 8013256:	e084      	b.n	8013362 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801325e:	2301      	movs	r3, #1
 8013260:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8013262:	f107 0320 	add.w	r3, r7, #32
 8013266:	2200      	movs	r2, #0
 8013268:	601a      	str	r2, [r3, #0]
 801326a:	605a      	str	r2, [r3, #4]
 801326c:	609a      	str	r2, [r3, #8]
 801326e:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8013270:	f107 0310 	add.w	r3, r7, #16
 8013274:	2200      	movs	r2, #0
 8013276:	601a      	str	r2, [r3, #0]
 8013278:	605a      	str	r2, [r3, #4]
 801327a:	609a      	str	r2, [r3, #8]
 801327c:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 801327e:	2301      	movs	r3, #1
 8013280:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013282:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013286:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	b2db      	uxtb	r3, r3
 801328c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	0a1b      	lsrs	r3, r3, #8
 8013292:	b2db      	uxtb	r3, r3
 8013294:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	0c1b      	lsrs	r3, r3, #16
 801329a:	b2db      	uxtb	r3, r3
 801329c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	0e1b      	lsrs	r3, r3, #24
 80132a2:	b2db      	uxtb	r3, r3
 80132a4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80132a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80132ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132ae:	0a1b      	lsrs	r3, r3, #8
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80132b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132b6:	0c1b      	lsrs	r3, r3, #16
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80132bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132be:	0e1b      	lsrs	r3, r3, #24
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80132c4:	e048      	b.n	8013358 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 80132c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80132c8:	b2db      	uxtb	r3, r3
 80132ca:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80132cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80132ce:	3301      	adds	r3, #1
 80132d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80132d2:	f107 0320 	add.w	r3, r7, #32
 80132d6:	7a7a      	ldrb	r2, [r7, #9]
 80132d8:	f107 0010 	add.w	r0, r7, #16
 80132dc:	2110      	movs	r1, #16
 80132de:	f7f8 fba3 	bl	800ba28 <SecureElementAesEncrypt>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d001      	beq.n	80132ec <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132e8:	230e      	movs	r3, #14
 80132ea:	e03a      	b.n	8013362 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80132ec:	2300      	movs	r3, #0
 80132ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80132f2:	e01e      	b.n	8013332 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80132f4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80132f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80132fc:	4413      	add	r3, r2
 80132fe:	461a      	mov	r2, r3
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	4413      	add	r3, r2
 8013304:	7819      	ldrb	r1, [r3, #0]
 8013306:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801330a:	3338      	adds	r3, #56	@ 0x38
 801330c:	443b      	add	r3, r7
 801330e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013312:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8013316:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801331a:	4403      	add	r3, r0
 801331c:	4618      	mov	r0, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	4403      	add	r3, r0
 8013322:	404a      	eors	r2, r1
 8013324:	b2d2      	uxtb	r2, r2
 8013326:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013328:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801332c:	3301      	adds	r3, #1
 801332e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013332:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013336:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801333a:	2a10      	cmp	r2, #16
 801333c:	bfa8      	it	ge
 801333e:	2210      	movge	r2, #16
 8013340:	b212      	sxth	r2, r2
 8013342:	4293      	cmp	r3, r2
 8013344:	dbd6      	blt.n	80132f4 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 8013346:	897b      	ldrh	r3, [r7, #10]
 8013348:	3b10      	subs	r3, #16
 801334a:	b29b      	uxth	r3, r3
 801334c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801334e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013352:	3310      	adds	r3, #16
 8013354:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8013358:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801335c:	2b00      	cmp	r3, #0
 801335e:	dcb2      	bgt.n	80132c6 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013360:	2300      	movs	r3, #0
}
 8013362:	4618      	mov	r0, r3
 8013364:	3738      	adds	r7, #56	@ 0x38
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}

0801336a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801336a:	b490      	push	{r4, r7}
 801336c:	b082      	sub	sp, #8
 801336e:	af00      	add	r7, sp, #0
 8013370:	4604      	mov	r4, r0
 8013372:	4608      	mov	r0, r1
 8013374:	4611      	mov	r1, r2
 8013376:	461a      	mov	r2, r3
 8013378:	4623      	mov	r3, r4
 801337a:	80fb      	strh	r3, [r7, #6]
 801337c:	4603      	mov	r3, r0
 801337e:	717b      	strb	r3, [r7, #5]
 8013380:	460b      	mov	r3, r1
 8013382:	713b      	strb	r3, [r7, #4]
 8013384:	4613      	mov	r3, r2
 8013386:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013388:	69bb      	ldr	r3, [r7, #24]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d101      	bne.n	8013392 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801338e:	2309      	movs	r3, #9
 8013390:	e04e      	b.n	8013430 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	2249      	movs	r2, #73	@ 0x49
 8013396:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	3301      	adds	r3, #1
 801339c:	2200      	movs	r2, #0
 801339e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80133a0:	69bb      	ldr	r3, [r7, #24]
 80133a2:	3302      	adds	r3, #2
 80133a4:	2200      	movs	r2, #0
 80133a6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	3303      	adds	r3, #3
 80133ac:	2200      	movs	r2, #0
 80133ae:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	3304      	adds	r3, #4
 80133b4:	2200      	movs	r2, #0
 80133b6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	3305      	adds	r3, #5
 80133bc:	78fa      	ldrb	r2, [r7, #3]
 80133be:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	3306      	adds	r3, #6
 80133c4:	693a      	ldr	r2, [r7, #16]
 80133c6:	b2d2      	uxtb	r2, r2
 80133c8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	0a1a      	lsrs	r2, r3, #8
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	3307      	adds	r3, #7
 80133d2:	b2d2      	uxtb	r2, r2
 80133d4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	0c1a      	lsrs	r2, r3, #16
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	3308      	adds	r3, #8
 80133de:	b2d2      	uxtb	r2, r2
 80133e0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	0e1a      	lsrs	r2, r3, #24
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	3309      	adds	r3, #9
 80133ea:	b2d2      	uxtb	r2, r2
 80133ec:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80133ee:	69bb      	ldr	r3, [r7, #24]
 80133f0:	330a      	adds	r3, #10
 80133f2:	697a      	ldr	r2, [r7, #20]
 80133f4:	b2d2      	uxtb	r2, r2
 80133f6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	0a1a      	lsrs	r2, r3, #8
 80133fc:	69bb      	ldr	r3, [r7, #24]
 80133fe:	330b      	adds	r3, #11
 8013400:	b2d2      	uxtb	r2, r2
 8013402:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	0c1a      	lsrs	r2, r3, #16
 8013408:	69bb      	ldr	r3, [r7, #24]
 801340a:	330c      	adds	r3, #12
 801340c:	b2d2      	uxtb	r2, r2
 801340e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	0e1a      	lsrs	r2, r3, #24
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	330d      	adds	r3, #13
 8013418:	b2d2      	uxtb	r2, r2
 801341a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	330e      	adds	r3, #14
 8013420:	2200      	movs	r2, #0
 8013422:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	330f      	adds	r3, #15
 8013428:	88fa      	ldrh	r2, [r7, #6]
 801342a:	b2d2      	uxtb	r2, r2
 801342c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801342e:	2300      	movs	r3, #0
}
 8013430:	4618      	mov	r0, r3
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bc90      	pop	{r4, r7}
 8013438:	4770      	bx	lr

0801343a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801343a:	b590      	push	{r4, r7, lr}
 801343c:	b08b      	sub	sp, #44	@ 0x2c
 801343e:	af04      	add	r7, sp, #16
 8013440:	6078      	str	r0, [r7, #4]
 8013442:	4608      	mov	r0, r1
 8013444:	4611      	mov	r1, r2
 8013446:	461a      	mov	r2, r3
 8013448:	4603      	mov	r3, r0
 801344a:	807b      	strh	r3, [r7, #2]
 801344c:	460b      	mov	r3, r1
 801344e:	707b      	strb	r3, [r7, #1]
 8013450:	4613      	mov	r3, r2
 8013452:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d002      	beq.n	8013460 <ComputeCmacB0+0x26>
 801345a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801345c:	2b00      	cmp	r3, #0
 801345e:	d101      	bne.n	8013464 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013460:	2309      	movs	r3, #9
 8013462:	e024      	b.n	80134ae <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013464:	887b      	ldrh	r3, [r7, #2]
 8013466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801346a:	d901      	bls.n	8013470 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801346c:	230d      	movs	r3, #13
 801346e:	e01e      	b.n	80134ae <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013470:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013474:	783a      	ldrb	r2, [r7, #0]
 8013476:	7879      	ldrb	r1, [r7, #1]
 8013478:	8878      	ldrh	r0, [r7, #2]
 801347a:	f107 0308 	add.w	r3, r7, #8
 801347e:	9302      	str	r3, [sp, #8]
 8013480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013482:	9301      	str	r3, [sp, #4]
 8013484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	4623      	mov	r3, r4
 801348a:	f7ff ff6e 	bl	801336a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801348e:	887a      	ldrh	r2, [r7, #2]
 8013490:	7879      	ldrb	r1, [r7, #1]
 8013492:	f107 0008 	add.w	r0, r7, #8
 8013496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013498:	9300      	str	r3, [sp, #0]
 801349a:	460b      	mov	r3, r1
 801349c:	6879      	ldr	r1, [r7, #4]
 801349e:	f7f8 fa7d 	bl	800b99c <SecureElementComputeAesCmac>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d001      	beq.n	80134ac <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80134a8:	230e      	movs	r3, #14
 80134aa:	e000      	b.n	80134ae <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80134ac:	2300      	movs	r3, #0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	371c      	adds	r7, #28
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd90      	pop	{r4, r7, pc}

080134b6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80134b6:	b590      	push	{r4, r7, lr}
 80134b8:	b0cd      	sub	sp, #308	@ 0x134
 80134ba:	af04      	add	r7, sp, #16
 80134bc:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80134c0:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80134c4:	6020      	str	r0, [r4, #0]
 80134c6:	460c      	mov	r4, r1
 80134c8:	4610      	mov	r0, r2
 80134ca:	4619      	mov	r1, r3
 80134cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134d0:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80134d4:	4622      	mov	r2, r4
 80134d6:	801a      	strh	r2, [r3, #0]
 80134d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134dc:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80134e0:	4602      	mov	r2, r0
 80134e2:	701a      	strb	r2, [r3, #0]
 80134e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80134ec:	460a      	mov	r2, r1
 80134ee:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80134f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d101      	bne.n	8013502 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134fe:	2309      	movs	r3, #9
 8013500:	e063      	b.n	80135ca <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013502:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013506:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013510:	d901      	bls.n	8013516 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013512:	230d      	movs	r3, #13
 8013514:	e059      	b.n	80135ca <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013516:	f107 030c 	add.w	r3, r7, #12
 801351a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801351e:	2100      	movs	r1, #0
 8013520:	4618      	mov	r0, r3
 8013522:	f003 facf 	bl	8016ac4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013526:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801352a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801352e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013532:	781a      	ldrb	r2, [r3, #0]
 8013534:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013538:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801353c:	7819      	ldrb	r1, [r3, #0]
 801353e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013542:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013546:	8818      	ldrh	r0, [r3, #0]
 8013548:	f107 030c 	add.w	r3, r7, #12
 801354c:	9302      	str	r3, [sp, #8]
 801354e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013552:	9301      	str	r3, [sp, #4]
 8013554:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013558:	9300      	str	r3, [sp, #0]
 801355a:	4623      	mov	r3, r4
 801355c:	f7ff ff05 	bl	801336a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013560:	f107 030c 	add.w	r3, r7, #12
 8013564:	3310      	adds	r3, #16
 8013566:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801356a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801356e:	8812      	ldrh	r2, [r2, #0]
 8013570:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013574:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013578:	6809      	ldr	r1, [r1, #0]
 801357a:	4618      	mov	r0, r3
 801357c:	f003 fa67 	bl	8016a4e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013580:	2306      	movs	r3, #6
 8013582:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013586:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801358a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801358e:	881b      	ldrh	r3, [r3, #0]
 8013590:	3310      	adds	r3, #16
 8013592:	4619      	mov	r1, r3
 8013594:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013598:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	f107 000c 	add.w	r0, r7, #12
 80135a2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80135a6:	f7f8 fa13 	bl	800b9d0 <SecureElementVerifyAesCmac>
 80135aa:	4603      	mov	r3, r0
 80135ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80135b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d101      	bne.n	80135bc <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80135b8:	2300      	movs	r3, #0
 80135ba:	e006      	b.n	80135ca <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80135bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d101      	bne.n	80135c8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80135c4:	2301      	movs	r3, #1
 80135c6:	e000      	b.n	80135ca <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135c8:	230e      	movs	r3, #14
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd90      	pop	{r4, r7, pc}

080135d4 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80135d4:	b480      	push	{r7}
 80135d6:	b085      	sub	sp, #20
 80135d8:	af00      	add	r7, sp, #0
 80135da:	4603      	mov	r3, r0
 80135dc:	6039      	str	r1, [r7, #0]
 80135de:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80135e0:	2300      	movs	r3, #0
 80135e2:	73fb      	strb	r3, [r7, #15]
 80135e4:	e011      	b.n	801360a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80135e6:	7bfb      	ldrb	r3, [r7, #15]
 80135e8:	4a0c      	ldr	r2, [pc, #48]	@ (801361c <GetKeyAddrItem+0x48>)
 80135ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80135ee:	79fa      	ldrb	r2, [r7, #7]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d107      	bne.n	8013604 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80135f4:	7bfb      	ldrb	r3, [r7, #15]
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	4a08      	ldr	r2, [pc, #32]	@ (801361c <GetKeyAddrItem+0x48>)
 80135fa:	441a      	add	r2, r3
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013600:	2300      	movs	r3, #0
 8013602:	e006      	b.n	8013612 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013604:	7bfb      	ldrb	r3, [r7, #15]
 8013606:	3301      	adds	r3, #1
 8013608:	73fb      	strb	r3, [r7, #15]
 801360a:	7bfb      	ldrb	r3, [r7, #15]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d9ea      	bls.n	80135e6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013610:	230b      	movs	r3, #11
}
 8013612:	4618      	mov	r0, r3
 8013614:	3714      	adds	r7, #20
 8013616:	46bd      	mov	sp, r7
 8013618:	bc80      	pop	{r7}
 801361a:	4770      	bx	lr
 801361c:	200000f0 	.word	0x200000f0

08013620 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b088      	sub	sp, #32
 8013624:	af00      	add	r7, sp, #0
 8013626:	60b9      	str	r1, [r7, #8]
 8013628:	607a      	str	r2, [r7, #4]
 801362a:	461a      	mov	r2, r3
 801362c:	4603      	mov	r3, r0
 801362e:	73fb      	strb	r3, [r7, #15]
 8013630:	4613      	mov	r3, r2
 8013632:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013634:	f107 0310 	add.w	r3, r7, #16
 8013638:	2200      	movs	r2, #0
 801363a:	601a      	str	r2, [r3, #0]
 801363c:	605a      	str	r2, [r3, #4]
 801363e:	609a      	str	r2, [r3, #8]
 8013640:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8013642:	7bfb      	ldrb	r3, [r7, #15]
 8013644:	2b08      	cmp	r3, #8
 8013646:	d002      	beq.n	801364e <DeriveSessionKey10x+0x2e>
 8013648:	2b09      	cmp	r3, #9
 801364a:	d003      	beq.n	8013654 <DeriveSessionKey10x+0x34>
 801364c:	e005      	b.n	801365a <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801364e:	2301      	movs	r3, #1
 8013650:	743b      	strb	r3, [r7, #16]
            break;
 8013652:	e004      	b.n	801365e <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013654:	2302      	movs	r3, #2
 8013656:	743b      	strb	r3, [r7, #16]
            break;
 8013658:	e001      	b.n	801365e <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801365a:	230a      	movs	r3, #10
 801365c:	e02a      	b.n	80136b4 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	b2db      	uxtb	r3, r3
 8013662:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	0a1b      	lsrs	r3, r3, #8
 8013668:	b2db      	uxtb	r3, r3
 801366a:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	0c1b      	lsrs	r3, r3, #16
 8013670:	b2db      	uxtb	r3, r3
 8013672:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	b2db      	uxtb	r3, r3
 8013678:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	0a1b      	lsrs	r3, r3, #8
 801367e:	b2db      	uxtb	r3, r3
 8013680:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	0c1b      	lsrs	r3, r3, #16
 8013686:	b2db      	uxtb	r3, r3
 8013688:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801368a:	89bb      	ldrh	r3, [r7, #12]
 801368c:	b2db      	uxtb	r3, r3
 801368e:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013690:	89bb      	ldrh	r3, [r7, #12]
 8013692:	0a1b      	lsrs	r3, r3, #8
 8013694:	b29b      	uxth	r3, r3
 8013696:	b2db      	uxtb	r3, r3
 8013698:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801369a:	7bfa      	ldrb	r2, [r7, #15]
 801369c:	f107 0310 	add.w	r3, r7, #16
 80136a0:	2101      	movs	r1, #1
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7f8 fa40 	bl	800bb28 <SecureElementDeriveAndStoreKey>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d001      	beq.n	80136b2 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136ae:	230e      	movs	r3, #14
 80136b0:	e000      	b.n	80136b4 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3720      	adds	r7, #32
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80136bc:	b480      	push	{r7}
 80136be:	b083      	sub	sp, #12
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	4603      	mov	r3, r0
 80136c4:	6039      	str	r1, [r7, #0]
 80136c6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d101      	bne.n	80136d2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80136ce:	2309      	movs	r3, #9
 80136d0:	e029      	b.n	8013726 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80136d2:	79fb      	ldrb	r3, [r7, #7]
 80136d4:	3b01      	subs	r3, #1
 80136d6:	2b03      	cmp	r3, #3
 80136d8:	d822      	bhi.n	8013720 <GetLastFcntDown+0x64>
 80136da:	a201      	add	r2, pc, #4	@ (adr r2, 80136e0 <GetLastFcntDown+0x24>)
 80136dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136e0:	080136f1 	.word	0x080136f1
 80136e4:	080136fd 	.word	0x080136fd
 80136e8:	08013709 	.word	0x08013709
 80136ec:	08013715 	.word	0x08013715
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80136f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013730 <GetLastFcntDown+0x74>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	691a      	ldr	r2, [r3, #16]
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	601a      	str	r2, [r3, #0]
            break;
 80136fa:	e013      	b.n	8013724 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80136fc:	4b0c      	ldr	r3, [pc, #48]	@ (8013730 <GetLastFcntDown+0x74>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	695a      	ldr	r2, [r3, #20]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	601a      	str	r2, [r3, #0]
            break;
 8013706:	e00d      	b.n	8013724 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013708:	4b09      	ldr	r3, [pc, #36]	@ (8013730 <GetLastFcntDown+0x74>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	699a      	ldr	r2, [r3, #24]
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	601a      	str	r2, [r3, #0]
            break;
 8013712:	e007      	b.n	8013724 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013714:	4b06      	ldr	r3, [pc, #24]	@ (8013730 <GetLastFcntDown+0x74>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	69da      	ldr	r2, [r3, #28]
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	601a      	str	r2, [r3, #0]
            break;
 801371e:	e001      	b.n	8013724 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013720:	2305      	movs	r3, #5
 8013722:	e000      	b.n	8013726 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013724:	2300      	movs	r3, #0
}
 8013726:	4618      	mov	r0, r3
 8013728:	370c      	adds	r7, #12
 801372a:	46bd      	mov	sp, r7
 801372c:	bc80      	pop	{r7}
 801372e:	4770      	bx	lr
 8013730:	200013a8 	.word	0x200013a8

08013734 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af00      	add	r7, sp, #0
 801373a:	4603      	mov	r3, r0
 801373c:	6039      	str	r1, [r7, #0]
 801373e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013740:	2300      	movs	r3, #0
 8013742:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013744:	f107 020c 	add.w	r2, r7, #12
 8013748:	79fb      	ldrb	r3, [r7, #7]
 801374a:	4611      	mov	r1, r2
 801374c:	4618      	mov	r0, r3
 801374e:	f7ff ffb5 	bl	80136bc <GetLastFcntDown>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	d001      	beq.n	801375c <CheckFCntDown+0x28>
    {
        return false;
 8013758:	2300      	movs	r3, #0
 801375a:	e00a      	b.n	8013772 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	683a      	ldr	r2, [r7, #0]
 8013760:	429a      	cmp	r2, r3
 8013762:	d803      	bhi.n	801376c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8013764:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801376a:	d101      	bne.n	8013770 <CheckFCntDown+0x3c>
    {
        return true;
 801376c:	2301      	movs	r3, #1
 801376e:	e000      	b.n	8013772 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013770:	2300      	movs	r3, #0
    }
}
 8013772:	4618      	mov	r0, r3
 8013774:	3710      	adds	r7, #16
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
	...

0801377c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801377c:	b480      	push	{r7}
 801377e:	b083      	sub	sp, #12
 8013780:	af00      	add	r7, sp, #0
 8013782:	4603      	mov	r3, r0
 8013784:	6039      	str	r1, [r7, #0]
 8013786:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013788:	79fb      	ldrb	r3, [r7, #7]
 801378a:	3b01      	subs	r3, #1
 801378c:	2b03      	cmp	r3, #3
 801378e:	d82b      	bhi.n	80137e8 <UpdateFCntDown+0x6c>
 8013790:	a201      	add	r2, pc, #4	@ (adr r2, 8013798 <UpdateFCntDown+0x1c>)
 8013792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013796:	bf00      	nop
 8013798:	080137a9 	.word	0x080137a9
 801379c:	080137bb 	.word	0x080137bb
 80137a0:	080137cd 	.word	0x080137cd
 80137a4:	080137df 	.word	0x080137df
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80137a8:	4b12      	ldr	r3, [pc, #72]	@ (80137f4 <UpdateFCntDown+0x78>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	683a      	ldr	r2, [r7, #0]
 80137ae:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80137b0:	4b10      	ldr	r3, [pc, #64]	@ (80137f4 <UpdateFCntDown+0x78>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	683a      	ldr	r2, [r7, #0]
 80137b6:	621a      	str	r2, [r3, #32]
            break;
 80137b8:	e017      	b.n	80137ea <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80137ba:	4b0e      	ldr	r3, [pc, #56]	@ (80137f4 <UpdateFCntDown+0x78>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	683a      	ldr	r2, [r7, #0]
 80137c0:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80137c2:	4b0c      	ldr	r3, [pc, #48]	@ (80137f4 <UpdateFCntDown+0x78>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	683a      	ldr	r2, [r7, #0]
 80137c8:	621a      	str	r2, [r3, #32]
            break;
 80137ca:	e00e      	b.n	80137ea <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80137cc:	4b09      	ldr	r3, [pc, #36]	@ (80137f4 <UpdateFCntDown+0x78>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80137d4:	4b07      	ldr	r3, [pc, #28]	@ (80137f4 <UpdateFCntDown+0x78>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	683a      	ldr	r2, [r7, #0]
 80137da:	621a      	str	r2, [r3, #32]
            break;
 80137dc:	e005      	b.n	80137ea <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80137de:	4b05      	ldr	r3, [pc, #20]	@ (80137f4 <UpdateFCntDown+0x78>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	683a      	ldr	r2, [r7, #0]
 80137e4:	61da      	str	r2, [r3, #28]
            break;
 80137e6:	e000      	b.n	80137ea <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80137e8:	bf00      	nop
    }
}
 80137ea:	bf00      	nop
 80137ec:	370c      	adds	r7, #12
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bc80      	pop	{r7}
 80137f2:	4770      	bx	lr
 80137f4:	200013a8 	.word	0x200013a8

080137f8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80137fe:	4b18      	ldr	r3, [pc, #96]	@ (8013860 <ResetFCnts+0x68>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2200      	movs	r2, #0
 8013804:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013806:	4b16      	ldr	r3, [pc, #88]	@ (8013860 <ResetFCnts+0x68>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f04f 32ff 	mov.w	r2, #4294967295
 801380e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013810:	4b13      	ldr	r3, [pc, #76]	@ (8013860 <ResetFCnts+0x68>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f04f 32ff 	mov.w	r2, #4294967295
 8013818:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801381a:	4b11      	ldr	r3, [pc, #68]	@ (8013860 <ResetFCnts+0x68>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	f04f 32ff 	mov.w	r2, #4294967295
 8013822:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013824:	4b0e      	ldr	r3, [pc, #56]	@ (8013860 <ResetFCnts+0x68>)
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	4b0d      	ldr	r3, [pc, #52]	@ (8013860 <ResetFCnts+0x68>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	6992      	ldr	r2, [r2, #24]
 801382e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013830:	2300      	movs	r3, #0
 8013832:	607b      	str	r3, [r7, #4]
 8013834:	e00b      	b.n	801384e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8013836:	4b0a      	ldr	r3, [pc, #40]	@ (8013860 <ResetFCnts+0x68>)
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	3306      	adds	r3, #6
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	4413      	add	r3, r2
 8013842:	f04f 32ff 	mov.w	r2, #4294967295
 8013846:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	3301      	adds	r3, #1
 801384c:	607b      	str	r3, [r7, #4]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2b00      	cmp	r3, #0
 8013852:	ddf0      	ble.n	8013836 <ResetFCnts+0x3e>
    }
}
 8013854:	bf00      	nop
 8013856:	bf00      	nop
 8013858:	370c      	adds	r7, #12
 801385a:	46bd      	mov	sp, r7
 801385c:	bc80      	pop	{r7}
 801385e:	4770      	bx	lr
 8013860:	200013a8 	.word	0x200013a8

08013864 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 801386c:	4b06      	ldr	r3, [pc, #24]	@ (8013888 <IsJoinNonce10xOk+0x24>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	689b      	ldr	r3, [r3, #8]
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	429a      	cmp	r2, r3
 8013876:	bf8c      	ite	hi
 8013878:	2301      	movhi	r3, #1
 801387a:	2300      	movls	r3, #0
 801387c:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801387e:	4618      	mov	r0, r3
 8013880:	370c      	adds	r7, #12
 8013882:	46bd      	mov	sp, r7
 8013884:	bc80      	pop	{r7}
 8013886:	4770      	bx	lr
 8013888:	200013a8 	.word	0x200013a8

0801388c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d101      	bne.n	801389e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801389a:	2308      	movs	r3, #8
 801389c:	e01c      	b.n	80138d8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801389e:	4a10      	ldr	r2, [pc, #64]	@ (80138e0 <LoRaMacCryptoInit+0x54>)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80138a4:	4b0e      	ldr	r3, [pc, #56]	@ (80138e0 <LoRaMacCryptoInit+0x54>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2228      	movs	r2, #40	@ 0x28
 80138aa:	2100      	movs	r1, #0
 80138ac:	4618      	mov	r0, r3
 80138ae:	f003 f909 	bl	8016ac4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80138b2:	4b0b      	ldr	r3, [pc, #44]	@ (80138e0 <LoRaMacCryptoInit+0x54>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	2201      	movs	r2, #1
 80138b8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80138ba:	4b09      	ldr	r3, [pc, #36]	@ (80138e0 <LoRaMacCryptoInit+0x54>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2201      	movs	r2, #1
 80138c0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80138c2:	4b07      	ldr	r3, [pc, #28]	@ (80138e0 <LoRaMacCryptoInit+0x54>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	2201      	movs	r2, #1
 80138c8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80138ca:	4b05      	ldr	r3, [pc, #20]	@ (80138e0 <LoRaMacCryptoInit+0x54>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	2200      	movs	r2, #0
 80138d0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80138d2:	f7ff ff91 	bl	80137f8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80138d6:	2300      	movs	r3, #0
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	200013a8 	.word	0x200013a8

080138e4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80138e4:	b480      	push	{r7}
 80138e6:	b083      	sub	sp, #12
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80138ec:	4b04      	ldr	r3, [pc, #16]	@ (8013900 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	370c      	adds	r7, #12
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bc80      	pop	{r7}
 80138fe:	4770      	bx	lr
 8013900:	200013a8 	.word	0x200013a8

08013904 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d101      	bne.n	8013916 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013912:	2309      	movs	r3, #9
 8013914:	e006      	b.n	8013924 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013916:	4b06      	ldr	r3, [pc, #24]	@ (8013930 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	1c5a      	adds	r2, r3, #1
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013922:	2300      	movs	r3, #0
}
 8013924:	4618      	mov	r0, r3
 8013926:	370c      	adds	r7, #12
 8013928:	46bd      	mov	sp, r7
 801392a:	bc80      	pop	{r7}
 801392c:	4770      	bx	lr
 801392e:	bf00      	nop
 8013930:	200013a8 	.word	0x200013a8

08013934 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b088      	sub	sp, #32
 8013938:	af00      	add	r7, sp, #0
 801393a:	4603      	mov	r3, r0
 801393c:	60b9      	str	r1, [r7, #8]
 801393e:	607a      	str	r2, [r7, #4]
 8013940:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013942:	2300      	movs	r3, #0
 8013944:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801394a:	2312      	movs	r3, #18
 801394c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d101      	bne.n	8013958 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013954:	2309      	movs	r3, #9
 8013956:	e035      	b.n	80139c4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013958:	f107 0214 	add.w	r2, r7, #20
 801395c:	7bfb      	ldrb	r3, [r7, #15]
 801395e:	4611      	mov	r1, r2
 8013960:	4618      	mov	r0, r3
 8013962:	f7ff feab 	bl	80136bc <GetLastFcntDown>
 8013966:	4603      	mov	r3, r0
 8013968:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801396a:	7efb      	ldrb	r3, [r7, #27]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d001      	beq.n	8013974 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013970:	7efb      	ldrb	r3, [r7, #27]
 8013972:	e027      	b.n	80139c4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801397a:	d103      	bne.n	8013984 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	68ba      	ldr	r2, [r7, #8]
 8013980:	601a      	str	r2, [r3, #0]
 8013982:	e01e      	b.n	80139c2 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	b29b      	uxth	r3, r3
 8013988:	68ba      	ldr	r2, [r7, #8]
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	2b00      	cmp	r3, #0
 8013992:	dd05      	ble.n	80139a0 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013994:	697a      	ldr	r2, [r7, #20]
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	441a      	add	r2, r3
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	601a      	str	r2, [r3, #0]
 801399e:	e010      	b.n	80139c2 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d104      	bne.n	80139b0 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80139a6:	697a      	ldr	r2, [r7, #20]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80139ac:	2307      	movs	r3, #7
 80139ae:	e009      	b.n	80139c4 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	0c1b      	lsrs	r3, r3, #16
 80139b4:	041b      	lsls	r3, r3, #16
 80139b6:	68ba      	ldr	r2, [r7, #8]
 80139b8:	4413      	add	r3, r2
 80139ba:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3720      	adds	r7, #32
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80139cc:	b480      	push	{r7}
 80139ce:	b085      	sub	sp, #20
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d101      	bne.n	80139de <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139da:	2309      	movs	r3, #9
 80139dc:	e019      	b.n	8013a12 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80139de:	2300      	movs	r3, #0
 80139e0:	60fb      	str	r3, [r7, #12]
 80139e2:	e012      	b.n	8013a0a <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80139e4:	4b0d      	ldr	r3, [pc, #52]	@ (8013a1c <LoRaMacCryptoSetMulticastReference+0x50>)
 80139e6:	6819      	ldr	r1, [r3, #0]
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	4613      	mov	r3, r2
 80139ec:	005b      	lsls	r3, r3, #1
 80139ee:	4413      	add	r3, r2
 80139f0:	011b      	lsls	r3, r3, #4
 80139f2:	461a      	mov	r2, r3
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	4413      	add	r3, r2
 80139f8:	68fa      	ldr	r2, [r7, #12]
 80139fa:	3206      	adds	r2, #6
 80139fc:	0092      	lsls	r2, r2, #2
 80139fe:	440a      	add	r2, r1
 8013a00:	3204      	adds	r2, #4
 8013a02:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	3301      	adds	r3, #1
 8013a08:	60fb      	str	r3, [r7, #12]
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	dde9      	ble.n	80139e4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a10:	2300      	movs	r3, #0
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3714      	adds	r7, #20
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bc80      	pop	{r7}
 8013a1a:	4770      	bx	lr
 8013a1c:	200013a8 	.word	0x200013a8

08013a20 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	4603      	mov	r3, r0
 8013a28:	6039      	str	r1, [r7, #0]
 8013a2a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013a2c:	79fb      	ldrb	r3, [r7, #7]
 8013a2e:	6839      	ldr	r1, [r7, #0]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f7 ff55 	bl	800b8e0 <SecureElementSetKey>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d001      	beq.n	8013a40 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a3c:	230e      	movs	r3, #14
 8013a3e:	e021      	b.n	8013a84 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8013a40:	79fb      	ldrb	r3, [r7, #7]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d11d      	bne.n	8013a82 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013a46:	4b11      	ldr	r3, [pc, #68]	@ (8013a8c <LoRaMacCryptoSetKey+0x6c>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	789b      	ldrb	r3, [r3, #2]
 8013a4c:	210b      	movs	r1, #11
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f000 fa54 	bl	8013efc <LoRaMacCryptoDeriveLifeTimeKey>
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d001      	beq.n	8013a5e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a5a:	230e      	movs	r3, #14
 8013a5c:	e012      	b.n	8013a84 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013a5e:	210c      	movs	r1, #12
 8013a60:	2000      	movs	r0, #0
 8013a62:	f000 fa4b 	bl	8013efc <LoRaMacCryptoDeriveLifeTimeKey>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d001      	beq.n	8013a70 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a6c:	230e      	movs	r3, #14
 8013a6e:	e009      	b.n	8013a84 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013a70:	210a      	movs	r1, #10
 8013a72:	2000      	movs	r0, #0
 8013a74:	f000 fa42 	bl	8013efc <LoRaMacCryptoDeriveLifeTimeKey>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d001      	beq.n	8013a82 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a7e:	230e      	movs	r3, #14
 8013a80:	e000      	b.n	8013a84 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013a82:	2300      	movs	r3, #0
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	200013a8 	.word	0x200013a8

08013a90 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af02      	add	r7, sp, #8
 8013a96:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d101      	bne.n	8013aa2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a9e:	2309      	movs	r3, #9
 8013aa0:	e02d      	b.n	8013afe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8013aa6:	4b18      	ldr	r3, [pc, #96]	@ (8013b08 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	889a      	ldrh	r2, [r3, #4]
 8013aac:	3201      	adds	r2, #1
 8013aae:	b292      	uxth	r2, r2
 8013ab0:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013ab2:	4b15      	ldr	r3, [pc, #84]	@ (8013b08 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	889a      	ldrh	r2, [r3, #4]
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 fc14 	bl	80142ea <LoRaMacSerializerJoinRequest>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d001      	beq.n	8013acc <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013ac8:	2310      	movs	r3, #16
 8013aca:	e018      	b.n	8013afe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6819      	ldr	r1, [r3, #0]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	3318      	adds	r3, #24
 8013ad4:	7bfa      	ldrb	r2, [r7, #15]
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	4613      	mov	r3, r2
 8013ada:	2213      	movs	r2, #19
 8013adc:	2000      	movs	r0, #0
 8013ade:	f7f7 ff5d 	bl	800b99c <SecureElementComputeAesCmac>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d001      	beq.n	8013aec <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013ae8:	230e      	movs	r3, #14
 8013aea:	e008      	b.n	8013afe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f000 fbfc 	bl	80142ea <LoRaMacSerializerJoinRequest>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d001      	beq.n	8013afc <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013af8:	2310      	movs	r3, #16
 8013afa:	e000      	b.n	8013afe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3710      	adds	r7, #16
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	200013a8 	.word	0x200013a8

08013b0c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013b0c:	b590      	push	{r4, r7, lr}
 8013b0e:	b097      	sub	sp, #92	@ 0x5c
 8013b10:	af04      	add	r7, sp, #16
 8013b12:	4603      	mov	r3, r0
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d101      	bne.n	8013b2a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013b26:	2309      	movs	r3, #9
 8013b28:	e0d1      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013b2a:	2312      	movs	r3, #18
 8013b2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013b30:	f107 0314 	add.w	r3, r7, #20
 8013b34:	2221      	movs	r2, #33	@ 0x21
 8013b36:	2100      	movs	r1, #0
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f007 fd7f 	bl	801b63c <memset>
    uint8_t versionMinor         = 0;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013b42:	4b65      	ldr	r3, [pc, #404]	@ (8013cd8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	889b      	ldrh	r3, [r3, #4]
 8013b48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681c      	ldr	r4, [r3, #0]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	791b      	ldrb	r3, [r3, #4]
 8013b54:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8013b58:	7bf8      	ldrb	r0, [r7, #15]
 8013b5a:	f107 0213 	add.w	r2, r7, #19
 8013b5e:	9202      	str	r2, [sp, #8]
 8013b60:	f107 0214 	add.w	r2, r7, #20
 8013b64:	9201      	str	r2, [sp, #4]
 8013b66:	9300      	str	r3, [sp, #0]
 8013b68:	4623      	mov	r3, r4
 8013b6a:	460a      	mov	r2, r1
 8013b6c:	68b9      	ldr	r1, [r7, #8]
 8013b6e:	f7f8 f81a 	bl	800bba6 <SecureElementProcessJoinAccept>
 8013b72:	4603      	mov	r3, r0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d001      	beq.n	8013b7c <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b78:	230e      	movs	r3, #14
 8013b7a:	e0a8      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6818      	ldr	r0, [r3, #0]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	791b      	ldrb	r3, [r3, #4]
 8013b84:	461a      	mov	r2, r3
 8013b86:	f107 0314 	add.w	r3, r7, #20
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	f002 ff5f 	bl	8016a4e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f000 f9ed 	bl	8013f70 <LoRaMacParserJoinAccept>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d001      	beq.n	8013ba0 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013b9c:	230f      	movs	r3, #15
 8013b9e:	e096      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	799b      	ldrb	r3, [r3, #6]
 8013baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	79db      	ldrb	r3, [r3, #7]
 8013bb0:	021b      	lsls	r3, r3, #8
 8013bb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013bb4:	4313      	orrs	r3, r2
 8013bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	7a1b      	ldrb	r3, [r3, #8]
 8013bbc:	041b      	lsls	r3, r3, #16
 8013bbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8013bc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013bc6:	f7ff fe4d 	bl	8013864 <IsJoinNonce10xOk>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8013bd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d010      	beq.n	8013bfa <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8013cd8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013bde:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8013be0:	7cfb      	ldrb	r3, [r7, #19]
 8013be2:	210b      	movs	r1, #11
 8013be4:	4618      	mov	r0, r3
 8013be6:	f000 f989 	bl	8013efc <LoRaMacCryptoDeriveLifeTimeKey>
 8013bea:	4603      	mov	r3, r0
 8013bec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013bf0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d005      	beq.n	8013c04 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8013bf8:	e001      	b.n	8013bfe <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013bfa:	2303      	movs	r3, #3
 8013bfc:	e067      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8013bfe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c02:	e064      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8013c04:	210c      	movs	r1, #12
 8013c06:	2000      	movs	r0, #0
 8013c08:	f000 f978 	bl	8013efc <LoRaMacCryptoDeriveLifeTimeKey>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d002      	beq.n	8013c20 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 8013c1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c1e:	e056      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8013c20:	210a      	movs	r1, #10
 8013c22:	2000      	movs	r0, #0
 8013c24:	f000 f96a 	bl	8013efc <LoRaMacCryptoDeriveLifeTimeKey>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d002      	beq.n	8013c3c <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8013c36:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c3a:	e048      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	7a5b      	ldrb	r3, [r3, #9]
 8013c40:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	7a9b      	ldrb	r3, [r3, #10]
 8013c46:	021b      	lsls	r3, r3, #8
 8013c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	7adb      	ldrb	r3, [r3, #11]
 8013c52:	041b      	lsls	r3, r3, #16
 8013c54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013c56:	4313      	orrs	r3, r2
 8013c58:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013c5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013c5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013c60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013c62:	2009      	movs	r0, #9
 8013c64:	f7ff fcdc 	bl	8013620 <DeriveSessionKey10x>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d002      	beq.n	8013c7c <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8013c76:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c7a:	e028      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013c7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013c80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013c82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013c84:	2008      	movs	r0, #8
 8013c86:	f7ff fccb 	bl	8013620 <DeriveSessionKey10x>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8013c98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013c9c:	e017      	b.n	8013cce <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8013cd8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	7cfa      	ldrb	r2, [r7, #19]
 8013ca4:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8013ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8013cd8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2200      	movs	r2, #0
 8013cac:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013cae:	4b0a      	ldr	r3, [pc, #40]	@ (8013cd8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013cb8:	4b07      	ldr	r3, [pc, #28]	@ (8013cd8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013cc2:	4b05      	ldr	r3, [pc, #20]	@ (8013cd8 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8013cca:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013ccc:	2300      	movs	r3, #0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	374c      	adds	r7, #76	@ 0x4c
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd90      	pop	{r4, r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	200013a8 	.word	0x200013a8

08013cdc <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013cdc:	b590      	push	{r4, r7, lr}
 8013cde:	b08b      	sub	sp, #44	@ 0x2c
 8013ce0:	af04      	add	r7, sp, #16
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	607b      	str	r3, [r7, #4]
 8013ce6:	460b      	mov	r3, r1
 8013ce8:	72fb      	strb	r3, [r7, #11]
 8013cea:	4613      	mov	r3, r2
 8013cec:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013cee:	2312      	movs	r3, #18
 8013cf0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013cf2:	2309      	movs	r3, #9
 8013cf4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d101      	bne.n	8013d00 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013cfc:	2309      	movs	r3, #9
 8013cfe:	e05e      	b.n	8013dbe <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013d00:	4b31      	ldr	r3, [pc, #196]	@ (8013dc8 <LoRaMacCryptoSecureMessage+0xec>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	68fa      	ldr	r2, [r7, #12]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d201      	bcs.n	8013d10 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013d0c:	2306      	movs	r3, #6
 8013d0e:	e056      	b.n	8013dbe <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d101      	bne.n	8013d1e <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013d1a:	2308      	movs	r3, #8
 8013d1c:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8013dc8 <LoRaMacCryptoSecureMessage+0xec>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d916      	bls.n	8013d58 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013d34:	b219      	sxth	r1, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	689c      	ldr	r4, [r3, #8]
 8013d3a:	7dfa      	ldrb	r2, [r7, #23]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	9301      	str	r3, [sp, #4]
 8013d40:	2300      	movs	r3, #0
 8013d42:	9300      	str	r3, [sp, #0]
 8013d44:	4623      	mov	r3, r4
 8013d46:	f7ff fa79 	bl	801323c <PayloadEncrypt>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d4e:	7dbb      	ldrb	r3, [r7, #22]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d001      	beq.n	8013d58 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013d54:	7dbb      	ldrb	r3, [r7, #22]
 8013d56:	e032      	b.n	8013dbe <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 fb48 	bl	80143ee <LoRaMacSerializerData>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d001      	beq.n	8013d68 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013d64:	2310      	movs	r3, #16
 8013d66:	e02a      	b.n	8013dbe <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013d68:	2308      	movs	r3, #8
 8013d6a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6818      	ldr	r0, [r3, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	791b      	ldrb	r3, [r3, #4]
 8013d74:	3b04      	subs	r3, #4
 8013d76:	b299      	uxth	r1, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	322c      	adds	r2, #44	@ 0x2c
 8013d80:	7dfc      	ldrb	r4, [r7, #23]
 8013d82:	9203      	str	r2, [sp, #12]
 8013d84:	68fa      	ldr	r2, [r7, #12]
 8013d86:	9202      	str	r2, [sp, #8]
 8013d88:	9301      	str	r3, [sp, #4]
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	9300      	str	r3, [sp, #0]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	4622      	mov	r2, r4
 8013d92:	f7ff fb52 	bl	801343a <ComputeCmacB0>
 8013d96:	4603      	mov	r3, r0
 8013d98:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d9a:	7dbb      	ldrb	r3, [r7, #22]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d001      	beq.n	8013da4 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8013da0:	7dbb      	ldrb	r3, [r7, #22]
 8013da2:	e00c      	b.n	8013dbe <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f000 fb22 	bl	80143ee <LoRaMacSerializerData>
 8013daa:	4603      	mov	r3, r0
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d001      	beq.n	8013db4 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013db0:	2310      	movs	r3, #16
 8013db2:	e004      	b.n	8013dbe <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013db4:	4b04      	ldr	r3, [pc, #16]	@ (8013dc8 <LoRaMacCryptoSecureMessage+0xec>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	371c      	adds	r7, #28
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd90      	pop	{r4, r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	200013a8 	.word	0x200013a8

08013dcc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013dcc:	b590      	push	{r4, r7, lr}
 8013dce:	b08b      	sub	sp, #44	@ 0x2c
 8013dd0:	af04      	add	r7, sp, #16
 8013dd2:	60b9      	str	r1, [r7, #8]
 8013dd4:	607b      	str	r3, [r7, #4]
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	73fb      	strb	r3, [r7, #15]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d101      	bne.n	8013de8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013de4:	2309      	movs	r3, #9
 8013de6:	e083      	b.n	8013ef0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013de8:	7bbb      	ldrb	r3, [r7, #14]
 8013dea:	6879      	ldr	r1, [r7, #4]
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7ff fca1 	bl	8013734 <CheckFCntDown>
 8013df2:	4603      	mov	r3, r0
 8013df4:	f083 0301 	eor.w	r3, r3, #1
 8013df8:	b2db      	uxtb	r3, r3
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d001      	beq.n	8013e02 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013dfe:	2306      	movs	r3, #6
 8013e00:	e076      	b.n	8013ef0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013e02:	2312      	movs	r3, #18
 8013e04:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013e06:	2309      	movs	r3, #9
 8013e08:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013e0a:	2308      	movs	r3, #8
 8013e0c:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013e10:	f000 f979 	bl	8014106 <LoRaMacParserData>
 8013e14:	4603      	mov	r3, r0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d001      	beq.n	8013e1e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013e1a:	230f      	movs	r3, #15
 8013e1c:	e068      	b.n	8013ef0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013e1e:	f107 0210 	add.w	r2, r7, #16
 8013e22:	7bfb      	ldrb	r3, [r7, #15]
 8013e24:	4611      	mov	r1, r2
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7ff fbd4 	bl	80135d4 <GetKeyAddrItem>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013e30:	7d7b      	ldrb	r3, [r7, #21]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d001      	beq.n	8013e3a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013e36:	7d7b      	ldrb	r3, [r7, #21]
 8013e38:	e05a      	b.n	8013ef0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	785b      	ldrb	r3, [r3, #1]
 8013e3e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	789b      	ldrb	r3, [r3, #2]
 8013e44:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	68ba      	ldr	r2, [r7, #8]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d001      	beq.n	8013e54 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013e50:	2302      	movs	r3, #2
 8013e52:	e04d      	b.n	8013ef0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e56:	7b1b      	ldrb	r3, [r3, #12]
 8013e58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013e5c:	b2db      	uxtb	r3, r3
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	bf14      	ite	ne
 8013e62:	2301      	movne	r3, #1
 8013e64:	2300      	moveq	r3, #0
 8013e66:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013e68:	4b23      	ldr	r3, [pc, #140]	@ (8013ef8 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	789b      	ldrb	r3, [r3, #2]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d101      	bne.n	8013e76 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013e72:	2300      	movs	r3, #0
 8013e74:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e78:	6818      	ldr	r0, [r3, #0]
 8013e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e7c:	791b      	ldrb	r3, [r3, #4]
 8013e7e:	3b04      	subs	r3, #4
 8013e80:	b299      	uxth	r1, r3
 8013e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e86:	7dbc      	ldrb	r4, [r7, #22]
 8013e88:	7d3a      	ldrb	r2, [r7, #20]
 8013e8a:	9303      	str	r3, [sp, #12]
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	9302      	str	r3, [sp, #8]
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	9301      	str	r3, [sp, #4]
 8013e94:	2301      	movs	r3, #1
 8013e96:	9300      	str	r3, [sp, #0]
 8013e98:	4623      	mov	r3, r4
 8013e9a:	f7ff fb0c 	bl	80134b6 <VerifyCmacB0>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013ea2:	7d7b      	ldrb	r3, [r7, #21]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d001      	beq.n	8013eac <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8013ea8:	7d7b      	ldrb	r3, [r7, #21]
 8013eaa:	e021      	b.n	8013ef0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d101      	bne.n	8013eba <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013eb6:	2308      	movs	r3, #8
 8013eb8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ebc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ec4:	b219      	sxth	r1, r3
 8013ec6:	7dfa      	ldrb	r2, [r7, #23]
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	9301      	str	r3, [sp, #4]
 8013ecc:	2301      	movs	r3, #1
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	f7ff f9b3 	bl	801323c <PayloadEncrypt>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013eda:	7d7b      	ldrb	r3, [r7, #21]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d001      	beq.n	8013ee4 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013ee0:	7d7b      	ldrb	r3, [r7, #21]
 8013ee2:	e005      	b.n	8013ef0 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8013ee4:	7bbb      	ldrb	r3, [r7, #14]
 8013ee6:	6879      	ldr	r1, [r7, #4]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7ff fc47 	bl	801377c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013eee:	2300      	movs	r3, #0
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	371c      	adds	r7, #28
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd90      	pop	{r4, r7, pc}
 8013ef8:	200013a8 	.word	0x200013a8

08013efc <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b088      	sub	sp, #32
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	4603      	mov	r3, r0
 8013f04:	460a      	mov	r2, r1
 8013f06:	71fb      	strb	r3, [r7, #7]
 8013f08:	4613      	mov	r3, r2
 8013f0a:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8013f0c:	f107 030c 	add.w	r3, r7, #12
 8013f10:	2200      	movs	r2, #0
 8013f12:	601a      	str	r2, [r3, #0]
 8013f14:	605a      	str	r2, [r3, #4]
 8013f16:	609a      	str	r2, [r3, #8]
 8013f18:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8013f1e:	79bb      	ldrb	r3, [r7, #6]
 8013f20:	2b0c      	cmp	r3, #12
 8013f22:	d00b      	beq.n	8013f3c <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8013f24:	2b0c      	cmp	r3, #12
 8013f26:	dc0f      	bgt.n	8013f48 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8013f28:	2b0a      	cmp	r3, #10
 8013f2a:	d00a      	beq.n	8013f42 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8013f2c:	2b0b      	cmp	r3, #11
 8013f2e:	d10b      	bne.n	8013f48 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8013f30:	79fb      	ldrb	r3, [r7, #7]
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	d10a      	bne.n	8013f4c <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8013f36:	2320      	movs	r3, #32
 8013f38:	733b      	strb	r3, [r7, #12]
            }
            break;
 8013f3a:	e007      	b.n	8013f4c <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8013f3c:	230b      	movs	r3, #11
 8013f3e:	77fb      	strb	r3, [r7, #31]
            break;
 8013f40:	e005      	b.n	8013f4e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8013f42:	2330      	movs	r3, #48	@ 0x30
 8013f44:	733b      	strb	r3, [r7, #12]
            break;
 8013f46:	e002      	b.n	8013f4e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013f48:	230a      	movs	r3, #10
 8013f4a:	e00d      	b.n	8013f68 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8013f4c:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013f4e:	79ba      	ldrb	r2, [r7, #6]
 8013f50:	7ff9      	ldrb	r1, [r7, #31]
 8013f52:	f107 030c 	add.w	r3, r7, #12
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7f7 fde6 	bl	800bb28 <SecureElementDeriveAndStoreKey>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f62:	230e      	movs	r3, #14
 8013f64:	e000      	b.n	8013f68 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f66:	2300      	movs	r3, #0
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3720      	adds	r7, #32
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b084      	sub	sp, #16
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d003      	beq.n	8013f86 <LoRaMacParserJoinAccept+0x16>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d101      	bne.n	8013f8a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013f86:	2302      	movs	r3, #2
 8013f88:	e0b9      	b.n	80140fe <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	89fb      	ldrh	r3, [r7, #14]
 8013f94:	1c59      	adds	r1, r3, #1
 8013f96:	81f9      	strh	r1, [r7, #14]
 8013f98:	4413      	add	r3, r2
 8013f9a:	781a      	ldrb	r2, [r3, #0]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	1d98      	adds	r0, r3, #6
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	89fb      	ldrh	r3, [r7, #14]
 8013faa:	4413      	add	r3, r2
 8013fac:	2203      	movs	r2, #3
 8013fae:	4619      	mov	r1, r3
 8013fb0:	f002 fd4d 	bl	8016a4e <memcpy1>
    bufItr = bufItr + 3;
 8013fb4:	89fb      	ldrh	r3, [r7, #14]
 8013fb6:	3303      	adds	r3, #3
 8013fb8:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f103 0009 	add.w	r0, r3, #9
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681a      	ldr	r2, [r3, #0]
 8013fc4:	89fb      	ldrh	r3, [r7, #14]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	2203      	movs	r2, #3
 8013fca:	4619      	mov	r1, r3
 8013fcc:	f002 fd3f 	bl	8016a4e <memcpy1>
    bufItr = bufItr + 3;
 8013fd0:	89fb      	ldrh	r3, [r7, #14]
 8013fd2:	3303      	adds	r3, #3
 8013fd4:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681a      	ldr	r2, [r3, #0]
 8013fda:	89fb      	ldrh	r3, [r7, #14]
 8013fdc:	1c59      	adds	r1, r3, #1
 8013fde:	81f9      	strh	r1, [r7, #14]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	461a      	mov	r2, r3
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	89fb      	ldrh	r3, [r7, #14]
 8013ff0:	1c59      	adds	r1, r3, #1
 8013ff2:	81f9      	strh	r1, [r7, #14]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	021a      	lsls	r2, r3, #8
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68db      	ldr	r3, [r3, #12]
 8013ffe:	431a      	orrs	r2, r3
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	89fb      	ldrh	r3, [r7, #14]
 801400a:	1c59      	adds	r1, r3, #1
 801400c:	81f9      	strh	r1, [r7, #14]
 801400e:	4413      	add	r3, r2
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	041a      	lsls	r2, r3, #16
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	68db      	ldr	r3, [r3, #12]
 8014018:	431a      	orrs	r2, r3
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681a      	ldr	r2, [r3, #0]
 8014022:	89fb      	ldrh	r3, [r7, #14]
 8014024:	1c59      	adds	r1, r3, #1
 8014026:	81f9      	strh	r1, [r7, #14]
 8014028:	4413      	add	r3, r2
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	061a      	lsls	r2, r3, #24
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	431a      	orrs	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	89fb      	ldrh	r3, [r7, #14]
 801403e:	1c59      	adds	r1, r3, #1
 8014040:	81f9      	strh	r1, [r7, #14]
 8014042:	4413      	add	r3, r2
 8014044:	781a      	ldrb	r2, [r3, #0]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	89fb      	ldrh	r3, [r7, #14]
 8014050:	1c59      	adds	r1, r3, #1
 8014052:	81f9      	strh	r1, [r7, #14]
 8014054:	4413      	add	r3, r2
 8014056:	781a      	ldrb	r2, [r3, #0]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	791b      	ldrb	r3, [r3, #4]
 8014060:	1f1a      	subs	r2, r3, #4
 8014062:	89fb      	ldrh	r3, [r7, #14]
 8014064:	1ad3      	subs	r3, r2, r3
 8014066:	2b10      	cmp	r3, #16
 8014068:	d10e      	bne.n	8014088 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f103 0012 	add.w	r0, r3, #18
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	89fb      	ldrh	r3, [r7, #14]
 8014076:	4413      	add	r3, r2
 8014078:	2210      	movs	r2, #16
 801407a:	4619      	mov	r1, r3
 801407c:	f002 fce7 	bl	8016a4e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014080:	89fb      	ldrh	r3, [r7, #14]
 8014082:	3310      	adds	r3, #16
 8014084:	81fb      	strh	r3, [r7, #14]
 8014086:	e008      	b.n	801409a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	791b      	ldrb	r3, [r3, #4]
 801408c:	1f1a      	subs	r2, r3, #4
 801408e:	89fb      	ldrh	r3, [r7, #14]
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	2b00      	cmp	r3, #0
 8014094:	dd01      	ble.n	801409a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014096:	2301      	movs	r3, #1
 8014098:	e031      	b.n	80140fe <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	89fb      	ldrh	r3, [r7, #14]
 80140a0:	1c59      	adds	r1, r3, #1
 80140a2:	81f9      	strh	r1, [r7, #14]
 80140a4:	4413      	add	r3, r2
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	461a      	mov	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	89fb      	ldrh	r3, [r7, #14]
 80140b4:	1c59      	adds	r1, r3, #1
 80140b6:	81f9      	strh	r1, [r7, #14]
 80140b8:	4413      	add	r3, r2
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	021a      	lsls	r2, r3, #8
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140c2:	431a      	orrs	r2, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	89fb      	ldrh	r3, [r7, #14]
 80140ce:	1c59      	adds	r1, r3, #1
 80140d0:	81f9      	strh	r1, [r7, #14]
 80140d2:	4413      	add	r3, r2
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	041a      	lsls	r2, r3, #16
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140dc:	431a      	orrs	r2, r3
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	89fb      	ldrh	r3, [r7, #14]
 80140e8:	1c59      	adds	r1, r3, #1
 80140ea:	81f9      	strh	r1, [r7, #14]
 80140ec:	4413      	add	r3, r2
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	061a      	lsls	r2, r3, #24
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140f6:	431a      	orrs	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80140fc:	2300      	movs	r3, #0
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3710      	adds	r7, #16
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}

08014106 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014106:	b580      	push	{r7, lr}
 8014108:	b084      	sub	sp, #16
 801410a:	af00      	add	r7, sp, #0
 801410c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d003      	beq.n	801411c <LoRaMacParserData+0x16>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d101      	bne.n	8014120 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801411c:	2302      	movs	r3, #2
 801411e:	e0e0      	b.n	80142e2 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8014120:	2300      	movs	r3, #0
 8014122:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	89fb      	ldrh	r3, [r7, #14]
 801412a:	1c59      	adds	r1, r3, #1
 801412c:	81f9      	strh	r1, [r7, #14]
 801412e:	4413      	add	r3, r2
 8014130:	781a      	ldrb	r2, [r3, #0]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	89fb      	ldrh	r3, [r7, #14]
 801413c:	1c59      	adds	r1, r3, #1
 801413e:	81f9      	strh	r1, [r7, #14]
 8014140:	4413      	add	r3, r2
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	461a      	mov	r2, r3
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681a      	ldr	r2, [r3, #0]
 801414e:	89fb      	ldrh	r3, [r7, #14]
 8014150:	1c59      	adds	r1, r3, #1
 8014152:	81f9      	strh	r1, [r7, #14]
 8014154:	4413      	add	r3, r2
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	021a      	lsls	r2, r3, #8
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	689b      	ldr	r3, [r3, #8]
 801415e:	431a      	orrs	r2, r3
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	89fb      	ldrh	r3, [r7, #14]
 801416a:	1c59      	adds	r1, r3, #1
 801416c:	81f9      	strh	r1, [r7, #14]
 801416e:	4413      	add	r3, r2
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	041a      	lsls	r2, r3, #16
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	689b      	ldr	r3, [r3, #8]
 8014178:	431a      	orrs	r2, r3
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	89fb      	ldrh	r3, [r7, #14]
 8014184:	1c59      	adds	r1, r3, #1
 8014186:	81f9      	strh	r1, [r7, #14]
 8014188:	4413      	add	r3, r2
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	061a      	lsls	r2, r3, #24
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	431a      	orrs	r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681a      	ldr	r2, [r3, #0]
 801419c:	89fb      	ldrh	r3, [r7, #14]
 801419e:	1c59      	adds	r1, r3, #1
 80141a0:	81f9      	strh	r1, [r7, #14]
 80141a2:	4413      	add	r3, r2
 80141a4:	781a      	ldrb	r2, [r3, #0]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	89fb      	ldrh	r3, [r7, #14]
 80141b0:	1c59      	adds	r1, r3, #1
 80141b2:	81f9      	strh	r1, [r7, #14]
 80141b4:	4413      	add	r3, r2
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	461a      	mov	r2, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	89fb      	ldrh	r3, [r7, #14]
 80141c4:	1c59      	adds	r1, r3, #1
 80141c6:	81f9      	strh	r1, [r7, #14]
 80141c8:	4413      	add	r3, r2
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	0219      	lsls	r1, r3, #8
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	89db      	ldrh	r3, [r3, #14]
 80141d2:	b21a      	sxth	r2, r3
 80141d4:	b20b      	sxth	r3, r1
 80141d6:	4313      	orrs	r3, r2
 80141d8:	b21b      	sxth	r3, r3
 80141da:	b29a      	uxth	r2, r3
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f103 0010 	add.w	r0, r3, #16
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	89fb      	ldrh	r3, [r7, #14]
 80141ec:	18d1      	adds	r1, r2, r3
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	7b1b      	ldrb	r3, [r3, #12]
 80141f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	461a      	mov	r2, r3
 80141fa:	f002 fc28 	bl	8016a4e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	7b1b      	ldrb	r3, [r3, #12]
 8014202:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014206:	b2db      	uxtb	r3, r3
 8014208:	461a      	mov	r2, r3
 801420a:	89fb      	ldrh	r3, [r7, #14]
 801420c:	4413      	add	r3, r2
 801420e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2200      	movs	r2, #0
 801421c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	791b      	ldrb	r3, [r3, #4]
 8014224:	461a      	mov	r2, r3
 8014226:	89fb      	ldrh	r3, [r7, #14]
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	2b04      	cmp	r3, #4
 801422c:	dd27      	ble.n	801427e <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	89fb      	ldrh	r3, [r7, #14]
 8014234:	1c59      	adds	r1, r3, #1
 8014236:	81f9      	strh	r1, [r7, #14]
 8014238:	4413      	add	r3, r2
 801423a:	781a      	ldrb	r2, [r3, #0]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	791a      	ldrb	r2, [r3, #4]
 8014246:	89fb      	ldrh	r3, [r7, #14]
 8014248:	b2db      	uxtb	r3, r3
 801424a:	1ad3      	subs	r3, r2, r3
 801424c:	b2db      	uxtb	r3, r3
 801424e:	3b04      	subs	r3, #4
 8014250:	b2da      	uxtb	r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	89fb      	ldrh	r3, [r7, #14]
 8014262:	18d1      	adds	r1, r2, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801426a:	461a      	mov	r2, r3
 801426c:	f002 fbef 	bl	8016a4e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014276:	461a      	mov	r2, r3
 8014278:	89fb      	ldrh	r3, [r7, #14]
 801427a:	4413      	add	r3, r2
 801427c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	791b      	ldrb	r3, [r3, #4]
 8014286:	3b04      	subs	r3, #4
 8014288:	4413      	add	r3, r2
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	461a      	mov	r2, r3
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6819      	ldr	r1, [r3, #0]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	791b      	ldrb	r3, [r3, #4]
 801429e:	3b03      	subs	r3, #3
 80142a0:	440b      	add	r3, r1
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	021b      	lsls	r3, r3, #8
 80142a6:	431a      	orrs	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	6819      	ldr	r1, [r3, #0]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	791b      	ldrb	r3, [r3, #4]
 80142b8:	3b02      	subs	r3, #2
 80142ba:	440b      	add	r3, r1
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	041b      	lsls	r3, r3, #16
 80142c0:	431a      	orrs	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6819      	ldr	r1, [r3, #0]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	791b      	ldrb	r3, [r3, #4]
 80142d2:	3b01      	subs	r3, #1
 80142d4:	440b      	add	r3, r1
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	061b      	lsls	r3, r3, #24
 80142da:	431a      	orrs	r2, r3
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80142e0:	2300      	movs	r3, #0
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80142ea:	b580      	push	{r7, lr}
 80142ec:	b084      	sub	sp, #16
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d003      	beq.n	8014300 <LoRaMacSerializerJoinRequest+0x16>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d101      	bne.n	8014304 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014300:	2301      	movs	r3, #1
 8014302:	e070      	b.n	80143e6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014304:	2300      	movs	r3, #0
 8014306:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	791b      	ldrb	r3, [r3, #4]
 801430c:	2b16      	cmp	r3, #22
 801430e:	d801      	bhi.n	8014314 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014310:	2302      	movs	r3, #2
 8014312:	e068      	b.n	80143e6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681a      	ldr	r2, [r3, #0]
 8014318:	89fb      	ldrh	r3, [r7, #14]
 801431a:	1c59      	adds	r1, r3, #1
 801431c:	81f9      	strh	r1, [r7, #14]
 801431e:	4413      	add	r3, r2
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	7952      	ldrb	r2, [r2, #5]
 8014324:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681a      	ldr	r2, [r3, #0]
 801432a:	89fb      	ldrh	r3, [r7, #14]
 801432c:	18d0      	adds	r0, r2, r3
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	3306      	adds	r3, #6
 8014332:	2208      	movs	r2, #8
 8014334:	4619      	mov	r1, r3
 8014336:	f002 fba5 	bl	8016a84 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801433a:	89fb      	ldrh	r3, [r7, #14]
 801433c:	3308      	adds	r3, #8
 801433e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681a      	ldr	r2, [r3, #0]
 8014344:	89fb      	ldrh	r3, [r7, #14]
 8014346:	18d0      	adds	r0, r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	330e      	adds	r3, #14
 801434c:	2208      	movs	r2, #8
 801434e:	4619      	mov	r1, r3
 8014350:	f002 fb98 	bl	8016a84 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014354:	89fb      	ldrh	r3, [r7, #14]
 8014356:	3308      	adds	r3, #8
 8014358:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	8ad9      	ldrh	r1, [r3, #22]
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	89fb      	ldrh	r3, [r7, #14]
 8014364:	1c58      	adds	r0, r3, #1
 8014366:	81f8      	strh	r0, [r7, #14]
 8014368:	4413      	add	r3, r2
 801436a:	b2ca      	uxtb	r2, r1
 801436c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	8adb      	ldrh	r3, [r3, #22]
 8014372:	0a1b      	lsrs	r3, r3, #8
 8014374:	b299      	uxth	r1, r3
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	89fb      	ldrh	r3, [r7, #14]
 801437c:	1c58      	adds	r0, r3, #1
 801437e:	81f8      	strh	r0, [r7, #14]
 8014380:	4413      	add	r3, r2
 8014382:	b2ca      	uxtb	r2, r1
 8014384:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6999      	ldr	r1, [r3, #24]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	89fb      	ldrh	r3, [r7, #14]
 8014390:	1c58      	adds	r0, r3, #1
 8014392:	81f8      	strh	r0, [r7, #14]
 8014394:	4413      	add	r3, r2
 8014396:	b2ca      	uxtb	r2, r1
 8014398:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	699b      	ldr	r3, [r3, #24]
 801439e:	0a19      	lsrs	r1, r3, #8
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681a      	ldr	r2, [r3, #0]
 80143a4:	89fb      	ldrh	r3, [r7, #14]
 80143a6:	1c58      	adds	r0, r3, #1
 80143a8:	81f8      	strh	r0, [r7, #14]
 80143aa:	4413      	add	r3, r2
 80143ac:	b2ca      	uxtb	r2, r1
 80143ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	699b      	ldr	r3, [r3, #24]
 80143b4:	0c19      	lsrs	r1, r3, #16
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	89fb      	ldrh	r3, [r7, #14]
 80143bc:	1c58      	adds	r0, r3, #1
 80143be:	81f8      	strh	r0, [r7, #14]
 80143c0:	4413      	add	r3, r2
 80143c2:	b2ca      	uxtb	r2, r1
 80143c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	699b      	ldr	r3, [r3, #24]
 80143ca:	0e19      	lsrs	r1, r3, #24
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	89fb      	ldrh	r3, [r7, #14]
 80143d2:	1c58      	adds	r0, r3, #1
 80143d4:	81f8      	strh	r0, [r7, #14]
 80143d6:	4413      	add	r3, r2
 80143d8:	b2ca      	uxtb	r2, r1
 80143da:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80143dc:	89fb      	ldrh	r3, [r7, #14]
 80143de:	b2da      	uxtb	r2, r3
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80143e4:	2300      	movs	r3, #0
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}

080143ee <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80143ee:	b580      	push	{r7, lr}
 80143f0:	b084      	sub	sp, #16
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d003      	beq.n	8014404 <LoRaMacSerializerData+0x16>
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d101      	bne.n	8014408 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014404:	2301      	movs	r3, #1
 8014406:	e0e3      	b.n	80145d0 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014408:	2300      	movs	r3, #0
 801440a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801440c:	2308      	movs	r3, #8
 801440e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	7b1b      	ldrb	r3, [r3, #12]
 8014414:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014418:	b2db      	uxtb	r3, r3
 801441a:	461a      	mov	r2, r3
 801441c:	89bb      	ldrh	r3, [r7, #12]
 801441e:	4413      	add	r3, r2
 8014420:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014428:	2b00      	cmp	r3, #0
 801442a:	d002      	beq.n	8014432 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801442c:	89bb      	ldrh	r3, [r7, #12]
 801442e:	3301      	adds	r3, #1
 8014430:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014438:	461a      	mov	r2, r3
 801443a:	89bb      	ldrh	r3, [r7, #12]
 801443c:	4413      	add	r3, r2
 801443e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014440:	89bb      	ldrh	r3, [r7, #12]
 8014442:	3304      	adds	r3, #4
 8014444:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	791b      	ldrb	r3, [r3, #4]
 801444a:	461a      	mov	r2, r3
 801444c:	89bb      	ldrh	r3, [r7, #12]
 801444e:	4293      	cmp	r3, r2
 8014450:	d901      	bls.n	8014456 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014452:	2302      	movs	r3, #2
 8014454:	e0bc      	b.n	80145d0 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681a      	ldr	r2, [r3, #0]
 801445a:	89fb      	ldrh	r3, [r7, #14]
 801445c:	1c59      	adds	r1, r3, #1
 801445e:	81f9      	strh	r1, [r7, #14]
 8014460:	4413      	add	r3, r2
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	7952      	ldrb	r2, [r2, #5]
 8014466:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6899      	ldr	r1, [r3, #8]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	89fb      	ldrh	r3, [r7, #14]
 8014472:	1c58      	adds	r0, r3, #1
 8014474:	81f8      	strh	r0, [r7, #14]
 8014476:	4413      	add	r3, r2
 8014478:	b2ca      	uxtb	r2, r1
 801447a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	689b      	ldr	r3, [r3, #8]
 8014480:	0a19      	lsrs	r1, r3, #8
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	89fb      	ldrh	r3, [r7, #14]
 8014488:	1c58      	adds	r0, r3, #1
 801448a:	81f8      	strh	r0, [r7, #14]
 801448c:	4413      	add	r3, r2
 801448e:	b2ca      	uxtb	r2, r1
 8014490:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	689b      	ldr	r3, [r3, #8]
 8014496:	0c19      	lsrs	r1, r3, #16
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681a      	ldr	r2, [r3, #0]
 801449c:	89fb      	ldrh	r3, [r7, #14]
 801449e:	1c58      	adds	r0, r3, #1
 80144a0:	81f8      	strh	r0, [r7, #14]
 80144a2:	4413      	add	r3, r2
 80144a4:	b2ca      	uxtb	r2, r1
 80144a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	689b      	ldr	r3, [r3, #8]
 80144ac:	0e19      	lsrs	r1, r3, #24
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	89fb      	ldrh	r3, [r7, #14]
 80144b4:	1c58      	adds	r0, r3, #1
 80144b6:	81f8      	strh	r0, [r7, #14]
 80144b8:	4413      	add	r3, r2
 80144ba:	b2ca      	uxtb	r2, r1
 80144bc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681a      	ldr	r2, [r3, #0]
 80144c2:	89fb      	ldrh	r3, [r7, #14]
 80144c4:	1c59      	adds	r1, r3, #1
 80144c6:	81f9      	strh	r1, [r7, #14]
 80144c8:	4413      	add	r3, r2
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	7b12      	ldrb	r2, [r2, #12]
 80144ce:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	89d9      	ldrh	r1, [r3, #14]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	89fb      	ldrh	r3, [r7, #14]
 80144da:	1c58      	adds	r0, r3, #1
 80144dc:	81f8      	strh	r0, [r7, #14]
 80144de:	4413      	add	r3, r2
 80144e0:	b2ca      	uxtb	r2, r1
 80144e2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	89db      	ldrh	r3, [r3, #14]
 80144e8:	0a1b      	lsrs	r3, r3, #8
 80144ea:	b299      	uxth	r1, r3
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681a      	ldr	r2, [r3, #0]
 80144f0:	89fb      	ldrh	r3, [r7, #14]
 80144f2:	1c58      	adds	r0, r3, #1
 80144f4:	81f8      	strh	r0, [r7, #14]
 80144f6:	4413      	add	r3, r2
 80144f8:	b2ca      	uxtb	r2, r1
 80144fa:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681a      	ldr	r2, [r3, #0]
 8014500:	89fb      	ldrh	r3, [r7, #14]
 8014502:	18d0      	adds	r0, r2, r3
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f103 0110 	add.w	r1, r3, #16
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	7b1b      	ldrb	r3, [r3, #12]
 801450e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014512:	b2db      	uxtb	r3, r3
 8014514:	461a      	mov	r2, r3
 8014516:	f002 fa9a 	bl	8016a4e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	7b1b      	ldrb	r3, [r3, #12]
 801451e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014522:	b2db      	uxtb	r3, r3
 8014524:	461a      	mov	r2, r3
 8014526:	89fb      	ldrh	r3, [r7, #14]
 8014528:	4413      	add	r3, r2
 801452a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014532:	2b00      	cmp	r3, #0
 8014534:	d009      	beq.n	801454a <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	89fb      	ldrh	r3, [r7, #14]
 801453c:	1c59      	adds	r1, r3, #1
 801453e:	81f9      	strh	r1, [r7, #14]
 8014540:	4413      	add	r3, r2
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014548:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	89fb      	ldrh	r3, [r7, #14]
 8014550:	18d0      	adds	r0, r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801455c:	461a      	mov	r2, r3
 801455e:	f002 fa76 	bl	8016a4e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014568:	461a      	mov	r2, r3
 801456a:	89fb      	ldrh	r3, [r7, #14]
 801456c:	4413      	add	r3, r2
 801456e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681a      	ldr	r2, [r3, #0]
 8014578:	89fb      	ldrh	r3, [r7, #14]
 801457a:	1c58      	adds	r0, r3, #1
 801457c:	81f8      	strh	r0, [r7, #14]
 801457e:	4413      	add	r3, r2
 8014580:	b2ca      	uxtb	r2, r1
 8014582:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014588:	0a19      	lsrs	r1, r3, #8
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681a      	ldr	r2, [r3, #0]
 801458e:	89fb      	ldrh	r3, [r7, #14]
 8014590:	1c58      	adds	r0, r3, #1
 8014592:	81f8      	strh	r0, [r7, #14]
 8014594:	4413      	add	r3, r2
 8014596:	b2ca      	uxtb	r2, r1
 8014598:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801459e:	0c19      	lsrs	r1, r3, #16
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681a      	ldr	r2, [r3, #0]
 80145a4:	89fb      	ldrh	r3, [r7, #14]
 80145a6:	1c58      	adds	r0, r3, #1
 80145a8:	81f8      	strh	r0, [r7, #14]
 80145aa:	4413      	add	r3, r2
 80145ac:	b2ca      	uxtb	r2, r1
 80145ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145b4:	0e19      	lsrs	r1, r3, #24
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	89fb      	ldrh	r3, [r7, #14]
 80145bc:	1c58      	adds	r0, r3, #1
 80145be:	81f8      	strh	r0, [r7, #14]
 80145c0:	4413      	add	r3, r2
 80145c2:	b2ca      	uxtb	r2, r1
 80145c4:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80145c6:	89fb      	ldrh	r3, [r7, #14]
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80145ce:	2300      	movs	r3, #0
}
 80145d0:	4618      	mov	r0, r3
 80145d2:	3710      	adds	r7, #16
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80145d8:	b480      	push	{r7}
 80145da:	b083      	sub	sp, #12
 80145dc:	af00      	add	r7, sp, #0
 80145de:	4603      	mov	r3, r0
 80145e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145e2:	79fb      	ldrb	r3, [r7, #7]
 80145e4:	2b05      	cmp	r3, #5
 80145e6:	d101      	bne.n	80145ec <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80145e8:	2301      	movs	r3, #1
 80145ea:	e000      	b.n	80145ee <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80145ec:	2300      	movs	r3, #0
        }
    }
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	370c      	adds	r7, #12
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bc80      	pop	{r7}
 80145f6:	4770      	bx	lr

080145f8 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	4603      	mov	r3, r0
 8014600:	6039      	str	r1, [r7, #0]
 8014602:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014604:	2300      	movs	r3, #0
 8014606:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014608:	79fb      	ldrb	r3, [r7, #7]
 801460a:	2b05      	cmp	r3, #5
 801460c:	d105      	bne.n	801461a <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801460e:	6838      	ldr	r0, [r7, #0]
 8014610:	f001 f8fa 	bl	8015808 <RegionEU868GetPhyParam>
 8014614:	4603      	mov	r3, r0
 8014616:	60fb      	str	r3, [r7, #12]
 8014618:	e001      	b.n	801461e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	4618      	mov	r0, r3
 8014622:	3710      	adds	r7, #16
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
 801462e:	4603      	mov	r3, r0
 8014630:	6039      	str	r1, [r7, #0]
 8014632:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014634:	79fb      	ldrb	r3, [r7, #7]
 8014636:	2b05      	cmp	r3, #5
 8014638:	d103      	bne.n	8014642 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801463a:	6838      	ldr	r0, [r7, #0]
 801463c:	f001 fa2a 	bl	8015a94 <RegionEU868SetBandTxDone>
 8014640:	e000      	b.n	8014644 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014642:	bf00      	nop
        }
    }
}
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b082      	sub	sp, #8
 801464e:	af00      	add	r7, sp, #0
 8014650:	4603      	mov	r3, r0
 8014652:	6039      	str	r1, [r7, #0]
 8014654:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014656:	79fb      	ldrb	r3, [r7, #7]
 8014658:	2b05      	cmp	r3, #5
 801465a:	d103      	bne.n	8014664 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801465c:	6838      	ldr	r0, [r7, #0]
 801465e:	f001 fa45 	bl	8015aec <RegionEU868InitDefaults>
 8014662:	e000      	b.n	8014666 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014664:	bf00      	nop
        }
    }
}
 8014666:	bf00      	nop
 8014668:	3708      	adds	r7, #8
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}

0801466e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801466e:	b580      	push	{r7, lr}
 8014670:	b082      	sub	sp, #8
 8014672:	af00      	add	r7, sp, #0
 8014674:	4603      	mov	r3, r0
 8014676:	6039      	str	r1, [r7, #0]
 8014678:	71fb      	strb	r3, [r7, #7]
 801467a:	4613      	mov	r3, r2
 801467c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801467e:	79fb      	ldrb	r3, [r7, #7]
 8014680:	2b05      	cmp	r3, #5
 8014682:	d106      	bne.n	8014692 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014684:	79bb      	ldrb	r3, [r7, #6]
 8014686:	4619      	mov	r1, r3
 8014688:	6838      	ldr	r0, [r7, #0]
 801468a:	f001 facd 	bl	8015c28 <RegionEU868Verify>
 801468e:	4603      	mov	r3, r0
 8014690:	e000      	b.n	8014694 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014692:	2300      	movs	r3, #0
        }
    }
}
 8014694:	4618      	mov	r0, r3
 8014696:	3708      	adds	r7, #8
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}

0801469c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	4603      	mov	r3, r0
 80146a4:	6039      	str	r1, [r7, #0]
 80146a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146a8:	79fb      	ldrb	r3, [r7, #7]
 80146aa:	2b05      	cmp	r3, #5
 80146ac:	d103      	bne.n	80146b6 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80146ae:	6838      	ldr	r0, [r7, #0]
 80146b0:	f001 fb36 	bl	8015d20 <RegionEU868ApplyCFList>
 80146b4:	e000      	b.n	80146b8 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80146b6:	bf00      	nop
        }
    }
}
 80146b8:	bf00      	nop
 80146ba:	3708      	adds	r7, #8
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}

080146c0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b082      	sub	sp, #8
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	4603      	mov	r3, r0
 80146c8:	6039      	str	r1, [r7, #0]
 80146ca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146cc:	79fb      	ldrb	r3, [r7, #7]
 80146ce:	2b05      	cmp	r3, #5
 80146d0:	d104      	bne.n	80146dc <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80146d2:	6838      	ldr	r0, [r7, #0]
 80146d4:	f001 fb98 	bl	8015e08 <RegionEU868ChanMaskSet>
 80146d8:	4603      	mov	r3, r0
 80146da:	e000      	b.n	80146de <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80146dc:	2300      	movs	r3, #0
        }
    }
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}

080146e6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80146e6:	b580      	push	{r7, lr}
 80146e8:	b082      	sub	sp, #8
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	603b      	str	r3, [r7, #0]
 80146ee:	4603      	mov	r3, r0
 80146f0:	71fb      	strb	r3, [r7, #7]
 80146f2:	460b      	mov	r3, r1
 80146f4:	71bb      	strb	r3, [r7, #6]
 80146f6:	4613      	mov	r3, r2
 80146f8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80146fa:	79fb      	ldrb	r3, [r7, #7]
 80146fc:	2b05      	cmp	r3, #5
 80146fe:	d107      	bne.n	8014710 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014700:	7979      	ldrb	r1, [r7, #5]
 8014702:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014706:	693b      	ldr	r3, [r7, #16]
 8014708:	683a      	ldr	r2, [r7, #0]
 801470a:	f001 fba7 	bl	8015e5c <RegionEU868ComputeRxWindowParameters>
 801470e:	e000      	b.n	8014712 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014710:	bf00      	nop
        }
    }
}
 8014712:	bf00      	nop
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}

0801471a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801471a:	b580      	push	{r7, lr}
 801471c:	b084      	sub	sp, #16
 801471e:	af00      	add	r7, sp, #0
 8014720:	4603      	mov	r3, r0
 8014722:	60b9      	str	r1, [r7, #8]
 8014724:	607a      	str	r2, [r7, #4]
 8014726:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014728:	7bfb      	ldrb	r3, [r7, #15]
 801472a:	2b05      	cmp	r3, #5
 801472c:	d105      	bne.n	801473a <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801472e:	6879      	ldr	r1, [r7, #4]
 8014730:	68b8      	ldr	r0, [r7, #8]
 8014732:	f001 fbed 	bl	8015f10 <RegionEU868RxConfig>
 8014736:	4603      	mov	r3, r0
 8014738:	e000      	b.n	801473c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801473a:	2300      	movs	r3, #0
        }
    }
}
 801473c:	4618      	mov	r0, r3
 801473e:	3710      	adds	r7, #16
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}

08014744 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	60b9      	str	r1, [r7, #8]
 801474c:	607a      	str	r2, [r7, #4]
 801474e:	603b      	str	r3, [r7, #0]
 8014750:	4603      	mov	r3, r0
 8014752:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014754:	7bfb      	ldrb	r3, [r7, #15]
 8014756:	2b05      	cmp	r3, #5
 8014758:	d106      	bne.n	8014768 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801475a:	683a      	ldr	r2, [r7, #0]
 801475c:	6879      	ldr	r1, [r7, #4]
 801475e:	68b8      	ldr	r0, [r7, #8]
 8014760:	f001 fca6 	bl	80160b0 <RegionEU868TxConfig>
 8014764:	4603      	mov	r3, r0
 8014766:	e000      	b.n	801476a <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014768:	2300      	movs	r3, #0
        }
    }
}
 801476a:	4618      	mov	r0, r3
 801476c:	3710      	adds	r7, #16
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}

08014772 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014772:	b580      	push	{r7, lr}
 8014774:	b086      	sub	sp, #24
 8014776:	af02      	add	r7, sp, #8
 8014778:	60b9      	str	r1, [r7, #8]
 801477a:	607a      	str	r2, [r7, #4]
 801477c:	603b      	str	r3, [r7, #0]
 801477e:	4603      	mov	r3, r0
 8014780:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014782:	7bfb      	ldrb	r3, [r7, #15]
 8014784:	2b05      	cmp	r3, #5
 8014786:	d109      	bne.n	801479c <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	9300      	str	r3, [sp, #0]
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	683a      	ldr	r2, [r7, #0]
 8014790:	6879      	ldr	r1, [r7, #4]
 8014792:	68b8      	ldr	r0, [r7, #8]
 8014794:	f001 fd5c 	bl	8016250 <RegionEU868LinkAdrReq>
 8014798:	4603      	mov	r3, r0
 801479a:	e000      	b.n	801479e <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801479c:	2300      	movs	r3, #0
        }
    }
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b082      	sub	sp, #8
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	4603      	mov	r3, r0
 80147ae:	6039      	str	r1, [r7, #0]
 80147b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80147b2:	79fb      	ldrb	r3, [r7, #7]
 80147b4:	2b05      	cmp	r3, #5
 80147b6:	d104      	bne.n	80147c2 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80147b8:	6838      	ldr	r0, [r7, #0]
 80147ba:	f001 fe6b 	bl	8016494 <RegionEU868RxParamSetupReq>
 80147be:	4603      	mov	r3, r0
 80147c0:	e000      	b.n	80147c4 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80147c2:	2300      	movs	r3, #0
        }
    }
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3708      	adds	r7, #8
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b082      	sub	sp, #8
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	4603      	mov	r3, r0
 80147d4:	6039      	str	r1, [r7, #0]
 80147d6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80147d8:	79fb      	ldrb	r3, [r7, #7]
 80147da:	2b05      	cmp	r3, #5
 80147dc:	d104      	bne.n	80147e8 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80147de:	6838      	ldr	r0, [r7, #0]
 80147e0:	f001 fe96 	bl	8016510 <RegionEU868NewChannelReq>
 80147e4:	4603      	mov	r3, r0
 80147e6:	e000      	b.n	80147ea <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80147e8:	2300      	movs	r3, #0
        }
    }
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3708      	adds	r7, #8
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}

080147f2 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b082      	sub	sp, #8
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	4603      	mov	r3, r0
 80147fa:	6039      	str	r1, [r7, #0]
 80147fc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80147fe:	79fb      	ldrb	r3, [r7, #7]
 8014800:	2b05      	cmp	r3, #5
 8014802:	d104      	bne.n	801480e <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014804:	6838      	ldr	r0, [r7, #0]
 8014806:	f001 fee1 	bl	80165cc <RegionEU868TxParamSetupReq>
 801480a:	4603      	mov	r3, r0
 801480c:	e000      	b.n	8014810 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801480e:	2300      	movs	r3, #0
        }
    }
}
 8014810:	4618      	mov	r0, r3
 8014812:	3708      	adds	r7, #8
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	6039      	str	r1, [r7, #0]
 8014822:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014824:	79fb      	ldrb	r3, [r7, #7]
 8014826:	2b05      	cmp	r3, #5
 8014828:	d104      	bne.n	8014834 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801482a:	6838      	ldr	r0, [r7, #0]
 801482c:	f001 feda 	bl	80165e4 <RegionEU868DlChannelReq>
 8014830:	4603      	mov	r3, r0
 8014832:	e000      	b.n	8014836 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014834:	2300      	movs	r3, #0
        }
    }
}
 8014836:	4618      	mov	r0, r3
 8014838:	3708      	adds	r7, #8
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}

0801483e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801483e:	b580      	push	{r7, lr}
 8014840:	b082      	sub	sp, #8
 8014842:	af00      	add	r7, sp, #0
 8014844:	4603      	mov	r3, r0
 8014846:	71fb      	strb	r3, [r7, #7]
 8014848:	460b      	mov	r3, r1
 801484a:	71bb      	strb	r3, [r7, #6]
 801484c:	4613      	mov	r3, r2
 801484e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014850:	79fb      	ldrb	r3, [r7, #7]
 8014852:	2b05      	cmp	r3, #5
 8014854:	d108      	bne.n	8014868 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014856:	797a      	ldrb	r2, [r7, #5]
 8014858:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801485c:	4611      	mov	r1, r2
 801485e:	4618      	mov	r0, r3
 8014860:	f001 ff0a 	bl	8016678 <RegionEU868AlternateDr>
 8014864:	4603      	mov	r3, r0
 8014866:	e000      	b.n	801486a <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014868:	2300      	movs	r3, #0
        }
    }
}
 801486a:	4618      	mov	r0, r3
 801486c:	3708      	adds	r7, #8
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}

08014872 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014872:	b580      	push	{r7, lr}
 8014874:	b084      	sub	sp, #16
 8014876:	af00      	add	r7, sp, #0
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
 801487c:	603b      	str	r3, [r7, #0]
 801487e:	4603      	mov	r3, r0
 8014880:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014882:	7bfb      	ldrb	r3, [r7, #15]
 8014884:	2b05      	cmp	r3, #5
 8014886:	d107      	bne.n	8014898 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	6879      	ldr	r1, [r7, #4]
 801488e:	68b8      	ldr	r0, [r7, #8]
 8014890:	f001 ff02 	bl	8016698 <RegionEU868NextChannel>
 8014894:	4603      	mov	r3, r0
 8014896:	e000      	b.n	801489a <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014898:	2309      	movs	r3, #9
        }
    }
}
 801489a:	4618      	mov	r0, r3
 801489c:	3710      	adds	r7, #16
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}

080148a2 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80148a2:	b590      	push	{r4, r7, lr}
 80148a4:	b083      	sub	sp, #12
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	4604      	mov	r4, r0
 80148aa:	4608      	mov	r0, r1
 80148ac:	4611      	mov	r1, r2
 80148ae:	461a      	mov	r2, r3
 80148b0:	4623      	mov	r3, r4
 80148b2:	71fb      	strb	r3, [r7, #7]
 80148b4:	4603      	mov	r3, r0
 80148b6:	71bb      	strb	r3, [r7, #6]
 80148b8:	460b      	mov	r3, r1
 80148ba:	717b      	strb	r3, [r7, #5]
 80148bc:	4613      	mov	r3, r2
 80148be:	713b      	strb	r3, [r7, #4]
    switch( region )
 80148c0:	79fb      	ldrb	r3, [r7, #7]
 80148c2:	2b05      	cmp	r3, #5
 80148c4:	d109      	bne.n	80148da <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80148c6:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80148ca:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80148ce:	79bb      	ldrb	r3, [r7, #6]
 80148d0:	4618      	mov	r0, r3
 80148d2:	f002 f85b 	bl	801698c <RegionEU868ApplyDrOffset>
 80148d6:	4603      	mov	r3, r0
 80148d8:	e000      	b.n	80148dc <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80148da:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80148dc:	4618      	mov	r0, r3
 80148de:	370c      	adds	r7, #12
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd90      	pop	{r4, r7, pc}

080148e4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80148ea:	4b04      	ldr	r3, [pc, #16]	@ (80148fc <RegionGetVersion+0x18>)
 80148ec:	607b      	str	r3, [r7, #4]

    return version;
 80148ee:	687b      	ldr	r3, [r7, #4]
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bc80      	pop	{r7}
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	02010003 	.word	0x02010003

08014900 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014900:	b480      	push	{r7}
 8014902:	b087      	sub	sp, #28
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	4608      	mov	r0, r1
 801490a:	4639      	mov	r1, r7
 801490c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014910:	4603      	mov	r3, r0
 8014912:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	881b      	ldrh	r3, [r3, #0]
 8014918:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801491a:	7afb      	ldrb	r3, [r7, #11]
 801491c:	f083 0301 	eor.w	r3, r3, #1
 8014920:	b2db      	uxtb	r3, r3
 8014922:	2b00      	cmp	r3, #0
 8014924:	d007      	beq.n	8014936 <GetDutyCycle+0x36>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014926:	2364      	movs	r3, #100	@ 0x64
 8014928:	82bb      	strh	r3, [r7, #20]
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801492a:	8aba      	ldrh	r2, [r7, #20]
 801492c:	8afb      	ldrh	r3, [r7, #22]
 801492e:	4293      	cmp	r3, r2
 8014930:	bf38      	it	cc
 8014932:	4613      	movcc	r3, r2
 8014934:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014936:	8afb      	ldrh	r3, [r7, #22]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d101      	bne.n	8014940 <GetDutyCycle+0x40>
    {
        dutyCycle = 1;
 801493c:	2301      	movs	r3, #1
 801493e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014940:	8afb      	ldrh	r3, [r7, #22]
}
 8014942:	4618      	mov	r0, r3
 8014944:	371c      	adds	r7, #28
 8014946:	46bd      	mov	sp, r7
 8014948:	bc80      	pop	{r7}
 801494a:	4770      	bx	lr

0801494c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b086      	sub	sp, #24
 8014950:	af00      	add	r7, sp, #0
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	4608      	mov	r0, r1
 8014956:	4639      	mov	r1, r7
 8014958:	e881 000c 	stmia.w	r1, {r2, r3}
 801495c:	4603      	mov	r3, r0
 801495e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	881b      	ldrh	r3, [r3, #0]
 8014964:	827b      	strh	r3, [r7, #18]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014966:	4b1a      	ldr	r3, [pc, #104]	@ (80149d0 <SetMaxTimeCredits+0x84>)
 8014968:	617b      	str	r3, [r7, #20]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801496a:	7af9      	ldrb	r1, [r7, #11]
 801496c:	463b      	mov	r3, r7
 801496e:	cb0c      	ldmia	r3, {r2, r3}
 8014970:	68f8      	ldr	r0, [r7, #12]
 8014972:	f7ff ffc5 	bl	8014900 <GetDutyCycle>
 8014976:	4603      	mov	r3, r0
 8014978:	827b      	strh	r3, [r7, #18]

    if( joined == false )
 801497a:	7afb      	ldrb	r3, [r7, #11]
 801497c:	f083 0301 	eor.w	r3, r3, #1
 8014980:	b2db      	uxtb	r3, r3
 8014982:	2b00      	cmp	r3, #0
 8014984:	d011      	beq.n	80149aa <SetMaxTimeCredits+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
		if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801498c:	d202      	bcs.n	8014994 <SetMaxTimeCredits+0x48>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801498e:	4b10      	ldr	r3, [pc, #64]	@ (80149d0 <SetMaxTimeCredits+0x84>)
 8014990:	617b      	str	r3, [r7, #20]
 8014992:	e014      	b.n	80149be <SetMaxTimeCredits+0x72>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801499a:	4293      	cmp	r3, r2
 801499c:	d802      	bhi.n	80149a4 <SetMaxTimeCredits+0x58>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801499e:	4b0c      	ldr	r3, [pc, #48]	@ (80149d0 <SetMaxTimeCredits+0x84>)
 80149a0:	617b      	str	r3, [r7, #20]
 80149a2:	e00c      	b.n	80149be <SetMaxTimeCredits+0x72>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
 80149a4:	4b0b      	ldr	r3, [pc, #44]	@ (80149d4 <SetMaxTimeCredits+0x88>)
 80149a6:	617b      	str	r3, [r7, #20]
 80149a8:	e009      	b.n	80149be <SetMaxTimeCredits+0x72>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 80149aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80149ae:	f083 0301 	eor.w	r3, r3, #1
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d002      	beq.n	80149be <SetMaxTimeCredits+0x72>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	697a      	ldr	r2, [r7, #20]
 80149bc:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	697a      	ldr	r2, [r7, #20]
 80149c2:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80149c4:	8a7b      	ldrh	r3, [r7, #18]
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	3718      	adds	r7, #24
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	0036ee80 	.word	0x0036ee80
 80149d4:	000d4670 	.word	0x000d4670

080149d8 <UpdateTimeCredits>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime, TimerTime_t lastBandUpdateTime )
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b086      	sub	sp, #24
 80149dc:	af02      	add	r7, sp, #8
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	4608      	mov	r0, r1
 80149e2:	4611      	mov	r1, r2
 80149e4:	461a      	mov	r2, r3
 80149e6:	4603      	mov	r3, r0
 80149e8:	70fb      	strb	r3, [r7, #3]
 80149ea:	460b      	mov	r3, r1
 80149ec:	70bb      	strb	r3, [r7, #2]
 80149ee:	4613      	mov	r3, r2
 80149f0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80149f2:	78f9      	ldrb	r1, [r7, #3]
 80149f4:	787b      	ldrb	r3, [r7, #1]
 80149f6:	9301      	str	r3, [sp, #4]
 80149f8:	78bb      	ldrb	r3, [r7, #2]
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	f107 0318 	add.w	r3, r7, #24
 8014a00:	cb0c      	ldmia	r3, {r2, r3}
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f7ff ffa2 	bl	801494c <SetMaxTimeCredits>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	817b      	strh	r3, [r7, #10]
                                            dutyCycleEnabled, lastTxIsJoinRequest );
    TimerTime_t observation = DUTY_CYCLE_TIME_PERIOD;
 8014a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8014a78 <UpdateTimeCredits+0xa0>)
 8014a0e:	60fb      	str	r3, [r7, #12]

    if( joined == false )
 8014a10:	78fb      	ldrb	r3, [r7, #3]
 8014a12:	f083 0301 	eor.w	r3, r3, #1
 8014a16:	b2db      	uxtb	r3, r3
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d010      	beq.n	8014a3e <UpdateTimeCredits+0x66>
    {
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8014a22:	d202      	bcs.n	8014a2a <UpdateTimeCredits+0x52>
        {
            observation = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S * 1000;
 8014a24:	4b14      	ldr	r3, [pc, #80]	@ (8014a78 <UpdateTimeCredits+0xa0>)
 8014a26:	60fb      	str	r3, [r7, #12]
 8014a28:	e009      	b.n	8014a3e <UpdateTimeCredits+0x66>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014a2a:	69bb      	ldr	r3, [r7, #24]
 8014a2c:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d802      	bhi.n	8014a3a <UpdateTimeCredits+0x62>
        {
            observation = ( BACKOFF_DUTY_CYCLE_10_HOURS_IN_S * 1000 );
 8014a34:	4b11      	ldr	r3, [pc, #68]	@ (8014a7c <UpdateTimeCredits+0xa4>)
 8014a36:	60fb      	str	r3, [r7, #12]
 8014a38:	e001      	b.n	8014a3e <UpdateTimeCredits+0x66>
        }
        else
        {
            observation = ( BACKOFF_DUTY_CYCLE_24_HOURS_IN_S * 1000 );
 8014a3a:	4b11      	ldr	r3, [pc, #68]	@ (8014a80 <UpdateTimeCredits+0xa8>)
 8014a3c:	60fb      	str	r3, [r7, #12]
        }
    }

    // Apply new credits only if the observation period has been elapsed.
    if( ( observation <= lastBandUpdateTime ) ||
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d908      	bls.n	8014a58 <UpdateTimeCredits+0x80>
        ( band->LastMaxCreditAssignTime != observation ) ||
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	689b      	ldr	r3, [r3, #8]
    if( ( observation <= lastBandUpdateTime ) ||
 8014a4a:	68fa      	ldr	r2, [r7, #12]
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d103      	bne.n	8014a58 <UpdateTimeCredits+0x80>
        ( band->LastBandUpdateTime == 0 ) )
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	685b      	ldr	r3, [r3, #4]
        ( band->LastMaxCreditAssignTime != observation ) ||
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d109      	bne.n	8014a6c <UpdateTimeCredits+0x94>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	691a      	ldr	r2, [r3, #16]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	60da      	str	r2, [r3, #12]
        band->LastBandUpdateTime = currentTime;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6a3a      	ldr	r2, [r7, #32]
 8014a64:	605a      	str	r2, [r3, #4]
        band->LastMaxCreditAssignTime = observation;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	68fa      	ldr	r2, [r7, #12]
 8014a6a:	609a      	str	r2, [r3, #8]
    }
    return dutyCycle;
 8014a6c:	897b      	ldrh	r3, [r7, #10]
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3710      	adds	r7, #16
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	bf00      	nop
 8014a78:	0036ee80 	.word	0x0036ee80
 8014a7c:	025c3f80 	.word	0x025c3f80
 8014a80:	07829b80 	.word	0x07829b80

08014a84 <CountChannels>:
    return dutyCycle;
}
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014a84:	b480      	push	{r7}
 8014a86:	b085      	sub	sp, #20
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	460a      	mov	r2, r1
 8014a8e:	80fb      	strh	r3, [r7, #6]
 8014a90:	4613      	mov	r3, r2
 8014a92:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014a94:	2300      	movs	r3, #0
 8014a96:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014a98:	2300      	movs	r3, #0
 8014a9a:	73bb      	strb	r3, [r7, #14]
 8014a9c:	e011      	b.n	8014ac2 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014a9e:	88fa      	ldrh	r2, [r7, #6]
 8014aa0:	7bbb      	ldrb	r3, [r7, #14]
 8014aa2:	2101      	movs	r1, #1
 8014aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8014aa8:	401a      	ands	r2, r3
 8014aaa:	7bbb      	ldrb	r3, [r7, #14]
 8014aac:	2101      	movs	r1, #1
 8014aae:	fa01 f303 	lsl.w	r3, r1, r3
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d102      	bne.n	8014abc <CountChannels+0x38>
        {
            nbActiveBits++;
 8014ab6:	7bfb      	ldrb	r3, [r7, #15]
 8014ab8:	3301      	adds	r3, #1
 8014aba:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014abc:	7bbb      	ldrb	r3, [r7, #14]
 8014abe:	3301      	adds	r3, #1
 8014ac0:	73bb      	strb	r3, [r7, #14]
 8014ac2:	7bba      	ldrb	r2, [r7, #14]
 8014ac4:	797b      	ldrb	r3, [r7, #5]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d3e9      	bcc.n	8014a9e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	3714      	adds	r7, #20
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bc80      	pop	{r7}
 8014ad4:	4770      	bx	lr

08014ad6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014ad6:	b580      	push	{r7, lr}
 8014ad8:	b084      	sub	sp, #16
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	6039      	str	r1, [r7, #0]
 8014ade:	4611      	mov	r1, r2
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	71fb      	strb	r3, [r7, #7]
 8014ae6:	460b      	mov	r3, r1
 8014ae8:	71bb      	strb	r3, [r7, #6]
 8014aea:	4613      	mov	r3, r2
 8014aec:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014aee:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8014af2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014af6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014afa:	4618      	mov	r0, r3
 8014afc:	f000 f85d 	bl	8014bba <RegionCommonValueInRange>
 8014b00:	4603      	mov	r3, r0
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d101      	bne.n	8014b0a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014b06:	2300      	movs	r3, #0
 8014b08:	e053      	b.n	8014bb2 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	73fb      	strb	r3, [r7, #15]
 8014b0e:	2300      	movs	r3, #0
 8014b10:	73bb      	strb	r3, [r7, #14]
 8014b12:	e049      	b.n	8014ba8 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014b14:	2300      	movs	r3, #0
 8014b16:	737b      	strb	r3, [r7, #13]
 8014b18:	e03d      	b.n	8014b96 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014b1a:	7bbb      	ldrb	r3, [r7, #14]
 8014b1c:	005b      	lsls	r3, r3, #1
 8014b1e:	683a      	ldr	r2, [r7, #0]
 8014b20:	4413      	add	r3, r2
 8014b22:	881b      	ldrh	r3, [r3, #0]
 8014b24:	461a      	mov	r2, r3
 8014b26:	7b7b      	ldrb	r3, [r7, #13]
 8014b28:	fa42 f303 	asr.w	r3, r2, r3
 8014b2c:	f003 0301 	and.w	r3, r3, #1
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d02d      	beq.n	8014b90 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014b34:	7bfa      	ldrb	r2, [r7, #15]
 8014b36:	7b7b      	ldrb	r3, [r7, #13]
 8014b38:	4413      	add	r3, r2
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	005b      	lsls	r3, r3, #1
 8014b40:	4413      	add	r3, r2
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	461a      	mov	r2, r3
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	4413      	add	r3, r2
 8014b4a:	7a1b      	ldrb	r3, [r3, #8]
 8014b4c:	f343 0303 	sbfx	r3, r3, #0, #4
 8014b50:	b25b      	sxtb	r3, r3
 8014b52:	f003 030f 	and.w	r3, r3, #15
 8014b56:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014b58:	7bfa      	ldrb	r2, [r7, #15]
 8014b5a:	7b7b      	ldrb	r3, [r7, #13]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	461a      	mov	r2, r3
 8014b60:	4613      	mov	r3, r2
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	4413      	add	r3, r2
 8014b66:	009b      	lsls	r3, r3, #2
 8014b68:	461a      	mov	r2, r3
 8014b6a:	69fb      	ldr	r3, [r7, #28]
 8014b6c:	4413      	add	r3, r2
 8014b6e:	7a1b      	ldrb	r3, [r3, #8]
 8014b70:	f343 1303 	sbfx	r3, r3, #4, #4
 8014b74:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014b76:	f003 030f 	and.w	r3, r3, #15
 8014b7a:	b25a      	sxtb	r2, r3
 8014b7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014b80:	4618      	mov	r0, r3
 8014b82:	f000 f81a 	bl	8014bba <RegionCommonValueInRange>
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	d101      	bne.n	8014b90 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	e010      	b.n	8014bb2 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014b90:	7b7b      	ldrb	r3, [r7, #13]
 8014b92:	3301      	adds	r3, #1
 8014b94:	737b      	strb	r3, [r7, #13]
 8014b96:	7b7b      	ldrb	r3, [r7, #13]
 8014b98:	2b0f      	cmp	r3, #15
 8014b9a:	d9be      	bls.n	8014b1a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014b9c:	7bfb      	ldrb	r3, [r7, #15]
 8014b9e:	3310      	adds	r3, #16
 8014ba0:	73fb      	strb	r3, [r7, #15]
 8014ba2:	7bbb      	ldrb	r3, [r7, #14]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	73bb      	strb	r3, [r7, #14]
 8014ba8:	7bfa      	ldrb	r2, [r7, #15]
 8014baa:	79fb      	ldrb	r3, [r7, #7]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d3b1      	bcc.n	8014b14 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014bb0:	2300      	movs	r3, #0
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3710      	adds	r7, #16
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}

08014bba <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014bba:	b480      	push	{r7}
 8014bbc:	b083      	sub	sp, #12
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	71fb      	strb	r3, [r7, #7]
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	71bb      	strb	r3, [r7, #6]
 8014bc8:	4613      	mov	r3, r2
 8014bca:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014bcc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014bd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	db07      	blt.n	8014be8 <RegionCommonValueInRange+0x2e>
 8014bd8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014bdc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014be0:	429a      	cmp	r2, r3
 8014be2:	dc01      	bgt.n	8014be8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014be4:	2301      	movs	r3, #1
 8014be6:	e000      	b.n	8014bea <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014be8:	2300      	movs	r3, #0
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	370c      	adds	r7, #12
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bc80      	pop	{r7}
 8014bf2:	4770      	bx	lr

08014bf4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b085      	sub	sp, #20
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	70fb      	strb	r3, [r7, #3]
 8014c00:	4613      	mov	r3, r2
 8014c02:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014c04:	78fb      	ldrb	r3, [r7, #3]
 8014c06:	091b      	lsrs	r3, r3, #4
 8014c08:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014c0a:	78bb      	ldrb	r3, [r7, #2]
 8014c0c:	091b      	lsrs	r3, r3, #4
 8014c0e:	b2db      	uxtb	r3, r3
 8014c10:	7bfa      	ldrb	r2, [r7, #15]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d803      	bhi.n	8014c1e <RegionCommonChanDisable+0x2a>
 8014c16:	78fa      	ldrb	r2, [r7, #3]
 8014c18:	78bb      	ldrb	r3, [r7, #2]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d301      	bcc.n	8014c22 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	e017      	b.n	8014c52 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014c22:	7bfb      	ldrb	r3, [r7, #15]
 8014c24:	005b      	lsls	r3, r3, #1
 8014c26:	687a      	ldr	r2, [r7, #4]
 8014c28:	4413      	add	r3, r2
 8014c2a:	881b      	ldrh	r3, [r3, #0]
 8014c2c:	b21a      	sxth	r2, r3
 8014c2e:	78fb      	ldrb	r3, [r7, #3]
 8014c30:	f003 030f 	and.w	r3, r3, #15
 8014c34:	2101      	movs	r1, #1
 8014c36:	fa01 f303 	lsl.w	r3, r1, r3
 8014c3a:	b21b      	sxth	r3, r3
 8014c3c:	43db      	mvns	r3, r3
 8014c3e:	b21b      	sxth	r3, r3
 8014c40:	4013      	ands	r3, r2
 8014c42:	b219      	sxth	r1, r3
 8014c44:	7bfb      	ldrb	r3, [r7, #15]
 8014c46:	005b      	lsls	r3, r3, #1
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	4413      	add	r3, r2
 8014c4c:	b28a      	uxth	r2, r1
 8014c4e:	801a      	strh	r2, [r3, #0]

    return true;
 8014c50:	2301      	movs	r3, #1
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3714      	adds	r7, #20
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bc80      	pop	{r7}
 8014c5a:	4770      	bx	lr

08014c5c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b084      	sub	sp, #16
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	460b      	mov	r3, r1
 8014c66:	70fb      	strb	r3, [r7, #3]
 8014c68:	4613      	mov	r3, r2
 8014c6a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d101      	bne.n	8014c7a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014c76:	2300      	movs	r3, #0
 8014c78:	e018      	b.n	8014cac <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014c7a:	78fb      	ldrb	r3, [r7, #3]
 8014c7c:	73bb      	strb	r3, [r7, #14]
 8014c7e:	e010      	b.n	8014ca2 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014c80:	7bbb      	ldrb	r3, [r7, #14]
 8014c82:	005b      	lsls	r3, r3, #1
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	4413      	add	r3, r2
 8014c88:	881b      	ldrh	r3, [r3, #0]
 8014c8a:	2110      	movs	r1, #16
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7ff fef9 	bl	8014a84 <CountChannels>
 8014c92:	4603      	mov	r3, r0
 8014c94:	461a      	mov	r2, r3
 8014c96:	7bfb      	ldrb	r3, [r7, #15]
 8014c98:	4413      	add	r3, r2
 8014c9a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014c9c:	7bbb      	ldrb	r3, [r7, #14]
 8014c9e:	3301      	adds	r3, #1
 8014ca0:	73bb      	strb	r3, [r7, #14]
 8014ca2:	7bba      	ldrb	r2, [r7, #14]
 8014ca4:	78bb      	ldrb	r3, [r7, #2]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d3ea      	bcc.n	8014c80 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b087      	sub	sp, #28
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	4613      	mov	r3, r2
 8014cc0:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d016      	beq.n	8014cf6 <RegionCommonChanMaskCopy+0x42>
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d013      	beq.n	8014cf6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014cce:	2300      	movs	r3, #0
 8014cd0:	75fb      	strb	r3, [r7, #23]
 8014cd2:	e00c      	b.n	8014cee <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014cd4:	7dfb      	ldrb	r3, [r7, #23]
 8014cd6:	005b      	lsls	r3, r3, #1
 8014cd8:	68ba      	ldr	r2, [r7, #8]
 8014cda:	441a      	add	r2, r3
 8014cdc:	7dfb      	ldrb	r3, [r7, #23]
 8014cde:	005b      	lsls	r3, r3, #1
 8014ce0:	68f9      	ldr	r1, [r7, #12]
 8014ce2:	440b      	add	r3, r1
 8014ce4:	8812      	ldrh	r2, [r2, #0]
 8014ce6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014ce8:	7dfb      	ldrb	r3, [r7, #23]
 8014cea:	3301      	adds	r3, #1
 8014cec:	75fb      	strb	r3, [r7, #23]
 8014cee:	7dfa      	ldrb	r2, [r7, #23]
 8014cf0:	79fb      	ldrb	r3, [r7, #7]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d3ee      	bcc.n	8014cd4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014cf6:	bf00      	nop
 8014cf8:	371c      	adds	r7, #28
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bc80      	pop	{r7}
 8014cfe:	4770      	bx	lr

08014d00 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014d00:	b082      	sub	sp, #8
 8014d02:	b580      	push	{r7, lr}
 8014d04:	b086      	sub	sp, #24
 8014d06:	af00      	add	r7, sp, #0
 8014d08:	60f8      	str	r0, [r7, #12]
 8014d0a:	60b9      	str	r1, [r7, #8]
 8014d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8014d0e:	4613      	mov	r3, r2
 8014d10:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014d12:	79f9      	ldrb	r1, [r7, #7]
 8014d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014d18:	cb0c      	ldmia	r3, {r2, r3}
 8014d1a:	68f8      	ldr	r0, [r7, #12]
 8014d1c:	f7ff fdf0 	bl	8014900 <GetDutyCycle>
 8014d20:	4603      	mov	r3, r0
 8014d22:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	68da      	ldr	r2, [r3, #12]
 8014d28:	8afb      	ldrh	r3, [r7, #22]
 8014d2a:	68b9      	ldr	r1, [r7, #8]
 8014d2c:	fb01 f303 	mul.w	r3, r1, r3
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d909      	bls.n	8014d48 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	68da      	ldr	r2, [r3, #12]
 8014d38:	8afb      	ldrh	r3, [r7, #22]
 8014d3a:	68b9      	ldr	r1, [r7, #8]
 8014d3c:	fb01 f303 	mul.w	r3, r1, r3
 8014d40:	1ad2      	subs	r2, r2, r3
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8014d46:	e002      	b.n	8014d4e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	60da      	str	r2, [r3, #12]
}
 8014d4e:	bf00      	nop
 8014d50:	3718      	adds	r7, #24
 8014d52:	46bd      	mov	sp, r7
 8014d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014d58:	b002      	add	sp, #8
 8014d5a:	4770      	bx	lr

08014d5c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d5e:	b08f      	sub	sp, #60	@ 0x3c
 8014d60:	af04      	add	r7, sp, #16
 8014d62:	6039      	str	r1, [r7, #0]
 8014d64:	4611      	mov	r1, r2
 8014d66:	461a      	mov	r2, r3
 8014d68:	4603      	mov	r3, r0
 8014d6a:	71fb      	strb	r3, [r7, #7]
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	71bb      	strb	r3, [r7, #6]
 8014d70:	4613      	mov	r3, r2
 8014d72:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014d74:	f04f 33ff 	mov.w	r3, #4294967295
 8014d78:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014d7a:	f006 f8d5 	bl	801af28 <UTIL_TIMER_GetCurrentTime>
 8014d7e:	61b8      	str	r0, [r7, #24]
    TimerTime_t creditCosts = 0;
 8014d80:	2300      	movs	r3, #0
 8014d82:	617b      	str	r3, [r7, #20]
    uint16_t dutyCycle = 1;
 8014d84:	2301      	movs	r3, #1
 8014d86:	827b      	strh	r3, [r7, #18]
    uint8_t validBands = 0;
 8014d88:	2300      	movs	r3, #0
 8014d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014d8e:	2300      	movs	r3, #0
 8014d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014d94:	e09c      	b.n	8014ed0 <RegionCommonUpdateBandTimeOff+0x174>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))
        TimerTime_t elapsedTime = TimerGetElapsedTime( bands[i].LastBandUpdateTime );
 8014d96:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014d9a:	4613      	mov	r3, r2
 8014d9c:	005b      	lsls	r3, r3, #1
 8014d9e:	4413      	add	r3, r2
 8014da0:	00db      	lsls	r3, r3, #3
 8014da2:	461a      	mov	r2, r3
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	4413      	add	r3, r2
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f006 f8ce 	bl	801af4c <UTIL_TIMER_GetElapsedTime>
 8014db0:	60f8      	str	r0, [r7, #12]

        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014db2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014db6:	4613      	mov	r3, r2
 8014db8:	005b      	lsls	r3, r3, #1
 8014dba:	4413      	add	r3, r2
 8014dbc:	00db      	lsls	r3, r3, #3
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	189c      	adds	r4, r3, r2
 8014dc4:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8014dc8:	797a      	ldrb	r2, [r7, #5]
 8014dca:	79fd      	ldrb	r5, [r7, #7]
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	9303      	str	r3, [sp, #12]
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	9302      	str	r3, [sp, #8]
 8014dd4:	46ec      	mov	ip, sp
 8014dd6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014dda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014dde:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014de2:	4633      	mov	r3, r6
 8014de4:	4629      	mov	r1, r5
 8014de6:	4620      	mov	r0, r4
 8014de8:	f7ff fdf6 	bl	80149d8 <UpdateTimeCredits>
 8014dec:	4603      	mov	r3, r0
 8014dee:	827b      	strh	r3, [r7, #18]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014df0:	8a7a      	ldrh	r2, [r7, #18]
 8014df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014df4:	fb02 f303 	mul.w	r3, r2, r3
 8014df8:	617b      	str	r3, [r7, #20]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014dfa:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014dfe:	4613      	mov	r3, r2
 8014e00:	005b      	lsls	r3, r3, #1
 8014e02:	4413      	add	r3, r2
 8014e04:	00db      	lsls	r3, r3, #3
 8014e06:	461a      	mov	r2, r3
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	4413      	add	r3, r2
 8014e0c:	68db      	ldr	r3, [r3, #12]
 8014e0e:	697a      	ldr	r2, [r7, #20]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d308      	bcc.n	8014e26 <RegionCommonUpdateBandTimeOff+0xca>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014e14:	797b      	ldrb	r3, [r7, #5]
 8014e16:	f083 0301 	eor.w	r3, r3, #1
 8014e1a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d013      	beq.n	8014e48 <RegionCommonUpdateBandTimeOff+0xec>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014e20:	79fb      	ldrb	r3, [r7, #7]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d010      	beq.n	8014e48 <RegionCommonUpdateBandTimeOff+0xec>
        {
            bands[i].ReadyForTransmission = true;
 8014e26:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	4413      	add	r3, r2
 8014e30:	00db      	lsls	r3, r3, #3
 8014e32:	461a      	mov	r2, r3
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	4413      	add	r3, r2
 8014e38:	2201      	movs	r2, #1
 8014e3a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014e40:	3301      	adds	r3, #1
 8014e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e46:	e03e      	b.n	8014ec6 <RegionCommonUpdateBandTimeOff+0x16a>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014e48:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	005b      	lsls	r3, r3, #1
 8014e50:	4413      	add	r3, r2
 8014e52:	00db      	lsls	r3, r3, #3
 8014e54:	461a      	mov	r2, r3
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	4413      	add	r3, r2
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014e5e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e62:	4613      	mov	r3, r2
 8014e64:	005b      	lsls	r3, r3, #1
 8014e66:	4413      	add	r3, r2
 8014e68:	00db      	lsls	r3, r3, #3
 8014e6a:	461a      	mov	r2, r3
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	4413      	add	r3, r2
 8014e70:	691b      	ldr	r3, [r3, #16]
 8014e72:	697a      	ldr	r2, [r7, #20]
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d226      	bcs.n	8014ec6 <RegionCommonUpdateBandTimeOff+0x16a>
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
                TimerTime_t observationTimeDiff = 0;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	61fb      	str	r3, [r7, #28]
                if( bands[i].LastMaxCreditAssignTime >= elapsedTime )
 8014e7c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e80:	4613      	mov	r3, r2
 8014e82:	005b      	lsls	r3, r3, #1
 8014e84:	4413      	add	r3, r2
 8014e86:	00db      	lsls	r3, r3, #3
 8014e88:	461a      	mov	r2, r3
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	4413      	add	r3, r2
 8014e8e:	689b      	ldr	r3, [r3, #8]
 8014e90:	68fa      	ldr	r2, [r7, #12]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d80c      	bhi.n	8014eb0 <RegionCommonUpdateBandTimeOff+0x154>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
 8014e96:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	4413      	add	r3, r2
 8014ea0:	00db      	lsls	r3, r3, #3
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	689a      	ldr	r2, [r3, #8]
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	1ad3      	subs	r3, r2, r3
 8014eae:	61fb      	str	r3, [r7, #28]
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
 8014eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	4293      	cmp	r3, r2
 8014eb6:	bf28      	it	cs
 8014eb8:	4613      	movcs	r3, r2
 8014eba:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for( uint8_t i = 0; i < nbBands; i++ )
 8014ec6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014eca:	3301      	adds	r3, #1
 8014ecc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014ed0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014ed4:	79bb      	ldrb	r3, [r7, #6]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	f4ff af5d 	bcc.w	8014d96 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 8014edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d102      	bne.n	8014eea <RegionCommonUpdateBandTimeOff+0x18e>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee8:	e000      	b.n	8014eec <RegionCommonUpdateBandTimeOff+0x190>
    }
    return minTimeToWait;
 8014eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	372c      	adds	r7, #44	@ 0x2c
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ef4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b085      	sub	sp, #20
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014efe:	2300      	movs	r3, #0
 8014f00:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	781b      	ldrb	r3, [r3, #0]
 8014f06:	2b03      	cmp	r3, #3
 8014f08:	d140      	bne.n	8014f8c <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	781b      	ldrb	r3, [r3, #0]
 8014f10:	b25a      	sxtb	r2, r3
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f1c:	f003 030f 	and.w	r3, r3, #15
 8014f20:	b25a      	sxtb	r2, r3
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	091b      	lsrs	r3, r3, #4
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	b25a      	sxtb	r2, r3
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	3302      	adds	r3, #2
 8014f3c:	781b      	ldrb	r3, [r3, #0]
 8014f3e:	461a      	mov	r2, r3
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	889b      	ldrh	r3, [r3, #4]
 8014f48:	b21a      	sxth	r2, r3
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	3303      	adds	r3, #3
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	b21b      	sxth	r3, r3
 8014f52:	021b      	lsls	r3, r3, #8
 8014f54:	b21b      	sxth	r3, r3
 8014f56:	4313      	orrs	r3, r2
 8014f58:	b21b      	sxth	r3, r3
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	791a      	ldrb	r2, [r3, #4]
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	091b      	lsrs	r3, r3, #4
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	f003 0307 	and.w	r3, r3, #7
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	f003 030f 	and.w	r3, r3, #15
 8014f82:	b2da      	uxtb	r2, r3
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014f88:	2305      	movs	r3, #5
 8014f8a:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	3714      	adds	r7, #20
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bc80      	pop	{r7}
 8014f96:	4770      	bx	lr

08014f98 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014f98:	b5b0      	push	{r4, r5, r7, lr}
 8014f9a:	b088      	sub	sp, #32
 8014f9c:	af02      	add	r7, sp, #8
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
 8014fa4:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	791b      	ldrb	r3, [r3, #4]
 8014faa:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	799b      	ldrb	r3, [r3, #6]
 8014fb0:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	79db      	ldrb	r3, [r3, #7]
 8014fb6:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	7a1b      	ldrb	r3, [r3, #8]
 8014fbc:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	795b      	ldrb	r3, [r3, #5]
 8014fc2:	f083 0301 	eor.w	r3, r3, #1
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d008      	beq.n	8014fde <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	7adb      	ldrb	r3, [r3, #11]
 8014fd0:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	7a5b      	ldrb	r3, [r3, #9]
 8014fd6:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	7a9b      	ldrb	r3, [r3, #10]
 8014fdc:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014fde:	7dfb      	ldrb	r3, [r7, #23]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d04a      	beq.n	801507a <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8014fe4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8014fe8:	2b0f      	cmp	r3, #15
 8014fea:	d103      	bne.n	8014ff4 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	7a5b      	ldrb	r3, [r3, #9]
 8014ff0:	75bb      	strb	r3, [r7, #22]
 8014ff2:	e01d      	b.n	8015030 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	7b18      	ldrb	r0, [r3, #12]
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	6919      	ldr	r1, [r3, #16]
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015008:	68fa      	ldr	r2, [r7, #12]
 801500a:	6992      	ldr	r2, [r2, #24]
 801500c:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015010:	9201      	str	r2, [sp, #4]
 8015012:	9300      	str	r3, [sp, #0]
 8015014:	462b      	mov	r3, r5
 8015016:	4622      	mov	r2, r4
 8015018:	f7ff fd5d 	bl	8014ad6 <RegionCommonChanVerifyDr>
 801501c:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801501e:	f083 0301 	eor.w	r3, r3, #1
 8015022:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015024:	2b00      	cmp	r3, #0
 8015026:	d003      	beq.n	8015030 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015028:	7dfb      	ldrb	r3, [r7, #23]
 801502a:	f023 0302 	bic.w	r3, r3, #2
 801502e:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015030:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015034:	2b0f      	cmp	r3, #15
 8015036:	d103      	bne.n	8015040 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	7a9b      	ldrb	r3, [r3, #10]
 801503c:	757b      	strb	r3, [r7, #21]
 801503e:	e01c      	b.n	801507a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801504c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015050:	4618      	mov	r0, r3
 8015052:	f7ff fdb2 	bl	8014bba <RegionCommonValueInRange>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d10e      	bne.n	801507a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015062:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015066:	429a      	cmp	r2, r3
 8015068:	da03      	bge.n	8015072 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	7f5b      	ldrb	r3, [r3, #29]
 801506e:	757b      	strb	r3, [r7, #21]
 8015070:	e003      	b.n	801507a <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015072:	7dfb      	ldrb	r3, [r7, #23]
 8015074:	f023 0304 	bic.w	r3, r3, #4
 8015078:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801507a:	7dfb      	ldrb	r3, [r7, #23]
 801507c:	2b07      	cmp	r3, #7
 801507e:	d105      	bne.n	801508c <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8015080:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d101      	bne.n	801508c <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8015088:	2301      	movs	r3, #1
 801508a:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	7dba      	ldrb	r2, [r7, #22]
 8015090:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	7d7a      	ldrb	r2, [r7, #21]
 8015096:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015098:	7d3a      	ldrb	r2, [r7, #20]
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	701a      	strb	r2, [r3, #0]

    return status;
 801509e:	7dfb      	ldrb	r3, [r7, #23]
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3718      	adds	r7, #24
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bdb0      	pop	{r4, r5, r7, pc}

080150a8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80150a8:	b480      	push	{r7}
 80150aa:	b083      	sub	sp, #12
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	4603      	mov	r3, r0
 80150b0:	6039      	str	r1, [r7, #0]
 80150b2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80150b4:	79fb      	ldrb	r3, [r7, #7]
 80150b6:	4a06      	ldr	r2, [pc, #24]	@ (80150d0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80150b8:	fa02 f303 	lsl.w	r3, r2, r3
 80150bc:	461a      	mov	r2, r3
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	370c      	adds	r7, #12
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bc80      	pop	{r7}
 80150cc:	4770      	bx	lr
 80150ce:	bf00      	nop
 80150d0:	000f4240 	.word	0x000f4240

080150d4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	4603      	mov	r3, r0
 80150dc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80150de:	79fb      	ldrb	r3, [r7, #7]
 80150e0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80150e4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	370c      	adds	r7, #12
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bc80      	pop	{r7}
 80150f0:	4770      	bx	lr
	...

080150f4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80150f4:	b480      	push	{r7}
 80150f6:	b085      	sub	sp, #20
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	607a      	str	r2, [r7, #4]
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	460b      	mov	r3, r1
 8015102:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015104:	7afa      	ldrb	r2, [r7, #11]
 8015106:	7afb      	ldrb	r3, [r7, #11]
 8015108:	3b04      	subs	r3, #4
 801510a:	4619      	mov	r1, r3
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	fb03 f101 	mul.w	r1, r3, r1
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015118:	fb00 f303 	mul.w	r3, r0, r3
 801511c:	440b      	add	r3, r1
 801511e:	005b      	lsls	r3, r3, #1
 8015120:	2b00      	cmp	r3, #0
 8015122:	d013      	beq.n	801514c <RegionCommonComputeRxWindowParameters+0x58>
 8015124:	7afb      	ldrb	r3, [r7, #11]
 8015126:	3b04      	subs	r3, #4
 8015128:	4619      	mov	r1, r3
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	fb03 f101 	mul.w	r1, r3, r1
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015136:	fb00 f303 	mul.w	r3, r0, r3
 801513a:	440b      	add	r3, r1
 801513c:	0059      	lsls	r1, r3, #1
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	440b      	add	r3, r1
 8015142:	1e59      	subs	r1, r3, #1
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	fbb1 f3f3 	udiv	r3, r1, r3
 801514a:	e00f      	b.n	801516c <RegionCommonComputeRxWindowParameters+0x78>
 801514c:	7afb      	ldrb	r3, [r7, #11]
 801514e:	3b04      	subs	r3, #4
 8015150:	4619      	mov	r1, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	fb03 f101 	mul.w	r1, r3, r1
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801515e:	fb00 f303 	mul.w	r3, r0, r3
 8015162:	440b      	add	r3, r1
 8015164:	0059      	lsls	r1, r3, #1
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	fbb1 f3f3 	udiv	r3, r1, r3
 801516c:	429a      	cmp	r2, r3
 801516e:	bf38      	it	cc
 8015170:	461a      	movcc	r2, r3
 8015172:	69bb      	ldr	r3, [r7, #24]
 8015174:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	009b      	lsls	r3, r3, #2
 801517a:	4619      	mov	r1, r3
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	68fa      	ldr	r2, [r7, #12]
 8015182:	fb02 f303 	mul.w	r3, r2, r3
 8015186:	2b00      	cmp	r3, #0
 8015188:	d007      	beq.n	801519a <RegionCommonComputeRxWindowParameters+0xa6>
 801518a:	69bb      	ldr	r3, [r7, #24]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	fb02 f303 	mul.w	r3, r2, r3
 8015194:	3301      	adds	r3, #1
 8015196:	085b      	lsrs	r3, r3, #1
 8015198:	e005      	b.n	80151a6 <RegionCommonComputeRxWindowParameters+0xb2>
 801519a:	69bb      	ldr	r3, [r7, #24]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	68fa      	ldr	r2, [r7, #12]
 80151a0:	fb02 f303 	mul.w	r3, r2, r3
 80151a4:	085b      	lsrs	r3, r3, #1
 80151a6:	1acb      	subs	r3, r1, r3
 80151a8:	683a      	ldr	r2, [r7, #0]
 80151aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80151ae:	fb01 f202 	mul.w	r2, r1, r2
 80151b2:	1a9b      	subs	r3, r3, r2
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	dd27      	ble.n	8015208 <RegionCommonComputeRxWindowParameters+0x114>
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	009b      	lsls	r3, r3, #2
 80151bc:	4619      	mov	r1, r3
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	68fa      	ldr	r2, [r7, #12]
 80151c4:	fb02 f303 	mul.w	r3, r2, r3
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d007      	beq.n	80151dc <RegionCommonComputeRxWindowParameters+0xe8>
 80151cc:	69bb      	ldr	r3, [r7, #24]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	68fa      	ldr	r2, [r7, #12]
 80151d2:	fb02 f303 	mul.w	r3, r2, r3
 80151d6:	3301      	adds	r3, #1
 80151d8:	085b      	lsrs	r3, r3, #1
 80151da:	e005      	b.n	80151e8 <RegionCommonComputeRxWindowParameters+0xf4>
 80151dc:	69bb      	ldr	r3, [r7, #24]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	68fa      	ldr	r2, [r7, #12]
 80151e2:	fb02 f303 	mul.w	r3, r2, r3
 80151e6:	085b      	lsrs	r3, r3, #1
 80151e8:	1acb      	subs	r3, r1, r3
 80151ea:	683a      	ldr	r2, [r7, #0]
 80151ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80151f0:	fb01 f202 	mul.w	r2, r1, r2
 80151f4:	1a9b      	subs	r3, r3, r2
 80151f6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80151fa:	4a19      	ldr	r2, [pc, #100]	@ (8015260 <RegionCommonComputeRxWindowParameters+0x16c>)
 80151fc:	fb82 1203 	smull	r1, r2, r2, r3
 8015200:	1192      	asrs	r2, r2, #6
 8015202:	17db      	asrs	r3, r3, #31
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	e024      	b.n	8015252 <RegionCommonComputeRxWindowParameters+0x15e>
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	009b      	lsls	r3, r3, #2
 801520c:	4619      	mov	r1, r3
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	68fa      	ldr	r2, [r7, #12]
 8015214:	fb02 f303 	mul.w	r3, r2, r3
 8015218:	2b00      	cmp	r3, #0
 801521a:	d007      	beq.n	801522c <RegionCommonComputeRxWindowParameters+0x138>
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	68fa      	ldr	r2, [r7, #12]
 8015222:	fb02 f303 	mul.w	r3, r2, r3
 8015226:	3301      	adds	r3, #1
 8015228:	085b      	lsrs	r3, r3, #1
 801522a:	e005      	b.n	8015238 <RegionCommonComputeRxWindowParameters+0x144>
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	68fa      	ldr	r2, [r7, #12]
 8015232:	fb02 f303 	mul.w	r3, r2, r3
 8015236:	085b      	lsrs	r3, r3, #1
 8015238:	1acb      	subs	r3, r1, r3
 801523a:	683a      	ldr	r2, [r7, #0]
 801523c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015240:	fb01 f202 	mul.w	r2, r1, r2
 8015244:	1a9b      	subs	r3, r3, r2
 8015246:	4a06      	ldr	r2, [pc, #24]	@ (8015260 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015248:	fb82 1203 	smull	r1, r2, r2, r3
 801524c:	1192      	asrs	r2, r2, #6
 801524e:	17db      	asrs	r3, r3, #31
 8015250:	1ad3      	subs	r3, r2, r3
 8015252:	69fa      	ldr	r2, [r7, #28]
 8015254:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8015256:	bf00      	nop
 8015258:	3714      	adds	r7, #20
 801525a:	46bd      	mov	sp, r7
 801525c:	bc80      	pop	{r7}
 801525e:	4770      	bx	lr
 8015260:	10624dd3 	.word	0x10624dd3

08015264 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b086      	sub	sp, #24
 8015268:	af00      	add	r7, sp, #0
 801526a:	4603      	mov	r3, r0
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	607a      	str	r2, [r7, #4]
 8015270:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015272:	2300      	movs	r3, #0
 8015274:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801527a:	005b      	lsls	r3, r3, #1
 801527c:	4618      	mov	r0, r3
 801527e:	f7eb faf9 	bl	8000874 <__aeabi_ui2f>
 8015282:	4603      	mov	r3, r0
 8015284:	4619      	mov	r1, r3
 8015286:	68b8      	ldr	r0, [r7, #8]
 8015288:	f7eb fa42 	bl	8000710 <__aeabi_fsub>
 801528c:	4603      	mov	r3, r0
 801528e:	6879      	ldr	r1, [r7, #4]
 8015290:	4618      	mov	r0, r3
 8015292:	f7eb fa3d 	bl	8000710 <__aeabi_fsub>
 8015296:	4603      	mov	r3, r0
 8015298:	4618      	mov	r0, r3
 801529a:	f7eb f92d 	bl	80004f8 <__aeabi_f2d>
 801529e:	4602      	mov	r2, r0
 80152a0:	460b      	mov	r3, r1
 80152a2:	4610      	mov	r0, r2
 80152a4:	4619      	mov	r1, r3
 80152a6:	f006 fe47 	bl	801bf38 <floor>
 80152aa:	4602      	mov	r2, r0
 80152ac:	460b      	mov	r3, r1
 80152ae:	4610      	mov	r0, r2
 80152b0:	4619      	mov	r1, r3
 80152b2:	f7eb fa01 	bl	80006b8 <__aeabi_d2iz>
 80152b6:	4603      	mov	r3, r0
 80152b8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80152ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3718      	adds	r7, #24
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}

080152c6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80152c6:	b590      	push	{r4, r7, lr}
 80152c8:	b087      	sub	sp, #28
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	60f8      	str	r0, [r7, #12]
 80152ce:	60b9      	str	r1, [r7, #8]
 80152d0:	607a      	str	r2, [r7, #4]
 80152d2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80152d4:	2300      	movs	r3, #0
 80152d6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80152d8:	2300      	movs	r3, #0
 80152da:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80152dc:	2300      	movs	r3, #0
 80152de:	757b      	strb	r3, [r7, #21]
 80152e0:	2300      	movs	r3, #0
 80152e2:	753b      	strb	r3, [r7, #20]
 80152e4:	e09c      	b.n	8015420 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80152e6:	2300      	movs	r3, #0
 80152e8:	74fb      	strb	r3, [r7, #19]
 80152ea:	e08f      	b.n	801540c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	685a      	ldr	r2, [r3, #4]
 80152f0:	7d3b      	ldrb	r3, [r7, #20]
 80152f2:	005b      	lsls	r3, r3, #1
 80152f4:	4413      	add	r3, r2
 80152f6:	881b      	ldrh	r3, [r3, #0]
 80152f8:	461a      	mov	r2, r3
 80152fa:	7cfb      	ldrb	r3, [r7, #19]
 80152fc:	fa42 f303 	asr.w	r3, r2, r3
 8015300:	f003 0301 	and.w	r3, r3, #1
 8015304:	2b00      	cmp	r3, #0
 8015306:	d07e      	beq.n	8015406 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	689a      	ldr	r2, [r3, #8]
 801530c:	7d79      	ldrb	r1, [r7, #21]
 801530e:	7cfb      	ldrb	r3, [r7, #19]
 8015310:	440b      	add	r3, r1
 8015312:	4619      	mov	r1, r3
 8015314:	460b      	mov	r3, r1
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	440b      	add	r3, r1
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	4413      	add	r3, r2
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d06b      	beq.n	80153fc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	f083 0301 	eor.w	r3, r3, #1
 801532c:	b2db      	uxtb	r3, r3
 801532e:	2b00      	cmp	r3, #0
 8015330:	d011      	beq.n	8015356 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015336:	2b00      	cmp	r3, #0
 8015338:	d00d      	beq.n	8015356 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	695a      	ldr	r2, [r3, #20]
 801533e:	7d3b      	ldrb	r3, [r7, #20]
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	881b      	ldrh	r3, [r3, #0]
 8015346:	461a      	mov	r2, r3
 8015348:	7cfb      	ldrb	r3, [r7, #19]
 801534a:	fa42 f303 	asr.w	r3, r2, r3
 801534e:	f003 0301 	and.w	r3, r3, #1
 8015352:	2b00      	cmp	r3, #0
 8015354:	d054      	beq.n	8015400 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	785b      	ldrb	r3, [r3, #1]
 801535a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	689a      	ldr	r2, [r3, #8]
 8015360:	7d79      	ldrb	r1, [r7, #21]
 8015362:	7cfb      	ldrb	r3, [r7, #19]
 8015364:	440b      	add	r3, r1
 8015366:	4619      	mov	r1, r3
 8015368:	460b      	mov	r3, r1
 801536a:	005b      	lsls	r3, r3, #1
 801536c:	440b      	add	r3, r1
 801536e:	009b      	lsls	r3, r3, #2
 8015370:	4413      	add	r3, r2
 8015372:	7a1b      	ldrb	r3, [r3, #8]
 8015374:	f343 0303 	sbfx	r3, r3, #0, #4
 8015378:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801537a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	689a      	ldr	r2, [r3, #8]
 8015380:	7d79      	ldrb	r1, [r7, #21]
 8015382:	7cfb      	ldrb	r3, [r7, #19]
 8015384:	440b      	add	r3, r1
 8015386:	4619      	mov	r1, r3
 8015388:	460b      	mov	r3, r1
 801538a:	005b      	lsls	r3, r3, #1
 801538c:	440b      	add	r3, r1
 801538e:	009b      	lsls	r3, r3, #2
 8015390:	4413      	add	r3, r2
 8015392:	7a1b      	ldrb	r3, [r3, #8]
 8015394:	f343 1303 	sbfx	r3, r3, #4, #4
 8015398:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801539a:	461a      	mov	r2, r3
 801539c:	4621      	mov	r1, r4
 801539e:	f7ff fc0c 	bl	8014bba <RegionCommonValueInRange>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d02d      	beq.n	8015404 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	68da      	ldr	r2, [r3, #12]
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	6899      	ldr	r1, [r3, #8]
 80153b0:	7d78      	ldrb	r0, [r7, #21]
 80153b2:	7cfb      	ldrb	r3, [r7, #19]
 80153b4:	4403      	add	r3, r0
 80153b6:	4618      	mov	r0, r3
 80153b8:	4603      	mov	r3, r0
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	4403      	add	r3, r0
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	440b      	add	r3, r1
 80153c2:	7a5b      	ldrb	r3, [r3, #9]
 80153c4:	4619      	mov	r1, r3
 80153c6:	460b      	mov	r3, r1
 80153c8:	005b      	lsls	r3, r3, #1
 80153ca:	440b      	add	r3, r1
 80153cc:	00db      	lsls	r3, r3, #3
 80153ce:	4413      	add	r3, r2
 80153d0:	7d1b      	ldrb	r3, [r3, #20]
 80153d2:	f083 0301 	eor.w	r3, r3, #1
 80153d6:	b2db      	uxtb	r3, r3
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d003      	beq.n	80153e4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80153dc:	7dbb      	ldrb	r3, [r7, #22]
 80153de:	3301      	adds	r3, #1
 80153e0:	75bb      	strb	r3, [r7, #22]
                    continue;
 80153e2:	e010      	b.n	8015406 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80153e4:	7dfb      	ldrb	r3, [r7, #23]
 80153e6:	1c5a      	adds	r2, r3, #1
 80153e8:	75fa      	strb	r2, [r7, #23]
 80153ea:	461a      	mov	r2, r3
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	4413      	add	r3, r2
 80153f0:	7d79      	ldrb	r1, [r7, #21]
 80153f2:	7cfa      	ldrb	r2, [r7, #19]
 80153f4:	440a      	add	r2, r1
 80153f6:	b2d2      	uxtb	r2, r2
 80153f8:	701a      	strb	r2, [r3, #0]
 80153fa:	e004      	b.n	8015406 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80153fc:	bf00      	nop
 80153fe:	e002      	b.n	8015406 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8015400:	bf00      	nop
 8015402:	e000      	b.n	8015406 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015404:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8015406:	7cfb      	ldrb	r3, [r7, #19]
 8015408:	3301      	adds	r3, #1
 801540a:	74fb      	strb	r3, [r7, #19]
 801540c:	7cfb      	ldrb	r3, [r7, #19]
 801540e:	2b0f      	cmp	r3, #15
 8015410:	f67f af6c 	bls.w	80152ec <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015414:	7d7b      	ldrb	r3, [r7, #21]
 8015416:	3310      	adds	r3, #16
 8015418:	757b      	strb	r3, [r7, #21]
 801541a:	7d3b      	ldrb	r3, [r7, #20]
 801541c:	3301      	adds	r3, #1
 801541e:	753b      	strb	r3, [r7, #20]
 8015420:	7d7b      	ldrb	r3, [r7, #21]
 8015422:	b29a      	uxth	r2, r3
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	8a1b      	ldrh	r3, [r3, #16]
 8015428:	429a      	cmp	r2, r3
 801542a:	f4ff af5c 	bcc.w	80152e6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	7dfa      	ldrb	r2, [r7, #23]
 8015432:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	7dba      	ldrb	r2, [r7, #22]
 8015438:	701a      	strb	r2, [r3, #0]
}
 801543a:	bf00      	nop
 801543c:	371c      	adds	r7, #28
 801543e:	46bd      	mov	sp, r7
 8015440:	bd90      	pop	{r4, r7, pc}

08015442 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015444:	b08b      	sub	sp, #44	@ 0x2c
 8015446:	af04      	add	r7, sp, #16
 8015448:	60f8      	str	r0, [r7, #12]
 801544a:	60b9      	str	r1, [r7, #8]
 801544c:	607a      	str	r2, [r7, #4]
 801544e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	4618      	mov	r0, r3
 8015456:	f005 fd79 	bl	801af4c <UTIL_TIMER_GetElapsedTime>
 801545a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	1ad2      	subs	r2, r2, r3
 8015464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015466:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801546a:	2201      	movs	r2, #1
 801546c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	2200      	movs	r2, #0
 8015472:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d004      	beq.n	8015486 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015480:	697a      	ldr	r2, [r7, #20]
 8015482:	429a      	cmp	r2, r3
 8015484:	d32b      	bcc.n	80154de <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	2200      	movs	r2, #0
 801548a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	69db      	ldr	r3, [r3, #28]
 8015490:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015496:	68dd      	ldr	r5, [r3, #12]
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	7a5e      	ldrb	r6, [r3, #9]
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f893 c008 	ldrb.w	ip, [r3, #8]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	7d1b      	ldrb	r3, [r3, #20]
 80154a6:	68fa      	ldr	r2, [r7, #12]
 80154a8:	6992      	ldr	r2, [r2, #24]
 80154aa:	9203      	str	r2, [sp, #12]
 80154ac:	68fa      	ldr	r2, [r7, #12]
 80154ae:	f10d 0e04 	add.w	lr, sp, #4
 80154b2:	320c      	adds	r2, #12
 80154b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154b8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80154bc:	9300      	str	r3, [sp, #0]
 80154be:	4663      	mov	r3, ip
 80154c0:	4632      	mov	r2, r6
 80154c2:	4629      	mov	r1, r5
 80154c4:	4620      	mov	r0, r4
 80154c6:	f7ff fc49 	bl	8014d5c <RegionCommonUpdateBandTimeOff>
 80154ca:	4602      	mov	r2, r0
 80154cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154ce:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	69d8      	ldr	r0, [r3, #28]
 80154d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d6:	683a      	ldr	r2, [r7, #0]
 80154d8:	6879      	ldr	r1, [r7, #4]
 80154da:	f7ff fef4 	bl	80152c6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d004      	beq.n	80154f0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80154e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154e8:	2200      	movs	r2, #0
 80154ea:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80154ec:	2300      	movs	r3, #0
 80154ee:	e006      	b.n	80154fe <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80154f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d001      	beq.n	80154fc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80154f8:	230b      	movs	r3, #11
 80154fa:	e000      	b.n	80154fe <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80154fc:	230c      	movs	r3, #12
    }
}
 80154fe:	4618      	mov	r0, r3
 8015500:	371c      	adds	r7, #28
 8015502:	46bd      	mov	sp, r7
 8015504:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015506 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8015506:	b5b0      	push	{r4, r5, r7, lr}
 8015508:	b086      	sub	sp, #24
 801550a:	af02      	add	r7, sp, #8
 801550c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f993 2000 	ldrsb.w	r2, [r3]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015520:	429a      	cmp	r2, r3
 8015522:	d103      	bne.n	801552c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801552a:	e026      	b.n	801557a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801552c:	7bfb      	ldrb	r3, [r7, #15]
 801552e:	3b01      	subs	r3, #1
 8015530:	b2db      	uxtb	r3, r3
 8015532:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801553a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801553e:	429a      	cmp	r2, r3
 8015540:	d019      	beq.n	8015576 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	78d8      	ldrb	r0, [r3, #3]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6859      	ldr	r1, [r3, #4]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015556:	687a      	ldr	r2, [r7, #4]
 8015558:	6892      	ldr	r2, [r2, #8]
 801555a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801555e:	9201      	str	r2, [sp, #4]
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	462b      	mov	r3, r5
 8015564:	4622      	mov	r2, r4
 8015566:	f7ff fab6 	bl	8014ad6 <RegionCommonChanVerifyDr>
 801556a:	4603      	mov	r3, r0
 801556c:	f083 0301 	eor.w	r3, r3, #1
 8015570:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015572:	2b00      	cmp	r3, #0
 8015574:	d1da      	bne.n	801552c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015576:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801557a:	4618      	mov	r0, r3
 801557c:	3710      	adds	r7, #16
 801557e:	46bd      	mov	sp, r7
 8015580:	bdb0      	pop	{r4, r5, r7, pc}

08015582 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015582:	b480      	push	{r7}
 8015584:	b083      	sub	sp, #12
 8015586:	af00      	add	r7, sp, #0
 8015588:	4603      	mov	r3, r0
 801558a:	460a      	mov	r2, r1
 801558c:	71fb      	strb	r3, [r7, #7]
 801558e:	4613      	mov	r3, r2
 8015590:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015592:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801559a:	4293      	cmp	r3, r2
 801559c:	bfb8      	it	lt
 801559e:	4613      	movlt	r3, r2
 80155a0:	b25b      	sxtb	r3, r3
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	370c      	adds	r7, #12
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bc80      	pop	{r7}
 80155aa:	4770      	bx	lr

080155ac <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	009b      	lsls	r3, r3, #2
 80155ba:	683a      	ldr	r2, [r7, #0]
 80155bc:	4413      	add	r3, r2
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4a07      	ldr	r2, [pc, #28]	@ (80155e0 <RegionCommonGetBandwidth+0x34>)
 80155c2:	4293      	cmp	r3, r2
 80155c4:	d004      	beq.n	80155d0 <RegionCommonGetBandwidth+0x24>
 80155c6:	4a07      	ldr	r2, [pc, #28]	@ (80155e4 <RegionCommonGetBandwidth+0x38>)
 80155c8:	4293      	cmp	r3, r2
 80155ca:	d003      	beq.n	80155d4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80155cc:	2300      	movs	r3, #0
 80155ce:	e002      	b.n	80155d6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80155d0:	2301      	movs	r3, #1
 80155d2:	e000      	b.n	80155d6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80155d4:	2302      	movs	r3, #2
    }
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	370c      	adds	r7, #12
 80155da:	46bd      	mov	sp, r7
 80155dc:	bc80      	pop	{r7}
 80155de:	4770      	bx	lr
 80155e0:	0003d090 	.word	0x0003d090
 80155e4:	0007a120 	.word	0x0007a120

080155e8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b086      	sub	sp, #24
 80155ec:	af04      	add	r7, sp, #16
 80155ee:	4603      	mov	r3, r0
 80155f0:	6039      	str	r1, [r7, #0]
 80155f2:	71fb      	strb	r3, [r7, #7]
 80155f4:	4613      	mov	r3, r2
 80155f6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80155f8:	79fb      	ldrb	r3, [r7, #7]
 80155fa:	2b05      	cmp	r3, #5
 80155fc:	d810      	bhi.n	8015620 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80155fe:	79fb      	ldrb	r3, [r7, #7]
 8015600:	4a0f      	ldr	r2, [pc, #60]	@ (8015640 <RegionCommonRxConfigPrint+0x58>)
 8015602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015606:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801560a:	9202      	str	r2, [sp, #8]
 801560c:	683a      	ldr	r2, [r7, #0]
 801560e:	9201      	str	r2, [sp, #4]
 8015610:	9300      	str	r3, [sp, #0]
 8015612:	4b0c      	ldr	r3, [pc, #48]	@ (8015644 <RegionCommonRxConfigPrint+0x5c>)
 8015614:	2201      	movs	r2, #1
 8015616:	2100      	movs	r1, #0
 8015618:	2002      	movs	r0, #2
 801561a:	f005 fd75 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801561e:	e00a      	b.n	8015636 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015620:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015624:	9301      	str	r3, [sp, #4]
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	9300      	str	r3, [sp, #0]
 801562a:	4b07      	ldr	r3, [pc, #28]	@ (8015648 <RegionCommonRxConfigPrint+0x60>)
 801562c:	2201      	movs	r2, #1
 801562e:	2100      	movs	r1, #0
 8015630:	2002      	movs	r0, #2
 8015632:	f005 fd69 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
}
 8015636:	bf00      	nop
 8015638:	3708      	adds	r7, #8
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop
 8015640:	200000f8 	.word	0x200000f8
 8015644:	0801c378 	.word	0x0801c378
 8015648:	0801c398 	.word	0x0801c398

0801564c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b084      	sub	sp, #16
 8015650:	af02      	add	r7, sp, #8
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	460b      	mov	r3, r1
 8015656:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801565c:	9301      	str	r3, [sp, #4]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	9300      	str	r3, [sp, #0]
 8015662:	4b05      	ldr	r3, [pc, #20]	@ (8015678 <RegionCommonTxConfigPrint+0x2c>)
 8015664:	2201      	movs	r2, #1
 8015666:	2100      	movs	r1, #0
 8015668:	2002      	movs	r0, #2
 801566a:	f005 fd4d 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
}
 801566e:	bf00      	nop
 8015670:	3708      	adds	r7, #8
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}
 8015676:	bf00      	nop
 8015678:	0801c3b4 	.word	0x0801c3b4

0801567c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015686:	4b2d      	ldr	r3, [pc, #180]	@ (801573c <VerifyRfFreq+0xc0>)
 8015688:	6a1b      	ldr	r3, [r3, #32]
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	4798      	blx	r3
 801568e:	4603      	mov	r3, r0
 8015690:	f083 0301 	eor.w	r3, r3, #1
 8015694:	b2db      	uxtb	r3, r3
 8015696:	2b00      	cmp	r3, #0
 8015698:	d001      	beq.n	801569e <VerifyRfFreq+0x22>
    {
        return false;
 801569a:	2300      	movs	r3, #0
 801569c:	e04a      	b.n	8015734 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	4a27      	ldr	r2, [pc, #156]	@ (8015740 <VerifyRfFreq+0xc4>)
 80156a2:	4293      	cmp	r3, r2
 80156a4:	d307      	bcc.n	80156b6 <VerifyRfFreq+0x3a>
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	4a26      	ldr	r2, [pc, #152]	@ (8015744 <VerifyRfFreq+0xc8>)
 80156aa:	4293      	cmp	r3, r2
 80156ac:	d803      	bhi.n	80156b6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	2202      	movs	r2, #2
 80156b2:	701a      	strb	r2, [r3, #0]
 80156b4:	e03d      	b.n	8015732 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	4a22      	ldr	r2, [pc, #136]	@ (8015744 <VerifyRfFreq+0xc8>)
 80156ba:	4293      	cmp	r3, r2
 80156bc:	d907      	bls.n	80156ce <VerifyRfFreq+0x52>
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	4a21      	ldr	r2, [pc, #132]	@ (8015748 <VerifyRfFreq+0xcc>)
 80156c2:	4293      	cmp	r3, r2
 80156c4:	d803      	bhi.n	80156ce <VerifyRfFreq+0x52>
    {
        *band = 0;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	2200      	movs	r2, #0
 80156ca:	701a      	strb	r2, [r3, #0]
 80156cc:	e031      	b.n	8015732 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	4a1d      	ldr	r2, [pc, #116]	@ (8015748 <VerifyRfFreq+0xcc>)
 80156d2:	4293      	cmp	r3, r2
 80156d4:	d907      	bls.n	80156e6 <VerifyRfFreq+0x6a>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	4a1c      	ldr	r2, [pc, #112]	@ (801574c <VerifyRfFreq+0xd0>)
 80156da:	4293      	cmp	r3, r2
 80156dc:	d803      	bhi.n	80156e6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	2201      	movs	r2, #1
 80156e2:	701a      	strb	r2, [r3, #0]
 80156e4:	e025      	b.n	8015732 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	4a19      	ldr	r2, [pc, #100]	@ (8015750 <VerifyRfFreq+0xd4>)
 80156ea:	4293      	cmp	r3, r2
 80156ec:	d907      	bls.n	80156fe <VerifyRfFreq+0x82>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	4a18      	ldr	r2, [pc, #96]	@ (8015754 <VerifyRfFreq+0xd8>)
 80156f2:	4293      	cmp	r3, r2
 80156f4:	d803      	bhi.n	80156fe <VerifyRfFreq+0x82>
    {
        *band = 5;
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	2205      	movs	r2, #5
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	e019      	b.n	8015732 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	4a15      	ldr	r2, [pc, #84]	@ (8015758 <VerifyRfFreq+0xdc>)
 8015702:	4293      	cmp	r3, r2
 8015704:	d907      	bls.n	8015716 <VerifyRfFreq+0x9a>
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	4a14      	ldr	r2, [pc, #80]	@ (801575c <VerifyRfFreq+0xe0>)
 801570a:	4293      	cmp	r3, r2
 801570c:	d803      	bhi.n	8015716 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801570e:	683b      	ldr	r3, [r7, #0]
 8015710:	2203      	movs	r2, #3
 8015712:	701a      	strb	r2, [r3, #0]
 8015714:	e00d      	b.n	8015732 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	4a11      	ldr	r2, [pc, #68]	@ (8015760 <VerifyRfFreq+0xe4>)
 801571a:	4293      	cmp	r3, r2
 801571c:	d307      	bcc.n	801572e <VerifyRfFreq+0xb2>
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	4a10      	ldr	r2, [pc, #64]	@ (8015764 <VerifyRfFreq+0xe8>)
 8015722:	4293      	cmp	r3, r2
 8015724:	d803      	bhi.n	801572e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	2204      	movs	r2, #4
 801572a:	701a      	strb	r2, [r3, #0]
 801572c:	e001      	b.n	8015732 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801572e:	2300      	movs	r3, #0
 8015730:	e000      	b.n	8015734 <VerifyRfFreq+0xb8>
    }
    return true;
 8015732:	2301      	movs	r3, #1
}
 8015734:	4618      	mov	r0, r3
 8015736:	3708      	adds	r7, #8
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	0801c9c4 	.word	0x0801c9c4
 8015740:	337055c0 	.word	0x337055c0
 8015744:	338eda3f 	.word	0x338eda3f
 8015748:	33bca100 	.word	0x33bca100
 801574c:	33c5c8c0 	.word	0x33c5c8c0
 8015750:	33c74f5f 	.word	0x33c74f5f
 8015754:	33cef080 	.word	0x33cef080
 8015758:	33d1fdbf 	.word	0x33d1fdbf
 801575c:	33d5ce50 	.word	0x33d5ce50
 8015760:	33d691a0 	.word	0x33d691a0
 8015764:	33db2580 	.word	0x33db2580

08015768 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015768:	b590      	push	{r4, r7, lr}
 801576a:	b08b      	sub	sp, #44	@ 0x2c
 801576c:	af04      	add	r7, sp, #16
 801576e:	4603      	mov	r3, r0
 8015770:	460a      	mov	r2, r1
 8015772:	71fb      	strb	r3, [r7, #7]
 8015774:	4613      	mov	r3, r2
 8015776:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801577c:	4a1f      	ldr	r2, [pc, #124]	@ (80157fc <GetTimeOnAir+0x94>)
 801577e:	5cd3      	ldrb	r3, [r2, r3]
 8015780:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015786:	491e      	ldr	r1, [pc, #120]	@ (8015800 <GetTimeOnAir+0x98>)
 8015788:	4618      	mov	r0, r3
 801578a:	f7ff ff0f 	bl	80155ac <RegionCommonGetBandwidth>
 801578e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015790:	2300      	movs	r3, #0
 8015792:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015798:	2b07      	cmp	r3, #7
 801579a:	d118      	bne.n	80157ce <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801579c:	4b19      	ldr	r3, [pc, #100]	@ (8015804 <GetTimeOnAir+0x9c>)
 801579e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80157a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80157a8:	fb02 f303 	mul.w	r3, r2, r3
 80157ac:	4619      	mov	r1, r3
 80157ae:	88bb      	ldrh	r3, [r7, #4]
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	2201      	movs	r2, #1
 80157b4:	9203      	str	r2, [sp, #12]
 80157b6:	9302      	str	r3, [sp, #8]
 80157b8:	2300      	movs	r3, #0
 80157ba:	9301      	str	r3, [sp, #4]
 80157bc:	2305      	movs	r3, #5
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	2300      	movs	r3, #0
 80157c2:	460a      	mov	r2, r1
 80157c4:	68f9      	ldr	r1, [r7, #12]
 80157c6:	2000      	movs	r0, #0
 80157c8:	47a0      	blx	r4
 80157ca:	6178      	str	r0, [r7, #20]
 80157cc:	e011      	b.n	80157f2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80157ce:	4b0d      	ldr	r3, [pc, #52]	@ (8015804 <GetTimeOnAir+0x9c>)
 80157d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80157d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80157d6:	88bb      	ldrh	r3, [r7, #4]
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2101      	movs	r1, #1
 80157dc:	9103      	str	r1, [sp, #12]
 80157de:	9302      	str	r3, [sp, #8]
 80157e0:	2300      	movs	r3, #0
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	2308      	movs	r3, #8
 80157e6:	9300      	str	r3, [sp, #0]
 80157e8:	2301      	movs	r3, #1
 80157ea:	68f9      	ldr	r1, [r7, #12]
 80157ec:	2001      	movs	r0, #1
 80157ee:	47a0      	blx	r4
 80157f0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80157f2:	697b      	ldr	r3, [r7, #20]
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	371c      	adds	r7, #28
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd90      	pop	{r4, r7, pc}
 80157fc:	0801c98c 	.word	0x0801c98c
 8015800:	0801c994 	.word	0x0801c994
 8015804:	0801c9c4 	.word	0x0801c9c4

08015808 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b088      	sub	sp, #32
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015810:	2300      	movs	r3, #0
 8015812:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	3b01      	subs	r3, #1
 801581a:	2b37      	cmp	r3, #55	@ 0x37
 801581c:	f200 8122 	bhi.w	8015a64 <RegionEU868GetPhyParam+0x25c>
 8015820:	a201      	add	r2, pc, #4	@ (adr r2, 8015828 <RegionEU868GetPhyParam+0x20>)
 8015822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015826:	bf00      	nop
 8015828:	08015909 	.word	0x08015909
 801582c:	0801590f 	.word	0x0801590f
 8015830:	08015a65 	.word	0x08015a65
 8015834:	08015a65 	.word	0x08015a65
 8015838:	08015a65 	.word	0x08015a65
 801583c:	08015915 	.word	0x08015915
 8015840:	08015a65 	.word	0x08015a65
 8015844:	0801594f 	.word	0x0801594f
 8015848:	08015a65 	.word	0x08015a65
 801584c:	08015955 	.word	0x08015955
 8015850:	0801595b 	.word	0x0801595b
 8015854:	08015961 	.word	0x08015961
 8015858:	08015967 	.word	0x08015967
 801585c:	08015977 	.word	0x08015977
 8015860:	08015987 	.word	0x08015987
 8015864:	0801598d 	.word	0x0801598d
 8015868:	08015995 	.word	0x08015995
 801586c:	0801599d 	.word	0x0801599d
 8015870:	080159a5 	.word	0x080159a5
 8015874:	080159ad 	.word	0x080159ad
 8015878:	080159b5 	.word	0x080159b5
 801587c:	080159c9 	.word	0x080159c9
 8015880:	080159cf 	.word	0x080159cf
 8015884:	080159d5 	.word	0x080159d5
 8015888:	080159db 	.word	0x080159db
 801588c:	080159e7 	.word	0x080159e7
 8015890:	080159f3 	.word	0x080159f3
 8015894:	080159f9 	.word	0x080159f9
 8015898:	08015a01 	.word	0x08015a01
 801589c:	08015a07 	.word	0x08015a07
 80158a0:	08015a0d 	.word	0x08015a0d
 80158a4:	08015a15 	.word	0x08015a15
 80158a8:	0801591b 	.word	0x0801591b
 80158ac:	08015a65 	.word	0x08015a65
 80158b0:	08015a65 	.word	0x08015a65
 80158b4:	08015a65 	.word	0x08015a65
 80158b8:	08015a65 	.word	0x08015a65
 80158bc:	08015a65 	.word	0x08015a65
 80158c0:	08015a65 	.word	0x08015a65
 80158c4:	08015a65 	.word	0x08015a65
 80158c8:	08015a65 	.word	0x08015a65
 80158cc:	08015a65 	.word	0x08015a65
 80158d0:	08015a65 	.word	0x08015a65
 80158d4:	08015a65 	.word	0x08015a65
 80158d8:	08015a65 	.word	0x08015a65
 80158dc:	08015a65 	.word	0x08015a65
 80158e0:	08015a1b 	.word	0x08015a1b
 80158e4:	08015a21 	.word	0x08015a21
 80158e8:	08015a2f 	.word	0x08015a2f
 80158ec:	08015a65 	.word	0x08015a65
 80158f0:	08015a65 	.word	0x08015a65
 80158f4:	08015a35 	.word	0x08015a35
 80158f8:	08015a3b 	.word	0x08015a3b
 80158fc:	08015a65 	.word	0x08015a65
 8015900:	08015a41 	.word	0x08015a41
 8015904:	08015a51 	.word	0x08015a51
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015908:	2300      	movs	r3, #0
 801590a:	61bb      	str	r3, [r7, #24]
            break;
 801590c:	e0ab      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801590e:	2300      	movs	r3, #0
 8015910:	61bb      	str	r3, [r7, #24]
            break;
 8015912:	e0a8      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015914:	2300      	movs	r3, #0
 8015916:	61bb      	str	r3, [r7, #24]
            break;
 8015918:	e0a5      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015920:	733b      	strb	r3, [r7, #12]
 8015922:	2307      	movs	r3, #7
 8015924:	737b      	strb	r3, [r7, #13]
 8015926:	2300      	movs	r3, #0
 8015928:	73bb      	strb	r3, [r7, #14]
 801592a:	2310      	movs	r3, #16
 801592c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801592e:	4b51      	ldr	r3, [pc, #324]	@ (8015a74 <RegionEU868GetPhyParam+0x26c>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015936:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015938:	4b4e      	ldr	r3, [pc, #312]	@ (8015a74 <RegionEU868GetPhyParam+0x26c>)
 801593a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801593c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801593e:	f107 030c 	add.w	r3, r7, #12
 8015942:	4618      	mov	r0, r3
 8015944:	f7ff fddf 	bl	8015506 <RegionCommonGetNextLowerTxDr>
 8015948:	4603      	mov	r3, r0
 801594a:	61bb      	str	r3, [r7, #24]
            break;
 801594c:	e08b      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801594e:	2300      	movs	r3, #0
 8015950:	61bb      	str	r3, [r7, #24]
            break;
 8015952:	e088      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015954:	2300      	movs	r3, #0
 8015956:	61bb      	str	r3, [r7, #24]
            break;
 8015958:	e085      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801595a:	2340      	movs	r3, #64	@ 0x40
 801595c:	61bb      	str	r3, [r7, #24]
            break;
 801595e:	e082      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015960:	2320      	movs	r3, #32
 8015962:	61bb      	str	r3, [r7, #24]
            break;
 8015964:	e07f      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801596c:	461a      	mov	r2, r3
 801596e:	4b42      	ldr	r3, [pc, #264]	@ (8015a78 <RegionEU868GetPhyParam+0x270>)
 8015970:	5c9b      	ldrb	r3, [r3, r2]
 8015972:	61bb      	str	r3, [r7, #24]
            break;
 8015974:	e077      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801597c:	461a      	mov	r2, r3
 801597e:	4b3f      	ldr	r3, [pc, #252]	@ (8015a7c <RegionEU868GetPhyParam+0x274>)
 8015980:	5c9b      	ldrb	r3, [r3, r2]
 8015982:	61bb      	str	r3, [r7, #24]
            break;
 8015984:	e06f      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015986:	2301      	movs	r3, #1
 8015988:	61bb      	str	r3, [r7, #24]
            break;
 801598a:	e06c      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801598c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8015990:	61bb      	str	r3, [r7, #24]
            break;
 8015992:	e068      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015994:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015998:	61bb      	str	r3, [r7, #24]
            break;
 801599a:	e064      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801599c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80159a0:	61bb      	str	r3, [r7, #24]
            break;
 80159a2:	e060      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80159a4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80159a8:	61bb      	str	r3, [r7, #24]
            break;
 80159aa:	e05c      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80159ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 80159b0:	61bb      	str	r3, [r7, #24]
            break;
 80159b2:	e058      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80159b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80159b8:	4831      	ldr	r0, [pc, #196]	@ (8015a80 <RegionEU868GetPhyParam+0x278>)
 80159ba:	f001 f831 	bl	8016a20 <randr>
 80159be:	4603      	mov	r3, r0
 80159c0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80159c4:	61bb      	str	r3, [r7, #24]
            break;
 80159c6:	e04e      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80159c8:	2300      	movs	r3, #0
 80159ca:	61bb      	str	r3, [r7, #24]
            break;
 80159cc:	e04b      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80159ce:	4b2d      	ldr	r3, [pc, #180]	@ (8015a84 <RegionEU868GetPhyParam+0x27c>)
 80159d0:	61bb      	str	r3, [r7, #24]
            break;
 80159d2:	e048      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80159d4:	2300      	movs	r3, #0
 80159d6:	61bb      	str	r3, [r7, #24]
            break;
 80159d8:	e045      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80159da:	4b26      	ldr	r3, [pc, #152]	@ (8015a74 <RegionEU868GetPhyParam+0x26c>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80159e2:	61bb      	str	r3, [r7, #24]
            break;
 80159e4:	e03f      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80159e6:	4b23      	ldr	r3, [pc, #140]	@ (8015a74 <RegionEU868GetPhyParam+0x26c>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80159ee:	61bb      	str	r3, [r7, #24]
            break;
 80159f0:	e039      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80159f2:	2310      	movs	r3, #16
 80159f4:	61bb      	str	r3, [r7, #24]
            break;
 80159f6:	e036      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80159f8:	4b1e      	ldr	r3, [pc, #120]	@ (8015a74 <RegionEU868GetPhyParam+0x26c>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	61bb      	str	r3, [r7, #24]
            break;
 80159fe:	e032      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015a00:	2300      	movs	r3, #0
 8015a02:	61bb      	str	r3, [r7, #24]
            break;
 8015a04:	e02f      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015a06:	2300      	movs	r3, #0
 8015a08:	61bb      	str	r3, [r7, #24]
            break;
 8015a0a:	e02c      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015a0c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015a10:	61bb      	str	r3, [r7, #24]
            break;
 8015a12:	e028      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015a14:	4b1c      	ldr	r3, [pc, #112]	@ (8015a88 <RegionEU868GetPhyParam+0x280>)
 8015a16:	61bb      	str	r3, [r7, #24]
            break;
 8015a18:	e025      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8015a84 <RegionEU868GetPhyParam+0x27c>)
 8015a1c:	61bb      	str	r3, [r7, #24]
            break;
 8015a1e:	e022      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015a20:	2311      	movs	r3, #17
 8015a22:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015a24:	2301      	movs	r3, #1
 8015a26:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015a28:	2300      	movs	r3, #0
 8015a2a:	76bb      	strb	r3, [r7, #26]
            break;
 8015a2c:	e01b      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015a2e:	2303      	movs	r3, #3
 8015a30:	61bb      	str	r3, [r7, #24]
            break;
 8015a32:	e018      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015a34:	4b13      	ldr	r3, [pc, #76]	@ (8015a84 <RegionEU868GetPhyParam+0x27c>)
 8015a36:	61bb      	str	r3, [r7, #24]
            break;
 8015a38:	e015      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015a3a:	2303      	movs	r3, #3
 8015a3c:	61bb      	str	r3, [r7, #24]
            break;
 8015a3e:	e012      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a46:	461a      	mov	r2, r3
 8015a48:	4b10      	ldr	r3, [pc, #64]	@ (8015a8c <RegionEU868GetPhyParam+0x284>)
 8015a4a:	5c9b      	ldrb	r3, [r3, r2]
 8015a4c:	61bb      	str	r3, [r7, #24]
            break;
 8015a4e:	e00a      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a56:	490e      	ldr	r1, [pc, #56]	@ (8015a90 <RegionEU868GetPhyParam+0x288>)
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7ff fda7 	bl	80155ac <RegionCommonGetBandwidth>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	61bb      	str	r3, [r7, #24]
            break;
 8015a62:	e000      	b.n	8015a66 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8015a64:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015a66:	69bb      	ldr	r3, [r7, #24]
 8015a68:	61fb      	str	r3, [r7, #28]
 8015a6a:	69fb      	ldr	r3, [r7, #28]
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3720      	adds	r7, #32
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	200013ac 	.word	0x200013ac
 8015a78:	0801c9b4 	.word	0x0801c9b4
 8015a7c:	0801c9bc 	.word	0x0801c9bc
 8015a80:	fffffc18 	.word	0xfffffc18
 8015a84:	33d3e608 	.word	0x33d3e608
 8015a88:	4009999a 	.word	0x4009999a
 8015a8c:	0801c98c 	.word	0x0801c98c
 8015a90:	0801c994 	.word	0x0801c994

08015a94 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015a94:	b590      	push	{r4, r7, lr}
 8015a96:	b085      	sub	sp, #20
 8015a98:	af02      	add	r7, sp, #8
 8015a9a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015a9c:	4b11      	ldr	r3, [pc, #68]	@ (8015ae4 <RegionEU868SetBandTxDone+0x50>)
 8015a9e:	681a      	ldr	r2, [r3, #0]
 8015aa0:	4b11      	ldr	r3, [pc, #68]	@ (8015ae8 <RegionEU868SetBandTxDone+0x54>)
 8015aa2:	6819      	ldr	r1, [r3, #0]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	781b      	ldrb	r3, [r3, #0]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	4603      	mov	r3, r0
 8015aac:	005b      	lsls	r3, r3, #1
 8015aae:	4403      	add	r3, r0
 8015ab0:	009b      	lsls	r3, r3, #2
 8015ab2:	440b      	add	r3, r1
 8015ab4:	3309      	adds	r3, #9
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	460b      	mov	r3, r1
 8015abc:	005b      	lsls	r3, r3, #1
 8015abe:	440b      	add	r3, r1
 8015ac0:	00db      	lsls	r3, r3, #3
 8015ac2:	18d0      	adds	r0, r2, r3
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6899      	ldr	r1, [r3, #8]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	785c      	ldrb	r4, [r3, #1]
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	691a      	ldr	r2, [r3, #16]
 8015ad0:	9200      	str	r2, [sp, #0]
 8015ad2:	68db      	ldr	r3, [r3, #12]
 8015ad4:	4622      	mov	r2, r4
 8015ad6:	f7ff f913 	bl	8014d00 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8015ada:	bf00      	nop
 8015adc:	370c      	adds	r7, #12
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd90      	pop	{r4, r7, pc}
 8015ae2:	bf00      	nop
 8015ae4:	200013b0 	.word	0x200013b0
 8015ae8:	200013ac 	.word	0x200013ac

08015aec <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b0b0      	sub	sp, #192	@ 0xc0
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015af4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015af8:	2290      	movs	r2, #144	@ 0x90
 8015afa:	2100      	movs	r1, #0
 8015afc:	4618      	mov	r0, r3
 8015afe:	f005 fd9d 	bl	801b63c <memset>
 8015b02:	2364      	movs	r3, #100	@ 0x64
 8015b04:	863b      	strh	r3, [r7, #48]	@ 0x30
 8015b06:	2364      	movs	r3, #100	@ 0x64
 8015b08:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015b10:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8015b14:	230a      	movs	r3, #10
 8015b16:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8015b1a:	2364      	movs	r3, #100	@ 0x64
 8015b1c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8015b20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015b24:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	7b1b      	ldrb	r3, [r3, #12]
 8015b2c:	2b02      	cmp	r3, #2
 8015b2e:	d05d      	beq.n	8015bec <RegionEU868InitDefaults+0x100>
 8015b30:	2b02      	cmp	r3, #2
 8015b32:	dc6a      	bgt.n	8015c0a <RegionEU868InitDefaults+0x11e>
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d002      	beq.n	8015b3e <RegionEU868InitDefaults+0x52>
 8015b38:	2b01      	cmp	r3, #1
 8015b3a:	d03e      	beq.n	8015bba <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015b3c:	e065      	b.n	8015c0a <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d062      	beq.n	8015c0c <RegionEU868InitDefaults+0x120>
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	685b      	ldr	r3, [r3, #4]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d05e      	beq.n	8015c0c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	4a30      	ldr	r2, [pc, #192]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015b54:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	689b      	ldr	r3, [r3, #8]
 8015b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8015c18 <RegionEU868InitDefaults+0x12c>)
 8015b5c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8015c18 <RegionEU868InitDefaults+0x12c>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015b66:	2290      	movs	r2, #144	@ 0x90
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f000 ff70 	bl	8016a4e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015b6e:	4b29      	ldr	r3, [pc, #164]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	4a2a      	ldr	r2, [pc, #168]	@ (8015c1c <RegionEU868InitDefaults+0x130>)
 8015b74:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015b7a:	4b26      	ldr	r3, [pc, #152]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	4a28      	ldr	r2, [pc, #160]	@ (8015c20 <RegionEU868InitDefaults+0x134>)
 8015b80:	330c      	adds	r3, #12
 8015b82:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015b88:	4b22      	ldr	r3, [pc, #136]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	4a25      	ldr	r2, [pc, #148]	@ (8015c24 <RegionEU868InitDefaults+0x138>)
 8015b8e:	3318      	adds	r3, #24
 8015b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015b96:	4b1f      	ldr	r3, [pc, #124]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2207      	movs	r2, #7
 8015b9c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015bb0:	2201      	movs	r2, #1
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	f7ff f87e 	bl	8014cb4 <RegionCommonChanMaskCopy>
 8015bb8:	e028      	b.n	8015c0c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015bba:	4b16      	ldr	r3, [pc, #88]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015bc2:	4b14      	ldr	r3, [pc, #80]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015bca:	4b12      	ldr	r3, [pc, #72]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015bd2:	4b10      	ldr	r3, [pc, #64]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015bda:	4b0e      	ldr	r3, [pc, #56]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015be2:	2201      	movs	r2, #1
 8015be4:	4619      	mov	r1, r3
 8015be6:	f7ff f865 	bl	8014cb4 <RegionCommonChanMaskCopy>
            break;
 8015bea:	e00f      	b.n	8015c0c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015bec:	4b09      	ldr	r3, [pc, #36]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8015bf4:	4b07      	ldr	r3, [pc, #28]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8015bfc:	4b05      	ldr	r3, [pc, #20]	@ (8015c14 <RegionEU868InitDefaults+0x128>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	430a      	orrs	r2, r1
 8015c02:	b292      	uxth	r2, r2
 8015c04:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8015c08:	e000      	b.n	8015c0c <RegionEU868InitDefaults+0x120>
            break;
 8015c0a:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015c0c:	37c0      	adds	r7, #192	@ 0xc0
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	200013ac 	.word	0x200013ac
 8015c18:	200013b0 	.word	0x200013b0
 8015c1c:	0801c3d0 	.word	0x0801c3d0
 8015c20:	0801c3dc 	.word	0x0801c3dc
 8015c24:	0801c3e8 	.word	0x0801c3e8

08015c28 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	460b      	mov	r3, r1
 8015c32:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015c34:	78fb      	ldrb	r3, [r7, #3]
 8015c36:	2b0f      	cmp	r3, #15
 8015c38:	d86c      	bhi.n	8015d14 <RegionEU868Verify+0xec>
 8015c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8015c40 <RegionEU868Verify+0x18>)
 8015c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c40:	08015c81 	.word	0x08015c81
 8015c44:	08015d15 	.word	0x08015d15
 8015c48:	08015d15 	.word	0x08015d15
 8015c4c:	08015d15 	.word	0x08015d15
 8015c50:	08015d15 	.word	0x08015d15
 8015c54:	08015c99 	.word	0x08015c99
 8015c58:	08015cb7 	.word	0x08015cb7
 8015c5c:	08015cd5 	.word	0x08015cd5
 8015c60:	08015d15 	.word	0x08015d15
 8015c64:	08015cf3 	.word	0x08015cf3
 8015c68:	08015cf3 	.word	0x08015cf3
 8015c6c:	08015d15 	.word	0x08015d15
 8015c70:	08015d15 	.word	0x08015d15
 8015c74:	08015d15 	.word	0x08015d15
 8015c78:	08015d15 	.word	0x08015d15
 8015c7c:	08015d11 	.word	0x08015d11
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015c80:	2300      	movs	r3, #0
 8015c82:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	f107 020f 	add.w	r2, r7, #15
 8015c8c:	4611      	mov	r1, r2
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7ff fcf4 	bl	801567c <VerifyRfFreq>
 8015c94:	4603      	mov	r3, r0
 8015c96:	e03e      	b.n	8015d16 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8015c9e:	2207      	movs	r2, #7
 8015ca0:	2100      	movs	r1, #0
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7fe ff89 	bl	8014bba <RegionCommonValueInRange>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	bf14      	ite	ne
 8015cae:	2301      	movne	r3, #1
 8015cb0:	2300      	moveq	r3, #0
 8015cb2:	b2db      	uxtb	r3, r3
 8015cb4:	e02f      	b.n	8015d16 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8015cbc:	2205      	movs	r2, #5
 8015cbe:	2100      	movs	r1, #0
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7fe ff7a 	bl	8014bba <RegionCommonValueInRange>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	bf14      	ite	ne
 8015ccc:	2301      	movne	r3, #1
 8015cce:	2300      	moveq	r3, #0
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	e020      	b.n	8015d16 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f993 3000 	ldrsb.w	r3, [r3]
 8015cda:	2207      	movs	r2, #7
 8015cdc:	2100      	movs	r1, #0
 8015cde:	4618      	mov	r0, r3
 8015ce0:	f7fe ff6b 	bl	8014bba <RegionCommonValueInRange>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	bf14      	ite	ne
 8015cea:	2301      	movne	r3, #1
 8015cec:	2300      	moveq	r3, #0
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	e011      	b.n	8015d16 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8015cf8:	2207      	movs	r2, #7
 8015cfa:	2100      	movs	r1, #0
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7fe ff5c 	bl	8014bba <RegionCommonValueInRange>
 8015d02:	4603      	mov	r3, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	bf14      	ite	ne
 8015d08:	2301      	movne	r3, #1
 8015d0a:	2300      	moveq	r3, #0
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	e002      	b.n	8015d16 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015d10:	2301      	movs	r3, #1
 8015d12:	e000      	b.n	8015d16 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015d14:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop

08015d20 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b08a      	sub	sp, #40	@ 0x28
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015d28:	2350      	movs	r3, #80	@ 0x50
 8015d2a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	7a1b      	ldrb	r3, [r3, #8]
 8015d32:	2b10      	cmp	r3, #16
 8015d34:	d162      	bne.n	8015dfc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	330f      	adds	r3, #15
 8015d3c:	781b      	ldrb	r3, [r3, #0]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d15e      	bne.n	8015e00 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015d42:	2300      	movs	r3, #0
 8015d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d48:	2303      	movs	r3, #3
 8015d4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015d4e:	e050      	b.n	8015df2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015d50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d54:	2b07      	cmp	r3, #7
 8015d56:	d824      	bhi.n	8015da2 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	685a      	ldr	r2, [r3, #4]
 8015d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d60:	4413      	add	r3, r2
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015d66:	69ba      	ldr	r2, [r7, #24]
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	6859      	ldr	r1, [r3, #4]
 8015d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d70:	3301      	adds	r3, #1
 8015d72:	440b      	add	r3, r1
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	021b      	lsls	r3, r3, #8
 8015d78:	4313      	orrs	r3, r2
 8015d7a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015d7c:	69ba      	ldr	r2, [r7, #24]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6859      	ldr	r1, [r3, #4]
 8015d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d86:	3302      	adds	r3, #2
 8015d88:	440b      	add	r3, r1
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	041b      	lsls	r3, r3, #16
 8015d8e:	4313      	orrs	r3, r2
 8015d90:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	2264      	movs	r2, #100	@ 0x64
 8015d96:	fb02 f303 	mul.w	r3, r2, r3
 8015d9a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	61fb      	str	r3, [r7, #28]
 8015da0:	e006      	b.n	8015db0 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015da2:	2300      	movs	r3, #0
 8015da4:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015dac:	2300      	movs	r3, #0
 8015dae:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015db0:	69bb      	ldr	r3, [r7, #24]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d00b      	beq.n	8015dce <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015db6:	f107 0318 	add.w	r3, r7, #24
 8015dba:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dc0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015dc2:	f107 0310 	add.w	r3, r7, #16
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f000 fd14 	bl	80167f4 <RegionEU868ChannelAdd>
 8015dcc:	e007      	b.n	8015dde <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015dce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dd2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015dd4:	f107 030c 	add.w	r3, r7, #12
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f000 fdad 	bl	8016938 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015de2:	3303      	adds	r3, #3
 8015de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015de8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dec:	3301      	adds	r3, #1
 8015dee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015df2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015df6:	2b0f      	cmp	r3, #15
 8015df8:	d9aa      	bls.n	8015d50 <RegionEU868ApplyCFList+0x30>
 8015dfa:	e002      	b.n	8015e02 <RegionEU868ApplyCFList+0xe2>
        return;
 8015dfc:	bf00      	nop
 8015dfe:	e000      	b.n	8015e02 <RegionEU868ApplyCFList+0xe2>
        return;
 8015e00:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015e02:	3728      	adds	r7, #40	@ 0x28
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	791b      	ldrb	r3, [r3, #4]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d002      	beq.n	8015e1e <RegionEU868ChanMaskSet+0x16>
 8015e18:	2b01      	cmp	r3, #1
 8015e1a:	d00b      	beq.n	8015e34 <RegionEU868ChanMaskSet+0x2c>
 8015e1c:	e015      	b.n	8015e4a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8015e58 <RegionEU868ChanMaskSet+0x50>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	4619      	mov	r1, r3
 8015e2e:	f7fe ff41 	bl	8014cb4 <RegionCommonChanMaskCopy>
            break;
 8015e32:	e00c      	b.n	8015e4e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015e34:	4b08      	ldr	r3, [pc, #32]	@ (8015e58 <RegionEU868ChanMaskSet+0x50>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2201      	movs	r2, #1
 8015e42:	4619      	mov	r1, r3
 8015e44:	f7fe ff36 	bl	8014cb4 <RegionCommonChanMaskCopy>
            break;
 8015e48:	e001      	b.n	8015e4e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	e000      	b.n	8015e50 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015e4e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	200013ac 	.word	0x200013ac

08015e5c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b088      	sub	sp, #32
 8015e60:	af02      	add	r7, sp, #8
 8015e62:	60ba      	str	r2, [r7, #8]
 8015e64:	607b      	str	r3, [r7, #4]
 8015e66:	4603      	mov	r3, r0
 8015e68:	73fb      	strb	r3, [r7, #15]
 8015e6a:	460b      	mov	r3, r1
 8015e6c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e76:	2b07      	cmp	r3, #7
 8015e78:	bfa8      	it	ge
 8015e7a:	2307      	movge	r3, #7
 8015e7c:	b25a      	sxtb	r2, r3
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e88:	491e      	ldr	r1, [pc, #120]	@ (8015f04 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7ff fb8e 	bl	80155ac <RegionCommonGetBandwidth>
 8015e90:	4603      	mov	r3, r0
 8015e92:	b2da      	uxtb	r2, r3
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e9e:	2b07      	cmp	r3, #7
 8015ea0:	d10a      	bne.n	8015eb8 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	4b17      	ldr	r3, [pc, #92]	@ (8015f08 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015eac:	5c9b      	ldrb	r3, [r3, r2]
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7ff f910 	bl	80150d4 <RegionCommonComputeSymbolTimeFsk>
 8015eb4:	6178      	str	r0, [r7, #20]
 8015eb6:	e011      	b.n	8015edc <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ebe:	461a      	mov	r2, r3
 8015ec0:	4b11      	ldr	r3, [pc, #68]	@ (8015f08 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ec2:	5c9a      	ldrb	r2, [r3, r2]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015eca:	4619      	mov	r1, r3
 8015ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8015f04 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015ece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ed2:	4619      	mov	r1, r3
 8015ed4:	4610      	mov	r0, r2
 8015ed6:	f7ff f8e7 	bl	80150a8 <RegionCommonComputeSymbolTimeLoRa>
 8015eda:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015edc:	4b0b      	ldr	r3, [pc, #44]	@ (8015f0c <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015ee0:	4798      	blx	r3
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	3308      	adds	r3, #8
 8015ee6:	687a      	ldr	r2, [r7, #4]
 8015ee8:	320c      	adds	r2, #12
 8015eea:	7bb9      	ldrb	r1, [r7, #14]
 8015eec:	9201      	str	r2, [sp, #4]
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	68ba      	ldr	r2, [r7, #8]
 8015ef4:	6978      	ldr	r0, [r7, #20]
 8015ef6:	f7ff f8fd 	bl	80150f4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015efa:	bf00      	nop
 8015efc:	3718      	adds	r7, #24
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	0801c994 	.word	0x0801c994
 8015f08:	0801c98c 	.word	0x0801c98c
 8015f0c:	0801c9c4 	.word	0x0801c9c4

08015f10 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015f10:	b5b0      	push	{r4, r5, r7, lr}
 8015f12:	b090      	sub	sp, #64	@ 0x40
 8015f14:	af0a      	add	r7, sp, #40	@ 0x28
 8015f16:	6078      	str	r0, [r7, #4]
 8015f18:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	785b      	ldrb	r3, [r3, #1]
 8015f1e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015f20:	2300      	movs	r3, #0
 8015f22:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015f24:	2300      	movs	r3, #0
 8015f26:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	685b      	ldr	r3, [r3, #4]
 8015f2c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8016098 <RegionEU868RxConfig+0x188>)
 8015f30:	685b      	ldr	r3, [r3, #4]
 8015f32:	4798      	blx	r3
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d001      	beq.n	8015f3e <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	e0a8      	b.n	8016090 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	7cdb      	ldrb	r3, [r3, #19]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d126      	bne.n	8015f94 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015f46:	4b55      	ldr	r3, [pc, #340]	@ (801609c <RegionEU868RxConfig+0x18c>)
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	781b      	ldrb	r3, [r3, #0]
 8015f4e:	4619      	mov	r1, r3
 8015f50:	460b      	mov	r3, r1
 8015f52:	005b      	lsls	r3, r3, #1
 8015f54:	440b      	add	r3, r1
 8015f56:	009b      	lsls	r3, r3, #2
 8015f58:	4413      	add	r3, r2
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015f5e:	4b4f      	ldr	r3, [pc, #316]	@ (801609c <RegionEU868RxConfig+0x18c>)
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	4619      	mov	r1, r3
 8015f68:	460b      	mov	r3, r1
 8015f6a:	005b      	lsls	r3, r3, #1
 8015f6c:	440b      	add	r3, r1
 8015f6e:	009b      	lsls	r3, r3, #2
 8015f70:	4413      	add	r3, r2
 8015f72:	3304      	adds	r3, #4
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d00c      	beq.n	8015f94 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015f7a:	4b48      	ldr	r3, [pc, #288]	@ (801609c <RegionEU868RxConfig+0x18c>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	4619      	mov	r1, r3
 8015f84:	460b      	mov	r3, r1
 8015f86:	005b      	lsls	r3, r3, #1
 8015f88:	440b      	add	r3, r1
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	4413      	add	r3, r2
 8015f8e:	3304      	adds	r3, #4
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f98:	4a41      	ldr	r2, [pc, #260]	@ (80160a0 <RegionEU868RxConfig+0x190>)
 8015f9a:	5cd3      	ldrb	r3, [r2, r3]
 8015f9c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8016098 <RegionEU868RxConfig+0x188>)
 8015fa0:	68db      	ldr	r3, [r3, #12]
 8015fa2:	6938      	ldr	r0, [r7, #16]
 8015fa4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015faa:	2b07      	cmp	r3, #7
 8015fac:	d128      	bne.n	8016000 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015fb2:	4b39      	ldr	r3, [pc, #228]	@ (8016098 <RegionEU868RxConfig+0x188>)
 8015fb4:	699c      	ldr	r4, [r3, #24]
 8015fb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015fbe:	fb02 f303 	mul.w	r3, r2, r3
 8015fc2:	4619      	mov	r1, r3
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	689b      	ldr	r3, [r3, #8]
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	7c92      	ldrb	r2, [r2, #18]
 8015fce:	7df8      	ldrb	r0, [r7, #23]
 8015fd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	9208      	str	r2, [sp, #32]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	9207      	str	r2, [sp, #28]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	9206      	str	r2, [sp, #24]
 8015fde:	2201      	movs	r2, #1
 8015fe0:	9205      	str	r2, [sp, #20]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	9204      	str	r2, [sp, #16]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	9203      	str	r2, [sp, #12]
 8015fea:	9302      	str	r3, [sp, #8]
 8015fec:	2305      	movs	r3, #5
 8015fee:	9301      	str	r3, [sp, #4]
 8015ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80160a4 <RegionEU868RxConfig+0x194>)
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	460a      	mov	r2, r1
 8015ff8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015ffc:	47a0      	blx	r4
 8015ffe:	e024      	b.n	801604a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016000:	2301      	movs	r3, #1
 8016002:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016004:	4b24      	ldr	r3, [pc, #144]	@ (8016098 <RegionEU868RxConfig+0x188>)
 8016006:	699c      	ldr	r4, [r3, #24]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	789b      	ldrb	r3, [r3, #2]
 801600c:	461d      	mov	r5, r3
 801600e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	689b      	ldr	r3, [r3, #8]
 8016016:	b29b      	uxth	r3, r3
 8016018:	687a      	ldr	r2, [r7, #4]
 801601a:	7c92      	ldrb	r2, [r2, #18]
 801601c:	7df8      	ldrb	r0, [r7, #23]
 801601e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016020:	2201      	movs	r2, #1
 8016022:	9208      	str	r2, [sp, #32]
 8016024:	2200      	movs	r2, #0
 8016026:	9207      	str	r2, [sp, #28]
 8016028:	2200      	movs	r2, #0
 801602a:	9206      	str	r2, [sp, #24]
 801602c:	2200      	movs	r2, #0
 801602e:	9205      	str	r2, [sp, #20]
 8016030:	2200      	movs	r2, #0
 8016032:	9204      	str	r2, [sp, #16]
 8016034:	2200      	movs	r2, #0
 8016036:	9203      	str	r2, [sp, #12]
 8016038:	9302      	str	r3, [sp, #8]
 801603a:	2308      	movs	r3, #8
 801603c:	9301      	str	r3, [sp, #4]
 801603e:	2300      	movs	r3, #0
 8016040:	9300      	str	r3, [sp, #0]
 8016042:	2301      	movs	r3, #1
 8016044:	460a      	mov	r2, r1
 8016046:	4629      	mov	r1, r5
 8016048:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	7c5b      	ldrb	r3, [r3, #17]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d005      	beq.n	801605e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016056:	4a14      	ldr	r2, [pc, #80]	@ (80160a8 <RegionEU868RxConfig+0x198>)
 8016058:	5cd3      	ldrb	r3, [r2, r3]
 801605a:	75bb      	strb	r3, [r7, #22]
 801605c:	e004      	b.n	8016068 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801605e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016062:	4a12      	ldr	r2, [pc, #72]	@ (80160ac <RegionEU868RxConfig+0x19c>)
 8016064:	5cd3      	ldrb	r3, [r2, r3]
 8016066:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016068:	4b0b      	ldr	r3, [pc, #44]	@ (8016098 <RegionEU868RxConfig+0x188>)
 801606a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801606c:	7dba      	ldrb	r2, [r7, #22]
 801606e:	320d      	adds	r2, #13
 8016070:	b2d1      	uxtb	r1, r2
 8016072:	7dfa      	ldrb	r2, [r7, #23]
 8016074:	4610      	mov	r0, r2
 8016076:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	7cdb      	ldrb	r3, [r3, #19]
 801607c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016080:	6939      	ldr	r1, [r7, #16]
 8016082:	4618      	mov	r0, r3
 8016084:	f7ff fab0 	bl	80155e8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	7bfa      	ldrb	r2, [r7, #15]
 801608c:	701a      	strb	r2, [r3, #0]
    return true;
 801608e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016090:	4618      	mov	r0, r3
 8016092:	3718      	adds	r7, #24
 8016094:	46bd      	mov	sp, r7
 8016096:	bdb0      	pop	{r4, r5, r7, pc}
 8016098:	0801c9c4 	.word	0x0801c9c4
 801609c:	200013ac 	.word	0x200013ac
 80160a0:	0801c98c 	.word	0x0801c98c
 80160a4:	00014585 	.word	0x00014585
 80160a8:	0801c9bc 	.word	0x0801c9bc
 80160ac:	0801c9b4 	.word	0x0801c9b4

080160b0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80160b0:	b590      	push	{r4, r7, lr}
 80160b2:	b093      	sub	sp, #76	@ 0x4c
 80160b4:	af0a      	add	r7, sp, #40	@ 0x28
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160c2:	461a      	mov	r2, r3
 80160c4:	4b5d      	ldr	r3, [pc, #372]	@ (801623c <RegionEU868TxConfig+0x18c>)
 80160c6:	5c9b      	ldrb	r3, [r3, r2]
 80160c8:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80160d0:	4b5b      	ldr	r3, [pc, #364]	@ (8016240 <RegionEU868TxConfig+0x190>)
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	4b5b      	ldr	r3, [pc, #364]	@ (8016244 <RegionEU868TxConfig+0x194>)
 80160d6:	6819      	ldr	r1, [r3, #0]
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	461c      	mov	r4, r3
 80160de:	4623      	mov	r3, r4
 80160e0:	005b      	lsls	r3, r3, #1
 80160e2:	4423      	add	r3, r4
 80160e4:	009b      	lsls	r3, r3, #2
 80160e6:	440b      	add	r3, r1
 80160e8:	3309      	adds	r3, #9
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	4619      	mov	r1, r3
 80160ee:	460b      	mov	r3, r1
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	440b      	add	r3, r1
 80160f4:	00db      	lsls	r3, r3, #3
 80160f6:	4413      	add	r3, r2
 80160f8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80160fc:	4619      	mov	r1, r3
 80160fe:	f7ff fa40 	bl	8015582 <RegionCommonLimitTxPower>
 8016102:	4603      	mov	r3, r0
 8016104:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801610c:	494e      	ldr	r1, [pc, #312]	@ (8016248 <RegionEU868TxConfig+0x198>)
 801610e:	4618      	mov	r0, r3
 8016110:	f7ff fa4c 	bl	80155ac <RegionCommonGetBandwidth>
 8016114:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016116:	2300      	movs	r3, #0
 8016118:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	6859      	ldr	r1, [r3, #4]
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	689a      	ldr	r2, [r3, #8]
 8016122:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016126:	4618      	mov	r0, r3
 8016128:	f7ff f89c 	bl	8015264 <RegionCommonComputeTxPower>
 801612c:	4603      	mov	r3, r0
 801612e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016130:	4b46      	ldr	r3, [pc, #280]	@ (801624c <RegionEU868TxConfig+0x19c>)
 8016132:	68da      	ldr	r2, [r3, #12]
 8016134:	4b43      	ldr	r3, [pc, #268]	@ (8016244 <RegionEU868TxConfig+0x194>)
 8016136:	6819      	ldr	r1, [r3, #0]
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	4618      	mov	r0, r3
 801613e:	4603      	mov	r3, r0
 8016140:	005b      	lsls	r3, r3, #1
 8016142:	4403      	add	r3, r0
 8016144:	009b      	lsls	r3, r3, #2
 8016146:	440b      	add	r3, r1
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	4618      	mov	r0, r3
 801614c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016154:	2b07      	cmp	r3, #7
 8016156:	d124      	bne.n	80161a2 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016158:	2300      	movs	r3, #0
 801615a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801615c:	4b3b      	ldr	r3, [pc, #236]	@ (801624c <RegionEU868TxConfig+0x19c>)
 801615e:	69dc      	ldr	r4, [r3, #28]
 8016160:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016164:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016168:	fb02 f303 	mul.w	r3, r2, r3
 801616c:	461a      	mov	r2, r3
 801616e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016172:	7ff8      	ldrb	r0, [r7, #31]
 8016174:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016178:	9308      	str	r3, [sp, #32]
 801617a:	2300      	movs	r3, #0
 801617c:	9307      	str	r3, [sp, #28]
 801617e:	2300      	movs	r3, #0
 8016180:	9306      	str	r3, [sp, #24]
 8016182:	2300      	movs	r3, #0
 8016184:	9305      	str	r3, [sp, #20]
 8016186:	2301      	movs	r3, #1
 8016188:	9304      	str	r3, [sp, #16]
 801618a:	2300      	movs	r3, #0
 801618c:	9303      	str	r3, [sp, #12]
 801618e:	2305      	movs	r3, #5
 8016190:	9302      	str	r3, [sp, #8]
 8016192:	2300      	movs	r3, #0
 8016194:	9301      	str	r3, [sp, #4]
 8016196:	9200      	str	r2, [sp, #0]
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801619e:	47a0      	blx	r4
 80161a0:	e01d      	b.n	80161de <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80161a2:	2301      	movs	r3, #1
 80161a4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80161a6:	4b29      	ldr	r3, [pc, #164]	@ (801624c <RegionEU868TxConfig+0x19c>)
 80161a8:	69dc      	ldr	r4, [r3, #28]
 80161aa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80161ae:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80161b2:	7ff8      	ldrb	r0, [r7, #31]
 80161b4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80161b8:	9208      	str	r2, [sp, #32]
 80161ba:	2200      	movs	r2, #0
 80161bc:	9207      	str	r2, [sp, #28]
 80161be:	2200      	movs	r2, #0
 80161c0:	9206      	str	r2, [sp, #24]
 80161c2:	2200      	movs	r2, #0
 80161c4:	9205      	str	r2, [sp, #20]
 80161c6:	2201      	movs	r2, #1
 80161c8:	9204      	str	r2, [sp, #16]
 80161ca:	2200      	movs	r2, #0
 80161cc:	9203      	str	r2, [sp, #12]
 80161ce:	2208      	movs	r2, #8
 80161d0:	9202      	str	r2, [sp, #8]
 80161d2:	2201      	movs	r2, #1
 80161d4:	9201      	str	r2, [sp, #4]
 80161d6:	9300      	str	r3, [sp, #0]
 80161d8:	69bb      	ldr	r3, [r7, #24]
 80161da:	2200      	movs	r2, #0
 80161dc:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80161de:	4b19      	ldr	r3, [pc, #100]	@ (8016244 <RegionEU868TxConfig+0x194>)
 80161e0:	681a      	ldr	r2, [r3, #0]
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	4619      	mov	r1, r3
 80161e8:	460b      	mov	r3, r1
 80161ea:	005b      	lsls	r3, r3, #1
 80161ec:	440b      	add	r3, r1
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	4413      	add	r3, r2
 80161f2:	681a      	ldr	r2, [r3, #0]
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161fa:	4619      	mov	r1, r3
 80161fc:	4610      	mov	r0, r2
 80161fe:	f7ff fa25 	bl	801564c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	899b      	ldrh	r3, [r3, #12]
 801620c:	4619      	mov	r1, r3
 801620e:	4610      	mov	r0, r2
 8016210:	f7ff faaa 	bl	8015768 <GetTimeOnAir>
 8016214:	4602      	mov	r2, r0
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801621a:	4b0c      	ldr	r3, [pc, #48]	@ (801624c <RegionEU868TxConfig+0x19c>)
 801621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801621e:	68fa      	ldr	r2, [r7, #12]
 8016220:	8992      	ldrh	r2, [r2, #12]
 8016222:	b2d1      	uxtb	r1, r2
 8016224:	7ffa      	ldrb	r2, [r7, #31]
 8016226:	4610      	mov	r0, r2
 8016228:	4798      	blx	r3

    *txPower = txPowerLimited;
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	7f7a      	ldrb	r2, [r7, #29]
 801622e:	701a      	strb	r2, [r3, #0]
    return true;
 8016230:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016232:	4618      	mov	r0, r3
 8016234:	3724      	adds	r7, #36	@ 0x24
 8016236:	46bd      	mov	sp, r7
 8016238:	bd90      	pop	{r4, r7, pc}
 801623a:	bf00      	nop
 801623c:	0801c98c 	.word	0x0801c98c
 8016240:	200013b0 	.word	0x200013b0
 8016244:	200013ac 	.word	0x200013ac
 8016248:	0801c994 	.word	0x0801c994
 801624c:	0801c9c4 	.word	0x0801c9c4

08016250 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016250:	b590      	push	{r4, r7, lr}
 8016252:	b093      	sub	sp, #76	@ 0x4c
 8016254:	af00      	add	r7, sp, #0
 8016256:	60f8      	str	r0, [r7, #12]
 8016258:	60b9      	str	r1, [r7, #8]
 801625a:	607a      	str	r2, [r7, #4]
 801625c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801625e:	2307      	movs	r3, #7
 8016260:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016264:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016268:	2200      	movs	r2, #0
 801626a:	601a      	str	r2, [r3, #0]
 801626c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801626e:	2300      	movs	r3, #0
 8016270:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016274:	2300      	movs	r3, #0
 8016276:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801627a:	2300      	movs	r3, #0
 801627c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801627e:	e085      	b.n	801638c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	685a      	ldr	r2, [r3, #4]
 8016284:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8016288:	4413      	add	r3, r2
 801628a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801628e:	4611      	mov	r1, r2
 8016290:	4618      	mov	r0, r3
 8016292:	f7fe fe2f 	bl	8014ef4 <RegionCommonParseLinkAdrReq>
 8016296:	4603      	mov	r3, r0
 8016298:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801629c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d07b      	beq.n	801639c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80162a4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80162a8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80162ac:	4413      	add	r3, r2
 80162ae:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80162b2:	2307      	movs	r3, #7
 80162b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80162b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80162bc:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80162be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d109      	bne.n	80162da <RegionEU868LinkAdrReq+0x8a>
 80162c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d106      	bne.n	80162da <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80162cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80162d0:	f023 0301 	bic.w	r3, r3, #1
 80162d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80162d8:	e058      	b.n	801638c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80162da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d003      	beq.n	80162ea <RegionEU868LinkAdrReq+0x9a>
 80162e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80162e6:	2b05      	cmp	r3, #5
 80162e8:	d903      	bls.n	80162f2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80162ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80162ee:	2b06      	cmp	r3, #6
 80162f0:	d906      	bls.n	8016300 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80162f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80162f6:	f023 0301 	bic.w	r3, r3, #1
 80162fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80162fe:	e045      	b.n	801638c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016300:	2300      	movs	r3, #0
 8016302:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016306:	e03d      	b.n	8016384 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016308:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801630c:	2b06      	cmp	r3, #6
 801630e:	d118      	bne.n	8016342 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8016310:	4b5f      	ldr	r3, [pc, #380]	@ (8016490 <RegionEU868LinkAdrReq+0x240>)
 8016312:	6819      	ldr	r1, [r3, #0]
 8016314:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016318:	4613      	mov	r3, r2
 801631a:	005b      	lsls	r3, r3, #1
 801631c:	4413      	add	r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	440b      	add	r3, r1
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d028      	beq.n	801637a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016328:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801632c:	2201      	movs	r2, #1
 801632e:	fa02 f303 	lsl.w	r3, r2, r3
 8016332:	b21a      	sxth	r2, r3
 8016334:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016336:	b21b      	sxth	r3, r3
 8016338:	4313      	orrs	r3, r2
 801633a:	b21b      	sxth	r3, r3
 801633c:	b29b      	uxth	r3, r3
 801633e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8016340:	e01b      	b.n	801637a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016342:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016344:	461a      	mov	r2, r3
 8016346:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801634a:	fa42 f303 	asr.w	r3, r2, r3
 801634e:	f003 0301 	and.w	r3, r3, #1
 8016352:	2b00      	cmp	r3, #0
 8016354:	d011      	beq.n	801637a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016356:	4b4e      	ldr	r3, [pc, #312]	@ (8016490 <RegionEU868LinkAdrReq+0x240>)
 8016358:	6819      	ldr	r1, [r3, #0]
 801635a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801635e:	4613      	mov	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	4413      	add	r3, r2
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	440b      	add	r3, r1
 8016368:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801636a:	2b00      	cmp	r3, #0
 801636c:	d105      	bne.n	801637a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801636e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016372:	f023 0301 	bic.w	r3, r3, #1
 8016376:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801637a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801637e:	3301      	adds	r3, #1
 8016380:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016384:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016388:	2b0f      	cmp	r3, #15
 801638a:	d9bd      	bls.n	8016308 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	7a1b      	ldrb	r3, [r3, #8]
 8016390:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016394:	429a      	cmp	r2, r3
 8016396:	f4ff af73 	bcc.w	8016280 <RegionEU868LinkAdrReq+0x30>
 801639a:	e000      	b.n	801639e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801639c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801639e:	2302      	movs	r3, #2
 80163a0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	7a5b      	ldrb	r3, [r3, #9]
 80163a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80163ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80163b0:	4618      	mov	r0, r3
 80163b2:	f7ff fa29 	bl	8015808 <RegionEU868GetPhyParam>
 80163b6:	4603      	mov	r3, r0
 80163b8:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 80163ba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163be:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	7a9b      	ldrb	r3, [r3, #10]
 80163c4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80163c6:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80163ca:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80163cc:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80163d0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80163d2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80163d6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80163de:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80163e6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	7b5b      	ldrb	r3, [r3, #13]
 80163ec:	b25b      	sxtb	r3, r3
 80163ee:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80163f0:	2310      	movs	r3, #16
 80163f2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80163f4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80163f8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80163fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163fc:	b25b      	sxtb	r3, r3
 80163fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016402:	2307      	movs	r3, #7
 8016404:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016408:	4b21      	ldr	r3, [pc, #132]	@ (8016490 <RegionEU868LinkAdrReq+0x240>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801640e:	2307      	movs	r3, #7
 8016410:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016414:	2300      	movs	r3, #0
 8016416:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016420:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8016424:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016428:	1c9a      	adds	r2, r3, #2
 801642a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801642e:	1c59      	adds	r1, r3, #1
 8016430:	f107 0010 	add.w	r0, r7, #16
 8016434:	4623      	mov	r3, r4
 8016436:	f7fe fdaf 	bl	8014f98 <RegionCommonLinkAdrReqVerifyParams>
 801643a:	4603      	mov	r3, r0
 801643c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016440:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016444:	2b07      	cmp	r3, #7
 8016446:	d10d      	bne.n	8016464 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016448:	4b11      	ldr	r3, [pc, #68]	@ (8016490 <RegionEU868LinkAdrReq+0x240>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016450:	220c      	movs	r2, #12
 8016452:	2100      	movs	r1, #0
 8016454:	4618      	mov	r0, r3
 8016456:	f000 fb35 	bl	8016ac4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801645a:	4b0d      	ldr	r3, [pc, #52]	@ (8016490 <RegionEU868LinkAdrReq+0x240>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016460:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016464:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801646c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016474:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801647c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801647e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016482:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016484:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8016488:	4618      	mov	r0, r3
 801648a:	374c      	adds	r7, #76	@ 0x4c
 801648c:	46bd      	mov	sp, r7
 801648e:	bd90      	pop	{r4, r7, pc}
 8016490:	200013ac 	.word	0x200013ac

08016494 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801649c:	2307      	movs	r3, #7
 801649e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80164a0:	2300      	movs	r3, #0
 80164a2:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	f107 020e 	add.w	r2, r7, #14
 80164ac:	4611      	mov	r1, r2
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7ff f8e4 	bl	801567c <VerifyRfFreq>
 80164b4:	4603      	mov	r3, r0
 80164b6:	f083 0301 	eor.w	r3, r3, #1
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d003      	beq.n	80164c8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80164c0:	7bfb      	ldrb	r3, [r7, #15]
 80164c2:	f023 0301 	bic.w	r3, r3, #1
 80164c6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f993 3000 	ldrsb.w	r3, [r3]
 80164ce:	2207      	movs	r2, #7
 80164d0:	2100      	movs	r1, #0
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7fe fb71 	bl	8014bba <RegionCommonValueInRange>
 80164d8:	4603      	mov	r3, r0
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d103      	bne.n	80164e6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80164de:	7bfb      	ldrb	r3, [r7, #15]
 80164e0:	f023 0302 	bic.w	r3, r3, #2
 80164e4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80164ec:	2205      	movs	r2, #5
 80164ee:	2100      	movs	r1, #0
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7fe fb62 	bl	8014bba <RegionCommonValueInRange>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d103      	bne.n	8016504 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80164fc:	7bfb      	ldrb	r3, [r7, #15]
 80164fe:	f023 0304 	bic.w	r3, r3, #4
 8016502:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016504:	7bfb      	ldrb	r3, [r7, #15]
}
 8016506:	4618      	mov	r0, r3
 8016508:	3710      	adds	r7, #16
 801650a:	46bd      	mov	sp, r7
 801650c:	bd80      	pop	{r7, pc}
	...

08016510 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b086      	sub	sp, #24
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016518:	2303      	movs	r3, #3
 801651a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d114      	bne.n	8016550 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801652c:	b2db      	uxtb	r3, r3
 801652e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016530:	f107 0308 	add.w	r3, r7, #8
 8016534:	4618      	mov	r0, r3
 8016536:	f000 f9ff 	bl	8016938 <RegionEU868ChannelsRemove>
 801653a:	4603      	mov	r3, r0
 801653c:	f083 0301 	eor.w	r3, r3, #1
 8016540:	b2db      	uxtb	r3, r3
 8016542:	2b00      	cmp	r3, #0
 8016544:	d03b      	beq.n	80165be <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016546:	7dfb      	ldrb	r3, [r7, #23]
 8016548:	f023 0303 	bic.w	r3, r3, #3
 801654c:	75fb      	strb	r3, [r7, #23]
 801654e:	e036      	b.n	80165be <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016560:	f107 030c 	add.w	r3, r7, #12
 8016564:	4618      	mov	r0, r3
 8016566:	f000 f945 	bl	80167f4 <RegionEU868ChannelAdd>
 801656a:	4603      	mov	r3, r0
 801656c:	2b06      	cmp	r3, #6
 801656e:	d820      	bhi.n	80165b2 <RegionEU868NewChannelReq+0xa2>
 8016570:	a201      	add	r2, pc, #4	@ (adr r2, 8016578 <RegionEU868NewChannelReq+0x68>)
 8016572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016576:	bf00      	nop
 8016578:	080165bd 	.word	0x080165bd
 801657c:	080165b3 	.word	0x080165b3
 8016580:	080165b3 	.word	0x080165b3
 8016584:	080165b3 	.word	0x080165b3
 8016588:	08016595 	.word	0x08016595
 801658c:	0801659f 	.word	0x0801659f
 8016590:	080165a9 	.word	0x080165a9
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016594:	7dfb      	ldrb	r3, [r7, #23]
 8016596:	f023 0301 	bic.w	r3, r3, #1
 801659a:	75fb      	strb	r3, [r7, #23]
                break;
 801659c:	e00f      	b.n	80165be <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801659e:	7dfb      	ldrb	r3, [r7, #23]
 80165a0:	f023 0302 	bic.w	r3, r3, #2
 80165a4:	75fb      	strb	r3, [r7, #23]
                break;
 80165a6:	e00a      	b.n	80165be <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80165a8:	7dfb      	ldrb	r3, [r7, #23]
 80165aa:	f023 0303 	bic.w	r3, r3, #3
 80165ae:	75fb      	strb	r3, [r7, #23]
                break;
 80165b0:	e005      	b.n	80165be <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80165b2:	7dfb      	ldrb	r3, [r7, #23]
 80165b4:	f023 0303 	bic.w	r3, r3, #3
 80165b8:	75fb      	strb	r3, [r7, #23]
                break;
 80165ba:	e000      	b.n	80165be <RegionEU868NewChannelReq+0xae>
                break;
 80165bc:	bf00      	nop
            }
        }
    }

    return status;
 80165be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3718      	adds	r7, #24
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
 80165ca:	bf00      	nop

080165cc <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80165cc:	b480      	push	{r7}
 80165ce:	b083      	sub	sp, #12
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80165d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80165d8:	4618      	mov	r0, r3
 80165da:	370c      	adds	r7, #12
 80165dc:	46bd      	mov	sp, r7
 80165de:	bc80      	pop	{r7}
 80165e0:	4770      	bx	lr
	...

080165e4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80165ec:	2303      	movs	r3, #3
 80165ee:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80165f0:	2300      	movs	r3, #0
 80165f2:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	2b0f      	cmp	r3, #15
 80165fa:	d901      	bls.n	8016600 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80165fc:	2300      	movs	r3, #0
 80165fe:	e035      	b.n	801666c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	685b      	ldr	r3, [r3, #4]
 8016604:	f107 020e 	add.w	r2, r7, #14
 8016608:	4611      	mov	r1, r2
 801660a:	4618      	mov	r0, r3
 801660c:	f7ff f836 	bl	801567c <VerifyRfFreq>
 8016610:	4603      	mov	r3, r0
 8016612:	f083 0301 	eor.w	r3, r3, #1
 8016616:	b2db      	uxtb	r3, r3
 8016618:	2b00      	cmp	r3, #0
 801661a:	d003      	beq.n	8016624 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 801661c:	7bfb      	ldrb	r3, [r7, #15]
 801661e:	f023 0301 	bic.w	r3, r3, #1
 8016622:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016624:	4b13      	ldr	r3, [pc, #76]	@ (8016674 <RegionEU868DlChannelReq+0x90>)
 8016626:	681a      	ldr	r2, [r3, #0]
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	4619      	mov	r1, r3
 801662e:	460b      	mov	r3, r1
 8016630:	005b      	lsls	r3, r3, #1
 8016632:	440b      	add	r3, r1
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	4413      	add	r3, r2
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d103      	bne.n	8016646 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801663e:	7bfb      	ldrb	r3, [r7, #15]
 8016640:	f023 0302 	bic.w	r3, r3, #2
 8016644:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016646:	7bfb      	ldrb	r3, [r7, #15]
 8016648:	2b03      	cmp	r3, #3
 801664a:	d10d      	bne.n	8016668 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801664c:	4b09      	ldr	r3, [pc, #36]	@ (8016674 <RegionEU868DlChannelReq+0x90>)
 801664e:	6819      	ldr	r1, [r3, #0]
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	781b      	ldrb	r3, [r3, #0]
 8016654:	4618      	mov	r0, r3
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	685a      	ldr	r2, [r3, #4]
 801665a:	4603      	mov	r3, r0
 801665c:	005b      	lsls	r3, r3, #1
 801665e:	4403      	add	r3, r0
 8016660:	009b      	lsls	r3, r3, #2
 8016662:	440b      	add	r3, r1
 8016664:	3304      	adds	r3, #4
 8016666:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801666c:	4618      	mov	r0, r3
 801666e:	3710      	adds	r7, #16
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}
 8016674:	200013ac 	.word	0x200013ac

08016678 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016678:	b480      	push	{r7}
 801667a:	b083      	sub	sp, #12
 801667c:	af00      	add	r7, sp, #0
 801667e:	4603      	mov	r3, r0
 8016680:	460a      	mov	r2, r1
 8016682:	71fb      	strb	r3, [r7, #7]
 8016684:	4613      	mov	r3, r2
 8016686:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016688:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801668c:	4618      	mov	r0, r3
 801668e:	370c      	adds	r7, #12
 8016690:	46bd      	mov	sp, r7
 8016692:	bc80      	pop	{r7}
 8016694:	4770      	bx	lr
	...

08016698 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b09a      	sub	sp, #104	@ 0x68
 801669c:	af02      	add	r7, sp, #8
 801669e:	60f8      	str	r0, [r7, #12]
 80166a0:	60b9      	str	r1, [r7, #8]
 80166a2:	607a      	str	r2, [r7, #4]
 80166a4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80166a6:	2300      	movs	r3, #0
 80166a8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 80166ac:	2300      	movs	r3, #0
 80166ae:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80166b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80166b6:	2200      	movs	r2, #0
 80166b8:	601a      	str	r2, [r3, #0]
 80166ba:	605a      	str	r2, [r3, #4]
 80166bc:	609a      	str	r2, [r3, #8]
 80166be:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80166c0:	230c      	movs	r3, #12
 80166c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80166c6:	2307      	movs	r3, #7
 80166c8:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80166ca:	4b48      	ldr	r3, [pc, #288]	@ (80167ec <RegionEU868NextChannel+0x154>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80166d2:	2201      	movs	r2, #1
 80166d4:	2100      	movs	r1, #0
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7fe fac0 	bl	8014c5c <RegionCommonCountChannels>
 80166dc:	4603      	mov	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d10a      	bne.n	80166f8 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80166e2:	4b42      	ldr	r3, [pc, #264]	@ (80167ec <RegionEU868NextChannel+0x154>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80166ea:	4b40      	ldr	r3, [pc, #256]	@ (80167ec <RegionEU868NextChannel+0x154>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	f042 0207 	orr.w	r2, r2, #7
 80166f2:	b292      	uxth	r2, r2
 80166f4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	7a5b      	ldrb	r3, [r3, #9]
 80166fc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016704:	b2db      	uxtb	r3, r3
 8016706:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016708:	4b38      	ldr	r3, [pc, #224]	@ (80167ec <RegionEU868NextChannel+0x154>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016710:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016712:	4b36      	ldr	r3, [pc, #216]	@ (80167ec <RegionEU868NextChannel+0x154>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
 8016718:	4b35      	ldr	r3, [pc, #212]	@ (80167f0 <RegionEU868NextChannel+0x158>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801671e:	2310      	movs	r3, #16
 8016720:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016722:	f107 0312 	add.w	r3, r7, #18
 8016726:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	685b      	ldr	r3, [r3, #4]
 8016732:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	7a9b      	ldrb	r3, [r3, #10]
 8016738:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801673c:	2306      	movs	r3, #6
 801673e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016742:	68fa      	ldr	r2, [r7, #12]
 8016744:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016748:	320c      	adds	r2, #12
 801674a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801674e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	7d1b      	ldrb	r3, [r3, #20]
 8016756:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	8adb      	ldrh	r3, [r3, #22]
 8016764:	4619      	mov	r1, r3
 8016766:	4610      	mov	r0, r2
 8016768:	f7fe fffe 	bl	8015768 <GetTimeOnAir>
 801676c:	4603      	mov	r3, r0
 801676e:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016770:	f107 0314 	add.w	r3, r7, #20
 8016774:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016776:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801677a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801677e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	9301      	str	r3, [sp, #4]
 8016786:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801678a:	9300      	str	r3, [sp, #0]
 801678c:	460b      	mov	r3, r1
 801678e:	6839      	ldr	r1, [r7, #0]
 8016790:	f7fe fe57 	bl	8015442 <RegionCommonIdentifyChannels>
 8016794:	4603      	mov	r3, r0
 8016796:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801679a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d10e      	bne.n	80167c0 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80167a2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80167a6:	3b01      	subs	r3, #1
 80167a8:	4619      	mov	r1, r3
 80167aa:	2000      	movs	r0, #0
 80167ac:	f000 f938 	bl	8016a20 <randr>
 80167b0:	4603      	mov	r3, r0
 80167b2:	3360      	adds	r3, #96	@ 0x60
 80167b4:	443b      	add	r3, r7
 80167b6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80167ba:	68bb      	ldr	r3, [r7, #8]
 80167bc:	701a      	strb	r2, [r3, #0]
 80167be:	e00e      	b.n	80167de <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80167c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80167c4:	2b0c      	cmp	r3, #12
 80167c6:	d10a      	bne.n	80167de <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80167c8:	4b08      	ldr	r3, [pc, #32]	@ (80167ec <RegionEU868NextChannel+0x154>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80167d0:	4b06      	ldr	r3, [pc, #24]	@ (80167ec <RegionEU868NextChannel+0x154>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	f042 0207 	orr.w	r2, r2, #7
 80167d8:	b292      	uxth	r2, r2
 80167da:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 80167de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	3760      	adds	r7, #96	@ 0x60
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
 80167ea:	bf00      	nop
 80167ec:	200013ac 	.word	0x200013ac
 80167f0:	200013b0 	.word	0x200013b0

080167f4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b084      	sub	sp, #16
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80167fc:	2300      	movs	r3, #0
 80167fe:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016800:	2300      	movs	r3, #0
 8016802:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016804:	2300      	movs	r3, #0
 8016806:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	791b      	ldrb	r3, [r3, #4]
 801680c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801680e:	7b7b      	ldrb	r3, [r7, #13]
 8016810:	2b02      	cmp	r3, #2
 8016812:	d801      	bhi.n	8016818 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016814:	2306      	movs	r3, #6
 8016816:	e089      	b.n	801692c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016818:	7b7b      	ldrb	r3, [r7, #13]
 801681a:	2b0f      	cmp	r3, #15
 801681c:	d901      	bls.n	8016822 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801681e:	2303      	movs	r3, #3
 8016820:	e084      	b.n	801692c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	7a1b      	ldrb	r3, [r3, #8]
 8016828:	f343 0303 	sbfx	r3, r3, #0, #4
 801682c:	b25b      	sxtb	r3, r3
 801682e:	2207      	movs	r2, #7
 8016830:	2100      	movs	r1, #0
 8016832:	4618      	mov	r0, r3
 8016834:	f7fe f9c1 	bl	8014bba <RegionCommonValueInRange>
 8016838:	4603      	mov	r3, r0
 801683a:	2b00      	cmp	r3, #0
 801683c:	d101      	bne.n	8016842 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801683e:	2301      	movs	r3, #1
 8016840:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	7a1b      	ldrb	r3, [r3, #8]
 8016848:	f343 1303 	sbfx	r3, r3, #4, #4
 801684c:	b25b      	sxtb	r3, r3
 801684e:	2207      	movs	r2, #7
 8016850:	2100      	movs	r1, #0
 8016852:	4618      	mov	r0, r3
 8016854:	f7fe f9b1 	bl	8014bba <RegionCommonValueInRange>
 8016858:	4603      	mov	r3, r0
 801685a:	2b00      	cmp	r3, #0
 801685c:	d101      	bne.n	8016862 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801685e:	2301      	movs	r3, #1
 8016860:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	7a1b      	ldrb	r3, [r3, #8]
 8016868:	f343 0303 	sbfx	r3, r3, #0, #4
 801686c:	b25a      	sxtb	r2, r3
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	7a1b      	ldrb	r3, [r3, #8]
 8016874:	f343 1303 	sbfx	r3, r3, #4, #4
 8016878:	b25b      	sxtb	r3, r3
 801687a:	429a      	cmp	r2, r3
 801687c:	dd01      	ble.n	8016882 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801687e:	2301      	movs	r3, #1
 8016880:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016882:	7bbb      	ldrb	r3, [r7, #14]
 8016884:	f083 0301 	eor.w	r3, r3, #1
 8016888:	b2db      	uxtb	r3, r3
 801688a:	2b00      	cmp	r3, #0
 801688c:	d010      	beq.n	80168b0 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	f107 020c 	add.w	r2, r7, #12
 8016898:	4611      	mov	r1, r2
 801689a:	4618      	mov	r0, r3
 801689c:	f7fe feee 	bl	801567c <VerifyRfFreq>
 80168a0:	4603      	mov	r3, r0
 80168a2:	f083 0301 	eor.w	r3, r3, #1
 80168a6:	b2db      	uxtb	r3, r3
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d001      	beq.n	80168b0 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80168ac:	2301      	movs	r3, #1
 80168ae:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80168b0:	7bfb      	ldrb	r3, [r7, #15]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d004      	beq.n	80168c0 <RegionEU868ChannelAdd+0xcc>
 80168b6:	7bbb      	ldrb	r3, [r7, #14]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d001      	beq.n	80168c0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80168bc:	2306      	movs	r3, #6
 80168be:	e035      	b.n	801692c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80168c0:	7bfb      	ldrb	r3, [r7, #15]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d001      	beq.n	80168ca <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80168c6:	2305      	movs	r3, #5
 80168c8:	e030      	b.n	801692c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80168ca:	7bbb      	ldrb	r3, [r7, #14]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d001      	beq.n	80168d4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80168d0:	2304      	movs	r3, #4
 80168d2:	e02b      	b.n	801692c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80168d4:	4b17      	ldr	r3, [pc, #92]	@ (8016934 <RegionEU868ChannelAdd+0x140>)
 80168d6:	6819      	ldr	r1, [r3, #0]
 80168d8:	7b7a      	ldrb	r2, [r7, #13]
 80168da:	4613      	mov	r3, r2
 80168dc:	005b      	lsls	r3, r3, #1
 80168de:	4413      	add	r3, r2
 80168e0:	009b      	lsls	r3, r3, #2
 80168e2:	18c8      	adds	r0, r1, r3
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	220c      	movs	r2, #12
 80168ea:	4619      	mov	r1, r3
 80168ec:	f000 f8af 	bl	8016a4e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80168f0:	4b10      	ldr	r3, [pc, #64]	@ (8016934 <RegionEU868ChannelAdd+0x140>)
 80168f2:	6819      	ldr	r1, [r3, #0]
 80168f4:	7b7a      	ldrb	r2, [r7, #13]
 80168f6:	7b38      	ldrb	r0, [r7, #12]
 80168f8:	4613      	mov	r3, r2
 80168fa:	005b      	lsls	r3, r3, #1
 80168fc:	4413      	add	r3, r2
 80168fe:	009b      	lsls	r3, r3, #2
 8016900:	440b      	add	r3, r1
 8016902:	3309      	adds	r3, #9
 8016904:	4602      	mov	r2, r0
 8016906:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016908:	4b0a      	ldr	r3, [pc, #40]	@ (8016934 <RegionEU868ChannelAdd+0x140>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8016910:	b21a      	sxth	r2, r3
 8016912:	7b7b      	ldrb	r3, [r7, #13]
 8016914:	2101      	movs	r1, #1
 8016916:	fa01 f303 	lsl.w	r3, r1, r3
 801691a:	b21b      	sxth	r3, r3
 801691c:	4313      	orrs	r3, r2
 801691e:	b21a      	sxth	r2, r3
 8016920:	4b04      	ldr	r3, [pc, #16]	@ (8016934 <RegionEU868ChannelAdd+0x140>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	b292      	uxth	r2, r2
 8016926:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 801692a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801692c:	4618      	mov	r0, r3
 801692e:	3710      	adds	r7, #16
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}
 8016934:	200013ac 	.word	0x200013ac

08016938 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b086      	sub	sp, #24
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016946:	7dfb      	ldrb	r3, [r7, #23]
 8016948:	2b02      	cmp	r3, #2
 801694a:	d801      	bhi.n	8016950 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801694c:	2300      	movs	r3, #0
 801694e:	e016      	b.n	801697e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016950:	4b0d      	ldr	r3, [pc, #52]	@ (8016988 <RegionEU868ChannelsRemove+0x50>)
 8016952:	6819      	ldr	r1, [r3, #0]
 8016954:	7dfa      	ldrb	r2, [r7, #23]
 8016956:	4613      	mov	r3, r2
 8016958:	005b      	lsls	r3, r3, #1
 801695a:	4413      	add	r3, r2
 801695c:	009b      	lsls	r3, r3, #2
 801695e:	440b      	add	r3, r1
 8016960:	461a      	mov	r2, r3
 8016962:	2300      	movs	r3, #0
 8016964:	6013      	str	r3, [r2, #0]
 8016966:	6053      	str	r3, [r2, #4]
 8016968:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801696a:	4b07      	ldr	r3, [pc, #28]	@ (8016988 <RegionEU868ChannelsRemove+0x50>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016972:	7df9      	ldrb	r1, [r7, #23]
 8016974:	2210      	movs	r2, #16
 8016976:	4618      	mov	r0, r3
 8016978:	f7fe f93c 	bl	8014bf4 <RegionCommonChanDisable>
 801697c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801697e:	4618      	mov	r0, r3
 8016980:	3718      	adds	r7, #24
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}
 8016986:	bf00      	nop
 8016988:	200013ac 	.word	0x200013ac

0801698c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801698c:	b480      	push	{r7}
 801698e:	b085      	sub	sp, #20
 8016990:	af00      	add	r7, sp, #0
 8016992:	4603      	mov	r3, r0
 8016994:	71fb      	strb	r3, [r7, #7]
 8016996:	460b      	mov	r3, r1
 8016998:	71bb      	strb	r3, [r7, #6]
 801699a:	4613      	mov	r3, r2
 801699c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801699e:	79ba      	ldrb	r2, [r7, #6]
 80169a0:	797b      	ldrb	r3, [r7, #5]
 80169a2:	1ad3      	subs	r3, r2, r3
 80169a4:	b2db      	uxtb	r3, r3
 80169a6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80169a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	da01      	bge.n	80169b4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80169b0:	2300      	movs	r3, #0
 80169b2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80169b4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80169b6:	4618      	mov	r0, r3
 80169b8:	3714      	adds	r7, #20
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bc80      	pop	{r7}
 80169be:	4770      	bx	lr

080169c0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80169c0:	b480      	push	{r7}
 80169c2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80169c4:	4b0d      	ldr	r3, [pc, #52]	@ (80169fc <rand1+0x3c>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	4a0d      	ldr	r2, [pc, #52]	@ (8016a00 <rand1+0x40>)
 80169ca:	fb02 f303 	mul.w	r3, r2, r3
 80169ce:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80169d2:	3339      	adds	r3, #57	@ 0x39
 80169d4:	4a09      	ldr	r2, [pc, #36]	@ (80169fc <rand1+0x3c>)
 80169d6:	6013      	str	r3, [r2, #0]
 80169d8:	4b08      	ldr	r3, [pc, #32]	@ (80169fc <rand1+0x3c>)
 80169da:	681a      	ldr	r2, [r3, #0]
 80169dc:	2303      	movs	r3, #3
 80169de:	fba3 1302 	umull	r1, r3, r3, r2
 80169e2:	1ad1      	subs	r1, r2, r3
 80169e4:	0849      	lsrs	r1, r1, #1
 80169e6:	440b      	add	r3, r1
 80169e8:	0f99      	lsrs	r1, r3, #30
 80169ea:	460b      	mov	r3, r1
 80169ec:	07db      	lsls	r3, r3, #31
 80169ee:	1a5b      	subs	r3, r3, r1
 80169f0:	1ad1      	subs	r1, r2, r3
 80169f2:	460b      	mov	r3, r1
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bc80      	pop	{r7}
 80169fa:	4770      	bx	lr
 80169fc:	20000110 	.word	0x20000110
 8016a00:	41c64e6d 	.word	0x41c64e6d

08016a04 <srand1>:

void srand1( uint32_t seed )
{
 8016a04:	b480      	push	{r7}
 8016a06:	b083      	sub	sp, #12
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
    next = seed;
 8016a0c:	4a03      	ldr	r2, [pc, #12]	@ (8016a1c <srand1+0x18>)
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6013      	str	r3, [r2, #0]
}
 8016a12:	bf00      	nop
 8016a14:	370c      	adds	r7, #12
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bc80      	pop	{r7}
 8016a1a:	4770      	bx	lr
 8016a1c:	20000110 	.word	0x20000110

08016a20 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016a2a:	f7ff ffc9 	bl	80169c0 <rand1>
 8016a2e:	4602      	mov	r2, r0
 8016a30:	6839      	ldr	r1, [r7, #0]
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	1acb      	subs	r3, r1, r3
 8016a36:	3301      	adds	r3, #1
 8016a38:	fb92 f1f3 	sdiv	r1, r2, r3
 8016a3c:	fb01 f303 	mul.w	r3, r1, r3
 8016a40:	1ad2      	subs	r2, r2, r3
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	4413      	add	r3, r2
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3708      	adds	r7, #8
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd80      	pop	{r7, pc}

08016a4e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a4e:	b480      	push	{r7}
 8016a50:	b085      	sub	sp, #20
 8016a52:	af00      	add	r7, sp, #0
 8016a54:	60f8      	str	r0, [r7, #12]
 8016a56:	60b9      	str	r1, [r7, #8]
 8016a58:	4613      	mov	r3, r2
 8016a5a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016a5c:	e007      	b.n	8016a6e <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	1c53      	adds	r3, r2, #1
 8016a62:	60bb      	str	r3, [r7, #8]
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	1c59      	adds	r1, r3, #1
 8016a68:	60f9      	str	r1, [r7, #12]
 8016a6a:	7812      	ldrb	r2, [r2, #0]
 8016a6c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016a6e:	88fb      	ldrh	r3, [r7, #6]
 8016a70:	1e5a      	subs	r2, r3, #1
 8016a72:	80fa      	strh	r2, [r7, #6]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d1f2      	bne.n	8016a5e <memcpy1+0x10>
    }
}
 8016a78:	bf00      	nop
 8016a7a:	bf00      	nop
 8016a7c:	3714      	adds	r7, #20
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bc80      	pop	{r7}
 8016a82:	4770      	bx	lr

08016a84 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a84:	b480      	push	{r7}
 8016a86:	b085      	sub	sp, #20
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	60f8      	str	r0, [r7, #12]
 8016a8c:	60b9      	str	r1, [r7, #8]
 8016a8e:	4613      	mov	r3, r2
 8016a90:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016a92:	88fb      	ldrh	r3, [r7, #6]
 8016a94:	3b01      	subs	r3, #1
 8016a96:	68fa      	ldr	r2, [r7, #12]
 8016a98:	4413      	add	r3, r2
 8016a9a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016a9c:	e007      	b.n	8016aae <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016a9e:	68ba      	ldr	r2, [r7, #8]
 8016aa0:	1c53      	adds	r3, r2, #1
 8016aa2:	60bb      	str	r3, [r7, #8]
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	1e59      	subs	r1, r3, #1
 8016aa8:	60f9      	str	r1, [r7, #12]
 8016aaa:	7812      	ldrb	r2, [r2, #0]
 8016aac:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016aae:	88fb      	ldrh	r3, [r7, #6]
 8016ab0:	1e5a      	subs	r2, r3, #1
 8016ab2:	80fa      	strh	r2, [r7, #6]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d1f2      	bne.n	8016a9e <memcpyr+0x1a>
    }
}
 8016ab8:	bf00      	nop
 8016aba:	bf00      	nop
 8016abc:	3714      	adds	r7, #20
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	bc80      	pop	{r7}
 8016ac2:	4770      	bx	lr

08016ac4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
 8016acc:	460b      	mov	r3, r1
 8016ace:	70fb      	strb	r3, [r7, #3]
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016ad4:	e004      	b.n	8016ae0 <memset1+0x1c>
    {
        *dst++ = value;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	1c5a      	adds	r2, r3, #1
 8016ada:	607a      	str	r2, [r7, #4]
 8016adc:	78fa      	ldrb	r2, [r7, #3]
 8016ade:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016ae0:	883b      	ldrh	r3, [r7, #0]
 8016ae2:	1e5a      	subs	r2, r3, #1
 8016ae4:	803a      	strh	r2, [r7, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d1f5      	bne.n	8016ad6 <memset1+0x12>
    }
}
 8016aea:	bf00      	nop
 8016aec:	bf00      	nop
 8016aee:	370c      	adds	r7, #12
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bc80      	pop	{r7}
 8016af4:	4770      	bx	lr
	...

08016af8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016af8:	b480      	push	{r7}
 8016afa:	b085      	sub	sp, #20
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	460b      	mov	r3, r1
 8016b02:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016b04:	f04f 33ff 	mov.w	r3, #4294967295
 8016b08:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d101      	bne.n	8016b14 <Crc32+0x1c>
    {
        return 0;
 8016b10:	2300      	movs	r3, #0
 8016b12:	e026      	b.n	8016b62 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016b14:	2300      	movs	r3, #0
 8016b16:	817b      	strh	r3, [r7, #10]
 8016b18:	e01d      	b.n	8016b56 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016b1a:	897b      	ldrh	r3, [r7, #10]
 8016b1c:	687a      	ldr	r2, [r7, #4]
 8016b1e:	4413      	add	r3, r2
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	461a      	mov	r2, r3
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	4053      	eors	r3, r2
 8016b28:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	813b      	strh	r3, [r7, #8]
 8016b2e:	e00c      	b.n	8016b4a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	085a      	lsrs	r2, r3, #1
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	f003 0301 	and.w	r3, r3, #1
 8016b3a:	425b      	negs	r3, r3
 8016b3c:	490b      	ldr	r1, [pc, #44]	@ (8016b6c <Crc32+0x74>)
 8016b3e:	400b      	ands	r3, r1
 8016b40:	4053      	eors	r3, r2
 8016b42:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b44:	893b      	ldrh	r3, [r7, #8]
 8016b46:	3301      	adds	r3, #1
 8016b48:	813b      	strh	r3, [r7, #8]
 8016b4a:	893b      	ldrh	r3, [r7, #8]
 8016b4c:	2b07      	cmp	r3, #7
 8016b4e:	d9ef      	bls.n	8016b30 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016b50:	897b      	ldrh	r3, [r7, #10]
 8016b52:	3301      	adds	r3, #1
 8016b54:	817b      	strh	r3, [r7, #10]
 8016b56:	897a      	ldrh	r2, [r7, #10]
 8016b58:	887b      	ldrh	r3, [r7, #2]
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d3dd      	bcc.n	8016b1a <Crc32+0x22>
        }
    }

    return ~crc;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	43db      	mvns	r3, r3
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3714      	adds	r7, #20
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bc80      	pop	{r7}
 8016b6a:	4770      	bx	lr
 8016b6c:	edb88320 	.word	0xedb88320

08016b70 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b084      	sub	sp, #16
 8016b74:	af02      	add	r7, sp, #8
 8016b76:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016b78:	4a24      	ldr	r2, [pc, #144]	@ (8016c0c <RadioInit+0x9c>)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016b7e:	4b24      	ldr	r3, [pc, #144]	@ (8016c10 <RadioInit+0xa0>)
 8016b80:	2200      	movs	r2, #0
 8016b82:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016b84:	4b22      	ldr	r3, [pc, #136]	@ (8016c10 <RadioInit+0xa0>)
 8016b86:	2200      	movs	r2, #0
 8016b88:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016b8a:	4b21      	ldr	r3, [pc, #132]	@ (8016c10 <RadioInit+0xa0>)
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016b90:	4b1f      	ldr	r3, [pc, #124]	@ (8016c10 <RadioInit+0xa0>)
 8016b92:	2200      	movs	r2, #0
 8016b94:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8016b96:	481f      	ldr	r0, [pc, #124]	@ (8016c14 <RadioInit+0xa4>)
 8016b98:	f001 ffc6 	bl	8018b28 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8016c10 <RadioInit+0xa0>)
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8016c10 <RadioInit+0xa0>)
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016ba8:	f002 fa5c 	bl	8019064 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016bac:	2100      	movs	r1, #0
 8016bae:	2000      	movs	r0, #0
 8016bb0:	f002 fe28 	bl	8019804 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016bb4:	2204      	movs	r2, #4
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	2001      	movs	r0, #1
 8016bba:	f002 fbeb 	bl	8019394 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016bc6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016bca:	f002 fb1b 	bl	8019204 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8016bce:	f000 fe99 	bl	8017904 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	9300      	str	r3, [sp, #0]
 8016bd6:	4b10      	ldr	r3, [pc, #64]	@ (8016c18 <RadioInit+0xa8>)
 8016bd8:	2200      	movs	r2, #0
 8016bda:	f04f 31ff 	mov.w	r1, #4294967295
 8016bde:	480f      	ldr	r0, [pc, #60]	@ (8016c1c <RadioInit+0xac>)
 8016be0:	f003 ffe4 	bl	801abac <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016be4:	2300      	movs	r3, #0
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	4b0d      	ldr	r3, [pc, #52]	@ (8016c20 <RadioInit+0xb0>)
 8016bea:	2200      	movs	r2, #0
 8016bec:	f04f 31ff 	mov.w	r1, #4294967295
 8016bf0:	480c      	ldr	r0, [pc, #48]	@ (8016c24 <RadioInit+0xb4>)
 8016bf2:	f003 ffdb 	bl	801abac <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016bf6:	4809      	ldr	r0, [pc, #36]	@ (8016c1c <RadioInit+0xac>)
 8016bf8:	f004 f87c 	bl	801acf4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016bfc:	4809      	ldr	r0, [pc, #36]	@ (8016c24 <RadioInit+0xb4>)
 8016bfe:	f004 f879 	bl	801acf4 <UTIL_TIMER_Stop>
}
 8016c02:	bf00      	nop
 8016c04:	3708      	adds	r7, #8
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	200014b4 	.word	0x200014b4
 8016c10:	200014b8 	.word	0x200014b8
 8016c14:	08017cf9 	.word	0x08017cf9
 8016c18:	08017c81 	.word	0x08017c81
 8016c1c:	20001514 	.word	0x20001514
 8016c20:	08017c95 	.word	0x08017c95
 8016c24:	2000152c 	.word	0x2000152c

08016c28 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016c2c:	f001 ffc4 	bl	8018bb8 <SUBGRF_GetOperatingMode>
 8016c30:	4603      	mov	r3, r0
 8016c32:	2b07      	cmp	r3, #7
 8016c34:	d00a      	beq.n	8016c4c <RadioGetStatus+0x24>
 8016c36:	2b07      	cmp	r3, #7
 8016c38:	dc0a      	bgt.n	8016c50 <RadioGetStatus+0x28>
 8016c3a:	2b04      	cmp	r3, #4
 8016c3c:	d002      	beq.n	8016c44 <RadioGetStatus+0x1c>
 8016c3e:	2b05      	cmp	r3, #5
 8016c40:	d002      	beq.n	8016c48 <RadioGetStatus+0x20>
 8016c42:	e005      	b.n	8016c50 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016c44:	2302      	movs	r3, #2
 8016c46:	e004      	b.n	8016c52 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016c48:	2301      	movs	r3, #1
 8016c4a:	e002      	b.n	8016c52 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016c4c:	2303      	movs	r3, #3
 8016c4e:	e000      	b.n	8016c52 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016c50:	2300      	movs	r3, #0
    }
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	bd80      	pop	{r7, pc}
	...

08016c58 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	4603      	mov	r3, r0
 8016c60:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016c62:	4a2a      	ldr	r2, [pc, #168]	@ (8016d0c <RadioSetModem+0xb4>)
 8016c64:	79fb      	ldrb	r3, [r7, #7]
 8016c66:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016c68:	79fb      	ldrb	r3, [r7, #7]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f003 f9b7 	bl	8019fde <RFW_SetRadioModem>
    switch( modem )
 8016c70:	79fb      	ldrb	r3, [r7, #7]
 8016c72:	2b05      	cmp	r3, #5
 8016c74:	d80e      	bhi.n	8016c94 <RadioSetModem+0x3c>
 8016c76:	a201      	add	r2, pc, #4	@ (adr r2, 8016c7c <RadioSetModem+0x24>)
 8016c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c7c:	08016ca3 	.word	0x08016ca3
 8016c80:	08016cb1 	.word	0x08016cb1
 8016c84:	08016c95 	.word	0x08016c95
 8016c88:	08016cd7 	.word	0x08016cd7
 8016c8c:	08016ce5 	.word	0x08016ce5
 8016c90:	08016cf3 	.word	0x08016cf3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016c94:	2003      	movs	r0, #3
 8016c96:	f002 fb57 	bl	8019348 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8016d0c <RadioSetModem+0xb4>)
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	735a      	strb	r2, [r3, #13]
        break;
 8016ca0:	e02f      	b.n	8016d02 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016ca2:	2000      	movs	r0, #0
 8016ca4:	f002 fb50 	bl	8019348 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016ca8:	4b18      	ldr	r3, [pc, #96]	@ (8016d0c <RadioSetModem+0xb4>)
 8016caa:	2200      	movs	r2, #0
 8016cac:	735a      	strb	r2, [r3, #13]
        break;
 8016cae:	e028      	b.n	8016d02 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016cb0:	2001      	movs	r0, #1
 8016cb2:	f002 fb49 	bl	8019348 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016cb6:	4b15      	ldr	r3, [pc, #84]	@ (8016d0c <RadioSetModem+0xb4>)
 8016cb8:	7b5a      	ldrb	r2, [r3, #13]
 8016cba:	4b14      	ldr	r3, [pc, #80]	@ (8016d0c <RadioSetModem+0xb4>)
 8016cbc:	7b1b      	ldrb	r3, [r3, #12]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d01e      	beq.n	8016d00 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016cc2:	4b12      	ldr	r3, [pc, #72]	@ (8016d0c <RadioSetModem+0xb4>)
 8016cc4:	7b1a      	ldrb	r2, [r3, #12]
 8016cc6:	4b11      	ldr	r3, [pc, #68]	@ (8016d0c <RadioSetModem+0xb4>)
 8016cc8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016cca:	4b10      	ldr	r3, [pc, #64]	@ (8016d0c <RadioSetModem+0xb4>)
 8016ccc:	7b5b      	ldrb	r3, [r3, #13]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f000 ffa0 	bl	8017c14 <RadioSetPublicNetwork>
        }
        break;
 8016cd4:	e014      	b.n	8016d00 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016cd6:	2002      	movs	r0, #2
 8016cd8:	f002 fb36 	bl	8019348 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8016d0c <RadioSetModem+0xb4>)
 8016cde:	2200      	movs	r2, #0
 8016ce0:	735a      	strb	r2, [r3, #13]
        break;
 8016ce2:	e00e      	b.n	8016d02 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016ce4:	2002      	movs	r0, #2
 8016ce6:	f002 fb2f 	bl	8019348 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cea:	4b08      	ldr	r3, [pc, #32]	@ (8016d0c <RadioSetModem+0xb4>)
 8016cec:	2200      	movs	r2, #0
 8016cee:	735a      	strb	r2, [r3, #13]
        break;
 8016cf0:	e007      	b.n	8016d02 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016cf2:	2000      	movs	r0, #0
 8016cf4:	f002 fb28 	bl	8019348 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cf8:	4b04      	ldr	r3, [pc, #16]	@ (8016d0c <RadioSetModem+0xb4>)
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	735a      	strb	r2, [r3, #13]
        break;
 8016cfe:	e000      	b.n	8016d02 <RadioSetModem+0xaa>
        break;
 8016d00:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016d02:	bf00      	nop
 8016d04:	3708      	adds	r7, #8
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}
 8016d0a:	bf00      	nop
 8016d0c:	200014b8 	.word	0x200014b8

08016d10 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b082      	sub	sp, #8
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f002 facf 	bl	80192bc <SUBGRF_SetRfFrequency>
}
 8016d1e:	bf00      	nop
 8016d20:	3708      	adds	r7, #8
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}

08016d26 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016d26:	b580      	push	{r7, lr}
 8016d28:	b090      	sub	sp, #64	@ 0x40
 8016d2a:	af0a      	add	r7, sp, #40	@ 0x28
 8016d2c:	60f8      	str	r0, [r7, #12]
 8016d2e:	60b9      	str	r1, [r7, #8]
 8016d30:	603b      	str	r3, [r7, #0]
 8016d32:	4613      	mov	r3, r2
 8016d34:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016d36:	2301      	movs	r3, #1
 8016d38:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8016d42:	f000 fdf2 	bl	801792a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016d46:	2000      	movs	r0, #0
 8016d48:	f7ff ff86 	bl	8016c58 <RadioSetModem>

    RadioSetChannel( freq );
 8016d4c:	68f8      	ldr	r0, [r7, #12]
 8016d4e:	f7ff ffdf 	bl	8016d10 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016d52:	2301      	movs	r3, #1
 8016d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d56:	2300      	movs	r3, #0
 8016d58:	9308      	str	r3, [sp, #32]
 8016d5a:	2300      	movs	r3, #0
 8016d5c:	9307      	str	r3, [sp, #28]
 8016d5e:	2300      	movs	r3, #0
 8016d60:	9306      	str	r3, [sp, #24]
 8016d62:	2300      	movs	r3, #0
 8016d64:	9305      	str	r3, [sp, #20]
 8016d66:	2300      	movs	r3, #0
 8016d68:	9304      	str	r3, [sp, #16]
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	9303      	str	r3, [sp, #12]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9302      	str	r3, [sp, #8]
 8016d72:	2303      	movs	r3, #3
 8016d74:	9301      	str	r3, [sp, #4]
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	9300      	str	r3, [sp, #0]
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8016d80:	68b9      	ldr	r1, [r7, #8]
 8016d82:	2000      	movs	r0, #0
 8016d84:	f000 f83c 	bl	8016e00 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016d88:	2000      	movs	r0, #0
 8016d8a:	f000 fdd5 	bl	8017938 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016d8e:	f000 ff6f 	bl	8017c70 <RadioGetWakeupTime>
 8016d92:	4603      	mov	r3, r0
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7eb f9bf 	bl	8002118 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016d9a:	f004 f8c5 	bl	801af28 <UTIL_TIMER_GetCurrentTime>
 8016d9e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016da0:	e00d      	b.n	8016dbe <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016da2:	2000      	movs	r0, #0
 8016da4:	f000 feb6 	bl	8017b14 <RadioRssi>
 8016da8:	4603      	mov	r3, r0
 8016daa:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016dac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016db4:	429a      	cmp	r2, r3
 8016db6:	dd02      	ble.n	8016dbe <RadioIsChannelFree+0x98>
        {
            status = false;
 8016db8:	2300      	movs	r3, #0
 8016dba:	75fb      	strb	r3, [r7, #23]
            break;
 8016dbc:	e006      	b.n	8016dcc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016dbe:	6938      	ldr	r0, [r7, #16]
 8016dc0:	f004 f8c4 	bl	801af4c <UTIL_TIMER_GetElapsedTime>
 8016dc4:	4602      	mov	r2, r0
 8016dc6:	683b      	ldr	r3, [r7, #0]
 8016dc8:	4293      	cmp	r3, r2
 8016dca:	d8ea      	bhi.n	8016da2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8016dcc:	f000 fdad 	bl	801792a <RadioStandby>

    return status;
 8016dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3718      	adds	r7, #24
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}

08016dda <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016dda:	b580      	push	{r7, lr}
 8016ddc:	b082      	sub	sp, #8
 8016dde:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016de0:	2300      	movs	r3, #0
 8016de2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016de4:	2300      	movs	r3, #0
 8016de6:	2200      	movs	r2, #0
 8016de8:	2100      	movs	r1, #0
 8016dea:	2000      	movs	r0, #0
 8016dec:	f002 fa0a 	bl	8019204 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016df0:	f001 ffb3 	bl	8018d5a <SUBGRF_GetRandom>
 8016df4:	6078      	str	r0, [r7, #4]

    return rnd;
 8016df6:	687b      	ldr	r3, [r7, #4]
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b08a      	sub	sp, #40	@ 0x28
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60b9      	str	r1, [r7, #8]
 8016e08:	607a      	str	r2, [r7, #4]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	73fb      	strb	r3, [r7, #15]
 8016e10:	4613      	mov	r3, r2
 8016e12:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016e14:	4ab9      	ldr	r2, [pc, #740]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016e16:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e1a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8016e1c:	f003 f89d 	bl	8019f5a <RFW_DeInit>
    if( rxContinuous == true )
 8016e20:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d001      	beq.n	8016e2c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8016e2c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d004      	beq.n	8016e3e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016e34:	4ab2      	ldr	r2, [pc, #712]	@ (8017100 <RadioSetRxConfig+0x300>)
 8016e36:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016e3a:	7013      	strb	r3, [r2, #0]
 8016e3c:	e002      	b.n	8016e44 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016e3e:	4bb0      	ldr	r3, [pc, #704]	@ (8017100 <RadioSetRxConfig+0x300>)
 8016e40:	22ff      	movs	r2, #255	@ 0xff
 8016e42:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016e44:	7bfb      	ldrb	r3, [r7, #15]
 8016e46:	2b05      	cmp	r3, #5
 8016e48:	d009      	beq.n	8016e5e <RadioSetRxConfig+0x5e>
 8016e4a:	2b05      	cmp	r3, #5
 8016e4c:	f300 81d7 	bgt.w	80171fe <RadioSetRxConfig+0x3fe>
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	f000 80bf 	beq.w	8016fd4 <RadioSetRxConfig+0x1d4>
 8016e56:	2b01      	cmp	r3, #1
 8016e58:	f000 8124 	beq.w	80170a4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016e5c:	e1cf      	b.n	80171fe <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016e5e:	2001      	movs	r0, #1
 8016e60:	f002 f8c2 	bl	8018fe8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016e64:	4ba5      	ldr	r3, [pc, #660]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016e66:	2200      	movs	r2, #0
 8016e68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016e6c:	4aa3      	ldr	r2, [pc, #652]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016e72:	4ba2      	ldr	r3, [pc, #648]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016e74:	2209      	movs	r2, #9
 8016e76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016e7a:	4ba0      	ldr	r3, [pc, #640]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016e7c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016e80:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016e82:	68b8      	ldr	r0, [r7, #8]
 8016e84:	f002 ff9c 	bl	8019dc0 <SUBGRF_GetFskBandwidthRegValue>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	4b9b      	ldr	r3, [pc, #620]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016e92:	4b9a      	ldr	r3, [pc, #616]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016e98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	b29a      	uxth	r2, r3
 8016e9e:	4b97      	ldr	r3, [pc, #604]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016ea0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016ea2:	4b96      	ldr	r3, [pc, #600]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016ea8:	4b94      	ldr	r3, [pc, #592]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016eaa:	2210      	movs	r2, #16
 8016eac:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016eae:	4b93      	ldr	r3, [pc, #588]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016eb4:	4b91      	ldr	r3, [pc, #580]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016eba:	4b91      	ldr	r3, [pc, #580]	@ (8017100 <RadioSetRxConfig+0x300>)
 8016ebc:	781a      	ldrb	r2, [r3, #0]
 8016ebe:	4b8f      	ldr	r3, [pc, #572]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016ec0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016ec2:	4b8e      	ldr	r3, [pc, #568]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016eca:	2200      	movs	r2, #0
 8016ecc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016ece:	2005      	movs	r0, #5
 8016ed0:	f7ff fec2 	bl	8016c58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ed4:	488b      	ldr	r0, [pc, #556]	@ (8017104 <RadioSetRxConfig+0x304>)
 8016ed6:	f002 fb2b 	bl	8019530 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016eda:	488b      	ldr	r0, [pc, #556]	@ (8017108 <RadioSetRxConfig+0x308>)
 8016edc:	f002 fbf6 	bl	80196cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ee0:	4a8a      	ldr	r2, [pc, #552]	@ (801710c <RadioSetRxConfig+0x30c>)
 8016ee2:	f107 031c 	add.w	r3, r7, #28
 8016ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016eea:	e883 0003 	stmia.w	r3, {r0, r1}
 8016eee:	f107 031c 	add.w	r3, r7, #28
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f001 feaf 	bl	8018c56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016ef8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016efc:	f001 fefa 	bl	8018cf4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016f00:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016f04:	f000 fe24 	bl	8017b50 <RadioRead>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f12:	f023 0310 	bic.w	r3, r3, #16
 8016f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f1e:	4619      	mov	r1, r3
 8016f20:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016f24:	f000 fe02 	bl	8017b2c <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016f28:	2104      	movs	r1, #4
 8016f2a:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8016f2e:	f000 fdfd 	bl	8017b2c <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016f32:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016f36:	f000 fe0b 	bl	8017b50 <RadioRead>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f44:	f023 031c 	bic.w	r3, r3, #28
 8016f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8016f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f50:	f043 0308 	orr.w	r3, r3, #8
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	4619      	mov	r1, r3
 8016f58:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016f5c:	f000 fde6 	bl	8017b2c <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8016f60:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f64:	f000 fdf4 	bl	8017b50 <RadioRead>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f72:	f023 0318 	bic.w	r3, r3, #24
 8016f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8016f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f7e:	f043 0318 	orr.w	r3, r3, #24
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	4619      	mov	r1, r3
 8016f86:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f8a:	f000 fdcf 	bl	8017b2c <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8016f8e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016f92:	f000 fddd 	bl	8017b50 <RadioRead>
 8016f96:	4603      	mov	r3, r0
 8016f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fac:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8016fb0:	b2db      	uxtb	r3, r3
 8016fb2:	4619      	mov	r1, r3
 8016fb4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016fb8:	f000 fdb8 	bl	8017b2c <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016fbc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016fbe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016fc2:	fb02 f303 	mul.w	r3, r2, r3
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8016fce:	4a4b      	ldr	r2, [pc, #300]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016fd0:	6093      	str	r3, [r2, #8]
            break;
 8016fd2:	e115      	b.n	8017200 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016fd4:	2000      	movs	r0, #0
 8016fd6:	f002 f807 	bl	8018fe8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016fda:	4b48      	ldr	r3, [pc, #288]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016fdc:	2200      	movs	r2, #0
 8016fde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016fe2:	4a46      	ldr	r2, [pc, #280]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016fe8:	4b44      	ldr	r3, [pc, #272]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016fea:	220b      	movs	r2, #11
 8016fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016ff0:	68b8      	ldr	r0, [r7, #8]
 8016ff2:	f002 fee5 	bl	8019dc0 <SUBGRF_GetFskBandwidthRegValue>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	4b40      	ldr	r3, [pc, #256]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8016ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017000:	4b3e      	ldr	r3, [pc, #248]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8017002:	2200      	movs	r2, #0
 8017004:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017006:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017008:	00db      	lsls	r3, r3, #3
 801700a:	b29a      	uxth	r2, r3
 801700c:	4b3b      	ldr	r3, [pc, #236]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 801700e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017010:	4b3a      	ldr	r3, [pc, #232]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8017012:	2204      	movs	r2, #4
 8017014:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017016:	4b39      	ldr	r3, [pc, #228]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8017018:	2218      	movs	r2, #24
 801701a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801701c:	4b37      	ldr	r3, [pc, #220]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 801701e:	2200      	movs	r2, #0
 8017020:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017022:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017026:	f083 0301 	eor.w	r3, r3, #1
 801702a:	b2db      	uxtb	r3, r3
 801702c:	461a      	mov	r2, r3
 801702e:	4b33      	ldr	r3, [pc, #204]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8017030:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017032:	4b33      	ldr	r3, [pc, #204]	@ (8017100 <RadioSetRxConfig+0x300>)
 8017034:	781a      	ldrb	r2, [r3, #0]
 8017036:	4b31      	ldr	r3, [pc, #196]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8017038:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801703a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801703e:	2b00      	cmp	r3, #0
 8017040:	d003      	beq.n	801704a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017042:	4b2e      	ldr	r3, [pc, #184]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8017044:	22f2      	movs	r2, #242	@ 0xf2
 8017046:	75da      	strb	r2, [r3, #23]
 8017048:	e002      	b.n	8017050 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801704a:	4b2c      	ldr	r3, [pc, #176]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 801704c:	2201      	movs	r2, #1
 801704e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017050:	4b2a      	ldr	r3, [pc, #168]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 8017052:	2201      	movs	r2, #1
 8017054:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017056:	f000 fc68 	bl	801792a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801705a:	2000      	movs	r0, #0
 801705c:	f7ff fdfc 	bl	8016c58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017060:	4828      	ldr	r0, [pc, #160]	@ (8017104 <RadioSetRxConfig+0x304>)
 8017062:	f002 fa65 	bl	8019530 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017066:	4828      	ldr	r0, [pc, #160]	@ (8017108 <RadioSetRxConfig+0x308>)
 8017068:	f002 fb30 	bl	80196cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801706c:	4a28      	ldr	r2, [pc, #160]	@ (8017110 <RadioSetRxConfig+0x310>)
 801706e:	f107 0314 	add.w	r3, r7, #20
 8017072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017076:	e883 0003 	stmia.w	r3, {r0, r1}
 801707a:	f107 0314 	add.w	r3, r7, #20
 801707e:	4618      	mov	r0, r3
 8017080:	f001 fde9 	bl	8018c56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017084:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017088:	f001 fe34 	bl	8018cf4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801708c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801708e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017092:	fb02 f303 	mul.w	r3, r2, r3
 8017096:	461a      	mov	r2, r3
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	fbb2 f3f3 	udiv	r3, r2, r3
 801709e:	4a17      	ldr	r2, [pc, #92]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 80170a0:	6093      	str	r3, [r2, #8]
            break;
 80170a2:	e0ad      	b.n	8017200 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80170a4:	2000      	movs	r0, #0
 80170a6:	f001 ff9f 	bl	8018fe8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80170aa:	4b14      	ldr	r3, [pc, #80]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 80170ac:	2201      	movs	r2, #1
 80170ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	b2da      	uxtb	r2, r3
 80170b6:	4b11      	ldr	r3, [pc, #68]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 80170b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80170bc:	4a15      	ldr	r2, [pc, #84]	@ (8017114 <RadioSetRxConfig+0x314>)
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	4413      	add	r3, r2
 80170c2:	781a      	ldrb	r2, [r3, #0]
 80170c4:	4b0d      	ldr	r3, [pc, #52]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 80170c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80170ca:	4a0c      	ldr	r2, [pc, #48]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 80170cc:	7bbb      	ldrb	r3, [r7, #14]
 80170ce:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d105      	bne.n	80170e4 <RadioSetRxConfig+0x2e4>
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	2b0b      	cmp	r3, #11
 80170dc:	d008      	beq.n	80170f0 <RadioSetRxConfig+0x2f0>
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	2b0c      	cmp	r3, #12
 80170e2:	d005      	beq.n	80170f0 <RadioSetRxConfig+0x2f0>
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d116      	bne.n	8017118 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	2b0c      	cmp	r3, #12
 80170ee:	d113      	bne.n	8017118 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80170f0:	4b02      	ldr	r3, [pc, #8]	@ (80170fc <RadioSetRxConfig+0x2fc>)
 80170f2:	2201      	movs	r2, #1
 80170f4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80170f8:	e012      	b.n	8017120 <RadioSetRxConfig+0x320>
 80170fa:	bf00      	nop
 80170fc:	200014b8 	.word	0x200014b8
 8017100:	20000114 	.word	0x20000114
 8017104:	200014f0 	.word	0x200014f0
 8017108:	200014c6 	.word	0x200014c6
 801710c:	0801c3f4 	.word	0x0801c3f4
 8017110:	0801c3fc 	.word	0x0801c3fc
 8017114:	0801ca50 	.word	0x0801ca50
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017118:	4b3b      	ldr	r3, [pc, #236]	@ (8017208 <RadioSetRxConfig+0x408>)
 801711a:	2200      	movs	r2, #0
 801711c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017120:	4b39      	ldr	r3, [pc, #228]	@ (8017208 <RadioSetRxConfig+0x408>)
 8017122:	2201      	movs	r2, #1
 8017124:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017126:	4b38      	ldr	r3, [pc, #224]	@ (8017208 <RadioSetRxConfig+0x408>)
 8017128:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801712c:	2b05      	cmp	r3, #5
 801712e:	d004      	beq.n	801713a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017130:	4b35      	ldr	r3, [pc, #212]	@ (8017208 <RadioSetRxConfig+0x408>)
 8017132:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017136:	2b06      	cmp	r3, #6
 8017138:	d10a      	bne.n	8017150 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801713a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801713c:	2b0b      	cmp	r3, #11
 801713e:	d803      	bhi.n	8017148 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017140:	4b31      	ldr	r3, [pc, #196]	@ (8017208 <RadioSetRxConfig+0x408>)
 8017142:	220c      	movs	r2, #12
 8017144:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017146:	e006      	b.n	8017156 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017148:	4a2f      	ldr	r2, [pc, #188]	@ (8017208 <RadioSetRxConfig+0x408>)
 801714a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801714c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801714e:	e002      	b.n	8017156 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017150:	4a2d      	ldr	r2, [pc, #180]	@ (8017208 <RadioSetRxConfig+0x408>)
 8017152:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017154:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017156:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801715a:	4b2b      	ldr	r3, [pc, #172]	@ (8017208 <RadioSetRxConfig+0x408>)
 801715c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801715e:	4b2b      	ldr	r3, [pc, #172]	@ (801720c <RadioSetRxConfig+0x40c>)
 8017160:	781a      	ldrb	r2, [r3, #0]
 8017162:	4b29      	ldr	r3, [pc, #164]	@ (8017208 <RadioSetRxConfig+0x408>)
 8017164:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017166:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801716a:	4b27      	ldr	r3, [pc, #156]	@ (8017208 <RadioSetRxConfig+0x408>)
 801716c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017170:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017174:	4b24      	ldr	r3, [pc, #144]	@ (8017208 <RadioSetRxConfig+0x408>)
 8017176:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801717a:	f000 fbd6 	bl	801792a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801717e:	2001      	movs	r0, #1
 8017180:	f7ff fd6a 	bl	8016c58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017184:	4822      	ldr	r0, [pc, #136]	@ (8017210 <RadioSetRxConfig+0x410>)
 8017186:	f002 f9d3 	bl	8019530 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801718a:	4822      	ldr	r0, [pc, #136]	@ (8017214 <RadioSetRxConfig+0x414>)
 801718c:	f002 fa9e 	bl	80196cc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017190:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017192:	b2db      	uxtb	r3, r3
 8017194:	4618      	mov	r0, r3
 8017196:	f001 ff36 	bl	8019006 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801719a:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801719e:	f002 fbfd 	bl	801999c <SUBGRF_ReadRegister>
 80171a2:	4603      	mov	r3, r0
 80171a4:	f003 0301 	and.w	r3, r3, #1
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	4619      	mov	r1, r3
 80171ac:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80171b0:	f002 fbd2 	bl	8019958 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80171b4:	4b14      	ldr	r3, [pc, #80]	@ (8017208 <RadioSetRxConfig+0x408>)
 80171b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80171ba:	2b01      	cmp	r3, #1
 80171bc:	d10d      	bne.n	80171da <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80171be:	f240 7036 	movw	r0, #1846	@ 0x736
 80171c2:	f002 fbeb 	bl	801999c <SUBGRF_ReadRegister>
 80171c6:	4603      	mov	r3, r0
 80171c8:	f023 0304 	bic.w	r3, r3, #4
 80171cc:	b2db      	uxtb	r3, r3
 80171ce:	4619      	mov	r1, r3
 80171d0:	f240 7036 	movw	r0, #1846	@ 0x736
 80171d4:	f002 fbc0 	bl	8019958 <SUBGRF_WriteRegister>
 80171d8:	e00c      	b.n	80171f4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80171da:	f240 7036 	movw	r0, #1846	@ 0x736
 80171de:	f002 fbdd 	bl	801999c <SUBGRF_ReadRegister>
 80171e2:	4603      	mov	r3, r0
 80171e4:	f043 0304 	orr.w	r3, r3, #4
 80171e8:	b2db      	uxtb	r3, r3
 80171ea:	4619      	mov	r1, r3
 80171ec:	f240 7036 	movw	r0, #1846	@ 0x736
 80171f0:	f002 fbb2 	bl	8019958 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80171f4:	4b04      	ldr	r3, [pc, #16]	@ (8017208 <RadioSetRxConfig+0x408>)
 80171f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80171fa:	609a      	str	r2, [r3, #8]
            break;
 80171fc:	e000      	b.n	8017200 <RadioSetRxConfig+0x400>
            break;
 80171fe:	bf00      	nop
    }
}
 8017200:	bf00      	nop
 8017202:	3728      	adds	r7, #40	@ 0x28
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}
 8017208:	200014b8 	.word	0x200014b8
 801720c:	20000114 	.word	0x20000114
 8017210:	200014f0 	.word	0x200014f0
 8017214:	200014c6 	.word	0x200014c6

08017218 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b086      	sub	sp, #24
 801721c:	af00      	add	r7, sp, #0
 801721e:	60ba      	str	r2, [r7, #8]
 8017220:	607b      	str	r3, [r7, #4]
 8017222:	4603      	mov	r3, r0
 8017224:	73fb      	strb	r3, [r7, #15]
 8017226:	460b      	mov	r3, r1
 8017228:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801722a:	f002 fe96 	bl	8019f5a <RFW_DeInit>
    switch( modem )
 801722e:	7bfb      	ldrb	r3, [r7, #15]
 8017230:	2b04      	cmp	r3, #4
 8017232:	f000 80c7 	beq.w	80173c4 <RadioSetTxConfig+0x1ac>
 8017236:	2b04      	cmp	r3, #4
 8017238:	f300 80d6 	bgt.w	80173e8 <RadioSetTxConfig+0x1d0>
 801723c:	2b00      	cmp	r3, #0
 801723e:	d002      	beq.n	8017246 <RadioSetTxConfig+0x2e>
 8017240:	2b01      	cmp	r3, #1
 8017242:	d059      	beq.n	80172f8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017244:	e0d0      	b.n	80173e8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017246:	4b77      	ldr	r3, [pc, #476]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017248:	2200      	movs	r2, #0
 801724a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801724e:	4a75      	ldr	r2, [pc, #468]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017250:	6a3b      	ldr	r3, [r7, #32]
 8017252:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017254:	4b73      	ldr	r3, [pc, #460]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017256:	220b      	movs	r2, #11
 8017258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f002 fdaf 	bl	8019dc0 <SUBGRF_GetFskBandwidthRegValue>
 8017262:	4603      	mov	r3, r0
 8017264:	461a      	mov	r2, r3
 8017266:	4b6f      	ldr	r3, [pc, #444]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801726c:	4a6d      	ldr	r2, [pc, #436]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801726e:	68bb      	ldr	r3, [r7, #8]
 8017270:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017272:	4b6c      	ldr	r3, [pc, #432]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017274:	2200      	movs	r2, #0
 8017276:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017278:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801727a:	00db      	lsls	r3, r3, #3
 801727c:	b29a      	uxth	r2, r3
 801727e:	4b69      	ldr	r3, [pc, #420]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017280:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017282:	4b68      	ldr	r3, [pc, #416]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017284:	2204      	movs	r2, #4
 8017286:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017288:	4b66      	ldr	r3, [pc, #408]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801728a:	2218      	movs	r2, #24
 801728c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801728e:	4b65      	ldr	r3, [pc, #404]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017290:	2200      	movs	r2, #0
 8017292:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017294:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017298:	f083 0301 	eor.w	r3, r3, #1
 801729c:	b2db      	uxtb	r3, r3
 801729e:	461a      	mov	r2, r3
 80172a0:	4b60      	ldr	r3, [pc, #384]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80172a2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80172a4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d003      	beq.n	80172b4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80172ac:	4b5d      	ldr	r3, [pc, #372]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80172ae:	22f2      	movs	r2, #242	@ 0xf2
 80172b0:	75da      	strb	r2, [r3, #23]
 80172b2:	e002      	b.n	80172ba <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80172b4:	4b5b      	ldr	r3, [pc, #364]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80172b6:	2201      	movs	r2, #1
 80172b8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80172ba:	4b5a      	ldr	r3, [pc, #360]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80172bc:	2201      	movs	r2, #1
 80172be:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80172c0:	f000 fb33 	bl	801792a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80172c4:	2000      	movs	r0, #0
 80172c6:	f7ff fcc7 	bl	8016c58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80172ca:	4857      	ldr	r0, [pc, #348]	@ (8017428 <RadioSetTxConfig+0x210>)
 80172cc:	f002 f930 	bl	8019530 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80172d0:	4856      	ldr	r0, [pc, #344]	@ (801742c <RadioSetTxConfig+0x214>)
 80172d2:	f002 f9fb 	bl	80196cc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80172d6:	4a56      	ldr	r2, [pc, #344]	@ (8017430 <RadioSetTxConfig+0x218>)
 80172d8:	f107 0310 	add.w	r3, r7, #16
 80172dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80172e4:	f107 0310 	add.w	r3, r7, #16
 80172e8:	4618      	mov	r0, r3
 80172ea:	f001 fcb4 	bl	8018c56 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80172ee:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80172f2:	f001 fcff 	bl	8018cf4 <SUBGRF_SetWhiteningSeed>
            break;
 80172f6:	e078      	b.n	80173ea <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80172f8:	4b4a      	ldr	r3, [pc, #296]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80172fa:	2201      	movs	r2, #1
 80172fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017300:	6a3b      	ldr	r3, [r7, #32]
 8017302:	b2da      	uxtb	r2, r3
 8017304:	4b47      	ldr	r3, [pc, #284]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801730a:	4a4a      	ldr	r2, [pc, #296]	@ (8017434 <RadioSetTxConfig+0x21c>)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	4413      	add	r3, r2
 8017310:	781a      	ldrb	r2, [r3, #0]
 8017312:	4b44      	ldr	r3, [pc, #272]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017318:	4a42      	ldr	r2, [pc, #264]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801731a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801731e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d105      	bne.n	8017334 <RadioSetTxConfig+0x11c>
 8017328:	6a3b      	ldr	r3, [r7, #32]
 801732a:	2b0b      	cmp	r3, #11
 801732c:	d008      	beq.n	8017340 <RadioSetTxConfig+0x128>
 801732e:	6a3b      	ldr	r3, [r7, #32]
 8017330:	2b0c      	cmp	r3, #12
 8017332:	d005      	beq.n	8017340 <RadioSetTxConfig+0x128>
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	2b01      	cmp	r3, #1
 8017338:	d107      	bne.n	801734a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801733a:	6a3b      	ldr	r3, [r7, #32]
 801733c:	2b0c      	cmp	r3, #12
 801733e:	d104      	bne.n	801734a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017340:	4b38      	ldr	r3, [pc, #224]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017342:	2201      	movs	r2, #1
 8017344:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017348:	e003      	b.n	8017352 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801734a:	4b36      	ldr	r3, [pc, #216]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801734c:	2200      	movs	r2, #0
 801734e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017352:	4b34      	ldr	r3, [pc, #208]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017354:	2201      	movs	r2, #1
 8017356:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017358:	4b32      	ldr	r3, [pc, #200]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801735a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801735e:	2b05      	cmp	r3, #5
 8017360:	d004      	beq.n	801736c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017362:	4b30      	ldr	r3, [pc, #192]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017364:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017368:	2b06      	cmp	r3, #6
 801736a:	d10a      	bne.n	8017382 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801736c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801736e:	2b0b      	cmp	r3, #11
 8017370:	d803      	bhi.n	801737a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017372:	4b2c      	ldr	r3, [pc, #176]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017374:	220c      	movs	r2, #12
 8017376:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017378:	e006      	b.n	8017388 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801737a:	4a2a      	ldr	r2, [pc, #168]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801737c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801737e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017380:	e002      	b.n	8017388 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017382:	4a28      	ldr	r2, [pc, #160]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017384:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017386:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017388:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801738c:	4b25      	ldr	r3, [pc, #148]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801738e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017390:	4b29      	ldr	r3, [pc, #164]	@ (8017438 <RadioSetTxConfig+0x220>)
 8017392:	781a      	ldrb	r2, [r3, #0]
 8017394:	4b23      	ldr	r3, [pc, #140]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017396:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017398:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801739c:	4b21      	ldr	r3, [pc, #132]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801739e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80173a2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80173a6:	4b1f      	ldr	r3, [pc, #124]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80173a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80173ac:	f000 fabd 	bl	801792a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80173b0:	2001      	movs	r0, #1
 80173b2:	f7ff fc51 	bl	8016c58 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173b6:	481c      	ldr	r0, [pc, #112]	@ (8017428 <RadioSetTxConfig+0x210>)
 80173b8:	f002 f8ba 	bl	8019530 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80173bc:	481b      	ldr	r0, [pc, #108]	@ (801742c <RadioSetTxConfig+0x214>)
 80173be:	f002 f985 	bl	80196cc <SUBGRF_SetPacketParams>
            break;
 80173c2:	e012      	b.n	80173ea <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80173c4:	2004      	movs	r0, #4
 80173c6:	f7ff fc47 	bl	8016c58 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80173ca:	4b16      	ldr	r3, [pc, #88]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80173cc:	2202      	movs	r2, #2
 80173ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80173d2:	4a14      	ldr	r2, [pc, #80]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80173d4:	6a3b      	ldr	r3, [r7, #32]
 80173d6:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80173d8:	4b12      	ldr	r3, [pc, #72]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80173da:	2216      	movs	r2, #22
 80173dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173e0:	4811      	ldr	r0, [pc, #68]	@ (8017428 <RadioSetTxConfig+0x210>)
 80173e2:	f002 f8a5 	bl	8019530 <SUBGRF_SetModulationParams>
            break;
 80173e6:	e000      	b.n	80173ea <RadioSetTxConfig+0x1d2>
            break;
 80173e8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80173ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80173ee:	4618      	mov	r0, r3
 80173f0:	f002 fbe8 	bl	8019bc4 <SUBGRF_SetRfTxPower>
 80173f4:	4603      	mov	r3, r0
 80173f6:	461a      	mov	r2, r3
 80173f8:	4b0a      	ldr	r3, [pc, #40]	@ (8017424 <RadioSetTxConfig+0x20c>)
 80173fa:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80173fe:	210e      	movs	r1, #14
 8017400:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017404:	f002 faa8 	bl	8019958 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8017408:	4b06      	ldr	r3, [pc, #24]	@ (8017424 <RadioSetTxConfig+0x20c>)
 801740a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801740e:	4618      	mov	r0, r3
 8017410:	f002 fdb7 	bl	8019f82 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017414:	4a03      	ldr	r2, [pc, #12]	@ (8017424 <RadioSetTxConfig+0x20c>)
 8017416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017418:	6053      	str	r3, [r2, #4]
}
 801741a:	bf00      	nop
 801741c:	3718      	adds	r7, #24
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}
 8017422:	bf00      	nop
 8017424:	200014b8 	.word	0x200014b8
 8017428:	200014f0 	.word	0x200014f0
 801742c:	200014c6 	.word	0x200014c6
 8017430:	0801c3fc 	.word	0x0801c3fc
 8017434:	0801ca50 	.word	0x0801ca50
 8017438:	20000114 	.word	0x20000114

0801743c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801743c:	b480      	push	{r7}
 801743e:	b083      	sub	sp, #12
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
    return true;
 8017444:	2301      	movs	r3, #1
}
 8017446:	4618      	mov	r0, r3
 8017448:	370c      	adds	r7, #12
 801744a:	46bd      	mov	sp, r7
 801744c:	bc80      	pop	{r7}
 801744e:	4770      	bx	lr

08017450 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017450:	b480      	push	{r7}
 8017452:	b085      	sub	sp, #20
 8017454:	af00      	add	r7, sp, #0
 8017456:	4603      	mov	r3, r0
 8017458:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801745a:	2300      	movs	r3, #0
 801745c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801745e:	79fb      	ldrb	r3, [r7, #7]
 8017460:	2b0a      	cmp	r3, #10
 8017462:	d83e      	bhi.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
 8017464:	a201      	add	r2, pc, #4	@ (adr r2, 801746c <RadioGetLoRaBandwidthInHz+0x1c>)
 8017466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801746a:	bf00      	nop
 801746c:	08017499 	.word	0x08017499
 8017470:	080174a9 	.word	0x080174a9
 8017474:	080174b9 	.word	0x080174b9
 8017478:	080174c9 	.word	0x080174c9
 801747c:	080174d1 	.word	0x080174d1
 8017480:	080174d7 	.word	0x080174d7
 8017484:	080174dd 	.word	0x080174dd
 8017488:	080174e3 	.word	0x080174e3
 801748c:	080174a1 	.word	0x080174a1
 8017490:	080174b1 	.word	0x080174b1
 8017494:	080174c1 	.word	0x080174c1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017498:	f641 6384 	movw	r3, #7812	@ 0x1e84
 801749c:	60fb      	str	r3, [r7, #12]
        break;
 801749e:	e020      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80174a0:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80174a4:	60fb      	str	r3, [r7, #12]
        break;
 80174a6:	e01c      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80174a8:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80174ac:	60fb      	str	r3, [r7, #12]
        break;
 80174ae:	e018      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80174b0:	f245 1361 	movw	r3, #20833	@ 0x5161
 80174b4:	60fb      	str	r3, [r7, #12]
        break;
 80174b6:	e014      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80174b8:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80174bc:	60fb      	str	r3, [r7, #12]
        break;
 80174be:	e010      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80174c0:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80174c4:	60fb      	str	r3, [r7, #12]
        break;
 80174c6:	e00c      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80174c8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80174cc:	60fb      	str	r3, [r7, #12]
        break;
 80174ce:	e008      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80174d0:	4b07      	ldr	r3, [pc, #28]	@ (80174f0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80174d2:	60fb      	str	r3, [r7, #12]
        break;
 80174d4:	e005      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80174d6:	4b07      	ldr	r3, [pc, #28]	@ (80174f4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80174d8:	60fb      	str	r3, [r7, #12]
        break;
 80174da:	e002      	b.n	80174e2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80174dc:	4b06      	ldr	r3, [pc, #24]	@ (80174f8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80174de:	60fb      	str	r3, [r7, #12]
        break;
 80174e0:	bf00      	nop
    }

    return bandwidthInHz;
 80174e2:	68fb      	ldr	r3, [r7, #12]
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	3714      	adds	r7, #20
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bc80      	pop	{r7}
 80174ec:	4770      	bx	lr
 80174ee:	bf00      	nop
 80174f0:	0001e848 	.word	0x0001e848
 80174f4:	0003d090 	.word	0x0003d090
 80174f8:	0007a120 	.word	0x0007a120

080174fc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80174fc:	b480      	push	{r7}
 80174fe:	b083      	sub	sp, #12
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	4608      	mov	r0, r1
 8017506:	4611      	mov	r1, r2
 8017508:	461a      	mov	r2, r3
 801750a:	4603      	mov	r3, r0
 801750c:	70fb      	strb	r3, [r7, #3]
 801750e:	460b      	mov	r3, r1
 8017510:	803b      	strh	r3, [r7, #0]
 8017512:	4613      	mov	r3, r2
 8017514:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8017516:	883b      	ldrh	r3, [r7, #0]
 8017518:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801751a:	78ba      	ldrb	r2, [r7, #2]
 801751c:	f082 0201 	eor.w	r2, r2, #1
 8017520:	b2d2      	uxtb	r2, r2
 8017522:	2a00      	cmp	r2, #0
 8017524:	d001      	beq.n	801752a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017526:	2208      	movs	r2, #8
 8017528:	e000      	b.n	801752c <RadioGetGfskTimeOnAirNumerator+0x30>
 801752a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801752c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801752e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017532:	7c3b      	ldrb	r3, [r7, #16]
 8017534:	7d39      	ldrb	r1, [r7, #20]
 8017536:	2900      	cmp	r1, #0
 8017538:	d001      	beq.n	801753e <RadioGetGfskTimeOnAirNumerator+0x42>
 801753a:	2102      	movs	r1, #2
 801753c:	e000      	b.n	8017540 <RadioGetGfskTimeOnAirNumerator+0x44>
 801753e:	2100      	movs	r1, #0
 8017540:	440b      	add	r3, r1
 8017542:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017544:	4413      	add	r3, r2
}
 8017546:	4618      	mov	r0, r3
 8017548:	370c      	adds	r7, #12
 801754a:	46bd      	mov	sp, r7
 801754c:	bc80      	pop	{r7}
 801754e:	4770      	bx	lr

08017550 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017550:	b480      	push	{r7}
 8017552:	b08b      	sub	sp, #44	@ 0x2c
 8017554:	af00      	add	r7, sp, #0
 8017556:	60f8      	str	r0, [r7, #12]
 8017558:	60b9      	str	r1, [r7, #8]
 801755a:	4611      	mov	r1, r2
 801755c:	461a      	mov	r2, r3
 801755e:	460b      	mov	r3, r1
 8017560:	71fb      	strb	r3, [r7, #7]
 8017562:	4613      	mov	r3, r2
 8017564:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017566:	79fb      	ldrb	r3, [r7, #7]
 8017568:	3304      	adds	r3, #4
 801756a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801756c:	2300      	movs	r3, #0
 801756e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	2b05      	cmp	r3, #5
 8017576:	d002      	beq.n	801757e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017578:	68bb      	ldr	r3, [r7, #8]
 801757a:	2b06      	cmp	r3, #6
 801757c:	d104      	bne.n	8017588 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801757e:	88bb      	ldrh	r3, [r7, #4]
 8017580:	2b0b      	cmp	r3, #11
 8017582:	d801      	bhi.n	8017588 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017584:	230c      	movs	r3, #12
 8017586:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d105      	bne.n	801759a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	2b0b      	cmp	r3, #11
 8017592:	d008      	beq.n	80175a6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	2b0c      	cmp	r3, #12
 8017598:	d005      	beq.n	80175a6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	2b01      	cmp	r3, #1
 801759e:	d105      	bne.n	80175ac <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	2b0c      	cmp	r3, #12
 80175a4:	d102      	bne.n	80175ac <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80175a6:	2301      	movs	r3, #1
 80175a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80175ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80175b0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80175b2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80175b6:	2a00      	cmp	r2, #0
 80175b8:	d001      	beq.n	80175be <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80175ba:	2210      	movs	r2, #16
 80175bc:	e000      	b.n	80175c0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80175be:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80175c0:	4413      	add	r3, r2
 80175c2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80175c8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80175ca:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80175ce:	2a00      	cmp	r2, #0
 80175d0:	d001      	beq.n	80175d6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80175d2:	2200      	movs	r2, #0
 80175d4:	e000      	b.n	80175d8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80175d6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80175d8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80175da:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80175dc:	68bb      	ldr	r3, [r7, #8]
 80175de:	2b06      	cmp	r3, #6
 80175e0:	d803      	bhi.n	80175ea <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80175e2:	68bb      	ldr	r3, [r7, #8]
 80175e4:	009b      	lsls	r3, r3, #2
 80175e6:	623b      	str	r3, [r7, #32]
 80175e8:	e00e      	b.n	8017608 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80175ea:	69fb      	ldr	r3, [r7, #28]
 80175ec:	3308      	adds	r3, #8
 80175ee:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80175f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d004      	beq.n	8017602 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	3b02      	subs	r3, #2
 80175fc:	009b      	lsls	r3, r3, #2
 80175fe:	623b      	str	r3, [r7, #32]
 8017600:	e002      	b.n	8017608 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	009b      	lsls	r3, r3, #2
 8017606:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017608:	69fb      	ldr	r3, [r7, #28]
 801760a:	2b00      	cmp	r3, #0
 801760c:	da01      	bge.n	8017612 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801760e:	2300      	movs	r3, #0
 8017610:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017612:	69fa      	ldr	r2, [r7, #28]
 8017614:	6a3b      	ldr	r3, [r7, #32]
 8017616:	4413      	add	r3, r2
 8017618:	1e5a      	subs	r2, r3, #1
 801761a:	6a3b      	ldr	r3, [r7, #32]
 801761c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017620:	697a      	ldr	r2, [r7, #20]
 8017622:	fb03 f202 	mul.w	r2, r3, r2
 8017626:	88bb      	ldrh	r3, [r7, #4]
 8017628:	4413      	add	r3, r2
    int32_t intermediate =
 801762a:	330c      	adds	r3, #12
 801762c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801762e:	68bb      	ldr	r3, [r7, #8]
 8017630:	2b06      	cmp	r3, #6
 8017632:	d802      	bhi.n	801763a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017634:	69bb      	ldr	r3, [r7, #24]
 8017636:	3302      	adds	r3, #2
 8017638:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801763a:	69bb      	ldr	r3, [r7, #24]
 801763c:	009b      	lsls	r3, r3, #2
 801763e:	1c5a      	adds	r2, r3, #1
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	3b02      	subs	r3, #2
 8017644:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017648:	4618      	mov	r0, r3
 801764a:	372c      	adds	r7, #44	@ 0x2c
 801764c:	46bd      	mov	sp, r7
 801764e:	bc80      	pop	{r7}
 8017650:	4770      	bx	lr
	...

08017654 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b08a      	sub	sp, #40	@ 0x28
 8017658:	af04      	add	r7, sp, #16
 801765a:	60b9      	str	r1, [r7, #8]
 801765c:	607a      	str	r2, [r7, #4]
 801765e:	461a      	mov	r2, r3
 8017660:	4603      	mov	r3, r0
 8017662:	73fb      	strb	r3, [r7, #15]
 8017664:	4613      	mov	r3, r2
 8017666:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017668:	2300      	movs	r3, #0
 801766a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801766c:	2301      	movs	r3, #1
 801766e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017670:	7bfb      	ldrb	r3, [r7, #15]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d002      	beq.n	801767c <RadioTimeOnAir+0x28>
 8017676:	2b01      	cmp	r3, #1
 8017678:	d017      	beq.n	80176aa <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801767a:	e035      	b.n	80176e8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801767c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017680:	8c3a      	ldrh	r2, [r7, #32]
 8017682:	7bb9      	ldrb	r1, [r7, #14]
 8017684:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017688:	9301      	str	r3, [sp, #4]
 801768a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801768e:	9300      	str	r3, [sp, #0]
 8017690:	4603      	mov	r3, r0
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f7ff ff32 	bl	80174fc <RadioGetGfskTimeOnAirNumerator>
 8017698:	4603      	mov	r3, r0
 801769a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801769e:	fb02 f303 	mul.w	r3, r2, r3
 80176a2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	613b      	str	r3, [r7, #16]
        break;
 80176a8:	e01e      	b.n	80176e8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80176aa:	8c39      	ldrh	r1, [r7, #32]
 80176ac:	7bba      	ldrb	r2, [r7, #14]
 80176ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80176b2:	9302      	str	r3, [sp, #8]
 80176b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80176b8:	9301      	str	r3, [sp, #4]
 80176ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80176be:	9300      	str	r3, [sp, #0]
 80176c0:	460b      	mov	r3, r1
 80176c2:	6879      	ldr	r1, [r7, #4]
 80176c4:	68b8      	ldr	r0, [r7, #8]
 80176c6:	f7ff ff43 	bl	8017550 <RadioGetLoRaTimeOnAirNumerator>
 80176ca:	4603      	mov	r3, r0
 80176cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80176d0:	fb02 f303 	mul.w	r3, r2, r3
 80176d4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80176d6:	4a0a      	ldr	r2, [pc, #40]	@ (8017700 <RadioTimeOnAir+0xac>)
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	4413      	add	r3, r2
 80176dc:	781b      	ldrb	r3, [r3, #0]
 80176de:	4618      	mov	r0, r3
 80176e0:	f7ff feb6 	bl	8017450 <RadioGetLoRaBandwidthInHz>
 80176e4:	6138      	str	r0, [r7, #16]
        break;
 80176e6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80176e8:	697a      	ldr	r2, [r7, #20]
 80176ea:	693b      	ldr	r3, [r7, #16]
 80176ec:	4413      	add	r3, r2
 80176ee:	1e5a      	subs	r2, r3, #1
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3718      	adds	r7, #24
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	0801ca50 	.word	0x0801ca50

08017704 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b084      	sub	sp, #16
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	460b      	mov	r3, r1
 801770e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017710:	2300      	movs	r3, #0
 8017712:	2200      	movs	r2, #0
 8017714:	f240 2101 	movw	r1, #513	@ 0x201
 8017718:	f240 2001 	movw	r0, #513	@ 0x201
 801771c:	f001 fd72 	bl	8019204 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017720:	4b73      	ldr	r3, [pc, #460]	@ (80178f0 <RadioSend+0x1ec>)
 8017722:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017726:	2101      	movs	r1, #1
 8017728:	4618      	mov	r0, r3
 801772a:	f002 fa23 	bl	8019b74 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801772e:	4b70      	ldr	r3, [pc, #448]	@ (80178f0 <RadioSend+0x1ec>)
 8017730:	781b      	ldrb	r3, [r3, #0]
 8017732:	2b01      	cmp	r3, #1
 8017734:	d112      	bne.n	801775c <RadioSend+0x58>
 8017736:	4b6e      	ldr	r3, [pc, #440]	@ (80178f0 <RadioSend+0x1ec>)
 8017738:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801773c:	2b06      	cmp	r3, #6
 801773e:	d10d      	bne.n	801775c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017740:	f640 0089 	movw	r0, #2185	@ 0x889
 8017744:	f002 f92a 	bl	801999c <SUBGRF_ReadRegister>
 8017748:	4603      	mov	r3, r0
 801774a:	f023 0304 	bic.w	r3, r3, #4
 801774e:	b2db      	uxtb	r3, r3
 8017750:	4619      	mov	r1, r3
 8017752:	f640 0089 	movw	r0, #2185	@ 0x889
 8017756:	f002 f8ff 	bl	8019958 <SUBGRF_WriteRegister>
 801775a:	e00c      	b.n	8017776 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801775c:	f640 0089 	movw	r0, #2185	@ 0x889
 8017760:	f002 f91c 	bl	801999c <SUBGRF_ReadRegister>
 8017764:	4603      	mov	r3, r0
 8017766:	f043 0304 	orr.w	r3, r3, #4
 801776a:	b2db      	uxtb	r3, r3
 801776c:	4619      	mov	r1, r3
 801776e:	f640 0089 	movw	r0, #2185	@ 0x889
 8017772:	f002 f8f1 	bl	8019958 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8017776:	4b5e      	ldr	r3, [pc, #376]	@ (80178f0 <RadioSend+0x1ec>)
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	2b04      	cmp	r3, #4
 801777c:	f200 80a8 	bhi.w	80178d0 <RadioSend+0x1cc>
 8017780:	a201      	add	r2, pc, #4	@ (adr r2, 8017788 <RadioSend+0x84>)
 8017782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017786:	bf00      	nop
 8017788:	080177b7 	.word	0x080177b7
 801778c:	0801779d 	.word	0x0801779d
 8017790:	080177b7 	.word	0x080177b7
 8017794:	08017819 	.word	0x08017819
 8017798:	08017839 	.word	0x08017839
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801779c:	4a54      	ldr	r2, [pc, #336]	@ (80178f0 <RadioSend+0x1ec>)
 801779e:	78fb      	ldrb	r3, [r7, #3]
 80177a0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177a2:	4854      	ldr	r0, [pc, #336]	@ (80178f4 <RadioSend+0x1f0>)
 80177a4:	f001 ff92 	bl	80196cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80177a8:	78fb      	ldrb	r3, [r7, #3]
 80177aa:	2200      	movs	r2, #0
 80177ac:	4619      	mov	r1, r3
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f001 fa3e 	bl	8018c30 <SUBGRF_SendPayload>
            break;
 80177b4:	e08d      	b.n	80178d2 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80177b6:	f002 fbd6 	bl	8019f66 <RFW_Is_Init>
 80177ba:	4603      	mov	r3, r0
 80177bc:	2b01      	cmp	r3, #1
 80177be:	d11e      	bne.n	80177fe <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80177c0:	f107 020d 	add.w	r2, r7, #13
 80177c4:	78fb      	ldrb	r3, [r7, #3]
 80177c6:	4619      	mov	r1, r3
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f002 fbe4 	bl	8019f96 <RFW_TransmitInit>
 80177ce:	4603      	mov	r3, r0
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d10c      	bne.n	80177ee <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80177d4:	7b7a      	ldrb	r2, [r7, #13]
 80177d6:	4b46      	ldr	r3, [pc, #280]	@ (80178f0 <RadioSend+0x1ec>)
 80177d8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177da:	4846      	ldr	r0, [pc, #280]	@ (80178f4 <RadioSend+0x1f0>)
 80177dc:	f001 ff76 	bl	80196cc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80177e0:	7b7b      	ldrb	r3, [r7, #13]
 80177e2:	2200      	movs	r2, #0
 80177e4:	4619      	mov	r1, r3
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f001 fa22 	bl	8018c30 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80177ec:	e071      	b.n	80178d2 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80177ee:	4b42      	ldr	r3, [pc, #264]	@ (80178f8 <RadioSend+0x1f4>)
 80177f0:	2201      	movs	r2, #1
 80177f2:	2100      	movs	r1, #0
 80177f4:	2002      	movs	r0, #2
 80177f6:	f003 fc87 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80177fa:	2303      	movs	r3, #3
 80177fc:	e073      	b.n	80178e6 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80177fe:	4a3c      	ldr	r2, [pc, #240]	@ (80178f0 <RadioSend+0x1ec>)
 8017800:	78fb      	ldrb	r3, [r7, #3]
 8017802:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017804:	483b      	ldr	r0, [pc, #236]	@ (80178f4 <RadioSend+0x1f0>)
 8017806:	f001 ff61 	bl	80196cc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801780a:	78fb      	ldrb	r3, [r7, #3]
 801780c:	2200      	movs	r2, #0
 801780e:	4619      	mov	r1, r3
 8017810:	6878      	ldr	r0, [r7, #4]
 8017812:	f001 fa0d 	bl	8018c30 <SUBGRF_SendPayload>
            break;
 8017816:	e05c      	b.n	80178d2 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017818:	4b35      	ldr	r3, [pc, #212]	@ (80178f0 <RadioSend+0x1ec>)
 801781a:	2202      	movs	r2, #2
 801781c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801781e:	4a34      	ldr	r2, [pc, #208]	@ (80178f0 <RadioSend+0x1ec>)
 8017820:	78fb      	ldrb	r3, [r7, #3]
 8017822:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017824:	4833      	ldr	r0, [pc, #204]	@ (80178f4 <RadioSend+0x1f0>)
 8017826:	f001 ff51 	bl	80196cc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801782a:	78fb      	ldrb	r3, [r7, #3]
 801782c:	2200      	movs	r2, #0
 801782e:	4619      	mov	r1, r3
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f001 f9fd 	bl	8018c30 <SUBGRF_SendPayload>
            break;
 8017836:	e04c      	b.n	80178d2 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017838:	78fb      	ldrb	r3, [r7, #3]
 801783a:	461a      	mov	r2, r3
 801783c:	6879      	ldr	r1, [r7, #4]
 801783e:	482f      	ldr	r0, [pc, #188]	@ (80178fc <RadioSend+0x1f8>)
 8017840:	f000 fcca 	bl	80181d8 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017844:	4b2a      	ldr	r3, [pc, #168]	@ (80178f0 <RadioSend+0x1ec>)
 8017846:	2202      	movs	r2, #2
 8017848:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801784a:	78fb      	ldrb	r3, [r7, #3]
 801784c:	3301      	adds	r3, #1
 801784e:	b2da      	uxtb	r2, r3
 8017850:	4b27      	ldr	r3, [pc, #156]	@ (80178f0 <RadioSend+0x1ec>)
 8017852:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017854:	4827      	ldr	r0, [pc, #156]	@ (80178f4 <RadioSend+0x1f0>)
 8017856:	f001 ff39 	bl	80196cc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801785a:	2100      	movs	r1, #0
 801785c:	20f1      	movs	r0, #241	@ 0xf1
 801785e:	f000 f965 	bl	8017b2c <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017862:	2100      	movs	r1, #0
 8017864:	20f0      	movs	r0, #240	@ 0xf0
 8017866:	f000 f961 	bl	8017b2c <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801786a:	4b21      	ldr	r3, [pc, #132]	@ (80178f0 <RadioSend+0x1ec>)
 801786c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801786e:	2b64      	cmp	r3, #100	@ 0x64
 8017870:	d108      	bne.n	8017884 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017872:	2170      	movs	r1, #112	@ 0x70
 8017874:	20f3      	movs	r0, #243	@ 0xf3
 8017876:	f000 f959 	bl	8017b2c <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801787a:	211d      	movs	r1, #29
 801787c:	20f2      	movs	r0, #242	@ 0xf2
 801787e:	f000 f955 	bl	8017b2c <RadioWrite>
 8017882:	e007      	b.n	8017894 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017884:	21e1      	movs	r1, #225	@ 0xe1
 8017886:	20f3      	movs	r0, #243	@ 0xf3
 8017888:	f000 f950 	bl	8017b2c <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801788c:	2104      	movs	r1, #4
 801788e:	20f2      	movs	r0, #242	@ 0xf2
 8017890:	f000 f94c 	bl	8017b2c <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017894:	78fb      	ldrb	r3, [r7, #3]
 8017896:	b29b      	uxth	r3, r3
 8017898:	00db      	lsls	r3, r3, #3
 801789a:	b29b      	uxth	r3, r3
 801789c:	3302      	adds	r3, #2
 801789e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80178a0:	89fb      	ldrh	r3, [r7, #14]
 80178a2:	0a1b      	lsrs	r3, r3, #8
 80178a4:	b29b      	uxth	r3, r3
 80178a6:	b2db      	uxtb	r3, r3
 80178a8:	4619      	mov	r1, r3
 80178aa:	20f4      	movs	r0, #244	@ 0xf4
 80178ac:	f000 f93e 	bl	8017b2c <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80178b0:	89fb      	ldrh	r3, [r7, #14]
 80178b2:	b2db      	uxtb	r3, r3
 80178b4:	4619      	mov	r1, r3
 80178b6:	20f5      	movs	r0, #245	@ 0xf5
 80178b8:	f000 f938 	bl	8017b2c <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80178bc:	78fb      	ldrb	r3, [r7, #3]
 80178be:	3301      	adds	r3, #1
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80178c6:	4619      	mov	r1, r3
 80178c8:	480c      	ldr	r0, [pc, #48]	@ (80178fc <RadioSend+0x1f8>)
 80178ca:	f001 f9b1 	bl	8018c30 <SUBGRF_SendPayload>
            break;
 80178ce:	e000      	b.n	80178d2 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80178d0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80178d2:	4b07      	ldr	r3, [pc, #28]	@ (80178f0 <RadioSend+0x1ec>)
 80178d4:	685b      	ldr	r3, [r3, #4]
 80178d6:	4619      	mov	r1, r3
 80178d8:	4809      	ldr	r0, [pc, #36]	@ (8017900 <RadioSend+0x1fc>)
 80178da:	f003 fa7b 	bl	801add4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80178de:	4808      	ldr	r0, [pc, #32]	@ (8017900 <RadioSend+0x1fc>)
 80178e0:	f003 f99a 	bl	801ac18 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80178e4:	2300      	movs	r3, #0
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	3710      	adds	r7, #16
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}
 80178ee:	bf00      	nop
 80178f0:	200014b8 	.word	0x200014b8
 80178f4:	200014c6 	.word	0x200014c6
 80178f8:	0801c404 	.word	0x0801c404
 80178fc:	200013b4 	.word	0x200013b4
 8017900:	20001514 	.word	0x20001514

08017904 <RadioSleep>:

static void RadioSleep( void )
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b082      	sub	sp, #8
 8017908:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801790a:	2300      	movs	r3, #0
 801790c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801790e:	793b      	ldrb	r3, [r7, #4]
 8017910:	f043 0304 	orr.w	r3, r3, #4
 8017914:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017916:	7938      	ldrb	r0, [r7, #4]
 8017918:	f001 fa66 	bl	8018de8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801791c:	2002      	movs	r0, #2
 801791e:	f7ea fbfb 	bl	8002118 <HAL_Delay>
}
 8017922:	bf00      	nop
 8017924:	3708      	adds	r7, #8
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}

0801792a <RadioStandby>:

static void RadioStandby( void )
{
 801792a:	b580      	push	{r7, lr}
 801792c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801792e:	2000      	movs	r0, #0
 8017930:	f001 fa8e 	bl	8018e50 <SUBGRF_SetStandby>
}
 8017934:	bf00      	nop
 8017936:	bd80      	pop	{r7, pc}

08017938 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8017940:	f002 fb11 	bl	8019f66 <RFW_Is_Init>
 8017944:	4603      	mov	r3, r0
 8017946:	2b01      	cmp	r3, #1
 8017948:	d102      	bne.n	8017950 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801794a:	f002 fb34 	bl	8019fb6 <RFW_ReceiveInit>
 801794e:	e007      	b.n	8017960 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017950:	2300      	movs	r3, #0
 8017952:	2200      	movs	r2, #0
 8017954:	f240 2162 	movw	r1, #610	@ 0x262
 8017958:	f240 2062 	movw	r0, #610	@ 0x262
 801795c:	f001 fc52 	bl	8019204 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d006      	beq.n	8017974 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017966:	6879      	ldr	r1, [r7, #4]
 8017968:	4811      	ldr	r0, [pc, #68]	@ (80179b0 <RadioRx+0x78>)
 801796a:	f003 fa33 	bl	801add4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801796e:	4810      	ldr	r0, [pc, #64]	@ (80179b0 <RadioRx+0x78>)
 8017970:	f003 f952 	bl	801ac18 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017974:	4b0f      	ldr	r3, [pc, #60]	@ (80179b4 <RadioRx+0x7c>)
 8017976:	2200      	movs	r2, #0
 8017978:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801797a:	4b0e      	ldr	r3, [pc, #56]	@ (80179b4 <RadioRx+0x7c>)
 801797c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017980:	2100      	movs	r1, #0
 8017982:	4618      	mov	r0, r3
 8017984:	f002 f8f6 	bl	8019b74 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017988:	4b0a      	ldr	r3, [pc, #40]	@ (80179b4 <RadioRx+0x7c>)
 801798a:	785b      	ldrb	r3, [r3, #1]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d004      	beq.n	801799a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017990:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017994:	f001 fa98 	bl	8018ec8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017998:	e005      	b.n	80179a6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801799a:	4b06      	ldr	r3, [pc, #24]	@ (80179b4 <RadioRx+0x7c>)
 801799c:	689b      	ldr	r3, [r3, #8]
 801799e:	019b      	lsls	r3, r3, #6
 80179a0:	4618      	mov	r0, r3
 80179a2:	f001 fa91 	bl	8018ec8 <SUBGRF_SetRx>
}
 80179a6:	bf00      	nop
 80179a8:	3708      	adds	r7, #8
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}
 80179ae:	bf00      	nop
 80179b0:	2000152c 	.word	0x2000152c
 80179b4:	200014b8 	.word	0x200014b8

080179b8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b082      	sub	sp, #8
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80179c0:	f002 fad1 	bl	8019f66 <RFW_Is_Init>
 80179c4:	4603      	mov	r3, r0
 80179c6:	2b01      	cmp	r3, #1
 80179c8:	d102      	bne.n	80179d0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80179ca:	f002 faf4 	bl	8019fb6 <RFW_ReceiveInit>
 80179ce:	e007      	b.n	80179e0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80179d0:	2300      	movs	r3, #0
 80179d2:	2200      	movs	r2, #0
 80179d4:	f240 2162 	movw	r1, #610	@ 0x262
 80179d8:	f240 2062 	movw	r0, #610	@ 0x262
 80179dc:	f001 fc12 	bl	8019204 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d006      	beq.n	80179f4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80179e6:	6879      	ldr	r1, [r7, #4]
 80179e8:	4811      	ldr	r0, [pc, #68]	@ (8017a30 <RadioRxBoosted+0x78>)
 80179ea:	f003 f9f3 	bl	801add4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80179ee:	4810      	ldr	r0, [pc, #64]	@ (8017a30 <RadioRxBoosted+0x78>)
 80179f0:	f003 f912 	bl	801ac18 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80179f4:	4b0f      	ldr	r3, [pc, #60]	@ (8017a34 <RadioRxBoosted+0x7c>)
 80179f6:	2200      	movs	r2, #0
 80179f8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80179fa:	4b0e      	ldr	r3, [pc, #56]	@ (8017a34 <RadioRxBoosted+0x7c>)
 80179fc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a00:	2100      	movs	r1, #0
 8017a02:	4618      	mov	r0, r3
 8017a04:	f002 f8b6 	bl	8019b74 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017a08:	4b0a      	ldr	r3, [pc, #40]	@ (8017a34 <RadioRxBoosted+0x7c>)
 8017a0a:	785b      	ldrb	r3, [r3, #1]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d004      	beq.n	8017a1a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017a10:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017a14:	f001 fa78 	bl	8018f08 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017a18:	e005      	b.n	8017a26 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017a1a:	4b06      	ldr	r3, [pc, #24]	@ (8017a34 <RadioRxBoosted+0x7c>)
 8017a1c:	689b      	ldr	r3, [r3, #8]
 8017a1e:	019b      	lsls	r3, r3, #6
 8017a20:	4618      	mov	r0, r3
 8017a22:	f001 fa71 	bl	8018f08 <SUBGRF_SetRxBoosted>
}
 8017a26:	bf00      	nop
 8017a28:	3708      	adds	r7, #8
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}
 8017a2e:	bf00      	nop
 8017a30:	2000152c 	.word	0x2000152c
 8017a34:	200014b8 	.word	0x200014b8

08017a38 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b082      	sub	sp, #8
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	005a      	lsls	r2, r3, #1
 8017a46:	683b      	ldr	r3, [r7, #0]
 8017a48:	4413      	add	r3, r2
 8017a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8017a7c <RadioSetRxDutyCycle+0x44>)
 8017a4c:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017a4e:	2300      	movs	r3, #0
 8017a50:	2200      	movs	r2, #0
 8017a52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017a56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017a5a:	f001 fbd3 	bl	8019204 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a5e:	4b07      	ldr	r3, [pc, #28]	@ (8017a7c <RadioSetRxDutyCycle+0x44>)
 8017a60:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a64:	2100      	movs	r1, #0
 8017a66:	4618      	mov	r0, r3
 8017a68:	f002 f884 	bl	8019b74 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017a6c:	6839      	ldr	r1, [r7, #0]
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f001 fa6e 	bl	8018f50 <SUBGRF_SetRxDutyCycle>
}
 8017a74:	bf00      	nop
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	200014b8 	.word	0x200014b8

08017a80 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a84:	4b09      	ldr	r3, [pc, #36]	@ (8017aac <RadioStartCad+0x2c>)
 8017a86:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a8a:	2100      	movs	r1, #0
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f002 f871 	bl	8019b74 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017a92:	2300      	movs	r3, #0
 8017a94:	2200      	movs	r2, #0
 8017a96:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017a9a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8017a9e:	f001 fbb1 	bl	8019204 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017aa2:	f001 fa81 	bl	8018fa8 <SUBGRF_SetCad>
}
 8017aa6:	bf00      	nop
 8017aa8:	bd80      	pop	{r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	200014b8 	.word	0x200014b8

08017ab0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017ab0:	b580      	push	{r7, lr}
 8017ab2:	b084      	sub	sp, #16
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
 8017ab8:	460b      	mov	r3, r1
 8017aba:	70fb      	strb	r3, [r7, #3]
 8017abc:	4613      	mov	r3, r2
 8017abe:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8017ac0:	883b      	ldrh	r3, [r7, #0]
 8017ac2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017ac6:	fb02 f303 	mul.w	r3, r2, r3
 8017aca:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f001 fbf5 	bl	80192bc <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f002 f874 	bl	8019bc4 <SUBGRF_SetRfTxPower>
 8017adc:	4603      	mov	r3, r0
 8017ade:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017ae0:	210e      	movs	r1, #14
 8017ae2:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017ae6:	f001 ff37 	bl	8019958 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017aea:	7afb      	ldrb	r3, [r7, #11]
 8017aec:	2101      	movs	r1, #1
 8017aee:	4618      	mov	r0, r3
 8017af0:	f002 f840 	bl	8019b74 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017af4:	f001 fa66 	bl	8018fc4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017af8:	68f9      	ldr	r1, [r7, #12]
 8017afa:	4805      	ldr	r0, [pc, #20]	@ (8017b10 <RadioSetTxContinuousWave+0x60>)
 8017afc:	f003 f96a 	bl	801add4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017b00:	4803      	ldr	r0, [pc, #12]	@ (8017b10 <RadioSetTxContinuousWave+0x60>)
 8017b02:	f003 f889 	bl	801ac18 <UTIL_TIMER_Start>
}
 8017b06:	bf00      	nop
 8017b08:	3710      	adds	r7, #16
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}
 8017b0e:	bf00      	nop
 8017b10:	20001514 	.word	0x20001514

08017b14 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017b1e:	f001 fe88 	bl	8019832 <SUBGRF_GetRssiInst>
 8017b22:	4603      	mov	r3, r0
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3708      	adds	r7, #8
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}

08017b2c <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b082      	sub	sp, #8
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	4603      	mov	r3, r0
 8017b34:	460a      	mov	r2, r1
 8017b36:	80fb      	strh	r3, [r7, #6]
 8017b38:	4613      	mov	r3, r2
 8017b3a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017b3c:	797a      	ldrb	r2, [r7, #5]
 8017b3e:	88fb      	ldrh	r3, [r7, #6]
 8017b40:	4611      	mov	r1, r2
 8017b42:	4618      	mov	r0, r3
 8017b44:	f001 ff08 	bl	8019958 <SUBGRF_WriteRegister>
}
 8017b48:	bf00      	nop
 8017b4a:	3708      	adds	r7, #8
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}

08017b50 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b082      	sub	sp, #8
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	4603      	mov	r3, r0
 8017b58:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017b5a:	88fb      	ldrh	r3, [r7, #6]
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f001 ff1d 	bl	801999c <SUBGRF_ReadRegister>
 8017b62:	4603      	mov	r3, r0
}
 8017b64:	4618      	mov	r0, r3
 8017b66:	3708      	adds	r7, #8
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	bd80      	pop	{r7, pc}

08017b6c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b082      	sub	sp, #8
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	4603      	mov	r3, r0
 8017b74:	6039      	str	r1, [r7, #0]
 8017b76:	80fb      	strh	r3, [r7, #6]
 8017b78:	4613      	mov	r3, r2
 8017b7a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017b7c:	797b      	ldrb	r3, [r7, #5]
 8017b7e:	b29a      	uxth	r2, r3
 8017b80:	88fb      	ldrh	r3, [r7, #6]
 8017b82:	6839      	ldr	r1, [r7, #0]
 8017b84:	4618      	mov	r0, r3
 8017b86:	f001 ff29 	bl	80199dc <SUBGRF_WriteRegisters>
}
 8017b8a:	bf00      	nop
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}

08017b92 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b92:	b580      	push	{r7, lr}
 8017b94:	b082      	sub	sp, #8
 8017b96:	af00      	add	r7, sp, #0
 8017b98:	4603      	mov	r3, r0
 8017b9a:	6039      	str	r1, [r7, #0]
 8017b9c:	80fb      	strh	r3, [r7, #6]
 8017b9e:	4613      	mov	r3, r2
 8017ba0:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017ba2:	797b      	ldrb	r3, [r7, #5]
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	88fb      	ldrh	r3, [r7, #6]
 8017ba8:	6839      	ldr	r1, [r7, #0]
 8017baa:	4618      	mov	r0, r3
 8017bac:	f001 ff38 	bl	8019a20 <SUBGRF_ReadRegisters>
}
 8017bb0:	bf00      	nop
 8017bb2:	3708      	adds	r7, #8
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	460a      	mov	r2, r1
 8017bc2:	71fb      	strb	r3, [r7, #7]
 8017bc4:	4613      	mov	r3, r2
 8017bc6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017bc8:	79fb      	ldrb	r3, [r7, #7]
 8017bca:	2b01      	cmp	r3, #1
 8017bcc:	d10a      	bne.n	8017be4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017bce:	4a0e      	ldr	r2, [pc, #56]	@ (8017c08 <RadioSetMaxPayloadLength+0x50>)
 8017bd0:	79bb      	ldrb	r3, [r7, #6]
 8017bd2:	7013      	strb	r3, [r2, #0]
 8017bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8017c08 <RadioSetMaxPayloadLength+0x50>)
 8017bd6:	781a      	ldrb	r2, [r3, #0]
 8017bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8017c0c <RadioSetMaxPayloadLength+0x54>)
 8017bda:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bdc:	480c      	ldr	r0, [pc, #48]	@ (8017c10 <RadioSetMaxPayloadLength+0x58>)
 8017bde:	f001 fd75 	bl	80196cc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017be2:	e00d      	b.n	8017c00 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017be4:	4b09      	ldr	r3, [pc, #36]	@ (8017c0c <RadioSetMaxPayloadLength+0x54>)
 8017be6:	7d5b      	ldrb	r3, [r3, #21]
 8017be8:	2b01      	cmp	r3, #1
 8017bea:	d109      	bne.n	8017c00 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017bec:	4a06      	ldr	r2, [pc, #24]	@ (8017c08 <RadioSetMaxPayloadLength+0x50>)
 8017bee:	79bb      	ldrb	r3, [r7, #6]
 8017bf0:	7013      	strb	r3, [r2, #0]
 8017bf2:	4b05      	ldr	r3, [pc, #20]	@ (8017c08 <RadioSetMaxPayloadLength+0x50>)
 8017bf4:	781a      	ldrb	r2, [r3, #0]
 8017bf6:	4b05      	ldr	r3, [pc, #20]	@ (8017c0c <RadioSetMaxPayloadLength+0x54>)
 8017bf8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bfa:	4805      	ldr	r0, [pc, #20]	@ (8017c10 <RadioSetMaxPayloadLength+0x58>)
 8017bfc:	f001 fd66 	bl	80196cc <SUBGRF_SetPacketParams>
}
 8017c00:	bf00      	nop
 8017c02:	3708      	adds	r7, #8
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}
 8017c08:	20000114 	.word	0x20000114
 8017c0c:	200014b8 	.word	0x200014b8
 8017c10:	200014c6 	.word	0x200014c6

08017c14 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b082      	sub	sp, #8
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017c1e:	4a13      	ldr	r2, [pc, #76]	@ (8017c6c <RadioSetPublicNetwork+0x58>)
 8017c20:	79fb      	ldrb	r3, [r7, #7]
 8017c22:	7313      	strb	r3, [r2, #12]
 8017c24:	4b11      	ldr	r3, [pc, #68]	@ (8017c6c <RadioSetPublicNetwork+0x58>)
 8017c26:	7b1a      	ldrb	r2, [r3, #12]
 8017c28:	4b10      	ldr	r3, [pc, #64]	@ (8017c6c <RadioSetPublicNetwork+0x58>)
 8017c2a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017c2c:	2001      	movs	r0, #1
 8017c2e:	f7ff f813 	bl	8016c58 <RadioSetModem>
    if( enable == true )
 8017c32:	79fb      	ldrb	r3, [r7, #7]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d00a      	beq.n	8017c4e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017c38:	2134      	movs	r1, #52	@ 0x34
 8017c3a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c3e:	f001 fe8b 	bl	8019958 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017c42:	2144      	movs	r1, #68	@ 0x44
 8017c44:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c48:	f001 fe86 	bl	8019958 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017c4c:	e009      	b.n	8017c62 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017c4e:	2114      	movs	r1, #20
 8017c50:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c54:	f001 fe80 	bl	8019958 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017c58:	2124      	movs	r1, #36	@ 0x24
 8017c5a:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c5e:	f001 fe7b 	bl	8019958 <SUBGRF_WriteRegister>
}
 8017c62:	bf00      	nop
 8017c64:	3708      	adds	r7, #8
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	200014b8 	.word	0x200014b8

08017c70 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017c74:	f001 ffda 	bl	8019c2c <SUBGRF_GetRadioWakeUpTime>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	3303      	adds	r3, #3
}
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017c88:	f000 f80e 	bl	8017ca8 <RadioOnTxTimeoutProcess>
}
 8017c8c:	bf00      	nop
 8017c8e:	3708      	adds	r7, #8
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}

08017c94 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b082      	sub	sp, #8
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017c9c:	f000 f818 	bl	8017cd0 <RadioOnRxTimeoutProcess>
}
 8017ca0:	bf00      	nop
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}

08017ca8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017cac:	4b07      	ldr	r3, [pc, #28]	@ (8017ccc <RadioOnTxTimeoutProcess+0x24>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d008      	beq.n	8017cc6 <RadioOnTxTimeoutProcess+0x1e>
 8017cb4:	4b05      	ldr	r3, [pc, #20]	@ (8017ccc <RadioOnTxTimeoutProcess+0x24>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	685b      	ldr	r3, [r3, #4]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d003      	beq.n	8017cc6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8017cbe:	4b03      	ldr	r3, [pc, #12]	@ (8017ccc <RadioOnTxTimeoutProcess+0x24>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	685b      	ldr	r3, [r3, #4]
 8017cc4:	4798      	blx	r3
    }
}
 8017cc6:	bf00      	nop
 8017cc8:	bd80      	pop	{r7, pc}
 8017cca:	bf00      	nop
 8017ccc:	200014b4 	.word	0x200014b4

08017cd0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017cd4:	4b07      	ldr	r3, [pc, #28]	@ (8017cf4 <RadioOnRxTimeoutProcess+0x24>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d008      	beq.n	8017cee <RadioOnRxTimeoutProcess+0x1e>
 8017cdc:	4b05      	ldr	r3, [pc, #20]	@ (8017cf4 <RadioOnRxTimeoutProcess+0x24>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	68db      	ldr	r3, [r3, #12]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d003      	beq.n	8017cee <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017ce6:	4b03      	ldr	r3, [pc, #12]	@ (8017cf4 <RadioOnRxTimeoutProcess+0x24>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	68db      	ldr	r3, [r3, #12]
 8017cec:	4798      	blx	r3
    }
}
 8017cee:	bf00      	nop
 8017cf0:	bd80      	pop	{r7, pc}
 8017cf2:	bf00      	nop
 8017cf4:	200014b4 	.word	0x200014b4

08017cf8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	4603      	mov	r3, r0
 8017d00:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017d02:	4a05      	ldr	r2, [pc, #20]	@ (8017d18 <RadioOnDioIrq+0x20>)
 8017d04:	88fb      	ldrh	r3, [r7, #6]
 8017d06:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8017d0a:	f000 f807 	bl	8017d1c <RadioIrqProcess>
}
 8017d0e:	bf00      	nop
 8017d10:	3708      	adds	r7, #8
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	bf00      	nop
 8017d18:	200014b8 	.word	0x200014b8

08017d1c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017d1c:	b5b0      	push	{r4, r5, r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017d22:	2300      	movs	r3, #0
 8017d24:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017d26:	2300      	movs	r3, #0
 8017d28:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017d2a:	4ba8      	ldr	r3, [pc, #672]	@ (8017fcc <RadioIrqProcess+0x2b0>)
 8017d2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8017d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d34:	f000 810d 	beq.w	8017f52 <RadioIrqProcess+0x236>
 8017d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d3c:	f300 81e8 	bgt.w	8018110 <RadioIrqProcess+0x3f4>
 8017d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d44:	f000 80f1 	beq.w	8017f2a <RadioIrqProcess+0x20e>
 8017d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d4c:	f300 81e0 	bgt.w	8018110 <RadioIrqProcess+0x3f4>
 8017d50:	2b80      	cmp	r3, #128	@ 0x80
 8017d52:	f000 80d6 	beq.w	8017f02 <RadioIrqProcess+0x1e6>
 8017d56:	2b80      	cmp	r3, #128	@ 0x80
 8017d58:	f300 81da 	bgt.w	8018110 <RadioIrqProcess+0x3f4>
 8017d5c:	2b20      	cmp	r3, #32
 8017d5e:	dc49      	bgt.n	8017df4 <RadioIrqProcess+0xd8>
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f340 81d5 	ble.w	8018110 <RadioIrqProcess+0x3f4>
 8017d66:	3b01      	subs	r3, #1
 8017d68:	2b1f      	cmp	r3, #31
 8017d6a:	f200 81d1 	bhi.w	8018110 <RadioIrqProcess+0x3f4>
 8017d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8017d74 <RadioIrqProcess+0x58>)
 8017d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d74:	08017dfd 	.word	0x08017dfd
 8017d78:	08017e37 	.word	0x08017e37
 8017d7c:	08018111 	.word	0x08018111
 8017d80:	08017fed 	.word	0x08017fed
 8017d84:	08018111 	.word	0x08018111
 8017d88:	08018111 	.word	0x08018111
 8017d8c:	08018111 	.word	0x08018111
 8017d90:	08018069 	.word	0x08018069
 8017d94:	08018111 	.word	0x08018111
 8017d98:	08018111 	.word	0x08018111
 8017d9c:	08018111 	.word	0x08018111
 8017da0:	08018111 	.word	0x08018111
 8017da4:	08018111 	.word	0x08018111
 8017da8:	08018111 	.word	0x08018111
 8017dac:	08018111 	.word	0x08018111
 8017db0:	08018085 	.word	0x08018085
 8017db4:	08018111 	.word	0x08018111
 8017db8:	08018111 	.word	0x08018111
 8017dbc:	08018111 	.word	0x08018111
 8017dc0:	08018111 	.word	0x08018111
 8017dc4:	08018111 	.word	0x08018111
 8017dc8:	08018111 	.word	0x08018111
 8017dcc:	08018111 	.word	0x08018111
 8017dd0:	08018111 	.word	0x08018111
 8017dd4:	08018111 	.word	0x08018111
 8017dd8:	08018111 	.word	0x08018111
 8017ddc:	08018111 	.word	0x08018111
 8017de0:	08018111 	.word	0x08018111
 8017de4:	08018111 	.word	0x08018111
 8017de8:	08018111 	.word	0x08018111
 8017dec:	08018111 	.word	0x08018111
 8017df0:	08018093 	.word	0x08018093
 8017df4:	2b40      	cmp	r3, #64	@ 0x40
 8017df6:	f000 816d 	beq.w	80180d4 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8017dfa:	e189      	b.n	8018110 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017dfc:	4874      	ldr	r0, [pc, #464]	@ (8017fd0 <RadioIrqProcess+0x2b4>)
 8017dfe:	f002 ff79 	bl	801acf4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017e02:	2000      	movs	r0, #0
 8017e04:	f001 f824 	bl	8018e50 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017e08:	f002 f8b4 	bl	8019f74 <RFW_Is_LongPacketModeEnabled>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	2b01      	cmp	r3, #1
 8017e10:	d101      	bne.n	8017e16 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017e12:	f002 f8d8 	bl	8019fc6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017e16:	4b6f      	ldr	r3, [pc, #444]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	f000 817a 	beq.w	8018114 <RadioIrqProcess+0x3f8>
 8017e20:	4b6c      	ldr	r3, [pc, #432]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	f000 8174 	beq.w	8018114 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017e2c:	4b69      	ldr	r3, [pc, #420]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	4798      	blx	r3
        break;
 8017e34:	e16e      	b.n	8018114 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017e36:	4868      	ldr	r0, [pc, #416]	@ (8017fd8 <RadioIrqProcess+0x2bc>)
 8017e38:	f002 ff5c 	bl	801acf4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017e3c:	4b63      	ldr	r3, [pc, #396]	@ (8017fcc <RadioIrqProcess+0x2b0>)
 8017e3e:	785b      	ldrb	r3, [r3, #1]
 8017e40:	f083 0301 	eor.w	r3, r3, #1
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d014      	beq.n	8017e74 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017e4a:	2000      	movs	r0, #0
 8017e4c:	f001 f800 	bl	8018e50 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017e50:	2100      	movs	r1, #0
 8017e52:	f640 1002 	movw	r0, #2306	@ 0x902
 8017e56:	f001 fd7f 	bl	8019958 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017e5a:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e5e:	f001 fd9d 	bl	801999c <SUBGRF_ReadRegister>
 8017e62:	4603      	mov	r3, r0
 8017e64:	f043 0302 	orr.w	r3, r3, #2
 8017e68:	b2db      	uxtb	r3, r3
 8017e6a:	4619      	mov	r1, r3
 8017e6c:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e70:	f001 fd72 	bl	8019958 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017e74:	1dfb      	adds	r3, r7, #7
 8017e76:	22ff      	movs	r2, #255	@ 0xff
 8017e78:	4619      	mov	r1, r3
 8017e7a:	4858      	ldr	r0, [pc, #352]	@ (8017fdc <RadioIrqProcess+0x2c0>)
 8017e7c:	f000 feb6 	bl	8018bec <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017e80:	4857      	ldr	r0, [pc, #348]	@ (8017fe0 <RadioIrqProcess+0x2c4>)
 8017e82:	f001 fd17 	bl	80198b4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017e86:	4b53      	ldr	r3, [pc, #332]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	f000 8144 	beq.w	8018118 <RadioIrqProcess+0x3fc>
 8017e90:	4b50      	ldr	r3, [pc, #320]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	689b      	ldr	r3, [r3, #8]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	f000 813e 	beq.w	8018118 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8017e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8017fcc <RadioIrqProcess+0x2b0>)
 8017e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8017ea2:	2b01      	cmp	r3, #1
 8017ea4:	d10e      	bne.n	8017ec4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8017ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017ea8:	681b      	ldr	r3, [r3, #0]
 8017eaa:	689c      	ldr	r4, [r3, #8]
 8017eac:	79fb      	ldrb	r3, [r7, #7]
 8017eae:	4619      	mov	r1, r3
 8017eb0:	4b46      	ldr	r3, [pc, #280]	@ (8017fcc <RadioIrqProcess+0x2b0>)
 8017eb2:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8017eb6:	461a      	mov	r2, r3
 8017eb8:	4b44      	ldr	r3, [pc, #272]	@ (8017fcc <RadioIrqProcess+0x2b0>)
 8017eba:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017ebe:	4847      	ldr	r0, [pc, #284]	@ (8017fdc <RadioIrqProcess+0x2c0>)
 8017ec0:	47a0      	blx	r4
                break;
 8017ec2:	e01d      	b.n	8017f00 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017ec4:	4b41      	ldr	r3, [pc, #260]	@ (8017fcc <RadioIrqProcess+0x2b0>)
 8017ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ec8:	463a      	mov	r2, r7
 8017eca:	4611      	mov	r1, r2
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f001 ff9f 	bl	8019e10 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8017ed2:	4b40      	ldr	r3, [pc, #256]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	689c      	ldr	r4, [r3, #8]
 8017ed8:	79fb      	ldrb	r3, [r7, #7]
 8017eda:	4619      	mov	r1, r3
 8017edc:	4b3b      	ldr	r3, [pc, #236]	@ (8017fcc <RadioIrqProcess+0x2b0>)
 8017ede:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	683b      	ldr	r3, [r7, #0]
 8017ee6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8017eea:	4a3e      	ldr	r2, [pc, #248]	@ (8017fe4 <RadioIrqProcess+0x2c8>)
 8017eec:	fb82 5203 	smull	r5, r2, r2, r3
 8017ef0:	1192      	asrs	r2, r2, #6
 8017ef2:	17db      	asrs	r3, r3, #31
 8017ef4:	1ad3      	subs	r3, r2, r3
 8017ef6:	b25b      	sxtb	r3, r3
 8017ef8:	4602      	mov	r2, r0
 8017efa:	4838      	ldr	r0, [pc, #224]	@ (8017fdc <RadioIrqProcess+0x2c0>)
 8017efc:	47a0      	blx	r4
                break;
 8017efe:	bf00      	nop
        break;
 8017f00:	e10a      	b.n	8018118 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017f02:	2000      	movs	r0, #0
 8017f04:	f000 ffa4 	bl	8018e50 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017f08:	4b32      	ldr	r3, [pc, #200]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	f000 8105 	beq.w	801811c <RadioIrqProcess+0x400>
 8017f12:	4b30      	ldr	r3, [pc, #192]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	699b      	ldr	r3, [r3, #24]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f000 80ff 	beq.w	801811c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8017f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	699b      	ldr	r3, [r3, #24]
 8017f24:	2000      	movs	r0, #0
 8017f26:	4798      	blx	r3
        break;
 8017f28:	e0f8      	b.n	801811c <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8017f2a:	2000      	movs	r0, #0
 8017f2c:	f000 ff90 	bl	8018e50 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017f30:	4b28      	ldr	r3, [pc, #160]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	f000 80f3 	beq.w	8018120 <RadioIrqProcess+0x404>
 8017f3a:	4b26      	ldr	r3, [pc, #152]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	699b      	ldr	r3, [r3, #24]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	f000 80ed 	beq.w	8018120 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8017f46:	4b23      	ldr	r3, [pc, #140]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	699b      	ldr	r3, [r3, #24]
 8017f4c:	2001      	movs	r0, #1
 8017f4e:	4798      	blx	r3
        break;
 8017f50:	e0e6      	b.n	8018120 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017f52:	4b25      	ldr	r3, [pc, #148]	@ (8017fe8 <RadioIrqProcess+0x2cc>)
 8017f54:	2201      	movs	r2, #1
 8017f56:	2100      	movs	r1, #0
 8017f58:	2002      	movs	r0, #2
 8017f5a:	f003 f8d5 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017f5e:	f000 fe2b 	bl	8018bb8 <SUBGRF_GetOperatingMode>
 8017f62:	4603      	mov	r3, r0
 8017f64:	2b04      	cmp	r3, #4
 8017f66:	d115      	bne.n	8017f94 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8017f68:	4819      	ldr	r0, [pc, #100]	@ (8017fd0 <RadioIrqProcess+0x2b4>)
 8017f6a:	f002 fec3 	bl	801acf4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017f6e:	2000      	movs	r0, #0
 8017f70:	f000 ff6e 	bl	8018e50 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017f74:	4b17      	ldr	r3, [pc, #92]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	f000 80d3 	beq.w	8018124 <RadioIrqProcess+0x408>
 8017f7e:	4b15      	ldr	r3, [pc, #84]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	f000 80cd 	beq.w	8018124 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8017f8a:	4b12      	ldr	r3, [pc, #72]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	685b      	ldr	r3, [r3, #4]
 8017f90:	4798      	blx	r3
        break;
 8017f92:	e0c7      	b.n	8018124 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017f94:	f000 fe10 	bl	8018bb8 <SUBGRF_GetOperatingMode>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	2b05      	cmp	r3, #5
 8017f9c:	f040 80c2 	bne.w	8018124 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8017fa0:	480d      	ldr	r0, [pc, #52]	@ (8017fd8 <RadioIrqProcess+0x2bc>)
 8017fa2:	f002 fea7 	bl	801acf4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017fa6:	2000      	movs	r0, #0
 8017fa8:	f000 ff52 	bl	8018e50 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017fac:	4b09      	ldr	r3, [pc, #36]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	f000 80b7 	beq.w	8018124 <RadioIrqProcess+0x408>
 8017fb6:	4b07      	ldr	r3, [pc, #28]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	f000 80b1 	beq.w	8018124 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8017fc2:	4b04      	ldr	r3, [pc, #16]	@ (8017fd4 <RadioIrqProcess+0x2b8>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	68db      	ldr	r3, [r3, #12]
 8017fc8:	4798      	blx	r3
        break;
 8017fca:	e0ab      	b.n	8018124 <RadioIrqProcess+0x408>
 8017fcc:	200014b8 	.word	0x200014b8
 8017fd0:	20001514 	.word	0x20001514
 8017fd4:	200014b4 	.word	0x200014b4
 8017fd8:	2000152c 	.word	0x2000152c
 8017fdc:	200013b4 	.word	0x200013b4
 8017fe0:	200014dc 	.word	0x200014dc
 8017fe4:	10624dd3 	.word	0x10624dd3
 8017fe8:	0801c41c 	.word	0x0801c41c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017fec:	4b54      	ldr	r3, [pc, #336]	@ (8018140 <RadioIrqProcess+0x424>)
 8017fee:	2201      	movs	r2, #1
 8017ff0:	2100      	movs	r1, #0
 8017ff2:	2002      	movs	r0, #2
 8017ff4:	f003 f888 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017ff8:	4b52      	ldr	r3, [pc, #328]	@ (8018144 <RadioIrqProcess+0x428>)
 8017ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	f000 8093 	beq.w	8018128 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018002:	4a51      	ldr	r2, [pc, #324]	@ (8018148 <RadioIrqProcess+0x42c>)
 8018004:	4b4f      	ldr	r3, [pc, #316]	@ (8018144 <RadioIrqProcess+0x428>)
 8018006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018008:	0c1b      	lsrs	r3, r3, #16
 801800a:	b2db      	uxtb	r3, r3
 801800c:	4619      	mov	r1, r3
 801800e:	f640 1003 	movw	r0, #2307	@ 0x903
 8018012:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018014:	4a4c      	ldr	r2, [pc, #304]	@ (8018148 <RadioIrqProcess+0x42c>)
 8018016:	4b4b      	ldr	r3, [pc, #300]	@ (8018144 <RadioIrqProcess+0x428>)
 8018018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801801a:	0a1b      	lsrs	r3, r3, #8
 801801c:	b2db      	uxtb	r3, r3
 801801e:	4619      	mov	r1, r3
 8018020:	f640 1004 	movw	r0, #2308	@ 0x904
 8018024:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8018026:	4a48      	ldr	r2, [pc, #288]	@ (8018148 <RadioIrqProcess+0x42c>)
 8018028:	4b46      	ldr	r3, [pc, #280]	@ (8018144 <RadioIrqProcess+0x428>)
 801802a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801802c:	b2db      	uxtb	r3, r3
 801802e:	4619      	mov	r1, r3
 8018030:	f640 1005 	movw	r0, #2309	@ 0x905
 8018034:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8018036:	4c44      	ldr	r4, [pc, #272]	@ (8018148 <RadioIrqProcess+0x42c>)
 8018038:	4b44      	ldr	r3, [pc, #272]	@ (801814c <RadioIrqProcess+0x430>)
 801803a:	f640 1002 	movw	r0, #2306	@ 0x902
 801803e:	4798      	blx	r3
 8018040:	4603      	mov	r3, r0
 8018042:	f043 0301 	orr.w	r3, r3, #1
 8018046:	b2db      	uxtb	r3, r3
 8018048:	4619      	mov	r1, r3
 801804a:	f640 1002 	movw	r0, #2306	@ 0x902
 801804e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8018050:	4b3c      	ldr	r3, [pc, #240]	@ (8018144 <RadioIrqProcess+0x428>)
 8018052:	2200      	movs	r2, #0
 8018054:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018056:	2300      	movs	r3, #0
 8018058:	2200      	movs	r2, #0
 801805a:	f240 2162 	movw	r1, #610	@ 0x262
 801805e:	f240 2062 	movw	r0, #610	@ 0x262
 8018062:	f001 f8cf 	bl	8019204 <SUBGRF_SetDioIrqParams>
        break;
 8018066:	e05f      	b.n	8018128 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018068:	4b39      	ldr	r3, [pc, #228]	@ (8018150 <RadioIrqProcess+0x434>)
 801806a:	2201      	movs	r2, #1
 801806c:	2100      	movs	r1, #0
 801806e:	2002      	movs	r0, #2
 8018070:	f003 f84a 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018074:	f001 ff77 	bl	8019f66 <RFW_Is_Init>
 8018078:	4603      	mov	r3, r0
 801807a:	2b01      	cmp	r3, #1
 801807c:	d156      	bne.n	801812c <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801807e:	f001 ffa8 	bl	8019fd2 <RFW_ReceivePayload>
        break;
 8018082:	e053      	b.n	801812c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018084:	4b33      	ldr	r3, [pc, #204]	@ (8018154 <RadioIrqProcess+0x438>)
 8018086:	2201      	movs	r2, #1
 8018088:	2100      	movs	r1, #0
 801808a:	2002      	movs	r0, #2
 801808c:	f003 f83c 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018090:	e051      	b.n	8018136 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018092:	4831      	ldr	r0, [pc, #196]	@ (8018158 <RadioIrqProcess+0x43c>)
 8018094:	f002 fe2e 	bl	801acf4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018098:	4b2a      	ldr	r3, [pc, #168]	@ (8018144 <RadioIrqProcess+0x428>)
 801809a:	785b      	ldrb	r3, [r3, #1]
 801809c:	f083 0301 	eor.w	r3, r3, #1
 80180a0:	b2db      	uxtb	r3, r3
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d002      	beq.n	80180ac <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80180a6:	2000      	movs	r0, #0
 80180a8:	f000 fed2 	bl	8018e50 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80180ac:	4b2b      	ldr	r3, [pc, #172]	@ (801815c <RadioIrqProcess+0x440>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d03d      	beq.n	8018130 <RadioIrqProcess+0x414>
 80180b4:	4b29      	ldr	r3, [pc, #164]	@ (801815c <RadioIrqProcess+0x440>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	68db      	ldr	r3, [r3, #12]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d038      	beq.n	8018130 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 80180be:	4b27      	ldr	r3, [pc, #156]	@ (801815c <RadioIrqProcess+0x440>)
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80180c6:	4b26      	ldr	r3, [pc, #152]	@ (8018160 <RadioIrqProcess+0x444>)
 80180c8:	2201      	movs	r2, #1
 80180ca:	2100      	movs	r1, #0
 80180cc:	2002      	movs	r0, #2
 80180ce:	f003 f81b 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80180d2:	e02d      	b.n	8018130 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80180d4:	4b23      	ldr	r3, [pc, #140]	@ (8018164 <RadioIrqProcess+0x448>)
 80180d6:	2201      	movs	r2, #1
 80180d8:	2100      	movs	r1, #0
 80180da:	2002      	movs	r0, #2
 80180dc:	f003 f814 	bl	801b108 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80180e0:	4b18      	ldr	r3, [pc, #96]	@ (8018144 <RadioIrqProcess+0x428>)
 80180e2:	785b      	ldrb	r3, [r3, #1]
 80180e4:	f083 0301 	eor.w	r3, r3, #1
 80180e8:	b2db      	uxtb	r3, r3
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d002      	beq.n	80180f4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80180ee:	2000      	movs	r0, #0
 80180f0:	f000 feae 	bl	8018e50 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80180f4:	4b19      	ldr	r3, [pc, #100]	@ (801815c <RadioIrqProcess+0x440>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d01b      	beq.n	8018134 <RadioIrqProcess+0x418>
 80180fc:	4b17      	ldr	r3, [pc, #92]	@ (801815c <RadioIrqProcess+0x440>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	691b      	ldr	r3, [r3, #16]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d016      	beq.n	8018134 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8018106:	4b15      	ldr	r3, [pc, #84]	@ (801815c <RadioIrqProcess+0x440>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	691b      	ldr	r3, [r3, #16]
 801810c:	4798      	blx	r3
        break;
 801810e:	e011      	b.n	8018134 <RadioIrqProcess+0x418>
        break;
 8018110:	bf00      	nop
 8018112:	e010      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 8018114:	bf00      	nop
 8018116:	e00e      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 8018118:	bf00      	nop
 801811a:	e00c      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 801811c:	bf00      	nop
 801811e:	e00a      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 8018120:	bf00      	nop
 8018122:	e008      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 8018124:	bf00      	nop
 8018126:	e006      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 8018128:	bf00      	nop
 801812a:	e004      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 801812c:	bf00      	nop
 801812e:	e002      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 8018130:	bf00      	nop
 8018132:	e000      	b.n	8018136 <RadioIrqProcess+0x41a>
        break;
 8018134:	bf00      	nop
    }
}
 8018136:	bf00      	nop
 8018138:	3708      	adds	r7, #8
 801813a:	46bd      	mov	sp, r7
 801813c:	bdb0      	pop	{r4, r5, r7, pc}
 801813e:	bf00      	nop
 8018140:	0801c430 	.word	0x0801c430
 8018144:	200014b8 	.word	0x200014b8
 8018148:	08017b2d 	.word	0x08017b2d
 801814c:	08017b51 	.word	0x08017b51
 8018150:	0801c43c 	.word	0x0801c43c
 8018154:	0801c448 	.word	0x0801c448
 8018158:	2000152c 	.word	0x2000152c
 801815c:	200014b4 	.word	0x200014b4
 8018160:	0801c454 	.word	0x0801c454
 8018164:	0801c460 	.word	0x0801c460

08018168 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018168:	b580      	push	{r7, lr}
 801816a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801816c:	4b09      	ldr	r3, [pc, #36]	@ (8018194 <RadioTxPrbs+0x2c>)
 801816e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018172:	2101      	movs	r1, #1
 8018174:	4618      	mov	r0, r3
 8018176:	f001 fcfd 	bl	8019b74 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801817a:	4b07      	ldr	r3, [pc, #28]	@ (8018198 <RadioTxPrbs+0x30>)
 801817c:	212d      	movs	r1, #45	@ 0x2d
 801817e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018182:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018184:	f000 ff27 	bl	8018fd6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018188:	4804      	ldr	r0, [pc, #16]	@ (801819c <RadioTxPrbs+0x34>)
 801818a:	f000 fe7d 	bl	8018e88 <SUBGRF_SetTx>
}
 801818e:	bf00      	nop
 8018190:	bd80      	pop	{r7, pc}
 8018192:	bf00      	nop
 8018194:	200014b8 	.word	0x200014b8
 8018198:	08017b2d 	.word	0x08017b2d
 801819c:	000fffff 	.word	0x000fffff

080181a0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b084      	sub	sp, #16
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	4603      	mov	r3, r0
 80181a8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80181aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80181ae:	4618      	mov	r0, r3
 80181b0:	f001 fd08 	bl	8019bc4 <SUBGRF_SetRfTxPower>
 80181b4:	4603      	mov	r3, r0
 80181b6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80181b8:	210e      	movs	r1, #14
 80181ba:	f640 101f 	movw	r0, #2335	@ 0x91f
 80181be:	f001 fbcb 	bl	8019958 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80181c2:	7bfb      	ldrb	r3, [r7, #15]
 80181c4:	2101      	movs	r1, #1
 80181c6:	4618      	mov	r0, r3
 80181c8:	f001 fcd4 	bl	8019b74 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80181cc:	f000 fefa 	bl	8018fc4 <SUBGRF_SetTxContinuousWave>
}
 80181d0:	bf00      	nop
 80181d2:	3710      	adds	r7, #16
 80181d4:	46bd      	mov	sp, r7
 80181d6:	bd80      	pop	{r7, pc}

080181d8 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80181d8:	b480      	push	{r7}
 80181da:	b089      	sub	sp, #36	@ 0x24
 80181dc:	af00      	add	r7, sp, #0
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	4613      	mov	r3, r2
 80181e4:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80181e6:	2300      	movs	r3, #0
 80181e8:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80181ee:	2300      	movs	r3, #0
 80181f0:	61bb      	str	r3, [r7, #24]
 80181f2:	e011      	b.n	8018218 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	68ba      	ldr	r2, [r7, #8]
 80181f8:	4413      	add	r3, r2
 80181fa:	781a      	ldrb	r2, [r3, #0]
 80181fc:	69bb      	ldr	r3, [r7, #24]
 80181fe:	68b9      	ldr	r1, [r7, #8]
 8018200:	440b      	add	r3, r1
 8018202:	43d2      	mvns	r2, r2
 8018204:	b2d2      	uxtb	r2, r2
 8018206:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8018208:	69bb      	ldr	r3, [r7, #24]
 801820a:	68fa      	ldr	r2, [r7, #12]
 801820c:	4413      	add	r3, r2
 801820e:	2200      	movs	r2, #0
 8018210:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	3301      	adds	r3, #1
 8018216:	61bb      	str	r3, [r7, #24]
 8018218:	79fb      	ldrb	r3, [r7, #7]
 801821a:	69ba      	ldr	r2, [r7, #24]
 801821c:	429a      	cmp	r2, r3
 801821e:	dbe9      	blt.n	80181f4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018220:	2300      	movs	r3, #0
 8018222:	61bb      	str	r3, [r7, #24]
 8018224:	e049      	b.n	80182ba <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8018226:	69bb      	ldr	r3, [r7, #24]
 8018228:	425a      	negs	r2, r3
 801822a:	f003 0307 	and.w	r3, r3, #7
 801822e:	f002 0207 	and.w	r2, r2, #7
 8018232:	bf58      	it	pl
 8018234:	4253      	negpl	r3, r2
 8018236:	b2db      	uxtb	r3, r3
 8018238:	f1c3 0307 	rsb	r3, r3, #7
 801823c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801823e:	69bb      	ldr	r3, [r7, #24]
 8018240:	2b00      	cmp	r3, #0
 8018242:	da00      	bge.n	8018246 <payload_integration+0x6e>
 8018244:	3307      	adds	r3, #7
 8018246:	10db      	asrs	r3, r3, #3
 8018248:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801824a:	69bb      	ldr	r3, [r7, #24]
 801824c:	3301      	adds	r3, #1
 801824e:	425a      	negs	r2, r3
 8018250:	f003 0307 	and.w	r3, r3, #7
 8018254:	f002 0207 	and.w	r2, r2, #7
 8018258:	bf58      	it	pl
 801825a:	4253      	negpl	r3, r2
 801825c:	b2db      	uxtb	r3, r3
 801825e:	f1c3 0307 	rsb	r3, r3, #7
 8018262:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018264:	69bb      	ldr	r3, [r7, #24]
 8018266:	3301      	adds	r3, #1
 8018268:	2b00      	cmp	r3, #0
 801826a:	da00      	bge.n	801826e <payload_integration+0x96>
 801826c:	3307      	adds	r3, #7
 801826e:	10db      	asrs	r3, r3, #3
 8018270:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018272:	7dbb      	ldrb	r3, [r7, #22]
 8018274:	68ba      	ldr	r2, [r7, #8]
 8018276:	4413      	add	r3, r2
 8018278:	781b      	ldrb	r3, [r3, #0]
 801827a:	461a      	mov	r2, r3
 801827c:	7dfb      	ldrb	r3, [r7, #23]
 801827e:	fa42 f303 	asr.w	r3, r2, r3
 8018282:	b2db      	uxtb	r3, r3
 8018284:	f003 0301 	and.w	r3, r3, #1
 8018288:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801828a:	7ffa      	ldrb	r2, [r7, #31]
 801828c:	7cfb      	ldrb	r3, [r7, #19]
 801828e:	4053      	eors	r3, r2
 8018290:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018292:	7d3b      	ldrb	r3, [r7, #20]
 8018294:	68fa      	ldr	r2, [r7, #12]
 8018296:	4413      	add	r3, r2
 8018298:	781b      	ldrb	r3, [r3, #0]
 801829a:	b25a      	sxtb	r2, r3
 801829c:	7ff9      	ldrb	r1, [r7, #31]
 801829e:	7d7b      	ldrb	r3, [r7, #21]
 80182a0:	fa01 f303 	lsl.w	r3, r1, r3
 80182a4:	b25b      	sxtb	r3, r3
 80182a6:	4313      	orrs	r3, r2
 80182a8:	b259      	sxtb	r1, r3
 80182aa:	7d3b      	ldrb	r3, [r7, #20]
 80182ac:	68fa      	ldr	r2, [r7, #12]
 80182ae:	4413      	add	r3, r2
 80182b0:	b2ca      	uxtb	r2, r1
 80182b2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80182b4:	69bb      	ldr	r3, [r7, #24]
 80182b6:	3301      	adds	r3, #1
 80182b8:	61bb      	str	r3, [r7, #24]
 80182ba:	79fb      	ldrb	r3, [r7, #7]
 80182bc:	00db      	lsls	r3, r3, #3
 80182be:	69ba      	ldr	r2, [r7, #24]
 80182c0:	429a      	cmp	r2, r3
 80182c2:	dbb0      	blt.n	8018226 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80182c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80182c8:	01db      	lsls	r3, r3, #7
 80182ca:	b25a      	sxtb	r2, r3
 80182cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80182d0:	019b      	lsls	r3, r3, #6
 80182d2:	b25b      	sxtb	r3, r3
 80182d4:	4313      	orrs	r3, r2
 80182d6:	b25b      	sxtb	r3, r3
 80182d8:	7ffa      	ldrb	r2, [r7, #31]
 80182da:	2a00      	cmp	r2, #0
 80182dc:	d101      	bne.n	80182e2 <payload_integration+0x10a>
 80182de:	2220      	movs	r2, #32
 80182e0:	e000      	b.n	80182e4 <payload_integration+0x10c>
 80182e2:	2200      	movs	r2, #0
 80182e4:	4313      	orrs	r3, r2
 80182e6:	b259      	sxtb	r1, r3
 80182e8:	79fb      	ldrb	r3, [r7, #7]
 80182ea:	68fa      	ldr	r2, [r7, #12]
 80182ec:	4413      	add	r3, r2
 80182ee:	b2ca      	uxtb	r2, r1
 80182f0:	701a      	strb	r2, [r3, #0]
}
 80182f2:	bf00      	nop
 80182f4:	3724      	adds	r7, #36	@ 0x24
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bc80      	pop	{r7}
 80182fa:	4770      	bx	lr

080182fc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b08c      	sub	sp, #48	@ 0x30
 8018300:	af00      	add	r7, sp, #0
 8018302:	60b9      	str	r1, [r7, #8]
 8018304:	607a      	str	r2, [r7, #4]
 8018306:	603b      	str	r3, [r7, #0]
 8018308:	4603      	mov	r3, r0
 801830a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801830c:	2300      	movs	r3, #0
 801830e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8018310:	f107 0320 	add.w	r3, r7, #32
 8018314:	2200      	movs	r2, #0
 8018316:	601a      	str	r2, [r3, #0]
 8018318:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801831a:	f001 fe1e 	bl	8019f5a <RFW_DeInit>

    if( rxContinuous != 0 )
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d001      	beq.n	8018328 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8018324:	2300      	movs	r3, #0
 8018326:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	2b00      	cmp	r3, #0
 801832c:	bf14      	ite	ne
 801832e:	2301      	movne	r3, #1
 8018330:	2300      	moveq	r3, #0
 8018332:	b2da      	uxtb	r2, r3
 8018334:	4ba3      	ldr	r3, [pc, #652]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018336:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018338:	7bfb      	ldrb	r3, [r7, #15]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d003      	beq.n	8018346 <RadioSetRxGenericConfig+0x4a>
 801833e:	2b01      	cmp	r3, #1
 8018340:	f000 80dc 	beq.w	80184fc <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8018344:	e195      	b.n	8018672 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	689b      	ldr	r3, [r3, #8]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d003      	beq.n	8018356 <RadioSetRxGenericConfig+0x5a>
 801834e:	68bb      	ldr	r3, [r7, #8]
 8018350:	68db      	ldr	r3, [r3, #12]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d102      	bne.n	801835c <RadioSetRxGenericConfig+0x60>
            return -1;
 8018356:	f04f 33ff 	mov.w	r3, #4294967295
 801835a:	e18b      	b.n	8018674 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	7f9b      	ldrb	r3, [r3, #30]
 8018360:	2b08      	cmp	r3, #8
 8018362:	d902      	bls.n	801836a <RadioSetRxGenericConfig+0x6e>
            return -1;
 8018364:	f04f 33ff 	mov.w	r3, #4294967295
 8018368:	e184      	b.n	8018674 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	6919      	ldr	r1, [r3, #16]
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	7f9b      	ldrb	r3, [r3, #30]
 8018372:	461a      	mov	r2, r3
 8018374:	f107 0320 	add.w	r3, r7, #32
 8018378:	4618      	mov	r0, r3
 801837a:	f001 fee1 	bl	801a140 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	2b00      	cmp	r3, #0
 8018384:	bf14      	ite	ne
 8018386:	2301      	movne	r3, #1
 8018388:	2300      	moveq	r3, #0
 801838a:	b2db      	uxtb	r3, r3
 801838c:	4618      	mov	r0, r3
 801838e:	f000 fe2b 	bl	8018fe8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018392:	4b8c      	ldr	r3, [pc, #560]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018394:	2200      	movs	r2, #0
 8018396:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	689b      	ldr	r3, [r3, #8]
 801839e:	4a89      	ldr	r2, [pc, #548]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80183a2:	68bb      	ldr	r3, [r7, #8]
 80183a4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80183a8:	4b86      	ldr	r3, [pc, #536]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80183ae:	68bb      	ldr	r3, [r7, #8]
 80183b0:	685b      	ldr	r3, [r3, #4]
 80183b2:	4618      	mov	r0, r3
 80183b4:	f001 fd04 	bl	8019dc0 <SUBGRF_GetFskBandwidthRegValue>
 80183b8:	4603      	mov	r3, r0
 80183ba:	461a      	mov	r2, r3
 80183bc:	4b81      	ldr	r3, [pc, #516]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80183c2:	4b80      	ldr	r3, [pc, #512]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183c4:	2200      	movs	r2, #0
 80183c6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	68db      	ldr	r3, [r3, #12]
 80183cc:	b29b      	uxth	r3, r3
 80183ce:	00db      	lsls	r3, r3, #3
 80183d0:	b29a      	uxth	r2, r3
 80183d2:	4b7c      	ldr	r3, [pc, #496]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183d4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	7fda      	ldrb	r2, [r3, #31]
 80183da:	4b7a      	ldr	r3, [pc, #488]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183dc:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	7f9b      	ldrb	r3, [r3, #30]
 80183e2:	00db      	lsls	r3, r3, #3
 80183e4:	b2da      	uxtb	r2, r3
 80183e6:	4b77      	ldr	r3, [pc, #476]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183e8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80183f0:	4b74      	ldr	r3, [pc, #464]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80183f2:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d105      	bne.n	801840a <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	695b      	ldr	r3, [r3, #20]
 8018402:	b2da      	uxtb	r2, r3
 8018404:	4b6f      	ldr	r3, [pc, #444]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018406:	759a      	strb	r2, [r3, #22]
 8018408:	e00b      	b.n	8018422 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018410:	2b02      	cmp	r3, #2
 8018412:	d103      	bne.n	801841c <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018414:	4b6b      	ldr	r3, [pc, #428]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018416:	22ff      	movs	r2, #255	@ 0xff
 8018418:	759a      	strb	r2, [r3, #22]
 801841a:	e002      	b.n	8018422 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801841c:	4b69      	ldr	r3, [pc, #420]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 801841e:	22ff      	movs	r2, #255	@ 0xff
 8018420:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018428:	2b02      	cmp	r3, #2
 801842a:	d004      	beq.n	8018436 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801842c:	68bb      	ldr	r3, [r7, #8]
 801842e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018432:	2b02      	cmp	r3, #2
 8018434:	d12d      	bne.n	8018492 <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801843c:	2bf1      	cmp	r3, #241	@ 0xf1
 801843e:	d00c      	beq.n	801845a <RadioSetRxGenericConfig+0x15e>
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018446:	2bf2      	cmp	r3, #242	@ 0xf2
 8018448:	d007      	beq.n	801845a <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018450:	2b01      	cmp	r3, #1
 8018452:	d002      	beq.n	801845a <RadioSetRxGenericConfig+0x15e>
                return -1;
 8018454:	f04f 33ff 	mov.w	r3, #4294967295
 8018458:	e10c      	b.n	8018674 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 801845a:	2300      	movs	r3, #0
 801845c:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801845e:	68bb      	ldr	r3, [r7, #8]
 8018460:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018462:	4b59      	ldr	r3, [pc, #356]	@ (80185c8 <RadioSetRxGenericConfig+0x2cc>)
 8018464:	6819      	ldr	r1, [r3, #0]
 8018466:	f107 0314 	add.w	r3, r7, #20
 801846a:	4a58      	ldr	r2, [pc, #352]	@ (80185cc <RadioSetRxGenericConfig+0x2d0>)
 801846c:	4618      	mov	r0, r3
 801846e:	f001 fd67 	bl	8019f40 <RFW_Init>
 8018472:	4603      	mov	r3, r0
 8018474:	2b00      	cmp	r3, #0
 8018476:	d002      	beq.n	801847e <RadioSetRxGenericConfig+0x182>
                return -1;
 8018478:	f04f 33ff 	mov.w	r3, #4294967295
 801847c:	e0fa      	b.n	8018674 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801847e:	4b51      	ldr	r3, [pc, #324]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018480:	2200      	movs	r2, #0
 8018482:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018484:	4b4f      	ldr	r3, [pc, #316]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018486:	2201      	movs	r2, #1
 8018488:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801848a:	4b4e      	ldr	r3, [pc, #312]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 801848c:	2200      	movs	r2, #0
 801848e:	755a      	strb	r2, [r3, #21]
        {
 8018490:	e00e      	b.n	80184b0 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018492:	68bb      	ldr	r3, [r7, #8]
 8018494:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018498:	4b4a      	ldr	r3, [pc, #296]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 801849a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80184a2:	4b48      	ldr	r3, [pc, #288]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80184a4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80184ac:	4b45      	ldr	r3, [pc, #276]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80184ae:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80184b0:	f7ff fa3b 	bl	801792a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80184b4:	2000      	movs	r0, #0
 80184b6:	f7fe fbcf 	bl	8016c58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80184ba:	4845      	ldr	r0, [pc, #276]	@ (80185d0 <RadioSetRxGenericConfig+0x2d4>)
 80184bc:	f001 f838 	bl	8019530 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80184c0:	4844      	ldr	r0, [pc, #272]	@ (80185d4 <RadioSetRxGenericConfig+0x2d8>)
 80184c2:	f001 f903 	bl	80196cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80184c6:	f107 0320 	add.w	r3, r7, #32
 80184ca:	4618      	mov	r0, r3
 80184cc:	f000 fbc3 	bl	8018c56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	8b9b      	ldrh	r3, [r3, #28]
 80184d4:	4618      	mov	r0, r3
 80184d6:	f000 fc0d 	bl	8018cf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	8b1b      	ldrh	r3, [r3, #24]
 80184de:	4618      	mov	r0, r3
 80184e0:	f000 fbe8 	bl	8018cb4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80184ea:	fb03 f202 	mul.w	r2, r3, r2
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	689b      	ldr	r3, [r3, #8]
 80184f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80184f6:	4a33      	ldr	r2, [pc, #204]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80184f8:	6093      	str	r3, [r2, #8]
        break;
 80184fa:	e0ba      	b.n	8018672 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 80184fc:	68bb      	ldr	r3, [r7, #8]
 80184fe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018500:	2b00      	cmp	r3, #0
 8018502:	d102      	bne.n	801850a <RadioSetRxGenericConfig+0x20e>
            return -1;
 8018504:	f04f 33ff 	mov.w	r3, #4294967295
 8018508:	e0b4      	b.n	8018674 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018510:	2b01      	cmp	r3, #1
 8018512:	d105      	bne.n	8018520 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801851a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801851e:	e002      	b.n	8018526 <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 8018520:	23ff      	movs	r3, #255	@ 0xff
 8018522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018526:	68bb      	ldr	r3, [r7, #8]
 8018528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801852a:	2b00      	cmp	r3, #0
 801852c:	bf14      	ite	ne
 801852e:	2301      	movne	r3, #1
 8018530:	2300      	moveq	r3, #0
 8018532:	b2db      	uxtb	r3, r3
 8018534:	4618      	mov	r0, r3
 8018536:	f000 fd57 	bl	8018fe8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801853a:	683b      	ldr	r3, [r7, #0]
 801853c:	b2db      	uxtb	r3, r3
 801853e:	4618      	mov	r0, r3
 8018540:	f000 fd61 	bl	8019006 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018544:	4b1f      	ldr	r3, [pc, #124]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018546:	2201      	movs	r2, #1
 8018548:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801854c:	68bb      	ldr	r3, [r7, #8]
 801854e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018552:	4b1c      	ldr	r3, [pc, #112]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801855e:	4b19      	ldr	r3, [pc, #100]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801856a:	4b16      	ldr	r3, [pc, #88]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 801856c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018576:	2b02      	cmp	r3, #2
 8018578:	d010      	beq.n	801859c <RadioSetRxGenericConfig+0x2a0>
 801857a:	2b02      	cmp	r3, #2
 801857c:	dc2c      	bgt.n	80185d8 <RadioSetRxGenericConfig+0x2dc>
 801857e:	2b00      	cmp	r3, #0
 8018580:	d002      	beq.n	8018588 <RadioSetRxGenericConfig+0x28c>
 8018582:	2b01      	cmp	r3, #1
 8018584:	d005      	beq.n	8018592 <RadioSetRxGenericConfig+0x296>
            break;
 8018586:	e027      	b.n	80185d8 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018588:	4b0e      	ldr	r3, [pc, #56]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 801858a:	2200      	movs	r2, #0
 801858c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018590:	e023      	b.n	80185da <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018592:	4b0c      	ldr	r3, [pc, #48]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 8018594:	2201      	movs	r2, #1
 8018596:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801859a:	e01e      	b.n	80185da <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801859c:	68bb      	ldr	r3, [r7, #8]
 801859e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80185a2:	2b0b      	cmp	r3, #11
 80185a4:	d004      	beq.n	80185b0 <RadioSetRxGenericConfig+0x2b4>
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80185ac:	2b0c      	cmp	r3, #12
 80185ae:	d104      	bne.n	80185ba <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80185b0:	4b04      	ldr	r3, [pc, #16]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80185b2:	2201      	movs	r2, #1
 80185b4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80185b8:	e00f      	b.n	80185da <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80185ba:	4b02      	ldr	r3, [pc, #8]	@ (80185c4 <RadioSetRxGenericConfig+0x2c8>)
 80185bc:	2200      	movs	r2, #0
 80185be:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80185c2:	e00a      	b.n	80185da <RadioSetRxGenericConfig+0x2de>
 80185c4:	200014b8 	.word	0x200014b8
 80185c8:	200014b4 	.word	0x200014b4
 80185cc:	2000152c 	.word	0x2000152c
 80185d0:	200014f0 	.word	0x200014f0
 80185d4:	200014c6 	.word	0x200014c6
            break;
 80185d8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80185da:	4b28      	ldr	r3, [pc, #160]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 80185dc:	2201      	movs	r2, #1
 80185de:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80185e0:	68bb      	ldr	r3, [r7, #8]
 80185e2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80185e4:	4b25      	ldr	r3, [pc, #148]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 80185e6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80185e8:	68bb      	ldr	r3, [r7, #8]
 80185ea:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80185ee:	4b23      	ldr	r3, [pc, #140]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 80185f0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80185f2:	4a22      	ldr	r2, [pc, #136]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 80185f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80185f8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80185fa:	68bb      	ldr	r3, [r7, #8]
 80185fc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018600:	4b1e      	ldr	r3, [pc, #120]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 8018602:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018606:	68bb      	ldr	r3, [r7, #8]
 8018608:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801860c:	4b1b      	ldr	r3, [pc, #108]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 801860e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018612:	f7ff f98a 	bl	801792a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018616:	2001      	movs	r0, #1
 8018618:	f7fe fb1e 	bl	8016c58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801861c:	4818      	ldr	r0, [pc, #96]	@ (8018680 <RadioSetRxGenericConfig+0x384>)
 801861e:	f000 ff87 	bl	8019530 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018622:	4818      	ldr	r0, [pc, #96]	@ (8018684 <RadioSetRxGenericConfig+0x388>)
 8018624:	f001 f852 	bl	80196cc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018628:	4b14      	ldr	r3, [pc, #80]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 801862a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801862e:	2b01      	cmp	r3, #1
 8018630:	d10d      	bne.n	801864e <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018632:	f240 7036 	movw	r0, #1846	@ 0x736
 8018636:	f001 f9b1 	bl	801999c <SUBGRF_ReadRegister>
 801863a:	4603      	mov	r3, r0
 801863c:	f023 0304 	bic.w	r3, r3, #4
 8018640:	b2db      	uxtb	r3, r3
 8018642:	4619      	mov	r1, r3
 8018644:	f240 7036 	movw	r0, #1846	@ 0x736
 8018648:	f001 f986 	bl	8019958 <SUBGRF_WriteRegister>
 801864c:	e00c      	b.n	8018668 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801864e:	f240 7036 	movw	r0, #1846	@ 0x736
 8018652:	f001 f9a3 	bl	801999c <SUBGRF_ReadRegister>
 8018656:	4603      	mov	r3, r0
 8018658:	f043 0304 	orr.w	r3, r3, #4
 801865c:	b2db      	uxtb	r3, r3
 801865e:	4619      	mov	r1, r3
 8018660:	f240 7036 	movw	r0, #1846	@ 0x736
 8018664:	f001 f978 	bl	8019958 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018668:	4b04      	ldr	r3, [pc, #16]	@ (801867c <RadioSetRxGenericConfig+0x380>)
 801866a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801866e:	609a      	str	r2, [r3, #8]
        break;
 8018670:	bf00      	nop
    }
    return status;
 8018672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018674:	4618      	mov	r0, r3
 8018676:	3730      	adds	r7, #48	@ 0x30
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}
 801867c:	200014b8 	.word	0x200014b8
 8018680:	200014f0 	.word	0x200014f0
 8018684:	200014c6 	.word	0x200014c6

08018688 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b08e      	sub	sp, #56	@ 0x38
 801868c:	af00      	add	r7, sp, #0
 801868e:	60b9      	str	r1, [r7, #8]
 8018690:	607b      	str	r3, [r7, #4]
 8018692:	4603      	mov	r3, r0
 8018694:	73fb      	strb	r3, [r7, #15]
 8018696:	4613      	mov	r3, r2
 8018698:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801869a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801869e:	2200      	movs	r2, #0
 80186a0:	601a      	str	r2, [r3, #0]
 80186a2:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80186a4:	f001 fc59 	bl	8019f5a <RFW_DeInit>
    switch( modem )
 80186a8:	7bfb      	ldrb	r3, [r7, #15]
 80186aa:	2b03      	cmp	r3, #3
 80186ac:	f200 8205 	bhi.w	8018aba <RadioSetTxGenericConfig+0x432>
 80186b0:	a201      	add	r2, pc, #4	@ (adr r2, 80186b8 <RadioSetTxGenericConfig+0x30>)
 80186b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b6:	bf00      	nop
 80186b8:	0801883d 	.word	0x0801883d
 80186bc:	08018985 	.word	0x08018985
 80186c0:	08018a7d 	.word	0x08018a7d
 80186c4:	080186c9 	.word	0x080186c9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80186c8:	68bb      	ldr	r3, [r7, #8]
 80186ca:	7c9b      	ldrb	r3, [r3, #18]
 80186cc:	2b08      	cmp	r3, #8
 80186ce:	d902      	bls.n	80186d6 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 80186d0:	f04f 33ff 	mov.w	r3, #4294967295
 80186d4:	e206      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	6899      	ldr	r1, [r3, #8]
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	7c9b      	ldrb	r3, [r3, #18]
 80186de:	461a      	mov	r2, r3
 80186e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80186e4:	4618      	mov	r0, r3
 80186e6:	f001 fd2b 	bl	801a140 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80186ea:	68bb      	ldr	r3, [r7, #8]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d102      	bne.n	80186f8 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 80186f2:	f04f 33ff 	mov.w	r3, #4294967295
 80186f6:	e1f5      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8018700:	4293      	cmp	r3, r2
 8018702:	d813      	bhi.n	801872c <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8018704:	2302      	movs	r3, #2
 8018706:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801870a:	4b99      	ldr	r3, [pc, #612]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801870c:	2203      	movs	r2, #3
 801870e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8018710:	4b97      	ldr	r3, [pc, #604]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018712:	2203      	movs	r2, #3
 8018714:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	4a94      	ldr	r2, [pc, #592]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801871e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018720:	68bb      	ldr	r3, [r7, #8]
 8018722:	7cda      	ldrb	r2, [r3, #19]
 8018724:	4b92      	ldr	r3, [pc, #584]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801872a:	e017      	b.n	801875c <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801872c:	2300      	movs	r3, #0
 801872e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018732:	4b8f      	ldr	r3, [pc, #572]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018734:	2200      	movs	r2, #0
 8018736:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018738:	4b8d      	ldr	r3, [pc, #564]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801873a:	2200      	movs	r2, #0
 801873c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	4a8a      	ldr	r2, [pc, #552]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018746:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	7cda      	ldrb	r2, [r3, #19]
 801874c:	4b88      	ldr	r3, [pc, #544]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801874e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	089b      	lsrs	r3, r3, #2
 8018758:	4a85      	ldr	r2, [pc, #532]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801875a:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801875c:	68bb      	ldr	r3, [r7, #8]
 801875e:	685b      	ldr	r3, [r3, #4]
 8018760:	b29b      	uxth	r3, r3
 8018762:	00db      	lsls	r3, r3, #3
 8018764:	b29a      	uxth	r2, r3
 8018766:	4b82      	ldr	r3, [pc, #520]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018768:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801876a:	4b81      	ldr	r3, [pc, #516]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801876c:	2204      	movs	r2, #4
 801876e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	7c9b      	ldrb	r3, [r3, #18]
 8018774:	00db      	lsls	r3, r3, #3
 8018776:	b2da      	uxtb	r2, r3
 8018778:	4b7d      	ldr	r3, [pc, #500]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801877a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801877c:	4b7c      	ldr	r3, [pc, #496]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801877e:	2200      	movs	r2, #0
 8018780:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018782:	68bb      	ldr	r3, [r7, #8]
 8018784:	7d9b      	ldrb	r3, [r3, #22]
 8018786:	2b02      	cmp	r3, #2
 8018788:	d003      	beq.n	8018792 <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	7d1b      	ldrb	r3, [r3, #20]
 801878e:	2b02      	cmp	r3, #2
 8018790:	d12b      	bne.n	80187ea <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	7d5b      	ldrb	r3, [r3, #21]
 8018796:	2bf1      	cmp	r3, #241	@ 0xf1
 8018798:	d00a      	beq.n	80187b0 <RadioSetTxGenericConfig+0x128>
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	7d5b      	ldrb	r3, [r3, #21]
 801879e:	2bf2      	cmp	r3, #242	@ 0xf2
 80187a0:	d006      	beq.n	80187b0 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	7d5b      	ldrb	r3, [r3, #21]
 80187a6:	2b01      	cmp	r3, #1
 80187a8:	d002      	beq.n	80187b0 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 80187aa:	f04f 33ff 	mov.w	r3, #4294967295
 80187ae:	e199      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80187b4:	2301      	movs	r3, #1
 80187b6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80187ba:	4b6e      	ldr	r3, [pc, #440]	@ (8018974 <RadioSetTxGenericConfig+0x2ec>)
 80187bc:	6819      	ldr	r1, [r3, #0]
 80187be:	f107 0320 	add.w	r3, r7, #32
 80187c2:	4a6d      	ldr	r2, [pc, #436]	@ (8018978 <RadioSetTxGenericConfig+0x2f0>)
 80187c4:	4618      	mov	r0, r3
 80187c6:	f001 fbbb 	bl	8019f40 <RFW_Init>
 80187ca:	4603      	mov	r3, r0
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d002      	beq.n	80187d6 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 80187d0:	f04f 33ff 	mov.w	r3, #4294967295
 80187d4:	e186      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80187d6:	4b66      	ldr	r3, [pc, #408]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80187d8:	2200      	movs	r2, #0
 80187da:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80187dc:	4b64      	ldr	r3, [pc, #400]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80187de:	2201      	movs	r2, #1
 80187e0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80187e2:	4b63      	ldr	r3, [pc, #396]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80187e4:	2200      	movs	r2, #0
 80187e6:	755a      	strb	r2, [r3, #21]
        {
 80187e8:	e00b      	b.n	8018802 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	7d5a      	ldrb	r2, [r3, #21]
 80187ee:	4b60      	ldr	r3, [pc, #384]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80187f0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80187f2:	68bb      	ldr	r3, [r7, #8]
 80187f4:	7d9a      	ldrb	r2, [r3, #22]
 80187f6:	4b5e      	ldr	r3, [pc, #376]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80187f8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	7d1a      	ldrb	r2, [r3, #20]
 80187fe:	4b5c      	ldr	r3, [pc, #368]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018800:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018802:	f7ff f892 	bl	801792a <RadioStandby>
        RadioSetModem( radio_modem );
 8018806:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801880a:	4618      	mov	r0, r3
 801880c:	f7fe fa24 	bl	8016c58 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018810:	485a      	ldr	r0, [pc, #360]	@ (801897c <RadioSetTxGenericConfig+0x2f4>)
 8018812:	f000 fe8d 	bl	8019530 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018816:	485a      	ldr	r0, [pc, #360]	@ (8018980 <RadioSetTxGenericConfig+0x2f8>)
 8018818:	f000 ff58 	bl	80196cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801881c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018820:	4618      	mov	r0, r3
 8018822:	f000 fa18 	bl	8018c56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8018826:	68bb      	ldr	r3, [r7, #8]
 8018828:	8a1b      	ldrh	r3, [r3, #16]
 801882a:	4618      	mov	r0, r3
 801882c:	f000 fa62 	bl	8018cf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	899b      	ldrh	r3, [r3, #12]
 8018834:	4618      	mov	r0, r3
 8018836:	f000 fa3d 	bl	8018cb4 <SUBGRF_SetCrcPolynomial>
        break;
 801883a:	e13f      	b.n	8018abc <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d102      	bne.n	801884a <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8018844:	f04f 33ff 	mov.w	r3, #4294967295
 8018848:	e14c      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 801884a:	68bb      	ldr	r3, [r7, #8]
 801884c:	7c9b      	ldrb	r3, [r3, #18]
 801884e:	2b08      	cmp	r3, #8
 8018850:	d902      	bls.n	8018858 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 8018852:	f04f 33ff 	mov.w	r3, #4294967295
 8018856:	e145      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	6899      	ldr	r1, [r3, #8]
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	7c9b      	ldrb	r3, [r3, #18]
 8018860:	461a      	mov	r2, r3
 8018862:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018866:	4618      	mov	r0, r3
 8018868:	f001 fc6a 	bl	801a140 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801886c:	4b40      	ldr	r3, [pc, #256]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801886e:	2200      	movs	r2, #0
 8018870:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018874:	68bb      	ldr	r3, [r7, #8]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	4a3d      	ldr	r2, [pc, #244]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801887a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	7cda      	ldrb	r2, [r3, #19]
 8018880:	4b3b      	ldr	r3, [pc, #236]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	699b      	ldr	r3, [r3, #24]
 801888a:	4a39      	ldr	r2, [pc, #228]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801888c:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801888e:	4b38      	ldr	r3, [pc, #224]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018890:	2200      	movs	r2, #0
 8018892:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	685b      	ldr	r3, [r3, #4]
 8018898:	b29b      	uxth	r3, r3
 801889a:	00db      	lsls	r3, r3, #3
 801889c:	b29a      	uxth	r2, r3
 801889e:	4b34      	ldr	r3, [pc, #208]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80188a0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80188a2:	4b33      	ldr	r3, [pc, #204]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80188a4:	2204      	movs	r2, #4
 80188a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	7c9b      	ldrb	r3, [r3, #18]
 80188ac:	00db      	lsls	r3, r3, #3
 80188ae:	b2da      	uxtb	r2, r3
 80188b0:	4b2f      	ldr	r3, [pc, #188]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80188b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80188b4:	4b2e      	ldr	r3, [pc, #184]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 80188b6:	2200      	movs	r2, #0
 80188b8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	7d9b      	ldrb	r3, [r3, #22]
 80188be:	2b02      	cmp	r3, #2
 80188c0:	d003      	beq.n	80188ca <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80188c2:	68bb      	ldr	r3, [r7, #8]
 80188c4:	7d1b      	ldrb	r3, [r3, #20]
 80188c6:	2b02      	cmp	r3, #2
 80188c8:	d12a      	bne.n	8018920 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80188ca:	68bb      	ldr	r3, [r7, #8]
 80188cc:	7d5b      	ldrb	r3, [r3, #21]
 80188ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80188d0:	d00a      	beq.n	80188e8 <RadioSetTxGenericConfig+0x260>
 80188d2:	68bb      	ldr	r3, [r7, #8]
 80188d4:	7d5b      	ldrb	r3, [r3, #21]
 80188d6:	2bf2      	cmp	r3, #242	@ 0xf2
 80188d8:	d006      	beq.n	80188e8 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	7d5b      	ldrb	r3, [r3, #21]
 80188de:	2b01      	cmp	r3, #1
 80188e0:	d002      	beq.n	80188e8 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 80188e2:	f04f 33ff 	mov.w	r3, #4294967295
 80188e6:	e0fd      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80188e8:	2301      	movs	r3, #1
 80188ea:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80188f0:	4b20      	ldr	r3, [pc, #128]	@ (8018974 <RadioSetTxGenericConfig+0x2ec>)
 80188f2:	6819      	ldr	r1, [r3, #0]
 80188f4:	f107 0314 	add.w	r3, r7, #20
 80188f8:	4a1f      	ldr	r2, [pc, #124]	@ (8018978 <RadioSetTxGenericConfig+0x2f0>)
 80188fa:	4618      	mov	r0, r3
 80188fc:	f001 fb20 	bl	8019f40 <RFW_Init>
 8018900:	4603      	mov	r3, r0
 8018902:	2b00      	cmp	r3, #0
 8018904:	d002      	beq.n	801890c <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 8018906:	f04f 33ff 	mov.w	r3, #4294967295
 801890a:	e0eb      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801890c:	4b18      	ldr	r3, [pc, #96]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801890e:	2200      	movs	r2, #0
 8018910:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018912:	4b17      	ldr	r3, [pc, #92]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018914:	2201      	movs	r2, #1
 8018916:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018918:	4b15      	ldr	r3, [pc, #84]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801891a:	2200      	movs	r2, #0
 801891c:	755a      	strb	r2, [r3, #21]
        {
 801891e:	e00b      	b.n	8018938 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018920:	68bb      	ldr	r3, [r7, #8]
 8018922:	7d5a      	ldrb	r2, [r3, #21]
 8018924:	4b12      	ldr	r3, [pc, #72]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018926:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018928:	68bb      	ldr	r3, [r7, #8]
 801892a:	7d9a      	ldrb	r2, [r3, #22]
 801892c:	4b10      	ldr	r3, [pc, #64]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 801892e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018930:	68bb      	ldr	r3, [r7, #8]
 8018932:	7d1a      	ldrb	r2, [r3, #20]
 8018934:	4b0e      	ldr	r3, [pc, #56]	@ (8018970 <RadioSetTxGenericConfig+0x2e8>)
 8018936:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8018938:	f7fe fff7 	bl	801792a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801893c:	2000      	movs	r0, #0
 801893e:	f7fe f98b 	bl	8016c58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018942:	480e      	ldr	r0, [pc, #56]	@ (801897c <RadioSetTxGenericConfig+0x2f4>)
 8018944:	f000 fdf4 	bl	8019530 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018948:	480d      	ldr	r0, [pc, #52]	@ (8018980 <RadioSetTxGenericConfig+0x2f8>)
 801894a:	f000 febf 	bl	80196cc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801894e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018952:	4618      	mov	r0, r3
 8018954:	f000 f97f 	bl	8018c56 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018958:	68bb      	ldr	r3, [r7, #8]
 801895a:	8a1b      	ldrh	r3, [r3, #16]
 801895c:	4618      	mov	r0, r3
 801895e:	f000 f9c9 	bl	8018cf4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018962:	68bb      	ldr	r3, [r7, #8]
 8018964:	899b      	ldrh	r3, [r3, #12]
 8018966:	4618      	mov	r0, r3
 8018968:	f000 f9a4 	bl	8018cb4 <SUBGRF_SetCrcPolynomial>
        break;
 801896c:	e0a6      	b.n	8018abc <RadioSetTxGenericConfig+0x434>
 801896e:	bf00      	nop
 8018970:	200014b8 	.word	0x200014b8
 8018974:	200014b4 	.word	0x200014b4
 8018978:	20001514 	.word	0x20001514
 801897c:	200014f0 	.word	0x200014f0
 8018980:	200014c6 	.word	0x200014c6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018984:	4b59      	ldr	r3, [pc, #356]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018986:	2201      	movs	r2, #1
 8018988:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	781a      	ldrb	r2, [r3, #0]
 8018990:	4b56      	ldr	r3, [pc, #344]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	785a      	ldrb	r2, [r3, #1]
 801899a:	4b54      	ldr	r3, [pc, #336]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 801899c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	789a      	ldrb	r2, [r3, #2]
 80189a4:	4b51      	ldr	r3, [pc, #324]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 80189a6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80189aa:	68bb      	ldr	r3, [r7, #8]
 80189ac:	78db      	ldrb	r3, [r3, #3]
 80189ae:	2b02      	cmp	r3, #2
 80189b0:	d010      	beq.n	80189d4 <RadioSetTxGenericConfig+0x34c>
 80189b2:	2b02      	cmp	r3, #2
 80189b4:	dc20      	bgt.n	80189f8 <RadioSetTxGenericConfig+0x370>
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d002      	beq.n	80189c0 <RadioSetTxGenericConfig+0x338>
 80189ba:	2b01      	cmp	r3, #1
 80189bc:	d005      	beq.n	80189ca <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80189be:	e01b      	b.n	80189f8 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80189c0:	4b4a      	ldr	r3, [pc, #296]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 80189c2:	2200      	movs	r2, #0
 80189c4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189c8:	e017      	b.n	80189fa <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80189ca:	4b48      	ldr	r3, [pc, #288]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 80189cc:	2201      	movs	r2, #1
 80189ce:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189d2:	e012      	b.n	80189fa <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	781b      	ldrb	r3, [r3, #0]
 80189d8:	2b0b      	cmp	r3, #11
 80189da:	d003      	beq.n	80189e4 <RadioSetTxGenericConfig+0x35c>
 80189dc:	68bb      	ldr	r3, [r7, #8]
 80189de:	781b      	ldrb	r3, [r3, #0]
 80189e0:	2b0c      	cmp	r3, #12
 80189e2:	d104      	bne.n	80189ee <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80189e4:	4b41      	ldr	r3, [pc, #260]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 80189e6:	2201      	movs	r2, #1
 80189e8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189ec:	e005      	b.n	80189fa <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80189ee:	4b3f      	ldr	r3, [pc, #252]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 80189f0:	2200      	movs	r2, #0
 80189f2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189f6:	e000      	b.n	80189fa <RadioSetTxGenericConfig+0x372>
            break;
 80189f8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80189fa:	4b3c      	ldr	r3, [pc, #240]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 80189fc:	2201      	movs	r2, #1
 80189fe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	889a      	ldrh	r2, [r3, #4]
 8018a04:	4b39      	ldr	r3, [pc, #228]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018a06:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	799a      	ldrb	r2, [r3, #6]
 8018a0c:	4b37      	ldr	r3, [pc, #220]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018a0e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018a10:	68bb      	ldr	r3, [r7, #8]
 8018a12:	79da      	ldrb	r2, [r3, #7]
 8018a14:	4b35      	ldr	r3, [pc, #212]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018a16:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	7a1a      	ldrb	r2, [r3, #8]
 8018a1e:	4b33      	ldr	r3, [pc, #204]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018a20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8018a24:	f7fe ff81 	bl	801792a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018a28:	2001      	movs	r0, #1
 8018a2a:	f7fe f915 	bl	8016c58 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a2e:	4830      	ldr	r0, [pc, #192]	@ (8018af0 <RadioSetTxGenericConfig+0x468>)
 8018a30:	f000 fd7e 	bl	8019530 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a34:	482f      	ldr	r0, [pc, #188]	@ (8018af4 <RadioSetTxGenericConfig+0x46c>)
 8018a36:	f000 fe49 	bl	80196cc <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018a40:	2b06      	cmp	r3, #6
 8018a42:	d10d      	bne.n	8018a60 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018a44:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a48:	f000 ffa8 	bl	801999c <SUBGRF_ReadRegister>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	f023 0304 	bic.w	r3, r3, #4
 8018a52:	b2db      	uxtb	r3, r3
 8018a54:	4619      	mov	r1, r3
 8018a56:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a5a:	f000 ff7d 	bl	8019958 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8018a5e:	e02d      	b.n	8018abc <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018a60:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a64:	f000 ff9a 	bl	801999c <SUBGRF_ReadRegister>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	f043 0304 	orr.w	r3, r3, #4
 8018a6e:	b2db      	uxtb	r3, r3
 8018a70:	4619      	mov	r1, r3
 8018a72:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a76:	f000 ff6f 	bl	8019958 <SUBGRF_WriteRegister>
        break;
 8018a7a:	e01f      	b.n	8018abc <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018a7c:	68bb      	ldr	r3, [r7, #8]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d004      	beq.n	8018a8e <RadioSetTxGenericConfig+0x406>
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018a8c:	d902      	bls.n	8018a94 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 8018a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8018a92:	e027      	b.n	8018ae4 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 8018a94:	2003      	movs	r0, #3
 8018a96:	f7fe f8df 	bl	8016c58 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018a9a:	4b14      	ldr	r3, [pc, #80]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018a9c:	2202      	movs	r2, #2
 8018a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018aa2:	68bb      	ldr	r3, [r7, #8]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	4a11      	ldr	r2, [pc, #68]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018aa8:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018aaa:	4b10      	ldr	r3, [pc, #64]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018aac:	2216      	movs	r2, #22
 8018aae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018ab2:	480f      	ldr	r0, [pc, #60]	@ (8018af0 <RadioSetTxGenericConfig+0x468>)
 8018ab4:	f000 fd3c 	bl	8019530 <SUBGRF_SetModulationParams>
        break;
 8018ab8:	e000      	b.n	8018abc <RadioSetTxGenericConfig+0x434>
    default:
        break;
 8018aba:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f001 f87f 	bl	8019bc4 <SUBGRF_SetRfTxPower>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	461a      	mov	r2, r3
 8018aca:	4b08      	ldr	r3, [pc, #32]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018acc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018ad0:	4b06      	ldr	r3, [pc, #24]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018ad2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f001 fa53 	bl	8019f82 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018adc:	4a03      	ldr	r2, [pc, #12]	@ (8018aec <RadioSetTxGenericConfig+0x464>)
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	6053      	str	r3, [r2, #4]
    return 0;
 8018ae2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3738      	adds	r7, #56	@ 0x38
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd80      	pop	{r7, pc}
 8018aec:	200014b8 	.word	0x200014b8
 8018af0:	200014f0 	.word	0x200014f0
 8018af4:	200014c6 	.word	0x200014c6

08018af8 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8018af8:	b480      	push	{r7}
 8018afa:	b085      	sub	sp, #20
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018b00:	2301      	movs	r3, #1
 8018b02:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8018b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b06:	4618      	mov	r0, r3
 8018b08:	3714      	adds	r7, #20
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	bc80      	pop	{r7}
 8018b0e:	4770      	bx	lr

08018b10 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8018b10:	b480      	push	{r7}
 8018b12:	b083      	sub	sp, #12
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
 8018b18:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018b1a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	370c      	adds	r7, #12
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bc80      	pop	{r7}
 8018b24:	4770      	bx	lr
	...

08018b28 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b084      	sub	sp, #16
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d002      	beq.n	8018b3c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018b36:	4a1d      	ldr	r2, [pc, #116]	@ (8018bac <SUBGRF_Init+0x84>)
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018b3c:	f7e8 fdc4 	bl	80016c8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018b40:	2002      	movs	r0, #2
 8018b42:	f001 f91b 	bl	8019d7c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018b46:	4b1a      	ldr	r3, [pc, #104]	@ (8018bb0 <SUBGRF_Init+0x88>)
 8018b48:	2200      	movs	r2, #0
 8018b4a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	f000 f97f 	bl	8018e50 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018b52:	f7f1 fc6c 	bl	800a42e <RBI_IsTCXO>
 8018b56:	4603      	mov	r3, r0
 8018b58:	2b01      	cmp	r3, #1
 8018b5a:	d10e      	bne.n	8018b7a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018b5c:	2140      	movs	r1, #64	@ 0x40
 8018b5e:	2001      	movs	r0, #1
 8018b60:	f000 fb8a 	bl	8019278 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018b64:	2100      	movs	r1, #0
 8018b66:	f640 1011 	movw	r0, #2321	@ 0x911
 8018b6a:	f000 fef5 	bl	8019958 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018b6e:	237f      	movs	r3, #127	@ 0x7f
 8018b70:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018b72:	7b38      	ldrb	r0, [r7, #12]
 8018b74:	f000 fa8d 	bl	8019092 <SUBGRF_Calibrate>
 8018b78:	e009      	b.n	8018b8e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b7a:	2120      	movs	r1, #32
 8018b7c:	f640 1011 	movw	r0, #2321	@ 0x911
 8018b80:	f000 feea 	bl	8019958 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b84:	2120      	movs	r1, #32
 8018b86:	f640 1012 	movw	r0, #2322	@ 0x912
 8018b8a:	f000 fee5 	bl	8019958 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018b8e:	210e      	movs	r1, #14
 8018b90:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018b94:	f000 fee0 	bl	8019958 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8018b98:	f7f1 fbb8 	bl	800a30c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018b9c:	4b05      	ldr	r3, [pc, #20]	@ (8018bb4 <SUBGRF_Init+0x8c>)
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	701a      	strb	r2, [r3, #0]
}
 8018ba2:	bf00      	nop
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	20001550 	.word	0x20001550
 8018bb0:	2000154c 	.word	0x2000154c
 8018bb4:	20001544 	.word	0x20001544

08018bb8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018bb8:	b480      	push	{r7}
 8018bba:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018bbc:	4b02      	ldr	r3, [pc, #8]	@ (8018bc8 <SUBGRF_GetOperatingMode+0x10>)
 8018bbe:	781b      	ldrb	r3, [r3, #0]
}
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bc80      	pop	{r7}
 8018bc6:	4770      	bx	lr
 8018bc8:	20001544 	.word	0x20001544

08018bcc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b082      	sub	sp, #8
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
 8018bd4:	460b      	mov	r3, r1
 8018bd6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018bd8:	78fb      	ldrb	r3, [r7, #3]
 8018bda:	461a      	mov	r2, r3
 8018bdc:	6879      	ldr	r1, [r7, #4]
 8018bde:	2000      	movs	r0, #0
 8018be0:	f000 ff40 	bl	8019a64 <SUBGRF_WriteBuffer>
}
 8018be4:	bf00      	nop
 8018be6:	3708      	adds	r7, #8
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}

08018bec <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b086      	sub	sp, #24
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	60f8      	str	r0, [r7, #12]
 8018bf4:	60b9      	str	r1, [r7, #8]
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018bfe:	f107 0317 	add.w	r3, r7, #23
 8018c02:	4619      	mov	r1, r3
 8018c04:	68b8      	ldr	r0, [r7, #8]
 8018c06:	f000 fe29 	bl	801985c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	781b      	ldrb	r3, [r3, #0]
 8018c0e:	79fa      	ldrb	r2, [r7, #7]
 8018c10:	429a      	cmp	r2, r3
 8018c12:	d201      	bcs.n	8018c18 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018c14:	2301      	movs	r3, #1
 8018c16:	e007      	b.n	8018c28 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018c18:	7df8      	ldrb	r0, [r7, #23]
 8018c1a:	68bb      	ldr	r3, [r7, #8]
 8018c1c:	781b      	ldrb	r3, [r3, #0]
 8018c1e:	461a      	mov	r2, r3
 8018c20:	68f9      	ldr	r1, [r7, #12]
 8018c22:	f000 ff41 	bl	8019aa8 <SUBGRF_ReadBuffer>

    return 0;
 8018c26:	2300      	movs	r3, #0
}
 8018c28:	4618      	mov	r0, r3
 8018c2a:	3718      	adds	r7, #24
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b084      	sub	sp, #16
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	60f8      	str	r0, [r7, #12]
 8018c38:	460b      	mov	r3, r1
 8018c3a:	607a      	str	r2, [r7, #4]
 8018c3c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018c3e:	7afb      	ldrb	r3, [r7, #11]
 8018c40:	4619      	mov	r1, r3
 8018c42:	68f8      	ldr	r0, [r7, #12]
 8018c44:	f7ff ffc2 	bl	8018bcc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	f000 f91d 	bl	8018e88 <SUBGRF_SetTx>
}
 8018c4e:	bf00      	nop
 8018c50:	3710      	adds	r7, #16
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bd80      	pop	{r7, pc}

08018c56 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018c56:	b580      	push	{r7, lr}
 8018c58:	b082      	sub	sp, #8
 8018c5a:	af00      	add	r7, sp, #0
 8018c5c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018c5e:	2208      	movs	r2, #8
 8018c60:	6879      	ldr	r1, [r7, #4]
 8018c62:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8018c66:	f000 feb9 	bl	80199dc <SUBGRF_WriteRegisters>
    return 0;
 8018c6a:	2300      	movs	r3, #0
}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3708      	adds	r7, #8
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}

08018c74 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b084      	sub	sp, #16
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018c7e:	88fb      	ldrh	r3, [r7, #6]
 8018c80:	0a1b      	lsrs	r3, r3, #8
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018c88:	88fb      	ldrh	r3, [r7, #6]
 8018c8a:	b2db      	uxtb	r3, r3
 8018c8c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018c8e:	f000 fb77 	bl	8019380 <SUBGRF_GetPacketType>
 8018c92:	4603      	mov	r3, r0
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d108      	bne.n	8018caa <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018c98:	f107 030c 	add.w	r3, r7, #12
 8018c9c:	2202      	movs	r2, #2
 8018c9e:	4619      	mov	r1, r3
 8018ca0:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018ca4:	f000 fe9a 	bl	80199dc <SUBGRF_WriteRegisters>
            break;
 8018ca8:	e000      	b.n	8018cac <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018caa:	bf00      	nop
    }
}
 8018cac:	bf00      	nop
 8018cae:	3710      	adds	r7, #16
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}

08018cb4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b084      	sub	sp, #16
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	4603      	mov	r3, r0
 8018cbc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018cbe:	88fb      	ldrh	r3, [r7, #6]
 8018cc0:	0a1b      	lsrs	r3, r3, #8
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	b2db      	uxtb	r3, r3
 8018cc6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018cc8:	88fb      	ldrh	r3, [r7, #6]
 8018cca:	b2db      	uxtb	r3, r3
 8018ccc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018cce:	f000 fb57 	bl	8019380 <SUBGRF_GetPacketType>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d108      	bne.n	8018cea <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018cd8:	f107 030c 	add.w	r3, r7, #12
 8018cdc:	2202      	movs	r2, #2
 8018cde:	4619      	mov	r1, r3
 8018ce0:	f240 60be 	movw	r0, #1726	@ 0x6be
 8018ce4:	f000 fe7a 	bl	80199dc <SUBGRF_WriteRegisters>
            break;
 8018ce8:	e000      	b.n	8018cec <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018cea:	bf00      	nop
    }
}
 8018cec:	bf00      	nop
 8018cee:	3710      	adds	r7, #16
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bd80      	pop	{r7, pc}

08018cf4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b084      	sub	sp, #16
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018cfe:	2300      	movs	r3, #0
 8018d00:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018d02:	f000 fb3d 	bl	8019380 <SUBGRF_GetPacketType>
 8018d06:	4603      	mov	r3, r0
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d121      	bne.n	8018d50 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018d0c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018d10:	f000 fe44 	bl	801999c <SUBGRF_ReadRegister>
 8018d14:	4603      	mov	r3, r0
 8018d16:	f023 0301 	bic.w	r3, r3, #1
 8018d1a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018d1c:	88fb      	ldrh	r3, [r7, #6]
 8018d1e:	0a1b      	lsrs	r3, r3, #8
 8018d20:	b29b      	uxth	r3, r3
 8018d22:	b25b      	sxtb	r3, r3
 8018d24:	f003 0301 	and.w	r3, r3, #1
 8018d28:	b25a      	sxtb	r2, r3
 8018d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d2e:	4313      	orrs	r3, r2
 8018d30:	b25b      	sxtb	r3, r3
 8018d32:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018d34:	7bfb      	ldrb	r3, [r7, #15]
 8018d36:	4619      	mov	r1, r3
 8018d38:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018d3c:	f000 fe0c 	bl	8019958 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018d40:	88fb      	ldrh	r3, [r7, #6]
 8018d42:	b2db      	uxtb	r3, r3
 8018d44:	4619      	mov	r1, r3
 8018d46:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8018d4a:	f000 fe05 	bl	8019958 <SUBGRF_WriteRegister>
            break;
 8018d4e:	e000      	b.n	8018d52 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018d50:	bf00      	nop
    }
}
 8018d52:	bf00      	nop
 8018d54:	3710      	adds	r7, #16
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}

08018d5a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018d5a:	b580      	push	{r7, lr}
 8018d5c:	b082      	sub	sp, #8
 8018d5e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018d60:	2300      	movs	r3, #0
 8018d62:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018d64:	2300      	movs	r3, #0
 8018d66:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018d68:	2300      	movs	r3, #0
 8018d6a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018d6c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d70:	f000 fe14 	bl	801999c <SUBGRF_ReadRegister>
 8018d74:	4603      	mov	r3, r0
 8018d76:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018d78:	79fb      	ldrb	r3, [r7, #7]
 8018d7a:	f023 0301 	bic.w	r3, r3, #1
 8018d7e:	b2db      	uxtb	r3, r3
 8018d80:	4619      	mov	r1, r3
 8018d82:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d86:	f000 fde7 	bl	8019958 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018d8a:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d8e:	f000 fe05 	bl	801999c <SUBGRF_ReadRegister>
 8018d92:	4603      	mov	r3, r0
 8018d94:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018d96:	79bb      	ldrb	r3, [r7, #6]
 8018d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018d9c:	b2db      	uxtb	r3, r3
 8018d9e:	4619      	mov	r1, r3
 8018da0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018da4:	f000 fdd8 	bl	8019958 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018da8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018dac:	f000 f88c 	bl	8018ec8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018db0:	463b      	mov	r3, r7
 8018db2:	2204      	movs	r2, #4
 8018db4:	4619      	mov	r1, r3
 8018db6:	f640 0019 	movw	r0, #2073	@ 0x819
 8018dba:	f000 fe31 	bl	8019a20 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018dbe:	2000      	movs	r0, #0
 8018dc0:	f000 f846 	bl	8018e50 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018dc4:	79fb      	ldrb	r3, [r7, #7]
 8018dc6:	4619      	mov	r1, r3
 8018dc8:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018dcc:	f000 fdc4 	bl	8019958 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018dd0:	79bb      	ldrb	r3, [r7, #6]
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018dd8:	f000 fdbe 	bl	8019958 <SUBGRF_WriteRegister>

    return number;
 8018ddc:	683b      	ldr	r3, [r7, #0]
}
 8018dde:	4618      	mov	r0, r3
 8018de0:	3708      	adds	r7, #8
 8018de2:	46bd      	mov	sp, r7
 8018de4:	bd80      	pop	{r7, pc}
	...

08018de8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b084      	sub	sp, #16
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018df0:	2000      	movs	r0, #0
 8018df2:	f7f1 fac1 	bl	800a378 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018df6:	2002      	movs	r0, #2
 8018df8:	f000 ffc0 	bl	8019d7c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018dfc:	793b      	ldrb	r3, [r7, #4]
 8018dfe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018e02:	b2db      	uxtb	r3, r3
 8018e04:	b25b      	sxtb	r3, r3
 8018e06:	009b      	lsls	r3, r3, #2
 8018e08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018e0a:	793b      	ldrb	r3, [r7, #4]
 8018e0c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018e10:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018e12:	b25b      	sxtb	r3, r3
 8018e14:	005b      	lsls	r3, r3, #1
 8018e16:	b25b      	sxtb	r3, r3
 8018e18:	4313      	orrs	r3, r2
 8018e1a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018e1c:	793b      	ldrb	r3, [r7, #4]
 8018e1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018e22:	b2db      	uxtb	r3, r3
 8018e24:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018e26:	4313      	orrs	r3, r2
 8018e28:	b25b      	sxtb	r3, r3
 8018e2a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018e2c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018e2e:	f107 030f 	add.w	r3, r7, #15
 8018e32:	2201      	movs	r2, #1
 8018e34:	4619      	mov	r1, r3
 8018e36:	2084      	movs	r0, #132	@ 0x84
 8018e38:	f000 fe58 	bl	8019aec <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018e3c:	4b03      	ldr	r3, [pc, #12]	@ (8018e4c <SUBGRF_SetSleep+0x64>)
 8018e3e:	2200      	movs	r2, #0
 8018e40:	701a      	strb	r2, [r3, #0]
}
 8018e42:	bf00      	nop
 8018e44:	3710      	adds	r7, #16
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	20001544 	.word	0x20001544

08018e50 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b082      	sub	sp, #8
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	4603      	mov	r3, r0
 8018e58:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018e5a:	1dfb      	adds	r3, r7, #7
 8018e5c:	2201      	movs	r2, #1
 8018e5e:	4619      	mov	r1, r3
 8018e60:	2080      	movs	r0, #128	@ 0x80
 8018e62:	f000 fe43 	bl	8019aec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018e66:	79fb      	ldrb	r3, [r7, #7]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d103      	bne.n	8018e74 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018e6c:	4b05      	ldr	r3, [pc, #20]	@ (8018e84 <SUBGRF_SetStandby+0x34>)
 8018e6e:	2201      	movs	r2, #1
 8018e70:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018e72:	e002      	b.n	8018e7a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018e74:	4b03      	ldr	r3, [pc, #12]	@ (8018e84 <SUBGRF_SetStandby+0x34>)
 8018e76:	2202      	movs	r2, #2
 8018e78:	701a      	strb	r2, [r3, #0]
}
 8018e7a:	bf00      	nop
 8018e7c:	3708      	adds	r7, #8
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
 8018e82:	bf00      	nop
 8018e84:	20001544 	.word	0x20001544

08018e88 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b084      	sub	sp, #16
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018e90:	4b0c      	ldr	r3, [pc, #48]	@ (8018ec4 <SUBGRF_SetTx+0x3c>)
 8018e92:	2204      	movs	r2, #4
 8018e94:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	0c1b      	lsrs	r3, r3, #16
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	0a1b      	lsrs	r3, r3, #8
 8018ea2:	b2db      	uxtb	r3, r3
 8018ea4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018eac:	f107 030c 	add.w	r3, r7, #12
 8018eb0:	2203      	movs	r2, #3
 8018eb2:	4619      	mov	r1, r3
 8018eb4:	2083      	movs	r0, #131	@ 0x83
 8018eb6:	f000 fe19 	bl	8019aec <SUBGRF_WriteCommand>
}
 8018eba:	bf00      	nop
 8018ebc:	3710      	adds	r7, #16
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
 8018ec2:	bf00      	nop
 8018ec4:	20001544 	.word	0x20001544

08018ec8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b084      	sub	sp, #16
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8018f04 <SUBGRF_SetRx+0x3c>)
 8018ed2:	2205      	movs	r2, #5
 8018ed4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	0c1b      	lsrs	r3, r3, #16
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	0a1b      	lsrs	r3, r3, #8
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018eec:	f107 030c 	add.w	r3, r7, #12
 8018ef0:	2203      	movs	r2, #3
 8018ef2:	4619      	mov	r1, r3
 8018ef4:	2082      	movs	r0, #130	@ 0x82
 8018ef6:	f000 fdf9 	bl	8019aec <SUBGRF_WriteCommand>
}
 8018efa:	bf00      	nop
 8018efc:	3710      	adds	r7, #16
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}
 8018f02:	bf00      	nop
 8018f04:	20001544 	.word	0x20001544

08018f08 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b084      	sub	sp, #16
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018f10:	4b0e      	ldr	r3, [pc, #56]	@ (8018f4c <SUBGRF_SetRxBoosted+0x44>)
 8018f12:	2205      	movs	r2, #5
 8018f14:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018f16:	2197      	movs	r1, #151	@ 0x97
 8018f18:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8018f1c:	f000 fd1c 	bl	8019958 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	0c1b      	lsrs	r3, r3, #16
 8018f24:	b2db      	uxtb	r3, r3
 8018f26:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	0a1b      	lsrs	r3, r3, #8
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018f36:	f107 030c 	add.w	r3, r7, #12
 8018f3a:	2203      	movs	r2, #3
 8018f3c:	4619      	mov	r1, r3
 8018f3e:	2082      	movs	r0, #130	@ 0x82
 8018f40:	f000 fdd4 	bl	8019aec <SUBGRF_WriteCommand>
}
 8018f44:	bf00      	nop
 8018f46:	3710      	adds	r7, #16
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	20001544 	.word	0x20001544

08018f50 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b084      	sub	sp, #16
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	0c1b      	lsrs	r3, r3, #16
 8018f5e:	b2db      	uxtb	r3, r3
 8018f60:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	0a1b      	lsrs	r3, r3, #8
 8018f66:	b2db      	uxtb	r3, r3
 8018f68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	b2db      	uxtb	r3, r3
 8018f6e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018f70:	683b      	ldr	r3, [r7, #0]
 8018f72:	0c1b      	lsrs	r3, r3, #16
 8018f74:	b2db      	uxtb	r3, r3
 8018f76:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018f78:	683b      	ldr	r3, [r7, #0]
 8018f7a:	0a1b      	lsrs	r3, r3, #8
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	b2db      	uxtb	r3, r3
 8018f84:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018f86:	f107 0308 	add.w	r3, r7, #8
 8018f8a:	2206      	movs	r2, #6
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	2094      	movs	r0, #148	@ 0x94
 8018f90:	f000 fdac 	bl	8019aec <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018f94:	4b03      	ldr	r3, [pc, #12]	@ (8018fa4 <SUBGRF_SetRxDutyCycle+0x54>)
 8018f96:	2206      	movs	r2, #6
 8018f98:	701a      	strb	r2, [r3, #0]
}
 8018f9a:	bf00      	nop
 8018f9c:	3710      	adds	r7, #16
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}
 8018fa2:	bf00      	nop
 8018fa4:	20001544 	.word	0x20001544

08018fa8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018fac:	2200      	movs	r2, #0
 8018fae:	2100      	movs	r1, #0
 8018fb0:	20c5      	movs	r0, #197	@ 0xc5
 8018fb2:	f000 fd9b 	bl	8019aec <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018fb6:	4b02      	ldr	r3, [pc, #8]	@ (8018fc0 <SUBGRF_SetCad+0x18>)
 8018fb8:	2207      	movs	r2, #7
 8018fba:	701a      	strb	r2, [r3, #0]
}
 8018fbc:	bf00      	nop
 8018fbe:	bd80      	pop	{r7, pc}
 8018fc0:	20001544 	.word	0x20001544

08018fc4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018fc8:	2200      	movs	r2, #0
 8018fca:	2100      	movs	r1, #0
 8018fcc:	20d1      	movs	r0, #209	@ 0xd1
 8018fce:	f000 fd8d 	bl	8019aec <SUBGRF_WriteCommand>
}
 8018fd2:	bf00      	nop
 8018fd4:	bd80      	pop	{r7, pc}

08018fd6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018fd6:	b580      	push	{r7, lr}
 8018fd8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018fda:	2200      	movs	r2, #0
 8018fdc:	2100      	movs	r1, #0
 8018fde:	20d2      	movs	r0, #210	@ 0xd2
 8018fe0:	f000 fd84 	bl	8019aec <SUBGRF_WriteCommand>
}
 8018fe4:	bf00      	nop
 8018fe6:	bd80      	pop	{r7, pc}

08018fe8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	4603      	mov	r3, r0
 8018ff0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018ff2:	1dfb      	adds	r3, r7, #7
 8018ff4:	2201      	movs	r2, #1
 8018ff6:	4619      	mov	r1, r3
 8018ff8:	209f      	movs	r0, #159	@ 0x9f
 8018ffa:	f000 fd77 	bl	8019aec <SUBGRF_WriteCommand>
}
 8018ffe:	bf00      	nop
 8019000:	3708      	adds	r7, #8
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}

08019006 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019006:	b580      	push	{r7, lr}
 8019008:	b084      	sub	sp, #16
 801900a:	af00      	add	r7, sp, #0
 801900c:	4603      	mov	r3, r0
 801900e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019010:	1dfb      	adds	r3, r7, #7
 8019012:	2201      	movs	r2, #1
 8019014:	4619      	mov	r1, r3
 8019016:	20a0      	movs	r0, #160	@ 0xa0
 8019018:	f000 fd68 	bl	8019aec <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801901c:	79fb      	ldrb	r3, [r7, #7]
 801901e:	2b3f      	cmp	r3, #63	@ 0x3f
 8019020:	d91c      	bls.n	801905c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019022:	79fb      	ldrb	r3, [r7, #7]
 8019024:	085b      	lsrs	r3, r3, #1
 8019026:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019028:	2300      	movs	r3, #0
 801902a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801902c:	2300      	movs	r3, #0
 801902e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019030:	e005      	b.n	801903e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019032:	7bfb      	ldrb	r3, [r7, #15]
 8019034:	089b      	lsrs	r3, r3, #2
 8019036:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019038:	7bbb      	ldrb	r3, [r7, #14]
 801903a:	3301      	adds	r3, #1
 801903c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801903e:	7bfb      	ldrb	r3, [r7, #15]
 8019040:	2b1f      	cmp	r3, #31
 8019042:	d8f6      	bhi.n	8019032 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019044:	7bfb      	ldrb	r3, [r7, #15]
 8019046:	00db      	lsls	r3, r3, #3
 8019048:	b2da      	uxtb	r2, r3
 801904a:	7bbb      	ldrb	r3, [r7, #14]
 801904c:	4413      	add	r3, r2
 801904e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019050:	7b7b      	ldrb	r3, [r7, #13]
 8019052:	4619      	mov	r1, r3
 8019054:	f240 7006 	movw	r0, #1798	@ 0x706
 8019058:	f000 fc7e 	bl	8019958 <SUBGRF_WriteRegister>
    }
}
 801905c:	bf00      	nop
 801905e:	3710      	adds	r7, #16
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}

08019064 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b082      	sub	sp, #8
 8019068:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801906a:	f7f1 f9eb 	bl	800a444 <RBI_IsDCDC>
 801906e:	4603      	mov	r3, r0
 8019070:	2b01      	cmp	r3, #1
 8019072:	d102      	bne.n	801907a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019074:	2301      	movs	r3, #1
 8019076:	71fb      	strb	r3, [r7, #7]
 8019078:	e001      	b.n	801907e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801907a:	2300      	movs	r3, #0
 801907c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801907e:	1dfb      	adds	r3, r7, #7
 8019080:	2201      	movs	r2, #1
 8019082:	4619      	mov	r1, r3
 8019084:	2096      	movs	r0, #150	@ 0x96
 8019086:	f000 fd31 	bl	8019aec <SUBGRF_WriteCommand>
}
 801908a:	bf00      	nop
 801908c:	3708      	adds	r7, #8
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}

08019092 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019092:	b580      	push	{r7, lr}
 8019094:	b084      	sub	sp, #16
 8019096:	af00      	add	r7, sp, #0
 8019098:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801909a:	793b      	ldrb	r3, [r7, #4]
 801909c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80190a0:	b2db      	uxtb	r3, r3
 80190a2:	b25b      	sxtb	r3, r3
 80190a4:	019b      	lsls	r3, r3, #6
 80190a6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80190a8:	793b      	ldrb	r3, [r7, #4]
 80190aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80190ae:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80190b0:	b25b      	sxtb	r3, r3
 80190b2:	015b      	lsls	r3, r3, #5
 80190b4:	b25b      	sxtb	r3, r3
 80190b6:	4313      	orrs	r3, r2
 80190b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80190ba:	793b      	ldrb	r3, [r7, #4]
 80190bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80190c0:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80190c2:	b25b      	sxtb	r3, r3
 80190c4:	011b      	lsls	r3, r3, #4
 80190c6:	b25b      	sxtb	r3, r3
 80190c8:	4313      	orrs	r3, r2
 80190ca:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80190cc:	793b      	ldrb	r3, [r7, #4]
 80190ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80190d2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80190d4:	b25b      	sxtb	r3, r3
 80190d6:	00db      	lsls	r3, r3, #3
 80190d8:	b25b      	sxtb	r3, r3
 80190da:	4313      	orrs	r3, r2
 80190dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80190de:	793b      	ldrb	r3, [r7, #4]
 80190e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80190e4:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80190e6:	b25b      	sxtb	r3, r3
 80190e8:	009b      	lsls	r3, r3, #2
 80190ea:	b25b      	sxtb	r3, r3
 80190ec:	4313      	orrs	r3, r2
 80190ee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80190f0:	793b      	ldrb	r3, [r7, #4]
 80190f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80190f6:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80190f8:	b25b      	sxtb	r3, r3
 80190fa:	005b      	lsls	r3, r3, #1
 80190fc:	b25b      	sxtb	r3, r3
 80190fe:	4313      	orrs	r3, r2
 8019100:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019102:	793b      	ldrb	r3, [r7, #4]
 8019104:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019108:	b2db      	uxtb	r3, r3
 801910a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801910c:	4313      	orrs	r3, r2
 801910e:	b25b      	sxtb	r3, r3
 8019110:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019112:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019114:	f107 030f 	add.w	r3, r7, #15
 8019118:	2201      	movs	r2, #1
 801911a:	4619      	mov	r1, r3
 801911c:	2089      	movs	r0, #137	@ 0x89
 801911e:	f000 fce5 	bl	8019aec <SUBGRF_WriteCommand>
}
 8019122:	bf00      	nop
 8019124:	3710      	adds	r7, #16
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}
	...

0801912c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	4a1d      	ldr	r2, [pc, #116]	@ (80191ac <SUBGRF_CalibrateImage+0x80>)
 8019138:	4293      	cmp	r3, r2
 801913a:	d904      	bls.n	8019146 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801913c:	23e1      	movs	r3, #225	@ 0xe1
 801913e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019140:	23e9      	movs	r3, #233	@ 0xe9
 8019142:	737b      	strb	r3, [r7, #13]
 8019144:	e027      	b.n	8019196 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	4a19      	ldr	r2, [pc, #100]	@ (80191b0 <SUBGRF_CalibrateImage+0x84>)
 801914a:	4293      	cmp	r3, r2
 801914c:	d904      	bls.n	8019158 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801914e:	23d7      	movs	r3, #215	@ 0xd7
 8019150:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019152:	23db      	movs	r3, #219	@ 0xdb
 8019154:	737b      	strb	r3, [r7, #13]
 8019156:	e01e      	b.n	8019196 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	4a16      	ldr	r2, [pc, #88]	@ (80191b4 <SUBGRF_CalibrateImage+0x88>)
 801915c:	4293      	cmp	r3, r2
 801915e:	d904      	bls.n	801916a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8019160:	23c1      	movs	r3, #193	@ 0xc1
 8019162:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019164:	23c5      	movs	r3, #197	@ 0xc5
 8019166:	737b      	strb	r3, [r7, #13]
 8019168:	e015      	b.n	8019196 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	4a12      	ldr	r2, [pc, #72]	@ (80191b8 <SUBGRF_CalibrateImage+0x8c>)
 801916e:	4293      	cmp	r3, r2
 8019170:	d904      	bls.n	801917c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8019172:	2375      	movs	r3, #117	@ 0x75
 8019174:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019176:	2381      	movs	r3, #129	@ 0x81
 8019178:	737b      	strb	r3, [r7, #13]
 801917a:	e00c      	b.n	8019196 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	4a0f      	ldr	r2, [pc, #60]	@ (80191bc <SUBGRF_CalibrateImage+0x90>)
 8019180:	4293      	cmp	r3, r2
 8019182:	d904      	bls.n	801918e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8019184:	236b      	movs	r3, #107	@ 0x6b
 8019186:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019188:	236f      	movs	r3, #111	@ 0x6f
 801918a:	737b      	strb	r3, [r7, #13]
 801918c:	e003      	b.n	8019196 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801918e:	2329      	movs	r3, #41	@ 0x29
 8019190:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8019192:	232b      	movs	r3, #43	@ 0x2b
 8019194:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019196:	f107 030c 	add.w	r3, r7, #12
 801919a:	2202      	movs	r2, #2
 801919c:	4619      	mov	r1, r3
 801919e:	2098      	movs	r0, #152	@ 0x98
 80191a0:	f000 fca4 	bl	8019aec <SUBGRF_WriteCommand>
}
 80191a4:	bf00      	nop
 80191a6:	3710      	adds	r7, #16
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}
 80191ac:	35a4e900 	.word	0x35a4e900
 80191b0:	32a9f880 	.word	0x32a9f880
 80191b4:	2de54480 	.word	0x2de54480
 80191b8:	1b6b0b00 	.word	0x1b6b0b00
 80191bc:	1954fc40 	.word	0x1954fc40

080191c0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80191c0:	b590      	push	{r4, r7, lr}
 80191c2:	b085      	sub	sp, #20
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	4604      	mov	r4, r0
 80191c8:	4608      	mov	r0, r1
 80191ca:	4611      	mov	r1, r2
 80191cc:	461a      	mov	r2, r3
 80191ce:	4623      	mov	r3, r4
 80191d0:	71fb      	strb	r3, [r7, #7]
 80191d2:	4603      	mov	r3, r0
 80191d4:	71bb      	strb	r3, [r7, #6]
 80191d6:	460b      	mov	r3, r1
 80191d8:	717b      	strb	r3, [r7, #5]
 80191da:	4613      	mov	r3, r2
 80191dc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80191de:	79fb      	ldrb	r3, [r7, #7]
 80191e0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80191e2:	79bb      	ldrb	r3, [r7, #6]
 80191e4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80191e6:	797b      	ldrb	r3, [r7, #5]
 80191e8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80191ea:	793b      	ldrb	r3, [r7, #4]
 80191ec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80191ee:	f107 030c 	add.w	r3, r7, #12
 80191f2:	2204      	movs	r2, #4
 80191f4:	4619      	mov	r1, r3
 80191f6:	2095      	movs	r0, #149	@ 0x95
 80191f8:	f000 fc78 	bl	8019aec <SUBGRF_WriteCommand>
}
 80191fc:	bf00      	nop
 80191fe:	3714      	adds	r7, #20
 8019200:	46bd      	mov	sp, r7
 8019202:	bd90      	pop	{r4, r7, pc}

08019204 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019204:	b590      	push	{r4, r7, lr}
 8019206:	b085      	sub	sp, #20
 8019208:	af00      	add	r7, sp, #0
 801920a:	4604      	mov	r4, r0
 801920c:	4608      	mov	r0, r1
 801920e:	4611      	mov	r1, r2
 8019210:	461a      	mov	r2, r3
 8019212:	4623      	mov	r3, r4
 8019214:	80fb      	strh	r3, [r7, #6]
 8019216:	4603      	mov	r3, r0
 8019218:	80bb      	strh	r3, [r7, #4]
 801921a:	460b      	mov	r3, r1
 801921c:	807b      	strh	r3, [r7, #2]
 801921e:	4613      	mov	r3, r2
 8019220:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019222:	88fb      	ldrh	r3, [r7, #6]
 8019224:	0a1b      	lsrs	r3, r3, #8
 8019226:	b29b      	uxth	r3, r3
 8019228:	b2db      	uxtb	r3, r3
 801922a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801922c:	88fb      	ldrh	r3, [r7, #6]
 801922e:	b2db      	uxtb	r3, r3
 8019230:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019232:	88bb      	ldrh	r3, [r7, #4]
 8019234:	0a1b      	lsrs	r3, r3, #8
 8019236:	b29b      	uxth	r3, r3
 8019238:	b2db      	uxtb	r3, r3
 801923a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801923c:	88bb      	ldrh	r3, [r7, #4]
 801923e:	b2db      	uxtb	r3, r3
 8019240:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019242:	887b      	ldrh	r3, [r7, #2]
 8019244:	0a1b      	lsrs	r3, r3, #8
 8019246:	b29b      	uxth	r3, r3
 8019248:	b2db      	uxtb	r3, r3
 801924a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801924c:	887b      	ldrh	r3, [r7, #2]
 801924e:	b2db      	uxtb	r3, r3
 8019250:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019252:	883b      	ldrh	r3, [r7, #0]
 8019254:	0a1b      	lsrs	r3, r3, #8
 8019256:	b29b      	uxth	r3, r3
 8019258:	b2db      	uxtb	r3, r3
 801925a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801925c:	883b      	ldrh	r3, [r7, #0]
 801925e:	b2db      	uxtb	r3, r3
 8019260:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8019262:	f107 0308 	add.w	r3, r7, #8
 8019266:	2208      	movs	r2, #8
 8019268:	4619      	mov	r1, r3
 801926a:	2008      	movs	r0, #8
 801926c:	f000 fc3e 	bl	8019aec <SUBGRF_WriteCommand>
}
 8019270:	bf00      	nop
 8019272:	3714      	adds	r7, #20
 8019274:	46bd      	mov	sp, r7
 8019276:	bd90      	pop	{r4, r7, pc}

08019278 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b084      	sub	sp, #16
 801927c:	af00      	add	r7, sp, #0
 801927e:	4603      	mov	r3, r0
 8019280:	6039      	str	r1, [r7, #0]
 8019282:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019284:	79fb      	ldrb	r3, [r7, #7]
 8019286:	f003 0307 	and.w	r3, r3, #7
 801928a:	b2db      	uxtb	r3, r3
 801928c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801928e:	683b      	ldr	r3, [r7, #0]
 8019290:	0c1b      	lsrs	r3, r3, #16
 8019292:	b2db      	uxtb	r3, r3
 8019294:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	0a1b      	lsrs	r3, r3, #8
 801929a:	b2db      	uxtb	r3, r3
 801929c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	b2db      	uxtb	r3, r3
 80192a2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80192a4:	f107 030c 	add.w	r3, r7, #12
 80192a8:	2204      	movs	r2, #4
 80192aa:	4619      	mov	r1, r3
 80192ac:	2097      	movs	r0, #151	@ 0x97
 80192ae:	f000 fc1d 	bl	8019aec <SUBGRF_WriteCommand>
}
 80192b2:	bf00      	nop
 80192b4:	3710      	adds	r7, #16
 80192b6:	46bd      	mov	sp, r7
 80192b8:	bd80      	pop	{r7, pc}
	...

080192bc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80192bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80192c0:	b084      	sub	sp, #16
 80192c2:	af00      	add	r7, sp, #0
 80192c4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80192c6:	2300      	movs	r3, #0
 80192c8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80192ca:	4b1d      	ldr	r3, [pc, #116]	@ (8019340 <SUBGRF_SetRfFrequency+0x84>)
 80192cc:	781b      	ldrb	r3, [r3, #0]
 80192ce:	f083 0301 	eor.w	r3, r3, #1
 80192d2:	b2db      	uxtb	r3, r3
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d005      	beq.n	80192e4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80192d8:	6878      	ldr	r0, [r7, #4]
 80192da:	f7ff ff27 	bl	801912c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80192de:	4b18      	ldr	r3, [pc, #96]	@ (8019340 <SUBGRF_SetRfFrequency+0x84>)
 80192e0:	2201      	movs	r2, #1
 80192e2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	2200      	movs	r2, #0
 80192e8:	461c      	mov	r4, r3
 80192ea:	4615      	mov	r5, r2
 80192ec:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80192f0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80192f4:	4a13      	ldr	r2, [pc, #76]	@ (8019344 <SUBGRF_SetRfFrequency+0x88>)
 80192f6:	f04f 0300 	mov.w	r3, #0
 80192fa:	4640      	mov	r0, r8
 80192fc:	4649      	mov	r1, r9
 80192fe:	f7e7 fb37 	bl	8000970 <__aeabi_uldivmod>
 8019302:	4602      	mov	r2, r0
 8019304:	460b      	mov	r3, r1
 8019306:	4613      	mov	r3, r2
 8019308:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	0e1b      	lsrs	r3, r3, #24
 801930e:	b2db      	uxtb	r3, r3
 8019310:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	0c1b      	lsrs	r3, r3, #16
 8019316:	b2db      	uxtb	r3, r3
 8019318:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	0a1b      	lsrs	r3, r3, #8
 801931e:	b2db      	uxtb	r3, r3
 8019320:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	b2db      	uxtb	r3, r3
 8019326:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019328:	f107 0308 	add.w	r3, r7, #8
 801932c:	2204      	movs	r2, #4
 801932e:	4619      	mov	r1, r3
 8019330:	2086      	movs	r0, #134	@ 0x86
 8019332:	f000 fbdb 	bl	8019aec <SUBGRF_WriteCommand>
}
 8019336:	bf00      	nop
 8019338:	3710      	adds	r7, #16
 801933a:	46bd      	mov	sp, r7
 801933c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019340:	2000154c 	.word	0x2000154c
 8019344:	01e84800 	.word	0x01e84800

08019348 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b082      	sub	sp, #8
 801934c:	af00      	add	r7, sp, #0
 801934e:	4603      	mov	r3, r0
 8019350:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8019352:	79fa      	ldrb	r2, [r7, #7]
 8019354:	4b09      	ldr	r3, [pc, #36]	@ (801937c <SUBGRF_SetPacketType+0x34>)
 8019356:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019358:	79fb      	ldrb	r3, [r7, #7]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d104      	bne.n	8019368 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801935e:	2100      	movs	r1, #0
 8019360:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019364:	f000 faf8 	bl	8019958 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019368:	1dfb      	adds	r3, r7, #7
 801936a:	2201      	movs	r2, #1
 801936c:	4619      	mov	r1, r3
 801936e:	208a      	movs	r0, #138	@ 0x8a
 8019370:	f000 fbbc 	bl	8019aec <SUBGRF_WriteCommand>
}
 8019374:	bf00      	nop
 8019376:	3708      	adds	r7, #8
 8019378:	46bd      	mov	sp, r7
 801937a:	bd80      	pop	{r7, pc}
 801937c:	20001545 	.word	0x20001545

08019380 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8019380:	b480      	push	{r7}
 8019382:	af00      	add	r7, sp, #0
    return PacketType;
 8019384:	4b02      	ldr	r3, [pc, #8]	@ (8019390 <SUBGRF_GetPacketType+0x10>)
 8019386:	781b      	ldrb	r3, [r3, #0]
}
 8019388:	4618      	mov	r0, r3
 801938a:	46bd      	mov	sp, r7
 801938c:	bc80      	pop	{r7}
 801938e:	4770      	bx	lr
 8019390:	20001545 	.word	0x20001545

08019394 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b084      	sub	sp, #16
 8019398:	af00      	add	r7, sp, #0
 801939a:	4603      	mov	r3, r0
 801939c:	71fb      	strb	r3, [r7, #7]
 801939e:	460b      	mov	r3, r1
 80193a0:	71bb      	strb	r3, [r7, #6]
 80193a2:	4613      	mov	r3, r2
 80193a4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80193a6:	79fb      	ldrb	r3, [r7, #7]
 80193a8:	2b01      	cmp	r3, #1
 80193aa:	d149      	bne.n	8019440 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80193ac:	2000      	movs	r0, #0
 80193ae:	f7f1 f854 	bl	800a45a <RBI_GetRFOMaxPowerConfig>
 80193b2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80193b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80193b8:	68fa      	ldr	r2, [r7, #12]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	da01      	bge.n	80193c2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	2b0e      	cmp	r3, #14
 80193c6:	d10e      	bne.n	80193e6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80193c8:	2301      	movs	r3, #1
 80193ca:	2201      	movs	r2, #1
 80193cc:	2100      	movs	r1, #0
 80193ce:	2004      	movs	r0, #4
 80193d0:	f7ff fef6 	bl	80191c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80193d4:	79ba      	ldrb	r2, [r7, #6]
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	b2db      	uxtb	r3, r3
 80193da:	1ad3      	subs	r3, r2, r3
 80193dc:	b2db      	uxtb	r3, r3
 80193de:	330e      	adds	r3, #14
 80193e0:	b2db      	uxtb	r3, r3
 80193e2:	71bb      	strb	r3, [r7, #6]
 80193e4:	e01f      	b.n	8019426 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	2b0a      	cmp	r3, #10
 80193ea:	d10e      	bne.n	801940a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80193ec:	2301      	movs	r3, #1
 80193ee:	2201      	movs	r2, #1
 80193f0:	2100      	movs	r1, #0
 80193f2:	2001      	movs	r0, #1
 80193f4:	f7ff fee4 	bl	80191c0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80193f8:	79ba      	ldrb	r2, [r7, #6]
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	b2db      	uxtb	r3, r3
 80193fe:	1ad3      	subs	r3, r2, r3
 8019400:	b2db      	uxtb	r3, r3
 8019402:	330d      	adds	r3, #13
 8019404:	b2db      	uxtb	r3, r3
 8019406:	71bb      	strb	r3, [r7, #6]
 8019408:	e00d      	b.n	8019426 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801940a:	2301      	movs	r3, #1
 801940c:	2201      	movs	r2, #1
 801940e:	2100      	movs	r1, #0
 8019410:	2007      	movs	r0, #7
 8019412:	f7ff fed5 	bl	80191c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019416:	79ba      	ldrb	r2, [r7, #6]
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	b2db      	uxtb	r3, r3
 801941c:	1ad3      	subs	r3, r2, r3
 801941e:	b2db      	uxtb	r3, r3
 8019420:	330e      	adds	r3, #14
 8019422:	b2db      	uxtb	r3, r3
 8019424:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019426:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801942a:	f113 0f11 	cmn.w	r3, #17
 801942e:	da01      	bge.n	8019434 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019430:	23ef      	movs	r3, #239	@ 0xef
 8019432:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019434:	2118      	movs	r1, #24
 8019436:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801943a:	f000 fa8d 	bl	8019958 <SUBGRF_WriteRegister>
 801943e:	e067      	b.n	8019510 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019440:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019444:	f000 faaa 	bl	801999c <SUBGRF_ReadRegister>
 8019448:	4603      	mov	r3, r0
 801944a:	f043 031e 	orr.w	r3, r3, #30
 801944e:	b2db      	uxtb	r3, r3
 8019450:	4619      	mov	r1, r3
 8019452:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019456:	f000 fa7f 	bl	8019958 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801945a:	2001      	movs	r0, #1
 801945c:	f7f0 fffd 	bl	800a45a <RBI_GetRFOMaxPowerConfig>
 8019460:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019462:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019466:	68fa      	ldr	r2, [r7, #12]
 8019468:	429a      	cmp	r2, r3
 801946a:	da01      	bge.n	8019470 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	2b14      	cmp	r3, #20
 8019474:	d10e      	bne.n	8019494 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019476:	2301      	movs	r3, #1
 8019478:	2200      	movs	r2, #0
 801947a:	2105      	movs	r1, #5
 801947c:	2003      	movs	r0, #3
 801947e:	f7ff fe9f 	bl	80191c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019482:	79ba      	ldrb	r2, [r7, #6]
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	b2db      	uxtb	r3, r3
 8019488:	1ad3      	subs	r3, r2, r3
 801948a:	b2db      	uxtb	r3, r3
 801948c:	3316      	adds	r3, #22
 801948e:	b2db      	uxtb	r3, r3
 8019490:	71bb      	strb	r3, [r7, #6]
 8019492:	e031      	b.n	80194f8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2b11      	cmp	r3, #17
 8019498:	d10e      	bne.n	80194b8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801949a:	2301      	movs	r3, #1
 801949c:	2200      	movs	r2, #0
 801949e:	2103      	movs	r1, #3
 80194a0:	2002      	movs	r0, #2
 80194a2:	f7ff fe8d 	bl	80191c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80194a6:	79ba      	ldrb	r2, [r7, #6]
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	b2db      	uxtb	r3, r3
 80194ac:	1ad3      	subs	r3, r2, r3
 80194ae:	b2db      	uxtb	r3, r3
 80194b0:	3316      	adds	r3, #22
 80194b2:	b2db      	uxtb	r3, r3
 80194b4:	71bb      	strb	r3, [r7, #6]
 80194b6:	e01f      	b.n	80194f8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	2b0e      	cmp	r3, #14
 80194bc:	d10e      	bne.n	80194dc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80194be:	2301      	movs	r3, #1
 80194c0:	2200      	movs	r2, #0
 80194c2:	2102      	movs	r1, #2
 80194c4:	2002      	movs	r0, #2
 80194c6:	f7ff fe7b 	bl	80191c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80194ca:	79ba      	ldrb	r2, [r7, #6]
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	b2db      	uxtb	r3, r3
 80194d0:	1ad3      	subs	r3, r2, r3
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	330e      	adds	r3, #14
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	71bb      	strb	r3, [r7, #6]
 80194da:	e00d      	b.n	80194f8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80194dc:	2301      	movs	r3, #1
 80194de:	2200      	movs	r2, #0
 80194e0:	2107      	movs	r1, #7
 80194e2:	2004      	movs	r0, #4
 80194e4:	f7ff fe6c 	bl	80191c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80194e8:	79ba      	ldrb	r2, [r7, #6]
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	1ad3      	subs	r3, r2, r3
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	3316      	adds	r3, #22
 80194f4:	b2db      	uxtb	r3, r3
 80194f6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80194f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80194fc:	f113 0f09 	cmn.w	r3, #9
 8019500:	da01      	bge.n	8019506 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019502:	23f7      	movs	r3, #247	@ 0xf7
 8019504:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019506:	2138      	movs	r1, #56	@ 0x38
 8019508:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801950c:	f000 fa24 	bl	8019958 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019510:	79bb      	ldrb	r3, [r7, #6]
 8019512:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019514:	797b      	ldrb	r3, [r7, #5]
 8019516:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019518:	f107 0308 	add.w	r3, r7, #8
 801951c:	2202      	movs	r2, #2
 801951e:	4619      	mov	r1, r3
 8019520:	208e      	movs	r0, #142	@ 0x8e
 8019522:	f000 fae3 	bl	8019aec <SUBGRF_WriteCommand>
}
 8019526:	bf00      	nop
 8019528:	3710      	adds	r7, #16
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
	...

08019530 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019534:	b086      	sub	sp, #24
 8019536:	af00      	add	r7, sp, #0
 8019538:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801953a:	2300      	movs	r3, #0
 801953c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801953e:	f107 0308 	add.w	r3, r7, #8
 8019542:	2200      	movs	r2, #0
 8019544:	601a      	str	r2, [r3, #0]
 8019546:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	781a      	ldrb	r2, [r3, #0]
 801954c:	4b5c      	ldr	r3, [pc, #368]	@ (80196c0 <SUBGRF_SetModulationParams+0x190>)
 801954e:	781b      	ldrb	r3, [r3, #0]
 8019550:	429a      	cmp	r2, r3
 8019552:	d004      	beq.n	801955e <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	781b      	ldrb	r3, [r3, #0]
 8019558:	4618      	mov	r0, r3
 801955a:	f7ff fef5 	bl	8019348 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	781b      	ldrb	r3, [r3, #0]
 8019562:	2b03      	cmp	r3, #3
 8019564:	f200 80a5 	bhi.w	80196b2 <SUBGRF_SetModulationParams+0x182>
 8019568:	a201      	add	r2, pc, #4	@ (adr r2, 8019570 <SUBGRF_SetModulationParams+0x40>)
 801956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801956e:	bf00      	nop
 8019570:	08019581 	.word	0x08019581
 8019574:	08019641 	.word	0x08019641
 8019578:	08019603 	.word	0x08019603
 801957c:	0801966f 	.word	0x0801966f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019580:	2308      	movs	r3, #8
 8019582:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	685b      	ldr	r3, [r3, #4]
 8019588:	4a4e      	ldr	r2, [pc, #312]	@ (80196c4 <SUBGRF_SetModulationParams+0x194>)
 801958a:	fbb2 f3f3 	udiv	r3, r2, r3
 801958e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019590:	697b      	ldr	r3, [r7, #20]
 8019592:	0c1b      	lsrs	r3, r3, #16
 8019594:	b2db      	uxtb	r3, r3
 8019596:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019598:	697b      	ldr	r3, [r7, #20]
 801959a:	0a1b      	lsrs	r3, r3, #8
 801959c:	b2db      	uxtb	r3, r3
 801959e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80195a0:	697b      	ldr	r3, [r7, #20]
 80195a2:	b2db      	uxtb	r3, r3
 80195a4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	7b1b      	ldrb	r3, [r3, #12]
 80195aa:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	7b5b      	ldrb	r3, [r3, #13]
 80195b0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	689b      	ldr	r3, [r3, #8]
 80195b6:	2200      	movs	r2, #0
 80195b8:	461c      	mov	r4, r3
 80195ba:	4615      	mov	r5, r2
 80195bc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80195c0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80195c4:	4a40      	ldr	r2, [pc, #256]	@ (80196c8 <SUBGRF_SetModulationParams+0x198>)
 80195c6:	f04f 0300 	mov.w	r3, #0
 80195ca:	4640      	mov	r0, r8
 80195cc:	4649      	mov	r1, r9
 80195ce:	f7e7 f9cf 	bl	8000970 <__aeabi_uldivmod>
 80195d2:	4602      	mov	r2, r0
 80195d4:	460b      	mov	r3, r1
 80195d6:	4613      	mov	r3, r2
 80195d8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80195da:	697b      	ldr	r3, [r7, #20]
 80195dc:	0c1b      	lsrs	r3, r3, #16
 80195de:	b2db      	uxtb	r3, r3
 80195e0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80195e2:	697b      	ldr	r3, [r7, #20]
 80195e4:	0a1b      	lsrs	r3, r3, #8
 80195e6:	b2db      	uxtb	r3, r3
 80195e8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80195ea:	697b      	ldr	r3, [r7, #20]
 80195ec:	b2db      	uxtb	r3, r3
 80195ee:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80195f0:	7cfb      	ldrb	r3, [r7, #19]
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	f107 0308 	add.w	r3, r7, #8
 80195f8:	4619      	mov	r1, r3
 80195fa:	208b      	movs	r0, #139	@ 0x8b
 80195fc:	f000 fa76 	bl	8019aec <SUBGRF_WriteCommand>
        break;
 8019600:	e058      	b.n	80196b4 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019602:	2304      	movs	r3, #4
 8019604:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	691b      	ldr	r3, [r3, #16]
 801960a:	4a2e      	ldr	r2, [pc, #184]	@ (80196c4 <SUBGRF_SetModulationParams+0x194>)
 801960c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019610:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	0c1b      	lsrs	r3, r3, #16
 8019616:	b2db      	uxtb	r3, r3
 8019618:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	0a1b      	lsrs	r3, r3, #8
 801961e:	b2db      	uxtb	r3, r3
 8019620:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	b2db      	uxtb	r3, r3
 8019626:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	7d1b      	ldrb	r3, [r3, #20]
 801962c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801962e:	7cfb      	ldrb	r3, [r7, #19]
 8019630:	b29a      	uxth	r2, r3
 8019632:	f107 0308 	add.w	r3, r7, #8
 8019636:	4619      	mov	r1, r3
 8019638:	208b      	movs	r0, #139	@ 0x8b
 801963a:	f000 fa57 	bl	8019aec <SUBGRF_WriteCommand>
        break;
 801963e:	e039      	b.n	80196b4 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8019640:	2304      	movs	r3, #4
 8019642:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	7e1b      	ldrb	r3, [r3, #24]
 8019648:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	7e5b      	ldrb	r3, [r3, #25]
 801964e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	7e9b      	ldrb	r3, [r3, #26]
 8019654:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	7edb      	ldrb	r3, [r3, #27]
 801965a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801965c:	7cfb      	ldrb	r3, [r7, #19]
 801965e:	b29a      	uxth	r2, r3
 8019660:	f107 0308 	add.w	r3, r7, #8
 8019664:	4619      	mov	r1, r3
 8019666:	208b      	movs	r0, #139	@ 0x8b
 8019668:	f000 fa40 	bl	8019aec <SUBGRF_WriteCommand>

        break;
 801966c:	e022      	b.n	80196b4 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801966e:	2305      	movs	r3, #5
 8019670:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	685b      	ldr	r3, [r3, #4]
 8019676:	4a13      	ldr	r2, [pc, #76]	@ (80196c4 <SUBGRF_SetModulationParams+0x194>)
 8019678:	fbb2 f3f3 	udiv	r3, r2, r3
 801967c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	0c1b      	lsrs	r3, r3, #16
 8019682:	b2db      	uxtb	r3, r3
 8019684:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	0a1b      	lsrs	r3, r3, #8
 801968a:	b2db      	uxtb	r3, r3
 801968c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	b2db      	uxtb	r3, r3
 8019692:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	7b1b      	ldrb	r3, [r3, #12]
 8019698:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	7b5b      	ldrb	r3, [r3, #13]
 801969e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80196a0:	7cfb      	ldrb	r3, [r7, #19]
 80196a2:	b29a      	uxth	r2, r3
 80196a4:	f107 0308 	add.w	r3, r7, #8
 80196a8:	4619      	mov	r1, r3
 80196aa:	208b      	movs	r0, #139	@ 0x8b
 80196ac:	f000 fa1e 	bl	8019aec <SUBGRF_WriteCommand>
        break;
 80196b0:	e000      	b.n	80196b4 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 80196b2:	bf00      	nop
    }
}
 80196b4:	bf00      	nop
 80196b6:	3718      	adds	r7, #24
 80196b8:	46bd      	mov	sp, r7
 80196ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80196be:	bf00      	nop
 80196c0:	20001545 	.word	0x20001545
 80196c4:	3d090000 	.word	0x3d090000
 80196c8:	01e84800 	.word	0x01e84800

080196cc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b086      	sub	sp, #24
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80196d4:	2300      	movs	r3, #0
 80196d6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80196d8:	f107 030c 	add.w	r3, r7, #12
 80196dc:	2200      	movs	r2, #0
 80196de:	601a      	str	r2, [r3, #0]
 80196e0:	605a      	str	r2, [r3, #4]
 80196e2:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	781a      	ldrb	r2, [r3, #0]
 80196e8:	4b44      	ldr	r3, [pc, #272]	@ (80197fc <SUBGRF_SetPacketParams+0x130>)
 80196ea:	781b      	ldrb	r3, [r3, #0]
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d004      	beq.n	80196fa <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7ff fe27 	bl	8019348 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	2b03      	cmp	r3, #3
 8019700:	d878      	bhi.n	80197f4 <SUBGRF_SetPacketParams+0x128>
 8019702:	a201      	add	r2, pc, #4	@ (adr r2, 8019708 <SUBGRF_SetPacketParams+0x3c>)
 8019704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019708:	08019719 	.word	0x08019719
 801970c:	080197a9 	.word	0x080197a9
 8019710:	0801979d 	.word	0x0801979d
 8019714:	08019719 	.word	0x08019719
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	7a5b      	ldrb	r3, [r3, #9]
 801971c:	2bf1      	cmp	r3, #241	@ 0xf1
 801971e:	d10a      	bne.n	8019736 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019720:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019724:	f7ff faa6 	bl	8018c74 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019728:	f248 0005 	movw	r0, #32773	@ 0x8005
 801972c:	f7ff fac2 	bl	8018cb4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019730:	2302      	movs	r3, #2
 8019732:	75bb      	strb	r3, [r7, #22]
 8019734:	e011      	b.n	801975a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	7a5b      	ldrb	r3, [r3, #9]
 801973a:	2bf2      	cmp	r3, #242	@ 0xf2
 801973c:	d10a      	bne.n	8019754 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801973e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019742:	f7ff fa97 	bl	8018c74 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019746:	f241 0021 	movw	r0, #4129	@ 0x1021
 801974a:	f7ff fab3 	bl	8018cb4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801974e:	2306      	movs	r3, #6
 8019750:	75bb      	strb	r3, [r7, #22]
 8019752:	e002      	b.n	801975a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	7a5b      	ldrb	r3, [r3, #9]
 8019758:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801975a:	2309      	movs	r3, #9
 801975c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	885b      	ldrh	r3, [r3, #2]
 8019762:	0a1b      	lsrs	r3, r3, #8
 8019764:	b29b      	uxth	r3, r3
 8019766:	b2db      	uxtb	r3, r3
 8019768:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	885b      	ldrh	r3, [r3, #2]
 801976e:	b2db      	uxtb	r3, r3
 8019770:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	791b      	ldrb	r3, [r3, #4]
 8019776:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	795b      	ldrb	r3, [r3, #5]
 801977c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	799b      	ldrb	r3, [r3, #6]
 8019782:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	79db      	ldrb	r3, [r3, #7]
 8019788:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	7a1b      	ldrb	r3, [r3, #8]
 801978e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019790:	7dbb      	ldrb	r3, [r7, #22]
 8019792:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	7a9b      	ldrb	r3, [r3, #10]
 8019798:	753b      	strb	r3, [r7, #20]
        break;
 801979a:	e022      	b.n	80197e2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801979c:	2301      	movs	r3, #1
 801979e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	7b1b      	ldrb	r3, [r3, #12]
 80197a4:	733b      	strb	r3, [r7, #12]
        break;
 80197a6:	e01c      	b.n	80197e2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80197a8:	2306      	movs	r3, #6
 80197aa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	89db      	ldrh	r3, [r3, #14]
 80197b0:	0a1b      	lsrs	r3, r3, #8
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	b2db      	uxtb	r3, r3
 80197b6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	89db      	ldrh	r3, [r3, #14]
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	7c1a      	ldrb	r2, [r3, #16]
 80197c4:	4b0e      	ldr	r3, [pc, #56]	@ (8019800 <SUBGRF_SetPacketParams+0x134>)
 80197c6:	4611      	mov	r1, r2
 80197c8:	7019      	strb	r1, [r3, #0]
 80197ca:	4613      	mov	r3, r2
 80197cc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	7c5b      	ldrb	r3, [r3, #17]
 80197d2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	7c9b      	ldrb	r3, [r3, #18]
 80197d8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	7cdb      	ldrb	r3, [r3, #19]
 80197de:	747b      	strb	r3, [r7, #17]
        break;
 80197e0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80197e2:	7dfb      	ldrb	r3, [r7, #23]
 80197e4:	b29a      	uxth	r2, r3
 80197e6:	f107 030c 	add.w	r3, r7, #12
 80197ea:	4619      	mov	r1, r3
 80197ec:	208c      	movs	r0, #140	@ 0x8c
 80197ee:	f000 f97d 	bl	8019aec <SUBGRF_WriteCommand>
 80197f2:	e000      	b.n	80197f6 <SUBGRF_SetPacketParams+0x12a>
        return;
 80197f4:	bf00      	nop
}
 80197f6:	3718      	adds	r7, #24
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd80      	pop	{r7, pc}
 80197fc:	20001545 	.word	0x20001545
 8019800:	20001546 	.word	0x20001546

08019804 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b084      	sub	sp, #16
 8019808:	af00      	add	r7, sp, #0
 801980a:	4603      	mov	r3, r0
 801980c:	460a      	mov	r2, r1
 801980e:	71fb      	strb	r3, [r7, #7]
 8019810:	4613      	mov	r3, r2
 8019812:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019814:	79fb      	ldrb	r3, [r7, #7]
 8019816:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019818:	79bb      	ldrb	r3, [r7, #6]
 801981a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801981c:	f107 030c 	add.w	r3, r7, #12
 8019820:	2202      	movs	r2, #2
 8019822:	4619      	mov	r1, r3
 8019824:	208f      	movs	r0, #143	@ 0x8f
 8019826:	f000 f961 	bl	8019aec <SUBGRF_WriteCommand>
}
 801982a:	bf00      	nop
 801982c:	3710      	adds	r7, #16
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}

08019832 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019832:	b580      	push	{r7, lr}
 8019834:	b082      	sub	sp, #8
 8019836:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019838:	2300      	movs	r3, #0
 801983a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801983c:	1d3b      	adds	r3, r7, #4
 801983e:	2201      	movs	r2, #1
 8019840:	4619      	mov	r1, r3
 8019842:	2015      	movs	r0, #21
 8019844:	f000 f974 	bl	8019b30 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019848:	793b      	ldrb	r3, [r7, #4]
 801984a:	425b      	negs	r3, r3
 801984c:	105b      	asrs	r3, r3, #1
 801984e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019850:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019854:	4618      	mov	r0, r3
 8019856:	3708      	adds	r7, #8
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}

0801985c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b084      	sub	sp, #16
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
 8019864:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019866:	f107 030c 	add.w	r3, r7, #12
 801986a:	2202      	movs	r2, #2
 801986c:	4619      	mov	r1, r3
 801986e:	2013      	movs	r0, #19
 8019870:	f000 f95e 	bl	8019b30 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019874:	f7ff fd84 	bl	8019380 <SUBGRF_GetPacketType>
 8019878:	4603      	mov	r3, r0
 801987a:	2b01      	cmp	r3, #1
 801987c:	d10d      	bne.n	801989a <SUBGRF_GetRxBufferStatus+0x3e>
 801987e:	4b0c      	ldr	r3, [pc, #48]	@ (80198b0 <SUBGRF_GetRxBufferStatus+0x54>)
 8019880:	781b      	ldrb	r3, [r3, #0]
 8019882:	b2db      	uxtb	r3, r3
 8019884:	2b01      	cmp	r3, #1
 8019886:	d108      	bne.n	801989a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019888:	f240 7002 	movw	r0, #1794	@ 0x702
 801988c:	f000 f886 	bl	801999c <SUBGRF_ReadRegister>
 8019890:	4603      	mov	r3, r0
 8019892:	461a      	mov	r2, r3
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	701a      	strb	r2, [r3, #0]
 8019898:	e002      	b.n	80198a0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801989a:	7b3a      	ldrb	r2, [r7, #12]
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80198a0:	7b7a      	ldrb	r2, [r7, #13]
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	701a      	strb	r2, [r3, #0]
}
 80198a6:	bf00      	nop
 80198a8:	3710      	adds	r7, #16
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bd80      	pop	{r7, pc}
 80198ae:	bf00      	nop
 80198b0:	20001546 	.word	0x20001546

080198b4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80198b4:	b580      	push	{r7, lr}
 80198b6:	b084      	sub	sp, #16
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80198bc:	f107 030c 	add.w	r3, r7, #12
 80198c0:	2203      	movs	r2, #3
 80198c2:	4619      	mov	r1, r3
 80198c4:	2014      	movs	r0, #20
 80198c6:	f000 f933 	bl	8019b30 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80198ca:	f7ff fd59 	bl	8019380 <SUBGRF_GetPacketType>
 80198ce:	4603      	mov	r3, r0
 80198d0:	461a      	mov	r2, r3
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	781b      	ldrb	r3, [r3, #0]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d002      	beq.n	80198e4 <SUBGRF_GetPacketStatus+0x30>
 80198de:	2b01      	cmp	r3, #1
 80198e0:	d013      	beq.n	801990a <SUBGRF_GetPacketStatus+0x56>
 80198e2:	e02a      	b.n	801993a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80198e4:	7b3a      	ldrb	r2, [r7, #12]
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80198ea:	7b7b      	ldrb	r3, [r7, #13]
 80198ec:	425b      	negs	r3, r3
 80198ee:	105b      	asrs	r3, r3, #1
 80198f0:	b25a      	sxtb	r2, r3
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80198f6:	7bbb      	ldrb	r3, [r7, #14]
 80198f8:	425b      	negs	r3, r3
 80198fa:	105b      	asrs	r3, r3, #1
 80198fc:	b25a      	sxtb	r2, r3
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	2200      	movs	r2, #0
 8019906:	609a      	str	r2, [r3, #8]
            break;
 8019908:	e020      	b.n	801994c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801990a:	7b3b      	ldrb	r3, [r7, #12]
 801990c:	425b      	negs	r3, r3
 801990e:	105b      	asrs	r3, r3, #1
 8019910:	b25a      	sxtb	r2, r3
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019916:	7b7b      	ldrb	r3, [r7, #13]
 8019918:	b25b      	sxtb	r3, r3
 801991a:	3302      	adds	r3, #2
 801991c:	109b      	asrs	r3, r3, #2
 801991e:	b25a      	sxtb	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019924:	7bbb      	ldrb	r3, [r7, #14]
 8019926:	425b      	negs	r3, r3
 8019928:	105b      	asrs	r3, r3, #1
 801992a:	b25a      	sxtb	r2, r3
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019930:	4b08      	ldr	r3, [pc, #32]	@ (8019954 <SUBGRF_GetPacketStatus+0xa0>)
 8019932:	681a      	ldr	r2, [r3, #0]
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	611a      	str	r2, [r3, #16]
            break;
 8019938:	e008      	b.n	801994c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801993a:	2214      	movs	r2, #20
 801993c:	2100      	movs	r1, #0
 801993e:	6878      	ldr	r0, [r7, #4]
 8019940:	f000 fc1d 	bl	801a17e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	220f      	movs	r2, #15
 8019948:	701a      	strb	r2, [r3, #0]
            break;
 801994a:	bf00      	nop
    }
}
 801994c:	bf00      	nop
 801994e:	3710      	adds	r7, #16
 8019950:	46bd      	mov	sp, r7
 8019952:	bd80      	pop	{r7, pc}
 8019954:	20001548 	.word	0x20001548

08019958 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b086      	sub	sp, #24
 801995c:	af00      	add	r7, sp, #0
 801995e:	4603      	mov	r3, r0
 8019960:	460a      	mov	r2, r1
 8019962:	80fb      	strh	r3, [r7, #6]
 8019964:	4613      	mov	r3, r2
 8019966:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019968:	f3ef 8310 	mrs	r3, PRIMASK
 801996c:	60fb      	str	r3, [r7, #12]
  return(result);
 801996e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019972:	b672      	cpsid	i
}
 8019974:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019976:	1d7a      	adds	r2, r7, #5
 8019978:	88f9      	ldrh	r1, [r7, #6]
 801997a:	2301      	movs	r3, #1
 801997c:	4806      	ldr	r0, [pc, #24]	@ (8019998 <SUBGRF_WriteRegister+0x40>)
 801997e:	f7ed fc55 	bl	800722c <HAL_SUBGHZ_WriteRegisters>
 8019982:	697b      	ldr	r3, [r7, #20]
 8019984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019986:	693b      	ldr	r3, [r7, #16]
 8019988:	f383 8810 	msr	PRIMASK, r3
}
 801998c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801998e:	bf00      	nop
 8019990:	3718      	adds	r7, #24
 8019992:	46bd      	mov	sp, r7
 8019994:	bd80      	pop	{r7, pc}
 8019996:	bf00      	nop
 8019998:	20000288 	.word	0x20000288

0801999c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b086      	sub	sp, #24
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	4603      	mov	r3, r0
 80199a4:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199a6:	f3ef 8310 	mrs	r3, PRIMASK
 80199aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80199ac:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 80199ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199b0:	b672      	cpsid	i
}
 80199b2:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80199b4:	f107 020b 	add.w	r2, r7, #11
 80199b8:	88f9      	ldrh	r1, [r7, #6]
 80199ba:	2301      	movs	r3, #1
 80199bc:	4806      	ldr	r0, [pc, #24]	@ (80199d8 <SUBGRF_ReadRegister+0x3c>)
 80199be:	f7ed fc94 	bl	80072ea <HAL_SUBGHZ_ReadRegisters>
 80199c2:	697b      	ldr	r3, [r7, #20]
 80199c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	f383 8810 	msr	PRIMASK, r3
}
 80199cc:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 80199ce:	7afb      	ldrb	r3, [r7, #11]
}
 80199d0:	4618      	mov	r0, r3
 80199d2:	3718      	adds	r7, #24
 80199d4:	46bd      	mov	sp, r7
 80199d6:	bd80      	pop	{r7, pc}
 80199d8:	20000288 	.word	0x20000288

080199dc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80199dc:	b580      	push	{r7, lr}
 80199de:	b086      	sub	sp, #24
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	4603      	mov	r3, r0
 80199e4:	6039      	str	r1, [r7, #0]
 80199e6:	80fb      	strh	r3, [r7, #6]
 80199e8:	4613      	mov	r3, r2
 80199ea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199ec:	f3ef 8310 	mrs	r3, PRIMASK
 80199f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80199f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80199f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199f6:	b672      	cpsid	i
}
 80199f8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80199fa:	88bb      	ldrh	r3, [r7, #4]
 80199fc:	88f9      	ldrh	r1, [r7, #6]
 80199fe:	683a      	ldr	r2, [r7, #0]
 8019a00:	4806      	ldr	r0, [pc, #24]	@ (8019a1c <SUBGRF_WriteRegisters+0x40>)
 8019a02:	f7ed fc13 	bl	800722c <HAL_SUBGHZ_WriteRegisters>
 8019a06:	697b      	ldr	r3, [r7, #20]
 8019a08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a0a:	693b      	ldr	r3, [r7, #16]
 8019a0c:	f383 8810 	msr	PRIMASK, r3
}
 8019a10:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a12:	bf00      	nop
 8019a14:	3718      	adds	r7, #24
 8019a16:	46bd      	mov	sp, r7
 8019a18:	bd80      	pop	{r7, pc}
 8019a1a:	bf00      	nop
 8019a1c:	20000288 	.word	0x20000288

08019a20 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b086      	sub	sp, #24
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	4603      	mov	r3, r0
 8019a28:	6039      	str	r1, [r7, #0]
 8019a2a:	80fb      	strh	r3, [r7, #6]
 8019a2c:	4613      	mov	r3, r2
 8019a2e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a30:	f3ef 8310 	mrs	r3, PRIMASK
 8019a34:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a36:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a3a:	b672      	cpsid	i
}
 8019a3c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019a3e:	88bb      	ldrh	r3, [r7, #4]
 8019a40:	88f9      	ldrh	r1, [r7, #6]
 8019a42:	683a      	ldr	r2, [r7, #0]
 8019a44:	4806      	ldr	r0, [pc, #24]	@ (8019a60 <SUBGRF_ReadRegisters+0x40>)
 8019a46:	f7ed fc50 	bl	80072ea <HAL_SUBGHZ_ReadRegisters>
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a4e:	693b      	ldr	r3, [r7, #16]
 8019a50:	f383 8810 	msr	PRIMASK, r3
}
 8019a54:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a56:	bf00      	nop
 8019a58:	3718      	adds	r7, #24
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}
 8019a5e:	bf00      	nop
 8019a60:	20000288 	.word	0x20000288

08019a64 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b086      	sub	sp, #24
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	6039      	str	r1, [r7, #0]
 8019a6e:	71fb      	strb	r3, [r7, #7]
 8019a70:	4613      	mov	r3, r2
 8019a72:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a74:	f3ef 8310 	mrs	r3, PRIMASK
 8019a78:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a7e:	b672      	cpsid	i
}
 8019a80:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019a82:	79bb      	ldrb	r3, [r7, #6]
 8019a84:	b29b      	uxth	r3, r3
 8019a86:	79f9      	ldrb	r1, [r7, #7]
 8019a88:	683a      	ldr	r2, [r7, #0]
 8019a8a:	4806      	ldr	r0, [pc, #24]	@ (8019aa4 <SUBGRF_WriteBuffer+0x40>)
 8019a8c:	f7ed fd41 	bl	8007512 <HAL_SUBGHZ_WriteBuffer>
 8019a90:	697b      	ldr	r3, [r7, #20]
 8019a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a94:	693b      	ldr	r3, [r7, #16]
 8019a96:	f383 8810 	msr	PRIMASK, r3
}
 8019a9a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a9c:	bf00      	nop
 8019a9e:	3718      	adds	r7, #24
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	20000288 	.word	0x20000288

08019aa8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b086      	sub	sp, #24
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	4603      	mov	r3, r0
 8019ab0:	6039      	str	r1, [r7, #0]
 8019ab2:	71fb      	strb	r3, [r7, #7]
 8019ab4:	4613      	mov	r3, r2
 8019ab6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8019abc:	60fb      	str	r3, [r7, #12]
  return(result);
 8019abe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019ac0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ac2:	b672      	cpsid	i
}
 8019ac4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019ac6:	79bb      	ldrb	r3, [r7, #6]
 8019ac8:	b29b      	uxth	r3, r3
 8019aca:	79f9      	ldrb	r1, [r7, #7]
 8019acc:	683a      	ldr	r2, [r7, #0]
 8019ace:	4806      	ldr	r0, [pc, #24]	@ (8019ae8 <SUBGRF_ReadBuffer+0x40>)
 8019ad0:	f7ed fd72 	bl	80075b8 <HAL_SUBGHZ_ReadBuffer>
 8019ad4:	697b      	ldr	r3, [r7, #20]
 8019ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad8:	693b      	ldr	r3, [r7, #16]
 8019ada:	f383 8810 	msr	PRIMASK, r3
}
 8019ade:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019ae0:	bf00      	nop
 8019ae2:	3718      	adds	r7, #24
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bd80      	pop	{r7, pc}
 8019ae8:	20000288 	.word	0x20000288

08019aec <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b086      	sub	sp, #24
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	4603      	mov	r3, r0
 8019af4:	6039      	str	r1, [r7, #0]
 8019af6:	71fb      	strb	r3, [r7, #7]
 8019af8:	4613      	mov	r3, r2
 8019afa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019afc:	f3ef 8310 	mrs	r3, PRIMASK
 8019b00:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b06:	b672      	cpsid	i
}
 8019b08:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019b0a:	88bb      	ldrh	r3, [r7, #4]
 8019b0c:	79f9      	ldrb	r1, [r7, #7]
 8019b0e:	683a      	ldr	r2, [r7, #0]
 8019b10:	4806      	ldr	r0, [pc, #24]	@ (8019b2c <SUBGRF_WriteCommand+0x40>)
 8019b12:	f7ed fc4b 	bl	80073ac <HAL_SUBGHZ_ExecSetCmd>
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b1a:	693b      	ldr	r3, [r7, #16]
 8019b1c:	f383 8810 	msr	PRIMASK, r3
}
 8019b20:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019b22:	bf00      	nop
 8019b24:	3718      	adds	r7, #24
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}
 8019b2a:	bf00      	nop
 8019b2c:	20000288 	.word	0x20000288

08019b30 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b086      	sub	sp, #24
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	4603      	mov	r3, r0
 8019b38:	6039      	str	r1, [r7, #0]
 8019b3a:	71fb      	strb	r3, [r7, #7]
 8019b3c:	4613      	mov	r3, r2
 8019b3e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b40:	f3ef 8310 	mrs	r3, PRIMASK
 8019b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019b48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b4a:	b672      	cpsid	i
}
 8019b4c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019b4e:	88bb      	ldrh	r3, [r7, #4]
 8019b50:	79f9      	ldrb	r1, [r7, #7]
 8019b52:	683a      	ldr	r2, [r7, #0]
 8019b54:	4806      	ldr	r0, [pc, #24]	@ (8019b70 <SUBGRF_ReadCommand+0x40>)
 8019b56:	f7ed fc88 	bl	800746a <HAL_SUBGHZ_ExecGetCmd>
 8019b5a:	697b      	ldr	r3, [r7, #20]
 8019b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b5e:	693b      	ldr	r3, [r7, #16]
 8019b60:	f383 8810 	msr	PRIMASK, r3
}
 8019b64:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019b66:	bf00      	nop
 8019b68:	3718      	adds	r7, #24
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}
 8019b6e:	bf00      	nop
 8019b70:	20000288 	.word	0x20000288

08019b74 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b084      	sub	sp, #16
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	460a      	mov	r2, r1
 8019b7e:	71fb      	strb	r3, [r7, #7]
 8019b80:	4613      	mov	r3, r2
 8019b82:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019b84:	2301      	movs	r3, #1
 8019b86:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019b88:	79bb      	ldrb	r3, [r7, #6]
 8019b8a:	2b01      	cmp	r3, #1
 8019b8c:	d10d      	bne.n	8019baa <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019b8e:	79fb      	ldrb	r3, [r7, #7]
 8019b90:	2b01      	cmp	r3, #1
 8019b92:	d104      	bne.n	8019b9e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019b94:	2302      	movs	r3, #2
 8019b96:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019b98:	2004      	movs	r0, #4
 8019b9a:	f000 f8ef 	bl	8019d7c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019b9e:	79fb      	ldrb	r3, [r7, #7]
 8019ba0:	2b02      	cmp	r3, #2
 8019ba2:	d107      	bne.n	8019bb4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019ba4:	2303      	movs	r3, #3
 8019ba6:	73fb      	strb	r3, [r7, #15]
 8019ba8:	e004      	b.n	8019bb4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019baa:	79bb      	ldrb	r3, [r7, #6]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d101      	bne.n	8019bb4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019bb4:	7bfb      	ldrb	r3, [r7, #15]
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7f0 fbde 	bl	800a378 <RBI_ConfigRFSwitch>
}
 8019bbc:	bf00      	nop
 8019bbe:	3710      	adds	r7, #16
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}

08019bc4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019bc4:	b580      	push	{r7, lr}
 8019bc6:	b084      	sub	sp, #16
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	4603      	mov	r3, r0
 8019bcc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019bce:	2301      	movs	r3, #1
 8019bd0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019bd2:	f7f0 fc21 	bl	800a418 <RBI_GetTxConfig>
 8019bd6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	2b02      	cmp	r3, #2
 8019bdc:	d016      	beq.n	8019c0c <SUBGRF_SetRfTxPower+0x48>
 8019bde:	68bb      	ldr	r3, [r7, #8]
 8019be0:	2b02      	cmp	r3, #2
 8019be2:	dc16      	bgt.n	8019c12 <SUBGRF_SetRfTxPower+0x4e>
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d003      	beq.n	8019bf2 <SUBGRF_SetRfTxPower+0x2e>
 8019bea:	68bb      	ldr	r3, [r7, #8]
 8019bec:	2b01      	cmp	r3, #1
 8019bee:	d00a      	beq.n	8019c06 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019bf0:	e00f      	b.n	8019c12 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019bf6:	2b0f      	cmp	r3, #15
 8019bf8:	dd02      	ble.n	8019c00 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019bfa:	2302      	movs	r3, #2
 8019bfc:	73fb      	strb	r3, [r7, #15]
            break;
 8019bfe:	e009      	b.n	8019c14 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019c00:	2301      	movs	r3, #1
 8019c02:	73fb      	strb	r3, [r7, #15]
            break;
 8019c04:	e006      	b.n	8019c14 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019c06:	2301      	movs	r3, #1
 8019c08:	73fb      	strb	r3, [r7, #15]
            break;
 8019c0a:	e003      	b.n	8019c14 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019c0c:	2302      	movs	r3, #2
 8019c0e:	73fb      	strb	r3, [r7, #15]
            break;
 8019c10:	e000      	b.n	8019c14 <SUBGRF_SetRfTxPower+0x50>
            break;
 8019c12:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019c14:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019c18:	7bfb      	ldrb	r3, [r7, #15]
 8019c1a:	2202      	movs	r2, #2
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7ff fbb9 	bl	8019394 <SUBGRF_SetTxParams>

    return paSelect;
 8019c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	3710      	adds	r7, #16
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}

08019c2c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019c2c:	b480      	push	{r7}
 8019c2e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019c30:	2301      	movs	r3, #1
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bc80      	pop	{r7}
 8019c38:	4770      	bx	lr
	...

08019c3c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b082      	sub	sp, #8
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019c44:	4b03      	ldr	r3, [pc, #12]	@ (8019c54 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	2001      	movs	r0, #1
 8019c4a:	4798      	blx	r3
}
 8019c4c:	bf00      	nop
 8019c4e:	3708      	adds	r7, #8
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}
 8019c54:	20001550 	.word	0x20001550

08019c58 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b082      	sub	sp, #8
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019c60:	4b03      	ldr	r3, [pc, #12]	@ (8019c70 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	2002      	movs	r0, #2
 8019c66:	4798      	blx	r3
}
 8019c68:	bf00      	nop
 8019c6a:	3708      	adds	r7, #8
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}
 8019c70:	20001550 	.word	0x20001550

08019c74 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b082      	sub	sp, #8
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019c7c:	4b03      	ldr	r3, [pc, #12]	@ (8019c8c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	2040      	movs	r0, #64	@ 0x40
 8019c82:	4798      	blx	r3
}
 8019c84:	bf00      	nop
 8019c86:	3708      	adds	r7, #8
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd80      	pop	{r7, pc}
 8019c8c:	20001550 	.word	0x20001550

08019c90 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b082      	sub	sp, #8
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
 8019c98:	460b      	mov	r3, r1
 8019c9a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019c9c:	78fb      	ldrb	r3, [r7, #3]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d002      	beq.n	8019ca8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019ca2:	2b01      	cmp	r3, #1
 8019ca4:	d005      	beq.n	8019cb2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019ca6:	e00a      	b.n	8019cbe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019ca8:	4b07      	ldr	r3, [pc, #28]	@ (8019cc8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	2080      	movs	r0, #128	@ 0x80
 8019cae:	4798      	blx	r3
            break;
 8019cb0:	e005      	b.n	8019cbe <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019cb2:	4b05      	ldr	r3, [pc, #20]	@ (8019cc8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8019cba:	4798      	blx	r3
            break;
 8019cbc:	bf00      	nop
    }
}
 8019cbe:	bf00      	nop
 8019cc0:	3708      	adds	r7, #8
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	bd80      	pop	{r7, pc}
 8019cc6:	bf00      	nop
 8019cc8:	20001550 	.word	0x20001550

08019ccc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b082      	sub	sp, #8
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019cd4:	4b04      	ldr	r3, [pc, #16]	@ (8019ce8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019cdc:	4798      	blx	r3
}
 8019cde:	bf00      	nop
 8019ce0:	3708      	adds	r7, #8
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}
 8019ce6:	bf00      	nop
 8019ce8:	20001550 	.word	0x20001550

08019cec <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	b082      	sub	sp, #8
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019cf4:	4b03      	ldr	r3, [pc, #12]	@ (8019d04 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	2020      	movs	r0, #32
 8019cfa:	4798      	blx	r3
}
 8019cfc:	bf00      	nop
 8019cfe:	3708      	adds	r7, #8
 8019d00:	46bd      	mov	sp, r7
 8019d02:	bd80      	pop	{r7, pc}
 8019d04:	20001550 	.word	0x20001550

08019d08 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b082      	sub	sp, #8
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019d10:	4b03      	ldr	r3, [pc, #12]	@ (8019d20 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	2004      	movs	r0, #4
 8019d16:	4798      	blx	r3
}
 8019d18:	bf00      	nop
 8019d1a:	3708      	adds	r7, #8
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	20001550 	.word	0x20001550

08019d24 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b082      	sub	sp, #8
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019d2c:	4b03      	ldr	r3, [pc, #12]	@ (8019d3c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	2008      	movs	r0, #8
 8019d32:	4798      	blx	r3
}
 8019d34:	bf00      	nop
 8019d36:	3708      	adds	r7, #8
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}
 8019d3c:	20001550 	.word	0x20001550

08019d40 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d40:	b580      	push	{r7, lr}
 8019d42:	b082      	sub	sp, #8
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019d48:	4b03      	ldr	r3, [pc, #12]	@ (8019d58 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	2010      	movs	r0, #16
 8019d4e:	4798      	blx	r3
}
 8019d50:	bf00      	nop
 8019d52:	3708      	adds	r7, #8
 8019d54:	46bd      	mov	sp, r7
 8019d56:	bd80      	pop	{r7, pc}
 8019d58:	20001550 	.word	0x20001550

08019d5c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b082      	sub	sp, #8
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8019d64:	4b04      	ldr	r3, [pc, #16]	@ (8019d78 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8019d6c:	4798      	blx	r3
}
 8019d6e:	bf00      	nop
 8019d70:	3708      	adds	r7, #8
 8019d72:	46bd      	mov	sp, r7
 8019d74:	bd80      	pop	{r7, pc}
 8019d76:	bf00      	nop
 8019d78:	20001550 	.word	0x20001550

08019d7c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b084      	sub	sp, #16
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	4603      	mov	r3, r0
 8019d84:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019d86:	f7f0 fb5d 	bl	800a444 <RBI_IsDCDC>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	2b01      	cmp	r3, #1
 8019d8e:	d112      	bne.n	8019db6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019d90:	f640 1023 	movw	r0, #2339	@ 0x923
 8019d94:	f7ff fe02 	bl	801999c <SUBGRF_ReadRegister>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019d9c:	7bfb      	ldrb	r3, [r7, #15]
 8019d9e:	f023 0306 	bic.w	r3, r3, #6
 8019da2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019da4:	7bfa      	ldrb	r2, [r7, #15]
 8019da6:	79fb      	ldrb	r3, [r7, #7]
 8019da8:	4313      	orrs	r3, r2
 8019daa:	b2db      	uxtb	r3, r3
 8019dac:	4619      	mov	r1, r3
 8019dae:	f640 1023 	movw	r0, #2339	@ 0x923
 8019db2:	f7ff fdd1 	bl	8019958 <SUBGRF_WriteRegister>
  }
}
 8019db6:	bf00      	nop
 8019db8:	3710      	adds	r7, #16
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	bd80      	pop	{r7, pc}
	...

08019dc0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019dc0:	b480      	push	{r7}
 8019dc2:	b085      	sub	sp, #20
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d101      	bne.n	8019dd2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019dce:	231f      	movs	r3, #31
 8019dd0:	e017      	b.n	8019e02 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	73fb      	strb	r3, [r7, #15]
 8019dd6:	e00f      	b.n	8019df8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019dd8:	7bfb      	ldrb	r3, [r7, #15]
 8019dda:	4a0c      	ldr	r2, [pc, #48]	@ (8019e0c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019ddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019de0:	687a      	ldr	r2, [r7, #4]
 8019de2:	429a      	cmp	r2, r3
 8019de4:	d205      	bcs.n	8019df2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019de6:	7bfb      	ldrb	r3, [r7, #15]
 8019de8:	4a08      	ldr	r2, [pc, #32]	@ (8019e0c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019dea:	00db      	lsls	r3, r3, #3
 8019dec:	4413      	add	r3, r2
 8019dee:	791b      	ldrb	r3, [r3, #4]
 8019df0:	e007      	b.n	8019e02 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019df2:	7bfb      	ldrb	r3, [r7, #15]
 8019df4:	3301      	adds	r3, #1
 8019df6:	73fb      	strb	r3, [r7, #15]
 8019df8:	7bfb      	ldrb	r3, [r7, #15]
 8019dfa:	2b15      	cmp	r3, #21
 8019dfc:	d9ec      	bls.n	8019dd8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8019dfe:	bf00      	nop
 8019e00:	e7fd      	b.n	8019dfe <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	3714      	adds	r7, #20
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bc80      	pop	{r7}
 8019e0a:	4770      	bx	lr
 8019e0c:	0801ca54 	.word	0x0801ca54

08019e10 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b08a      	sub	sp, #40	@ 0x28
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
 8019e18:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019e1a:	4b35      	ldr	r3, [pc, #212]	@ (8019ef0 <SUBGRF_GetCFO+0xe0>)
 8019e1c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019e1e:	f640 0007 	movw	r0, #2055	@ 0x807
 8019e22:	f7ff fdbb 	bl	801999c <SUBGRF_ReadRegister>
 8019e26:	4603      	mov	r3, r0
 8019e28:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019e2a:	7ffb      	ldrb	r3, [r7, #31]
 8019e2c:	08db      	lsrs	r3, r3, #3
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	f003 0303 	and.w	r3, r3, #3
 8019e34:	3328      	adds	r3, #40	@ 0x28
 8019e36:	443b      	add	r3, r7
 8019e38:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019e3c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019e3e:	7ffb      	ldrb	r3, [r7, #31]
 8019e40:	f003 0307 	and.w	r3, r3, #7
 8019e44:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8019e46:	7fba      	ldrb	r2, [r7, #30]
 8019e48:	7f7b      	ldrb	r3, [r7, #29]
 8019e4a:	3301      	adds	r3, #1
 8019e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8019e50:	461a      	mov	r2, r3
 8019e52:	4b28      	ldr	r3, [pc, #160]	@ (8019ef4 <SUBGRF_GetCFO+0xe4>)
 8019e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e58:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019e5a:	69ba      	ldr	r2, [r7, #24]
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e62:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019e64:	2301      	movs	r3, #1
 8019e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e6e:	697a      	ldr	r2, [r7, #20]
 8019e70:	fb02 f303 	mul.w	r3, r2, r3
 8019e74:	2b07      	cmp	r3, #7
 8019e76:	d802      	bhi.n	8019e7e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019e78:	2302      	movs	r3, #2
 8019e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8019e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e82:	697a      	ldr	r2, [r7, #20]
 8019e84:	fb02 f303 	mul.w	r3, r2, r3
 8019e88:	2b03      	cmp	r3, #3
 8019e8a:	d802      	bhi.n	8019e92 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019e8c:	2304      	movs	r3, #4
 8019e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019e92:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	fb02 f303 	mul.w	r3, r2, r3
 8019e9c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019e9e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8019ea2:	f7ff fd7b 	bl	801999c <SUBGRF_ReadRegister>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	021b      	lsls	r3, r3, #8
 8019eaa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019eae:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019eb0:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8019eb4:	f7ff fd72 	bl	801999c <SUBGRF_ReadRegister>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	461a      	mov	r2, r3
 8019ebc:	6a3b      	ldr	r3, [r7, #32]
 8019ebe:	4313      	orrs	r3, r2
 8019ec0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019ec2:	6a3b      	ldr	r3, [r7, #32]
 8019ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d005      	beq.n	8019ed8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019ecc:	6a3b      	ldr	r3, [r7, #32]
 8019ece:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019ed2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019ed6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019ed8:	693b      	ldr	r3, [r7, #16]
 8019eda:	095b      	lsrs	r3, r3, #5
 8019edc:	6a3a      	ldr	r2, [r7, #32]
 8019ede:	fb02 f303 	mul.w	r3, r2, r3
 8019ee2:	11da      	asrs	r2, r3, #7
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	601a      	str	r2, [r3, #0]
}
 8019ee8:	bf00      	nop
 8019eea:	3728      	adds	r7, #40	@ 0x28
 8019eec:	46bd      	mov	sp, r7
 8019eee:	bd80      	pop	{r7, pc}
 8019ef0:	0c0a0804 	.word	0x0c0a0804
 8019ef4:	01e84800 	.word	0x01e84800

08019ef8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8019ef8:	b480      	push	{r7}
 8019efa:	b087      	sub	sp, #28
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	4603      	mov	r3, r0
 8019f00:	60b9      	str	r1, [r7, #8]
 8019f02:	607a      	str	r2, [r7, #4]
 8019f04:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8019f06:	2300      	movs	r3, #0
 8019f08:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8019f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8019f0e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8019f10:	697b      	ldr	r3, [r7, #20]
}
 8019f12:	4618      	mov	r0, r3
 8019f14:	371c      	adds	r7, #28
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bc80      	pop	{r7}
 8019f1a:	4770      	bx	lr

08019f1c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8019f1c:	b480      	push	{r7}
 8019f1e:	b087      	sub	sp, #28
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	4603      	mov	r3, r0
 8019f24:	60b9      	str	r1, [r7, #8]
 8019f26:	607a      	str	r2, [r7, #4]
 8019f28:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8019f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f32:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8019f34:	697b      	ldr	r3, [r7, #20]
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	371c      	adds	r7, #28
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bc80      	pop	{r7}
 8019f3e:	4770      	bx	lr

08019f40 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8019f40:	b480      	push	{r7}
 8019f42:	b085      	sub	sp, #20
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	60f8      	str	r0, [r7, #12]
 8019f48:	60b9      	str	r1, [r7, #8]
 8019f4a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8019f4c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8019f50:	4618      	mov	r0, r3
 8019f52:	3714      	adds	r7, #20
 8019f54:	46bd      	mov	sp, r7
 8019f56:	bc80      	pop	{r7}
 8019f58:	4770      	bx	lr

08019f5a <RFW_DeInit>:

void RFW_DeInit( void )
{
 8019f5a:	b480      	push	{r7}
 8019f5c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8019f5e:	bf00      	nop
 8019f60:	46bd      	mov	sp, r7
 8019f62:	bc80      	pop	{r7}
 8019f64:	4770      	bx	lr

08019f66 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8019f66:	b480      	push	{r7}
 8019f68:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8019f6a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	bc80      	pop	{r7}
 8019f72:	4770      	bx	lr

08019f74 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8019f74:	b480      	push	{r7}
 8019f76:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8019f78:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bc80      	pop	{r7}
 8019f80:	4770      	bx	lr

08019f82 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8019f82:	b480      	push	{r7}
 8019f84:	b083      	sub	sp, #12
 8019f86:	af00      	add	r7, sp, #0
 8019f88:	4603      	mov	r3, r0
 8019f8a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8019f8c:	bf00      	nop
 8019f8e:	370c      	adds	r7, #12
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bc80      	pop	{r7}
 8019f94:	4770      	bx	lr

08019f96 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8019f96:	b480      	push	{r7}
 8019f98:	b087      	sub	sp, #28
 8019f9a:	af00      	add	r7, sp, #0
 8019f9c:	60f8      	str	r0, [r7, #12]
 8019f9e:	460b      	mov	r3, r1
 8019fa0:	607a      	str	r2, [r7, #4]
 8019fa2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8019fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fa8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8019faa:	697b      	ldr	r3, [r7, #20]
}
 8019fac:	4618      	mov	r0, r3
 8019fae:	371c      	adds	r7, #28
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	bc80      	pop	{r7}
 8019fb4:	4770      	bx	lr

08019fb6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019fb6:	b480      	push	{r7}
 8019fb8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8019fba:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	bc80      	pop	{r7}
 8019fc4:	4770      	bx	lr

08019fc6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8019fc6:	b480      	push	{r7}
 8019fc8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8019fca:	bf00      	nop
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	bc80      	pop	{r7}
 8019fd0:	4770      	bx	lr

08019fd2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019fd2:	b480      	push	{r7}
 8019fd4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8019fd6:	bf00      	nop
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	bc80      	pop	{r7}
 8019fdc:	4770      	bx	lr

08019fde <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8019fde:	b480      	push	{r7}
 8019fe0:	b083      	sub	sp, #12
 8019fe2:	af00      	add	r7, sp, #0
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8019fe8:	bf00      	nop
 8019fea:	370c      	adds	r7, #12
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bc80      	pop	{r7}
 8019ff0:	4770      	bx	lr
	...

08019ff4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019ff4:	b480      	push	{r7}
 8019ff6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019ff8:	4b04      	ldr	r3, [pc, #16]	@ (801a00c <UTIL_LPM_Init+0x18>)
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019ffe:	4b04      	ldr	r3, [pc, #16]	@ (801a010 <UTIL_LPM_Init+0x1c>)
 801a000:	2200      	movs	r2, #0
 801a002:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a004:	bf00      	nop
 801a006:	46bd      	mov	sp, r7
 801a008:	bc80      	pop	{r7}
 801a00a:	4770      	bx	lr
 801a00c:	20001554 	.word	0x20001554
 801a010:	20001558 	.word	0x20001558

0801a014 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a014:	b480      	push	{r7}
 801a016:	b087      	sub	sp, #28
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
 801a01c:	460b      	mov	r3, r1
 801a01e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a020:	f3ef 8310 	mrs	r3, PRIMASK
 801a024:	613b      	str	r3, [r7, #16]
  return(result);
 801a026:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a028:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a02a:	b672      	cpsid	i
}
 801a02c:	bf00      	nop
  
  switch( state )
 801a02e:	78fb      	ldrb	r3, [r7, #3]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d008      	beq.n	801a046 <UTIL_LPM_SetStopMode+0x32>
 801a034:	2b01      	cmp	r3, #1
 801a036:	d10e      	bne.n	801a056 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a038:	4b0d      	ldr	r3, [pc, #52]	@ (801a070 <UTIL_LPM_SetStopMode+0x5c>)
 801a03a:	681a      	ldr	r2, [r3, #0]
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	4313      	orrs	r3, r2
 801a040:	4a0b      	ldr	r2, [pc, #44]	@ (801a070 <UTIL_LPM_SetStopMode+0x5c>)
 801a042:	6013      	str	r3, [r2, #0]
      break;
 801a044:	e008      	b.n	801a058 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	43da      	mvns	r2, r3
 801a04a:	4b09      	ldr	r3, [pc, #36]	@ (801a070 <UTIL_LPM_SetStopMode+0x5c>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	4013      	ands	r3, r2
 801a050:	4a07      	ldr	r2, [pc, #28]	@ (801a070 <UTIL_LPM_SetStopMode+0x5c>)
 801a052:	6013      	str	r3, [r2, #0]
      break;
 801a054:	e000      	b.n	801a058 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a056:	bf00      	nop
 801a058:	697b      	ldr	r3, [r7, #20]
 801a05a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	f383 8810 	msr	PRIMASK, r3
}
 801a062:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a064:	bf00      	nop
 801a066:	371c      	adds	r7, #28
 801a068:	46bd      	mov	sp, r7
 801a06a:	bc80      	pop	{r7}
 801a06c:	4770      	bx	lr
 801a06e:	bf00      	nop
 801a070:	20001554 	.word	0x20001554

0801a074 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a074:	b480      	push	{r7}
 801a076:	b087      	sub	sp, #28
 801a078:	af00      	add	r7, sp, #0
 801a07a:	6078      	str	r0, [r7, #4]
 801a07c:	460b      	mov	r3, r1
 801a07e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a080:	f3ef 8310 	mrs	r3, PRIMASK
 801a084:	613b      	str	r3, [r7, #16]
  return(result);
 801a086:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a08a:	b672      	cpsid	i
}
 801a08c:	bf00      	nop
  
  switch(state)
 801a08e:	78fb      	ldrb	r3, [r7, #3]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d008      	beq.n	801a0a6 <UTIL_LPM_SetOffMode+0x32>
 801a094:	2b01      	cmp	r3, #1
 801a096:	d10e      	bne.n	801a0b6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a098:	4b0d      	ldr	r3, [pc, #52]	@ (801a0d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a09a:	681a      	ldr	r2, [r3, #0]
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	4313      	orrs	r3, r2
 801a0a0:	4a0b      	ldr	r2, [pc, #44]	@ (801a0d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a0a2:	6013      	str	r3, [r2, #0]
      break;
 801a0a4:	e008      	b.n	801a0b8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	43da      	mvns	r2, r3
 801a0aa:	4b09      	ldr	r3, [pc, #36]	@ (801a0d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	4013      	ands	r3, r2
 801a0b0:	4a07      	ldr	r2, [pc, #28]	@ (801a0d0 <UTIL_LPM_SetOffMode+0x5c>)
 801a0b2:	6013      	str	r3, [r2, #0]
      break;
 801a0b4:	e000      	b.n	801a0b8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a0b6:	bf00      	nop
 801a0b8:	697b      	ldr	r3, [r7, #20]
 801a0ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	f383 8810 	msr	PRIMASK, r3
}
 801a0c2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a0c4:	bf00      	nop
 801a0c6:	371c      	adds	r7, #28
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bc80      	pop	{r7}
 801a0cc:	4770      	bx	lr
 801a0ce:	bf00      	nop
 801a0d0:	20001558 	.word	0x20001558

0801a0d4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b084      	sub	sp, #16
 801a0d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0da:	f3ef 8310 	mrs	r3, PRIMASK
 801a0de:	60bb      	str	r3, [r7, #8]
  return(result);
 801a0e0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a0e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0e4:	b672      	cpsid	i
}
 801a0e6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0e8:	4b12      	ldr	r3, [pc, #72]	@ (801a134 <UTIL_LPM_EnterLowPower+0x60>)
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d006      	beq.n	801a0fe <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a0f0:	4b11      	ldr	r3, [pc, #68]	@ (801a138 <UTIL_LPM_EnterLowPower+0x64>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a0f6:	4b10      	ldr	r3, [pc, #64]	@ (801a138 <UTIL_LPM_EnterLowPower+0x64>)
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	4798      	blx	r3
 801a0fc:	e010      	b.n	801a120 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0fe:	4b0f      	ldr	r3, [pc, #60]	@ (801a13c <UTIL_LPM_EnterLowPower+0x68>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d006      	beq.n	801a114 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a106:	4b0c      	ldr	r3, [pc, #48]	@ (801a138 <UTIL_LPM_EnterLowPower+0x64>)
 801a108:	689b      	ldr	r3, [r3, #8]
 801a10a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a10c:	4b0a      	ldr	r3, [pc, #40]	@ (801a138 <UTIL_LPM_EnterLowPower+0x64>)
 801a10e:	68db      	ldr	r3, [r3, #12]
 801a110:	4798      	blx	r3
 801a112:	e005      	b.n	801a120 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a114:	4b08      	ldr	r3, [pc, #32]	@ (801a138 <UTIL_LPM_EnterLowPower+0x64>)
 801a116:	691b      	ldr	r3, [r3, #16]
 801a118:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a11a:	4b07      	ldr	r3, [pc, #28]	@ (801a138 <UTIL_LPM_EnterLowPower+0x64>)
 801a11c:	695b      	ldr	r3, [r3, #20]
 801a11e:	4798      	blx	r3
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	f383 8810 	msr	PRIMASK, r3
}
 801a12a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a12c:	bf00      	nop
 801a12e:	3710      	adds	r7, #16
 801a130:	46bd      	mov	sp, r7
 801a132:	bd80      	pop	{r7, pc}
 801a134:	20001554 	.word	0x20001554
 801a138:	0801c4c8 	.word	0x0801c4c8
 801a13c:	20001558 	.word	0x20001558

0801a140 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a140:	b480      	push	{r7}
 801a142:	b087      	sub	sp, #28
 801a144:	af00      	add	r7, sp, #0
 801a146:	60f8      	str	r0, [r7, #12]
 801a148:	60b9      	str	r1, [r7, #8]
 801a14a:	4613      	mov	r3, r2
 801a14c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a152:	68bb      	ldr	r3, [r7, #8]
 801a154:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a156:	e007      	b.n	801a168 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a158:	693a      	ldr	r2, [r7, #16]
 801a15a:	1c53      	adds	r3, r2, #1
 801a15c:	613b      	str	r3, [r7, #16]
 801a15e:	697b      	ldr	r3, [r7, #20]
 801a160:	1c59      	adds	r1, r3, #1
 801a162:	6179      	str	r1, [r7, #20]
 801a164:	7812      	ldrb	r2, [r2, #0]
 801a166:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a168:	88fb      	ldrh	r3, [r7, #6]
 801a16a:	1e5a      	subs	r2, r3, #1
 801a16c:	80fa      	strh	r2, [r7, #6]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d1f2      	bne.n	801a158 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a172:	bf00      	nop
 801a174:	bf00      	nop
 801a176:	371c      	adds	r7, #28
 801a178:	46bd      	mov	sp, r7
 801a17a:	bc80      	pop	{r7}
 801a17c:	4770      	bx	lr

0801a17e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a17e:	b480      	push	{r7}
 801a180:	b085      	sub	sp, #20
 801a182:	af00      	add	r7, sp, #0
 801a184:	6078      	str	r0, [r7, #4]
 801a186:	460b      	mov	r3, r1
 801a188:	70fb      	strb	r3, [r7, #3]
 801a18a:	4613      	mov	r3, r2
 801a18c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a192:	e004      	b.n	801a19e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	1c5a      	adds	r2, r3, #1
 801a198:	60fa      	str	r2, [r7, #12]
 801a19a:	78fa      	ldrb	r2, [r7, #3]
 801a19c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a19e:	883b      	ldrh	r3, [r7, #0]
 801a1a0:	1e5a      	subs	r2, r3, #1
 801a1a2:	803a      	strh	r2, [r7, #0]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d1f5      	bne.n	801a194 <UTIL_MEM_set_8+0x16>
  }
}
 801a1a8:	bf00      	nop
 801a1aa:	bf00      	nop
 801a1ac:	3714      	adds	r7, #20
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bc80      	pop	{r7}
 801a1b2:	4770      	bx	lr

0801a1b4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a1b4:	b082      	sub	sp, #8
 801a1b6:	b480      	push	{r7}
 801a1b8:	b087      	sub	sp, #28
 801a1ba:	af00      	add	r7, sp, #0
 801a1bc:	60f8      	str	r0, [r7, #12]
 801a1be:	1d38      	adds	r0, r7, #4
 801a1c0:	e880 0006 	stmia.w	r0, {r1, r2}
 801a1c4:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	613b      	str	r3, [r7, #16]
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1d2:	4413      	add	r3, r2
 801a1d4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a1d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a1da:	b29a      	uxth	r2, r3
 801a1dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	4413      	add	r3, r2
 801a1e4:	b29b      	uxth	r3, r3
 801a1e6:	b21b      	sxth	r3, r3
 801a1e8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a1ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a1f2:	db0a      	blt.n	801a20a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a1f4:	693b      	ldr	r3, [r7, #16]
 801a1f6:	3301      	adds	r3, #1
 801a1f8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a1fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1fe:	b29b      	uxth	r3, r3
 801a200:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a204:	b29b      	uxth	r3, r3
 801a206:	b21b      	sxth	r3, r3
 801a208:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	461a      	mov	r2, r3
 801a20e:	f107 0310 	add.w	r3, r7, #16
 801a212:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a216:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a21a:	68f8      	ldr	r0, [r7, #12]
 801a21c:	371c      	adds	r7, #28
 801a21e:	46bd      	mov	sp, r7
 801a220:	bc80      	pop	{r7}
 801a222:	b002      	add	sp, #8
 801a224:	4770      	bx	lr

0801a226 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a226:	b082      	sub	sp, #8
 801a228:	b480      	push	{r7}
 801a22a:	b087      	sub	sp, #28
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	60f8      	str	r0, [r7, #12]
 801a230:	1d38      	adds	r0, r7, #4
 801a232:	e880 0006 	stmia.w	r0, {r1, r2}
 801a236:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a238:	2300      	movs	r3, #0
 801a23a:	613b      	str	r3, [r7, #16]
 801a23c:	2300      	movs	r3, #0
 801a23e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a240:	687a      	ldr	r2, [r7, #4]
 801a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a244:	1ad3      	subs	r3, r2, r3
 801a246:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a248:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a24c:	b29a      	uxth	r2, r3
 801a24e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a252:	b29b      	uxth	r3, r3
 801a254:	1ad3      	subs	r3, r2, r3
 801a256:	b29b      	uxth	r3, r3
 801a258:	b21b      	sxth	r3, r3
 801a25a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a25c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a260:	2b00      	cmp	r3, #0
 801a262:	da0a      	bge.n	801a27a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a264:	693b      	ldr	r3, [r7, #16]
 801a266:	3b01      	subs	r3, #1
 801a268:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a26a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a26e:	b29b      	uxth	r3, r3
 801a270:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a274:	b29b      	uxth	r3, r3
 801a276:	b21b      	sxth	r3, r3
 801a278:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	461a      	mov	r2, r3
 801a27e:	f107 0310 	add.w	r3, r7, #16
 801a282:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a286:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a28a:	68f8      	ldr	r0, [r7, #12]
 801a28c:	371c      	adds	r7, #28
 801a28e:	46bd      	mov	sp, r7
 801a290:	bc80      	pop	{r7}
 801a292:	b002      	add	sp, #8
 801a294:	4770      	bx	lr
	...

0801a298 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a298:	b580      	push	{r7, lr}
 801a29a:	b088      	sub	sp, #32
 801a29c:	af02      	add	r7, sp, #8
 801a29e:	463b      	mov	r3, r7
 801a2a0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	60bb      	str	r3, [r7, #8]
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a2ac:	4b10      	ldr	r3, [pc, #64]	@ (801a2f0 <SysTimeSet+0x58>)
 801a2ae:	691b      	ldr	r3, [r3, #16]
 801a2b0:	f107 0208 	add.w	r2, r7, #8
 801a2b4:	3204      	adds	r2, #4
 801a2b6:	4610      	mov	r0, r2
 801a2b8:	4798      	blx	r3
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a2be:	f107 0010 	add.w	r0, r7, #16
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	9300      	str	r3, [sp, #0]
 801a2c6:	68bb      	ldr	r3, [r7, #8]
 801a2c8:	463a      	mov	r2, r7
 801a2ca:	ca06      	ldmia	r2, {r1, r2}
 801a2cc:	f7ff ffab 	bl	801a226 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a2d0:	4b07      	ldr	r3, [pc, #28]	@ (801a2f0 <SysTimeSet+0x58>)
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	693a      	ldr	r2, [r7, #16]
 801a2d6:	4610      	mov	r0, r2
 801a2d8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a2da:	4b05      	ldr	r3, [pc, #20]	@ (801a2f0 <SysTimeSet+0x58>)
 801a2dc:	689b      	ldr	r3, [r3, #8]
 801a2de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a2e2:	4610      	mov	r0, r2
 801a2e4:	4798      	blx	r3
}
 801a2e6:	bf00      	nop
 801a2e8:	3718      	adds	r7, #24
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	bd80      	pop	{r7, pc}
 801a2ee:	bf00      	nop
 801a2f0:	0801c5ac 	.word	0x0801c5ac

0801a2f4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b08a      	sub	sp, #40	@ 0x28
 801a2f8:	af02      	add	r7, sp, #8
 801a2fa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	61bb      	str	r3, [r7, #24]
 801a300:	2300      	movs	r3, #0
 801a302:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a304:	2300      	movs	r3, #0
 801a306:	613b      	str	r3, [r7, #16]
 801a308:	2300      	movs	r3, #0
 801a30a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a30c:	4b14      	ldr	r3, [pc, #80]	@ (801a360 <SysTimeGet+0x6c>)
 801a30e:	691b      	ldr	r3, [r3, #16]
 801a310:	f107 0218 	add.w	r2, r7, #24
 801a314:	3204      	adds	r2, #4
 801a316:	4610      	mov	r0, r2
 801a318:	4798      	blx	r3
 801a31a:	4603      	mov	r3, r0
 801a31c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a31e:	4b10      	ldr	r3, [pc, #64]	@ (801a360 <SysTimeGet+0x6c>)
 801a320:	68db      	ldr	r3, [r3, #12]
 801a322:	4798      	blx	r3
 801a324:	4603      	mov	r3, r0
 801a326:	b21b      	sxth	r3, r3
 801a328:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a32a:	4b0d      	ldr	r3, [pc, #52]	@ (801a360 <SysTimeGet+0x6c>)
 801a32c:	685b      	ldr	r3, [r3, #4]
 801a32e:	4798      	blx	r3
 801a330:	4603      	mov	r3, r0
 801a332:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a334:	f107 0010 	add.w	r0, r7, #16
 801a338:	69fb      	ldr	r3, [r7, #28]
 801a33a:	9300      	str	r3, [sp, #0]
 801a33c:	69bb      	ldr	r3, [r7, #24]
 801a33e:	f107 0208 	add.w	r2, r7, #8
 801a342:	ca06      	ldmia	r2, {r1, r2}
 801a344:	f7ff ff36 	bl	801a1b4 <SysTimeAdd>

  return sysTime;
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	461a      	mov	r2, r3
 801a34c:	f107 0310 	add.w	r3, r7, #16
 801a350:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a354:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a358:	6878      	ldr	r0, [r7, #4]
 801a35a:	3720      	adds	r7, #32
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}
 801a360:	0801c5ac 	.word	0x0801c5ac

0801a364 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b084      	sub	sp, #16
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a36c:	2300      	movs	r3, #0
 801a36e:	60bb      	str	r3, [r7, #8]
 801a370:	2300      	movs	r3, #0
 801a372:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a374:	4b0a      	ldr	r3, [pc, #40]	@ (801a3a0 <SysTimeGetMcuTime+0x3c>)
 801a376:	691b      	ldr	r3, [r3, #16]
 801a378:	f107 0208 	add.w	r2, r7, #8
 801a37c:	3204      	adds	r2, #4
 801a37e:	4610      	mov	r0, r2
 801a380:	4798      	blx	r3
 801a382:	4603      	mov	r3, r0
 801a384:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	461a      	mov	r2, r3
 801a38a:	f107 0308 	add.w	r3, r7, #8
 801a38e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a392:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a396:	6878      	ldr	r0, [r7, #4]
 801a398:	3710      	adds	r7, #16
 801a39a:	46bd      	mov	sp, r7
 801a39c:	bd80      	pop	{r7, pc}
 801a39e:	bf00      	nop
 801a3a0:	0801c5ac 	.word	0x0801c5ac

0801a3a4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a3a4:	b480      	push	{r7}
 801a3a6:	b085      	sub	sp, #20
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a3b0:	e00e      	b.n	801a3d0 <ee_skip_atoi+0x2c>
 801a3b2:	68fa      	ldr	r2, [r7, #12]
 801a3b4:	4613      	mov	r3, r2
 801a3b6:	009b      	lsls	r3, r3, #2
 801a3b8:	4413      	add	r3, r2
 801a3ba:	005b      	lsls	r3, r3, #1
 801a3bc:	4618      	mov	r0, r3
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	1c59      	adds	r1, r3, #1
 801a3c4:	687a      	ldr	r2, [r7, #4]
 801a3c6:	6011      	str	r1, [r2, #0]
 801a3c8:	781b      	ldrb	r3, [r3, #0]
 801a3ca:	4403      	add	r3, r0
 801a3cc:	3b30      	subs	r3, #48	@ 0x30
 801a3ce:	60fb      	str	r3, [r7, #12]
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	781b      	ldrb	r3, [r3, #0]
 801a3d6:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3d8:	d904      	bls.n	801a3e4 <ee_skip_atoi+0x40>
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	781b      	ldrb	r3, [r3, #0]
 801a3e0:	2b39      	cmp	r3, #57	@ 0x39
 801a3e2:	d9e6      	bls.n	801a3b2 <ee_skip_atoi+0xe>
  return i;
 801a3e4:	68fb      	ldr	r3, [r7, #12]
}
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	3714      	adds	r7, #20
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bc80      	pop	{r7}
 801a3ee:	4770      	bx	lr

0801a3f0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a3f0:	b480      	push	{r7}
 801a3f2:	b099      	sub	sp, #100	@ 0x64
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	60f8      	str	r0, [r7, #12]
 801a3f8:	60b9      	str	r1, [r7, #8]
 801a3fa:	607a      	str	r2, [r7, #4]
 801a3fc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a3fe:	4b71      	ldr	r3, [pc, #452]	@ (801a5c4 <ee_number+0x1d4>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a404:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d002      	beq.n	801a414 <ee_number+0x24>
 801a40e:	4b6e      	ldr	r3, [pc, #440]	@ (801a5c8 <ee_number+0x1d8>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a414:	683b      	ldr	r3, [r7, #0]
 801a416:	2b01      	cmp	r3, #1
 801a418:	dd02      	ble.n	801a420 <ee_number+0x30>
 801a41a:	683b      	ldr	r3, [r7, #0]
 801a41c:	2b24      	cmp	r3, #36	@ 0x24
 801a41e:	dd01      	ble.n	801a424 <ee_number+0x34>
 801a420:	2300      	movs	r3, #0
 801a422:	e0ca      	b.n	801a5ba <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a426:	f003 0301 	and.w	r3, r3, #1
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d001      	beq.n	801a432 <ee_number+0x42>
 801a42e:	2330      	movs	r3, #48	@ 0x30
 801a430:	e000      	b.n	801a434 <ee_number+0x44>
 801a432:	2320      	movs	r3, #32
 801a434:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a438:	2300      	movs	r3, #0
 801a43a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a43e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a440:	f003 0302 	and.w	r3, r3, #2
 801a444:	2b00      	cmp	r3, #0
 801a446:	d00b      	beq.n	801a460 <ee_number+0x70>
  {
    if (num < 0)
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	da08      	bge.n	801a460 <ee_number+0x70>
    {
      sign = '-';
 801a44e:	232d      	movs	r3, #45	@ 0x2d
 801a450:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	425b      	negs	r3, r3
 801a458:	607b      	str	r3, [r7, #4]
      size--;
 801a45a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a45c:	3b01      	subs	r3, #1
 801a45e:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a460:	2300      	movs	r3, #0
 801a462:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d11e      	bne.n	801a4a8 <ee_number+0xb8>
    tmp[i++] = '0';
 801a46a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a46c:	1c5a      	adds	r2, r3, #1
 801a46e:	657a      	str	r2, [r7, #84]	@ 0x54
 801a470:	3360      	adds	r3, #96	@ 0x60
 801a472:	443b      	add	r3, r7
 801a474:	2230      	movs	r2, #48	@ 0x30
 801a476:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a47a:	e018      	b.n	801a4ae <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	683a      	ldr	r2, [r7, #0]
 801a480:	fbb3 f1f2 	udiv	r1, r3, r2
 801a484:	fb01 f202 	mul.w	r2, r1, r2
 801a488:	1a9b      	subs	r3, r3, r2
 801a48a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a48c:	441a      	add	r2, r3
 801a48e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a490:	1c59      	adds	r1, r3, #1
 801a492:	6579      	str	r1, [r7, #84]	@ 0x54
 801a494:	7812      	ldrb	r2, [r2, #0]
 801a496:	3360      	adds	r3, #96	@ 0x60
 801a498:	443b      	add	r3, r7
 801a49a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a49e:	687a      	ldr	r2, [r7, #4]
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4a6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d1e6      	bne.n	801a47c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a4ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	dd01      	ble.n	801a4ba <ee_number+0xca>
 801a4b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a4ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a4bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a4be:	1ad3      	subs	r3, r2, r3
 801a4c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a4c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a4c4:	f003 0301 	and.w	r3, r3, #1
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d112      	bne.n	801a4f2 <ee_number+0x102>
 801a4cc:	e00c      	b.n	801a4e8 <ee_number+0xf8>
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	1c5a      	adds	r2, r3, #1
 801a4d2:	60fa      	str	r2, [r7, #12]
 801a4d4:	2220      	movs	r2, #32
 801a4d6:	701a      	strb	r2, [r3, #0]
 801a4d8:	68bb      	ldr	r3, [r7, #8]
 801a4da:	3b01      	subs	r3, #1
 801a4dc:	60bb      	str	r3, [r7, #8]
 801a4de:	68bb      	ldr	r3, [r7, #8]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d101      	bne.n	801a4e8 <ee_number+0xf8>
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	e068      	b.n	801a5ba <ee_number+0x1ca>
 801a4e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4ea:	1e5a      	subs	r2, r3, #1
 801a4ec:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	dced      	bgt.n	801a4ce <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a4f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d01b      	beq.n	801a532 <ee_number+0x142>
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	1c5a      	adds	r2, r3, #1
 801a4fe:	60fa      	str	r2, [r7, #12]
 801a500:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a504:	701a      	strb	r2, [r3, #0]
 801a506:	68bb      	ldr	r3, [r7, #8]
 801a508:	3b01      	subs	r3, #1
 801a50a:	60bb      	str	r3, [r7, #8]
 801a50c:	68bb      	ldr	r3, [r7, #8]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d10f      	bne.n	801a532 <ee_number+0x142>
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	e051      	b.n	801a5ba <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	1c5a      	adds	r2, r3, #1
 801a51a:	60fa      	str	r2, [r7, #12]
 801a51c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a520:	701a      	strb	r2, [r3, #0]
 801a522:	68bb      	ldr	r3, [r7, #8]
 801a524:	3b01      	subs	r3, #1
 801a526:	60bb      	str	r3, [r7, #8]
 801a528:	68bb      	ldr	r3, [r7, #8]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d101      	bne.n	801a532 <ee_number+0x142>
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	e043      	b.n	801a5ba <ee_number+0x1ca>
 801a532:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a534:	1e5a      	subs	r2, r3, #1
 801a536:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a538:	2b00      	cmp	r3, #0
 801a53a:	dcec      	bgt.n	801a516 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a53c:	e00c      	b.n	801a558 <ee_number+0x168>
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	1c5a      	adds	r2, r3, #1
 801a542:	60fa      	str	r2, [r7, #12]
 801a544:	2230      	movs	r2, #48	@ 0x30
 801a546:	701a      	strb	r2, [r3, #0]
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	3b01      	subs	r3, #1
 801a54c:	60bb      	str	r3, [r7, #8]
 801a54e:	68bb      	ldr	r3, [r7, #8]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d101      	bne.n	801a558 <ee_number+0x168>
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	e030      	b.n	801a5ba <ee_number+0x1ca>
 801a558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a55a:	1e5a      	subs	r2, r3, #1
 801a55c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a55e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a560:	429a      	cmp	r2, r3
 801a562:	dbec      	blt.n	801a53e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a564:	e010      	b.n	801a588 <ee_number+0x198>
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	1c5a      	adds	r2, r3, #1
 801a56a:	60fa      	str	r2, [r7, #12]
 801a56c:	f107 0110 	add.w	r1, r7, #16
 801a570:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a572:	440a      	add	r2, r1
 801a574:	7812      	ldrb	r2, [r2, #0]
 801a576:	701a      	strb	r2, [r3, #0]
 801a578:	68bb      	ldr	r3, [r7, #8]
 801a57a:	3b01      	subs	r3, #1
 801a57c:	60bb      	str	r3, [r7, #8]
 801a57e:	68bb      	ldr	r3, [r7, #8]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d101      	bne.n	801a588 <ee_number+0x198>
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	e018      	b.n	801a5ba <ee_number+0x1ca>
 801a588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a58a:	1e5a      	subs	r2, r3, #1
 801a58c:	657a      	str	r2, [r7, #84]	@ 0x54
 801a58e:	2b00      	cmp	r3, #0
 801a590:	dce9      	bgt.n	801a566 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a592:	e00c      	b.n	801a5ae <ee_number+0x1be>
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	1c5a      	adds	r2, r3, #1
 801a598:	60fa      	str	r2, [r7, #12]
 801a59a:	2220      	movs	r2, #32
 801a59c:	701a      	strb	r2, [r3, #0]
 801a59e:	68bb      	ldr	r3, [r7, #8]
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	60bb      	str	r3, [r7, #8]
 801a5a4:	68bb      	ldr	r3, [r7, #8]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d101      	bne.n	801a5ae <ee_number+0x1be>
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	e005      	b.n	801a5ba <ee_number+0x1ca>
 801a5ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a5b0:	1e5a      	subs	r2, r3, #1
 801a5b2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	dced      	bgt.n	801a594 <ee_number+0x1a4>

  return str;
 801a5b8:	68fb      	ldr	r3, [r7, #12]
}
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	3764      	adds	r7, #100	@ 0x64
 801a5be:	46bd      	mov	sp, r7
 801a5c0:	bc80      	pop	{r7}
 801a5c2:	4770      	bx	lr
 801a5c4:	20000118 	.word	0x20000118
 801a5c8:	2000011c 	.word	0x2000011c

0801a5cc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b092      	sub	sp, #72	@ 0x48
 801a5d0:	af04      	add	r7, sp, #16
 801a5d2:	60f8      	str	r0, [r7, #12]
 801a5d4:	60b9      	str	r1, [r7, #8]
 801a5d6:	607a      	str	r2, [r7, #4]
 801a5d8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a5da:	68bb      	ldr	r3, [r7, #8]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	dc01      	bgt.n	801a5e4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	e13e      	b.n	801a862 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a5e8:	e128      	b.n	801a83c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a5ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	1ad2      	subs	r2, r2, r3
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	3b01      	subs	r3, #1
 801a5f4:	429a      	cmp	r2, r3
 801a5f6:	f280 812e 	bge.w	801a856 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	781b      	ldrb	r3, [r3, #0]
 801a5fe:	2b25      	cmp	r3, #37	@ 0x25
 801a600:	d006      	beq.n	801a610 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a602:	687a      	ldr	r2, [r7, #4]
 801a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a606:	1c59      	adds	r1, r3, #1
 801a608:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a60a:	7812      	ldrb	r2, [r2, #0]
 801a60c:	701a      	strb	r2, [r3, #0]
      continue;
 801a60e:	e112      	b.n	801a836 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a610:	2300      	movs	r3, #0
 801a612:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	3301      	adds	r3, #1
 801a618:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	781b      	ldrb	r3, [r3, #0]
 801a61e:	2b30      	cmp	r3, #48	@ 0x30
 801a620:	d103      	bne.n	801a62a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a622:	6a3b      	ldr	r3, [r7, #32]
 801a624:	f043 0301 	orr.w	r3, r3, #1
 801a628:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a62a:	f04f 33ff 	mov.w	r3, #4294967295
 801a62e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	781b      	ldrb	r3, [r3, #0]
 801a634:	2b2f      	cmp	r3, #47	@ 0x2f
 801a636:	d908      	bls.n	801a64a <tiny_vsnprintf_like+0x7e>
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	781b      	ldrb	r3, [r3, #0]
 801a63c:	2b39      	cmp	r3, #57	@ 0x39
 801a63e:	d804      	bhi.n	801a64a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a640:	1d3b      	adds	r3, r7, #4
 801a642:	4618      	mov	r0, r3
 801a644:	f7ff feae 	bl	801a3a4 <ee_skip_atoi>
 801a648:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a64a:	f04f 33ff 	mov.w	r3, #4294967295
 801a64e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a650:	f04f 33ff 	mov.w	r3, #4294967295
 801a654:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a656:	230a      	movs	r3, #10
 801a658:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	781b      	ldrb	r3, [r3, #0]
 801a65e:	3b58      	subs	r3, #88	@ 0x58
 801a660:	2b20      	cmp	r3, #32
 801a662:	f200 8094 	bhi.w	801a78e <tiny_vsnprintf_like+0x1c2>
 801a666:	a201      	add	r2, pc, #4	@ (adr r2, 801a66c <tiny_vsnprintf_like+0xa0>)
 801a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a66c:	0801a777 	.word	0x0801a777
 801a670:	0801a78f 	.word	0x0801a78f
 801a674:	0801a78f 	.word	0x0801a78f
 801a678:	0801a78f 	.word	0x0801a78f
 801a67c:	0801a78f 	.word	0x0801a78f
 801a680:	0801a78f 	.word	0x0801a78f
 801a684:	0801a78f 	.word	0x0801a78f
 801a688:	0801a78f 	.word	0x0801a78f
 801a68c:	0801a78f 	.word	0x0801a78f
 801a690:	0801a78f 	.word	0x0801a78f
 801a694:	0801a78f 	.word	0x0801a78f
 801a698:	0801a6fb 	.word	0x0801a6fb
 801a69c:	0801a785 	.word	0x0801a785
 801a6a0:	0801a78f 	.word	0x0801a78f
 801a6a4:	0801a78f 	.word	0x0801a78f
 801a6a8:	0801a78f 	.word	0x0801a78f
 801a6ac:	0801a78f 	.word	0x0801a78f
 801a6b0:	0801a785 	.word	0x0801a785
 801a6b4:	0801a78f 	.word	0x0801a78f
 801a6b8:	0801a78f 	.word	0x0801a78f
 801a6bc:	0801a78f 	.word	0x0801a78f
 801a6c0:	0801a78f 	.word	0x0801a78f
 801a6c4:	0801a78f 	.word	0x0801a78f
 801a6c8:	0801a78f 	.word	0x0801a78f
 801a6cc:	0801a78f 	.word	0x0801a78f
 801a6d0:	0801a78f 	.word	0x0801a78f
 801a6d4:	0801a78f 	.word	0x0801a78f
 801a6d8:	0801a71b 	.word	0x0801a71b
 801a6dc:	0801a78f 	.word	0x0801a78f
 801a6e0:	0801a7db 	.word	0x0801a7db
 801a6e4:	0801a78f 	.word	0x0801a78f
 801a6e8:	0801a78f 	.word	0x0801a78f
 801a6ec:	0801a77f 	.word	0x0801a77f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6f2:	1c5a      	adds	r2, r3, #1
 801a6f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a6f6:	2220      	movs	r2, #32
 801a6f8:	701a      	strb	r2, [r3, #0]
 801a6fa:	69fb      	ldr	r3, [r7, #28]
 801a6fc:	3b01      	subs	r3, #1
 801a6fe:	61fb      	str	r3, [r7, #28]
 801a700:	69fb      	ldr	r3, [r7, #28]
 801a702:	2b00      	cmp	r3, #0
 801a704:	dcf4      	bgt.n	801a6f0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	1d1a      	adds	r2, r3, #4
 801a70a:	603a      	str	r2, [r7, #0]
 801a70c:	6819      	ldr	r1, [r3, #0]
 801a70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a710:	1c5a      	adds	r2, r3, #1
 801a712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a714:	b2ca      	uxtb	r2, r1
 801a716:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a718:	e08d      	b.n	801a836 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a71a:	683b      	ldr	r3, [r7, #0]
 801a71c:	1d1a      	adds	r2, r3, #4
 801a71e:	603a      	str	r2, [r7, #0]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a726:	2b00      	cmp	r3, #0
 801a728:	d101      	bne.n	801a72e <tiny_vsnprintf_like+0x162>
 801a72a:	4b50      	ldr	r3, [pc, #320]	@ (801a86c <tiny_vsnprintf_like+0x2a0>)
 801a72c:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a72e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a730:	f7e5 fd26 	bl	8000180 <strlen>
 801a734:	4603      	mov	r3, r0
 801a736:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a738:	e004      	b.n	801a744 <tiny_vsnprintf_like+0x178>
 801a73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a73c:	1c5a      	adds	r2, r3, #1
 801a73e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a740:	2220      	movs	r2, #32
 801a742:	701a      	strb	r2, [r3, #0]
 801a744:	69fb      	ldr	r3, [r7, #28]
 801a746:	1e5a      	subs	r2, r3, #1
 801a748:	61fa      	str	r2, [r7, #28]
 801a74a:	693a      	ldr	r2, [r7, #16]
 801a74c:	429a      	cmp	r2, r3
 801a74e:	dbf4      	blt.n	801a73a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a750:	2300      	movs	r3, #0
 801a752:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a754:	e00a      	b.n	801a76c <tiny_vsnprintf_like+0x1a0>
 801a756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a758:	1c53      	adds	r3, r2, #1
 801a75a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a75e:	1c59      	adds	r1, r3, #1
 801a760:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a762:	7812      	ldrb	r2, [r2, #0]
 801a764:	701a      	strb	r2, [r3, #0]
 801a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a768:	3301      	adds	r3, #1
 801a76a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a76c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a76e:	693b      	ldr	r3, [r7, #16]
 801a770:	429a      	cmp	r2, r3
 801a772:	dbf0      	blt.n	801a756 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a774:	e05f      	b.n	801a836 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a776:	6a3b      	ldr	r3, [r7, #32]
 801a778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a77c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a77e:	2310      	movs	r3, #16
 801a780:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a782:	e02b      	b.n	801a7dc <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a784:	6a3b      	ldr	r3, [r7, #32]
 801a786:	f043 0302 	orr.w	r3, r3, #2
 801a78a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a78c:	e025      	b.n	801a7da <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	781b      	ldrb	r3, [r3, #0]
 801a792:	2b25      	cmp	r3, #37	@ 0x25
 801a794:	d004      	beq.n	801a7a0 <tiny_vsnprintf_like+0x1d4>
 801a796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a798:	1c5a      	adds	r2, r3, #1
 801a79a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a79c:	2225      	movs	r2, #37	@ 0x25
 801a79e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a7a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	1ad2      	subs	r2, r2, r3
 801a7a6:	68bb      	ldr	r3, [r7, #8]
 801a7a8:	3b01      	subs	r3, #1
 801a7aa:	429a      	cmp	r2, r3
 801a7ac:	da16      	bge.n	801a7dc <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	781b      	ldrb	r3, [r3, #0]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d006      	beq.n	801a7c4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a7b6:	687a      	ldr	r2, [r7, #4]
 801a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ba:	1c59      	adds	r1, r3, #1
 801a7bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a7be:	7812      	ldrb	r2, [r2, #0]
 801a7c0:	701a      	strb	r2, [r3, #0]
 801a7c2:	e002      	b.n	801a7ca <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	3b01      	subs	r3, #1
 801a7c8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a7ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	1ad2      	subs	r2, r2, r3
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	3b01      	subs	r3, #1
 801a7d4:	429a      	cmp	r2, r3
 801a7d6:	db2d      	blt.n	801a834 <tiny_vsnprintf_like+0x268>
 801a7d8:	e000      	b.n	801a7dc <tiny_vsnprintf_like+0x210>
        break;
 801a7da:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a7dc:	697b      	ldr	r3, [r7, #20]
 801a7de:	2b6c      	cmp	r3, #108	@ 0x6c
 801a7e0:	d105      	bne.n	801a7ee <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a7e2:	683b      	ldr	r3, [r7, #0]
 801a7e4:	1d1a      	adds	r2, r3, #4
 801a7e6:	603a      	str	r2, [r7, #0]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	637b      	str	r3, [r7, #52]	@ 0x34
 801a7ec:	e00f      	b.n	801a80e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a7ee:	6a3b      	ldr	r3, [r7, #32]
 801a7f0:	f003 0302 	and.w	r3, r3, #2
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d005      	beq.n	801a804 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a7f8:	683b      	ldr	r3, [r7, #0]
 801a7fa:	1d1a      	adds	r2, r3, #4
 801a7fc:	603a      	str	r2, [r7, #0]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	637b      	str	r3, [r7, #52]	@ 0x34
 801a802:	e004      	b.n	801a80e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a804:	683b      	ldr	r3, [r7, #0]
 801a806:	1d1a      	adds	r2, r3, #4
 801a808:	603a      	str	r2, [r7, #0]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a80e:	68bb      	ldr	r3, [r7, #8]
 801a810:	1e5a      	subs	r2, r3, #1
 801a812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	1acb      	subs	r3, r1, r3
 801a818:	1ad1      	subs	r1, r2, r3
 801a81a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a81c:	6a3b      	ldr	r3, [r7, #32]
 801a81e:	9302      	str	r3, [sp, #8]
 801a820:	69bb      	ldr	r3, [r7, #24]
 801a822:	9301      	str	r3, [sp, #4]
 801a824:	69fb      	ldr	r3, [r7, #28]
 801a826:	9300      	str	r3, [sp, #0]
 801a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a82a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a82c:	f7ff fde0 	bl	801a3f0 <ee_number>
 801a830:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a832:	e000      	b.n	801a836 <tiny_vsnprintf_like+0x26a>
        continue;
 801a834:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	3301      	adds	r3, #1
 801a83a:	607b      	str	r3, [r7, #4]
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	781b      	ldrb	r3, [r3, #0]
 801a840:	2b00      	cmp	r3, #0
 801a842:	f47f aed2 	bne.w	801a5ea <tiny_vsnprintf_like+0x1e>
 801a846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	1ad2      	subs	r2, r2, r3
 801a84c:	68bb      	ldr	r3, [r7, #8]
 801a84e:	3b01      	subs	r3, #1
 801a850:	429a      	cmp	r2, r3
 801a852:	f6bf aeca 	bge.w	801a5ea <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801a856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a858:	2200      	movs	r2, #0
 801a85a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a85c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	1ad3      	subs	r3, r2, r3
}
 801a862:	4618      	mov	r0, r3
 801a864:	3738      	adds	r7, #56	@ 0x38
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
 801a86a:	bf00      	nop
 801a86c:	0801c4c0 	.word	0x0801c4c0

0801a870 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b090      	sub	sp, #64	@ 0x40
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a878:	4b73      	ldr	r3, [pc, #460]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a87e:	4b72      	ldr	r3, [pc, #456]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	4013      	ands	r3, r2
 801a886:	4a70      	ldr	r2, [pc, #448]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801a888:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a88a:	4b70      	ldr	r3, [pc, #448]	@ (801aa4c <UTIL_SEQ_Run+0x1dc>)
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a890:	4b6f      	ldr	r3, [pc, #444]	@ (801aa50 <UTIL_SEQ_Run+0x1e0>)
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a896:	4b6f      	ldr	r3, [pc, #444]	@ (801aa54 <UTIL_SEQ_Run+0x1e4>)
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a89c:	4b6e      	ldr	r3, [pc, #440]	@ (801aa58 <UTIL_SEQ_Run+0x1e8>)
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a8a2:	e08d      	b.n	801a9c0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a8a8:	e002      	b.n	801a8b0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8ac:	3301      	adds	r3, #1
 801a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a8b0:	4a6a      	ldr	r2, [pc, #424]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a8b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ba:	401a      	ands	r2, r3
 801a8bc:	4b62      	ldr	r3, [pc, #392]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	4013      	ands	r3, r2
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d0f1      	beq.n	801a8aa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a8c6:	4a65      	ldr	r2, [pc, #404]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8d0:	401a      	ands	r2, r3
 801a8d2:	4b5d      	ldr	r3, [pc, #372]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	4013      	ands	r3, r2
 801a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a8da:	4a60      	ldr	r2, [pc, #384]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a8dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8de:	00db      	lsls	r3, r3, #3
 801a8e0:	4413      	add	r3, r2
 801a8e2:	685a      	ldr	r2, [r3, #4]
 801a8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8e6:	4013      	ands	r3, r2
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d106      	bne.n	801a8fa <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a8ec:	4a5b      	ldr	r2, [pc, #364]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8f0:	00db      	lsls	r3, r3, #3
 801a8f2:	4413      	add	r3, r2
 801a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 801a8f8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a8fa:	4a58      	ldr	r2, [pc, #352]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a8fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8fe:	00db      	lsls	r3, r3, #3
 801a900:	4413      	add	r3, r2
 801a902:	685a      	ldr	r2, [r3, #4]
 801a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a906:	4013      	ands	r3, r2
 801a908:	4618      	mov	r0, r3
 801a90a:	f000 f907 	bl	801ab1c <SEQ_BitPosition>
 801a90e:	4603      	mov	r3, r0
 801a910:	461a      	mov	r2, r3
 801a912:	4b53      	ldr	r3, [pc, #332]	@ (801aa60 <UTIL_SEQ_Run+0x1f0>)
 801a914:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a916:	4a51      	ldr	r2, [pc, #324]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a91a:	00db      	lsls	r3, r3, #3
 801a91c:	4413      	add	r3, r2
 801a91e:	685a      	ldr	r2, [r3, #4]
 801a920:	4b4f      	ldr	r3, [pc, #316]	@ (801aa60 <UTIL_SEQ_Run+0x1f0>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	2101      	movs	r1, #1
 801a926:	fa01 f303 	lsl.w	r3, r1, r3
 801a92a:	43db      	mvns	r3, r3
 801a92c:	401a      	ands	r2, r3
 801a92e:	494b      	ldr	r1, [pc, #300]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a932:	00db      	lsls	r3, r3, #3
 801a934:	440b      	add	r3, r1
 801a936:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a938:	f3ef 8310 	mrs	r3, PRIMASK
 801a93c:	61bb      	str	r3, [r7, #24]
  return(result);
 801a93e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a940:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a942:	b672      	cpsid	i
}
 801a944:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a946:	4b46      	ldr	r3, [pc, #280]	@ (801aa60 <UTIL_SEQ_Run+0x1f0>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	2201      	movs	r2, #1
 801a94c:	fa02 f303 	lsl.w	r3, r2, r3
 801a950:	43da      	mvns	r2, r3
 801a952:	4b3e      	ldr	r3, [pc, #248]	@ (801aa4c <UTIL_SEQ_Run+0x1dc>)
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	4013      	ands	r3, r2
 801a958:	4a3c      	ldr	r2, [pc, #240]	@ (801aa4c <UTIL_SEQ_Run+0x1dc>)
 801a95a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a95c:	2301      	movs	r3, #1
 801a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a960:	e013      	b.n	801a98a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a964:	3b01      	subs	r3, #1
 801a966:	4a3d      	ldr	r2, [pc, #244]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a968:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a96c:	4b3c      	ldr	r3, [pc, #240]	@ (801aa60 <UTIL_SEQ_Run+0x1f0>)
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	2201      	movs	r2, #1
 801a972:	fa02 f303 	lsl.w	r3, r2, r3
 801a976:	43da      	mvns	r2, r3
 801a978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a97a:	3b01      	subs	r3, #1
 801a97c:	400a      	ands	r2, r1
 801a97e:	4937      	ldr	r1, [pc, #220]	@ (801aa5c <UTIL_SEQ_Run+0x1ec>)
 801a980:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a986:	3b01      	subs	r3, #1
 801a988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d1e8      	bne.n	801a962 <UTIL_SEQ_Run+0xf2>
 801a990:	6a3b      	ldr	r3, [r7, #32]
 801a992:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a994:	697b      	ldr	r3, [r7, #20]
 801a996:	f383 8810 	msr	PRIMASK, r3
}
 801a99a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a99c:	4b30      	ldr	r3, [pc, #192]	@ (801aa60 <UTIL_SEQ_Run+0x1f0>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	4a30      	ldr	r2, [pc, #192]	@ (801aa64 <UTIL_SEQ_Run+0x1f4>)
 801a9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a9a6:	4798      	blx	r3

    local_taskset = TaskSet;
 801a9a8:	4b28      	ldr	r3, [pc, #160]	@ (801aa4c <UTIL_SEQ_Run+0x1dc>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801a9ae:	4b28      	ldr	r3, [pc, #160]	@ (801aa50 <UTIL_SEQ_Run+0x1e0>)
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801a9b4:	4b27      	ldr	r3, [pc, #156]	@ (801aa54 <UTIL_SEQ_Run+0x1e4>)
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801a9ba:	4b27      	ldr	r3, [pc, #156]	@ (801aa58 <UTIL_SEQ_Run+0x1e8>)
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a9c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9c4:	401a      	ands	r2, r3
 801a9c6:	4b20      	ldr	r3, [pc, #128]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	4013      	ands	r3, r2
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d005      	beq.n	801a9dc <UTIL_SEQ_Run+0x16c>
 801a9d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9d4:	4013      	ands	r3, r2
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	f43f af64 	beq.w	801a8a4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a9dc:	4b20      	ldr	r3, [pc, #128]	@ (801aa60 <UTIL_SEQ_Run+0x1f0>)
 801a9de:	f04f 32ff 	mov.w	r2, #4294967295
 801a9e2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a9e4:	f000 f88e 	bl	801ab04 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9e8:	f3ef 8310 	mrs	r3, PRIMASK
 801a9ec:	613b      	str	r3, [r7, #16]
  return(result);
 801a9ee:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a9f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9f2:	b672      	cpsid	i
}
 801a9f4:	bf00      	nop
  local_taskset = TaskSet;
 801a9f6:	4b15      	ldr	r3, [pc, #84]	@ (801aa4c <UTIL_SEQ_Run+0x1dc>)
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a9fc:	4b14      	ldr	r3, [pc, #80]	@ (801aa50 <UTIL_SEQ_Run+0x1e0>)
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801aa02:	4b14      	ldr	r3, [pc, #80]	@ (801aa54 <UTIL_SEQ_Run+0x1e4>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801aa08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa0c:	401a      	ands	r2, r3
 801aa0e:	4b0e      	ldr	r3, [pc, #56]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	4013      	ands	r3, r2
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d107      	bne.n	801aa28 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801aa18:	4b0f      	ldr	r3, [pc, #60]	@ (801aa58 <UTIL_SEQ_Run+0x1e8>)
 801aa1a:	681a      	ldr	r2, [r3, #0]
 801aa1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa1e:	4013      	ands	r3, r2
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d101      	bne.n	801aa28 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801aa24:	f7e7 fa38 	bl	8001e98 <UTIL_SEQ_Idle>
 801aa28:	69fb      	ldr	r3, [r7, #28]
 801aa2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	f383 8810 	msr	PRIMASK, r3
}
 801aa32:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801aa34:	f000 f86c 	bl	801ab10 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801aa38:	4a03      	ldr	r2, [pc, #12]	@ (801aa48 <UTIL_SEQ_Run+0x1d8>)
 801aa3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa3c:	6013      	str	r3, [r2, #0]

  return;
 801aa3e:	bf00      	nop
}
 801aa40:	3740      	adds	r7, #64	@ 0x40
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}
 801aa46:	bf00      	nop
 801aa48:	20000124 	.word	0x20000124
 801aa4c:	2000155c 	.word	0x2000155c
 801aa50:	20001560 	.word	0x20001560
 801aa54:	20000120 	.word	0x20000120
 801aa58:	20001564 	.word	0x20001564
 801aa5c:	2000157c 	.word	0x2000157c
 801aa60:	20001568 	.word	0x20001568
 801aa64:	2000156c 	.word	0x2000156c

0801aa68 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b088      	sub	sp, #32
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	60f8      	str	r0, [r7, #12]
 801aa70:	60b9      	str	r1, [r7, #8]
 801aa72:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa74:	f3ef 8310 	mrs	r3, PRIMASK
 801aa78:	617b      	str	r3, [r7, #20]
  return(result);
 801aa7a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801aa7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa7e:	b672      	cpsid	i
}
 801aa80:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801aa82:	68f8      	ldr	r0, [r7, #12]
 801aa84:	f000 f84a 	bl	801ab1c <SEQ_BitPosition>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	4619      	mov	r1, r3
 801aa8c:	4a06      	ldr	r2, [pc, #24]	@ (801aaa8 <UTIL_SEQ_RegTask+0x40>)
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801aa94:	69fb      	ldr	r3, [r7, #28]
 801aa96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa98:	69bb      	ldr	r3, [r7, #24]
 801aa9a:	f383 8810 	msr	PRIMASK, r3
}
 801aa9e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801aaa0:	bf00      	nop
}
 801aaa2:	3720      	adds	r7, #32
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	2000156c 	.word	0x2000156c

0801aaac <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801aaac:	b480      	push	{r7}
 801aaae:	b087      	sub	sp, #28
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aab6:	f3ef 8310 	mrs	r3, PRIMASK
 801aaba:	60fb      	str	r3, [r7, #12]
  return(result);
 801aabc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801aabe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aac0:	b672      	cpsid	i
}
 801aac2:	bf00      	nop

  TaskSet |= TaskId_bm;
 801aac4:	4b0d      	ldr	r3, [pc, #52]	@ (801aafc <UTIL_SEQ_SetTask+0x50>)
 801aac6:	681a      	ldr	r2, [r3, #0]
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	4313      	orrs	r3, r2
 801aacc:	4a0b      	ldr	r2, [pc, #44]	@ (801aafc <UTIL_SEQ_SetTask+0x50>)
 801aace:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801aad0:	4a0b      	ldr	r2, [pc, #44]	@ (801ab00 <UTIL_SEQ_SetTask+0x54>)
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	431a      	orrs	r2, r3
 801aadc:	4908      	ldr	r1, [pc, #32]	@ (801ab00 <UTIL_SEQ_SetTask+0x54>)
 801aade:	683b      	ldr	r3, [r7, #0]
 801aae0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801aae4:	697b      	ldr	r3, [r7, #20]
 801aae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aae8:	693b      	ldr	r3, [r7, #16]
 801aaea:	f383 8810 	msr	PRIMASK, r3
}
 801aaee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801aaf0:	bf00      	nop
}
 801aaf2:	371c      	adds	r7, #28
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	bc80      	pop	{r7}
 801aaf8:	4770      	bx	lr
 801aafa:	bf00      	nop
 801aafc:	2000155c 	.word	0x2000155c
 801ab00:	2000157c 	.word	0x2000157c

0801ab04 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ab04:	b480      	push	{r7}
 801ab06:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ab08:	bf00      	nop
}
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bc80      	pop	{r7}
 801ab0e:	4770      	bx	lr

0801ab10 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ab10:	b480      	push	{r7}
 801ab12:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ab14:	bf00      	nop
}
 801ab16:	46bd      	mov	sp, r7
 801ab18:	bc80      	pop	{r7}
 801ab1a:	4770      	bx	lr

0801ab1c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ab1c:	b480      	push	{r7}
 801ab1e:	b085      	sub	sp, #20
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ab24:	2300      	movs	r3, #0
 801ab26:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ab32:	d204      	bcs.n	801ab3e <SEQ_BitPosition+0x22>
 801ab34:	2310      	movs	r3, #16
 801ab36:	73fb      	strb	r3, [r7, #15]
 801ab38:	68bb      	ldr	r3, [r7, #8]
 801ab3a:	041b      	lsls	r3, r3, #16
 801ab3c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ab3e:	68bb      	ldr	r3, [r7, #8]
 801ab40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ab44:	d205      	bcs.n	801ab52 <SEQ_BitPosition+0x36>
 801ab46:	7bfb      	ldrb	r3, [r7, #15]
 801ab48:	3308      	adds	r3, #8
 801ab4a:	73fb      	strb	r3, [r7, #15]
 801ab4c:	68bb      	ldr	r3, [r7, #8]
 801ab4e:	021b      	lsls	r3, r3, #8
 801ab50:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ab58:	d205      	bcs.n	801ab66 <SEQ_BitPosition+0x4a>
 801ab5a:	7bfb      	ldrb	r3, [r7, #15]
 801ab5c:	3304      	adds	r3, #4
 801ab5e:	73fb      	strb	r3, [r7, #15]
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	011b      	lsls	r3, r3, #4
 801ab64:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	0f1b      	lsrs	r3, r3, #28
 801ab6a:	4a07      	ldr	r2, [pc, #28]	@ (801ab88 <SEQ_BitPosition+0x6c>)
 801ab6c:	5cd2      	ldrb	r2, [r2, r3]
 801ab6e:	7bfb      	ldrb	r3, [r7, #15]
 801ab70:	4413      	add	r3, r2
 801ab72:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ab74:	7bfb      	ldrb	r3, [r7, #15]
 801ab76:	f1c3 031f 	rsb	r3, r3, #31
 801ab7a:	b2db      	uxtb	r3, r3
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3714      	adds	r7, #20
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bc80      	pop	{r7}
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop
 801ab88:	0801cb04 	.word	0x0801cb04

0801ab8c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ab90:	4b04      	ldr	r3, [pc, #16]	@ (801aba4 <UTIL_TIMER_Init+0x18>)
 801ab92:	2200      	movs	r2, #0
 801ab94:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801ab96:	4b04      	ldr	r3, [pc, #16]	@ (801aba8 <UTIL_TIMER_Init+0x1c>)
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	4798      	blx	r3
 801ab9c:	4603      	mov	r3, r0
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	bd80      	pop	{r7, pc}
 801aba2:	bf00      	nop
 801aba4:	20001584 	.word	0x20001584
 801aba8:	0801c580 	.word	0x0801c580

0801abac <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b084      	sub	sp, #16
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	60f8      	str	r0, [r7, #12]
 801abb4:	60b9      	str	r1, [r7, #8]
 801abb6:	603b      	str	r3, [r7, #0]
 801abb8:	4613      	mov	r3, r2
 801abba:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d023      	beq.n	801ac0a <UTIL_TIMER_Create+0x5e>
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d020      	beq.n	801ac0a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	2200      	movs	r2, #0
 801abcc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801abce:	4b11      	ldr	r3, [pc, #68]	@ (801ac14 <UTIL_TIMER_Create+0x68>)
 801abd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abd2:	68b8      	ldr	r0, [r7, #8]
 801abd4:	4798      	blx	r3
 801abd6:	4602      	mov	r2, r0
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2200      	movs	r2, #0
 801abe0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	2200      	movs	r2, #0
 801abe6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	2200      	movs	r2, #0
 801abec:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	683a      	ldr	r2, [r7, #0]
 801abf2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	69ba      	ldr	r2, [r7, #24]
 801abf8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	79fa      	ldrb	r2, [r7, #7]
 801abfe:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	2200      	movs	r2, #0
 801ac04:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801ac06:	2300      	movs	r3, #0
 801ac08:	e000      	b.n	801ac0c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801ac0a:	2301      	movs	r3, #1
  }
}
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	3710      	adds	r7, #16
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bd80      	pop	{r7, pc}
 801ac14:	0801c580 	.word	0x0801c580

0801ac18 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b08a      	sub	sp, #40	@ 0x28
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ac20:	2300      	movs	r3, #0
 801ac22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d056      	beq.n	801acda <UTIL_TIMER_Start+0xc2>
 801ac2c:	6878      	ldr	r0, [r7, #4]
 801ac2e:	f000 f9a9 	bl	801af84 <TimerExists>
 801ac32:	4603      	mov	r3, r0
 801ac34:	f083 0301 	eor.w	r3, r3, #1
 801ac38:	b2db      	uxtb	r3, r3
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d04d      	beq.n	801acda <UTIL_TIMER_Start+0xc2>
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	7a5b      	ldrb	r3, [r3, #9]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d149      	bne.n	801acda <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac46:	f3ef 8310 	mrs	r3, PRIMASK
 801ac4a:	613b      	str	r3, [r7, #16]
  return(result);
 801ac4c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ac4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac50:	b672      	cpsid	i
}
 801ac52:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	685b      	ldr	r3, [r3, #4]
 801ac58:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801ac5a:	4b24      	ldr	r3, [pc, #144]	@ (801acec <UTIL_TIMER_Start+0xd4>)
 801ac5c:	6a1b      	ldr	r3, [r3, #32]
 801ac5e:	4798      	blx	r3
 801ac60:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ac62:	6a3a      	ldr	r2, [r7, #32]
 801ac64:	69bb      	ldr	r3, [r7, #24]
 801ac66:	429a      	cmp	r2, r3
 801ac68:	d201      	bcs.n	801ac6e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ac6a:	69bb      	ldr	r3, [r7, #24]
 801ac6c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	6a3a      	ldr	r2, [r7, #32]
 801ac72:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	2200      	movs	r2, #0
 801ac78:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	2201      	movs	r2, #1
 801ac7e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2200      	movs	r2, #0
 801ac84:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ac86:	4b1a      	ldr	r3, [pc, #104]	@ (801acf0 <UTIL_TIMER_Start+0xd8>)
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d106      	bne.n	801ac9c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ac8e:	4b17      	ldr	r3, [pc, #92]	@ (801acec <UTIL_TIMER_Start+0xd4>)
 801ac90:	691b      	ldr	r3, [r3, #16]
 801ac92:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ac94:	6878      	ldr	r0, [r7, #4]
 801ac96:	f000 f9eb 	bl	801b070 <TimerInsertNewHeadTimer>
 801ac9a:	e017      	b.n	801accc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ac9c:	4b13      	ldr	r3, [pc, #76]	@ (801acec <UTIL_TIMER_Start+0xd4>)
 801ac9e:	699b      	ldr	r3, [r3, #24]
 801aca0:	4798      	blx	r3
 801aca2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681a      	ldr	r2, [r3, #0]
 801aca8:	697b      	ldr	r3, [r7, #20]
 801acaa:	441a      	add	r2, r3
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	681a      	ldr	r2, [r3, #0]
 801acb4:	4b0e      	ldr	r3, [pc, #56]	@ (801acf0 <UTIL_TIMER_Start+0xd8>)
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	429a      	cmp	r2, r3
 801acbc:	d203      	bcs.n	801acc6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801acbe:	6878      	ldr	r0, [r7, #4]
 801acc0:	f000 f9d6 	bl	801b070 <TimerInsertNewHeadTimer>
 801acc4:	e002      	b.n	801accc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801acc6:	6878      	ldr	r0, [r7, #4]
 801acc8:	f000 f9a2 	bl	801b010 <TimerInsertTimer>
 801accc:	69fb      	ldr	r3, [r7, #28]
 801acce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	f383 8810 	msr	PRIMASK, r3
}
 801acd6:	bf00      	nop
  {
 801acd8:	e002      	b.n	801ace0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801acda:	2301      	movs	r3, #1
 801acdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801ace0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801ace4:	4618      	mov	r0, r3
 801ace6:	3728      	adds	r7, #40	@ 0x28
 801ace8:	46bd      	mov	sp, r7
 801acea:	bd80      	pop	{r7, pc}
 801acec:	0801c580 	.word	0x0801c580
 801acf0:	20001584 	.word	0x20001584

0801acf4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b088      	sub	sp, #32
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801acfc:	2300      	movs	r3, #0
 801acfe:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d05b      	beq.n	801adbe <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad06:	f3ef 8310 	mrs	r3, PRIMASK
 801ad0a:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad0c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ad0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad10:	b672      	cpsid	i
}
 801ad12:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ad14:	4b2d      	ldr	r3, [pc, #180]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ad1a:	4b2c      	ldr	r3, [pc, #176]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2201      	movs	r2, #1
 801ad24:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ad26:	4b29      	ldr	r3, [pc, #164]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d041      	beq.n	801adb2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	2200      	movs	r2, #0
 801ad32:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ad34:	4b25      	ldr	r3, [pc, #148]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	687a      	ldr	r2, [r7, #4]
 801ad3a:	429a      	cmp	r2, r3
 801ad3c:	d134      	bne.n	801ada8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ad3e:	4b23      	ldr	r3, [pc, #140]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	2200      	movs	r2, #0
 801ad44:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ad46:	4b21      	ldr	r3, [pc, #132]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	695b      	ldr	r3, [r3, #20]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d00a      	beq.n	801ad66 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ad50:	4b1e      	ldr	r3, [pc, #120]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	695b      	ldr	r3, [r3, #20]
 801ad56:	4a1d      	ldr	r2, [pc, #116]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad58:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ad5a:	4b1c      	ldr	r3, [pc, #112]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f000 f92c 	bl	801afbc <TimerSetTimeout>
 801ad64:	e023      	b.n	801adae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ad66:	4b1a      	ldr	r3, [pc, #104]	@ (801add0 <UTIL_TIMER_Stop+0xdc>)
 801ad68:	68db      	ldr	r3, [r3, #12]
 801ad6a:	4798      	blx	r3
            TimerListHead = NULL;
 801ad6c:	4b17      	ldr	r3, [pc, #92]	@ (801adcc <UTIL_TIMER_Stop+0xd8>)
 801ad6e:	2200      	movs	r2, #0
 801ad70:	601a      	str	r2, [r3, #0]
 801ad72:	e01c      	b.n	801adae <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ad74:	697a      	ldr	r2, [r7, #20]
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	d110      	bne.n	801ad9e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ad7c:	697b      	ldr	r3, [r7, #20]
 801ad7e:	695b      	ldr	r3, [r3, #20]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d006      	beq.n	801ad92 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ad84:	697b      	ldr	r3, [r7, #20]
 801ad86:	695b      	ldr	r3, [r3, #20]
 801ad88:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ad8a:	69bb      	ldr	r3, [r7, #24]
 801ad8c:	697a      	ldr	r2, [r7, #20]
 801ad8e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ad90:	e00d      	b.n	801adae <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ad92:	2300      	movs	r3, #0
 801ad94:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ad96:	69bb      	ldr	r3, [r7, #24]
 801ad98:	697a      	ldr	r2, [r7, #20]
 801ad9a:	615a      	str	r2, [r3, #20]
            break;
 801ad9c:	e007      	b.n	801adae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ada2:	697b      	ldr	r3, [r7, #20]
 801ada4:	695b      	ldr	r3, [r3, #20]
 801ada6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ada8:	697b      	ldr	r3, [r7, #20]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d1e2      	bne.n	801ad74 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801adae:	2300      	movs	r3, #0
 801adb0:	77fb      	strb	r3, [r7, #31]
 801adb2:	693b      	ldr	r3, [r7, #16]
 801adb4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	f383 8810 	msr	PRIMASK, r3
}
 801adbc:	e001      	b.n	801adc2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801adbe:	2301      	movs	r3, #1
 801adc0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801adc2:	7ffb      	ldrb	r3, [r7, #31]
}
 801adc4:	4618      	mov	r0, r3
 801adc6:	3720      	adds	r7, #32
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd80      	pop	{r7, pc}
 801adcc:	20001584 	.word	0x20001584
 801add0:	0801c580 	.word	0x0801c580

0801add4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b084      	sub	sp, #16
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
 801addc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801adde:	2300      	movs	r3, #0
 801ade0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d102      	bne.n	801adee <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ade8:	2301      	movs	r3, #1
 801adea:	73fb      	strb	r3, [r7, #15]
 801adec:	e014      	b.n	801ae18 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801adee:	4b0d      	ldr	r3, [pc, #52]	@ (801ae24 <UTIL_TIMER_SetPeriod+0x50>)
 801adf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801adf2:	6838      	ldr	r0, [r7, #0]
 801adf4:	4798      	blx	r3
 801adf6:	4602      	mov	r2, r0
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801adfc:	6878      	ldr	r0, [r7, #4]
 801adfe:	f000 f8c1 	bl	801af84 <TimerExists>
 801ae02:	4603      	mov	r3, r0
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d007      	beq.n	801ae18 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ae08:	6878      	ldr	r0, [r7, #4]
 801ae0a:	f7ff ff73 	bl	801acf4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ae0e:	6878      	ldr	r0, [r7, #4]
 801ae10:	f7ff ff02 	bl	801ac18 <UTIL_TIMER_Start>
 801ae14:	4603      	mov	r3, r0
 801ae16:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ae18:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	3710      	adds	r7, #16
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bd80      	pop	{r7, pc}
 801ae22:	bf00      	nop
 801ae24:	0801c580 	.word	0x0801c580

0801ae28 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ae28:	b590      	push	{r4, r7, lr}
 801ae2a:	b089      	sub	sp, #36	@ 0x24
 801ae2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae2e:	f3ef 8310 	mrs	r3, PRIMASK
 801ae32:	60bb      	str	r3, [r7, #8]
  return(result);
 801ae34:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ae36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae38:	b672      	cpsid	i
}
 801ae3a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ae3c:	4b38      	ldr	r3, [pc, #224]	@ (801af20 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ae3e:	695b      	ldr	r3, [r3, #20]
 801ae40:	4798      	blx	r3
 801ae42:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ae44:	4b36      	ldr	r3, [pc, #216]	@ (801af20 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ae46:	691b      	ldr	r3, [r3, #16]
 801ae48:	4798      	blx	r3
 801ae4a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ae4c:	693a      	ldr	r2, [r7, #16]
 801ae4e:	697b      	ldr	r3, [r7, #20]
 801ae50:	1ad3      	subs	r3, r2, r3
 801ae52:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ae54:	4b33      	ldr	r3, [pc, #204]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d037      	beq.n	801aecc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ae5c:	4b31      	ldr	r3, [pc, #196]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ae62:	69fb      	ldr	r3, [r7, #28]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	68fa      	ldr	r2, [r7, #12]
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	d206      	bcs.n	801ae7a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ae6c:	69fb      	ldr	r3, [r7, #28]
 801ae6e:	681a      	ldr	r2, [r3, #0]
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	1ad2      	subs	r2, r2, r3
 801ae74:	69fb      	ldr	r3, [r7, #28]
 801ae76:	601a      	str	r2, [r3, #0]
 801ae78:	e002      	b.n	801ae80 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ae80:	69fb      	ldr	r3, [r7, #28]
 801ae82:	695b      	ldr	r3, [r3, #20]
 801ae84:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ae86:	69fb      	ldr	r3, [r7, #28]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d1ea      	bne.n	801ae62 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ae8c:	e01e      	b.n	801aecc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ae8e:	4b25      	ldr	r3, [pc, #148]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ae94:	4b23      	ldr	r3, [pc, #140]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	695b      	ldr	r3, [r3, #20]
 801ae9a:	4a22      	ldr	r2, [pc, #136]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae9c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801ae9e:	69fb      	ldr	r3, [r7, #28]
 801aea0:	2200      	movs	r2, #0
 801aea2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801aea4:	69fb      	ldr	r3, [r7, #28]
 801aea6:	2200      	movs	r2, #0
 801aea8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801aeaa:	69fb      	ldr	r3, [r7, #28]
 801aeac:	68db      	ldr	r3, [r3, #12]
 801aeae:	69fa      	ldr	r2, [r7, #28]
 801aeb0:	6912      	ldr	r2, [r2, #16]
 801aeb2:	4610      	mov	r0, r2
 801aeb4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801aeb6:	69fb      	ldr	r3, [r7, #28]
 801aeb8:	7adb      	ldrb	r3, [r3, #11]
 801aeba:	2b01      	cmp	r3, #1
 801aebc:	d106      	bne.n	801aecc <UTIL_TIMER_IRQ_Handler+0xa4>
 801aebe:	69fb      	ldr	r3, [r7, #28]
 801aec0:	7a9b      	ldrb	r3, [r3, #10]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d102      	bne.n	801aecc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801aec6:	69f8      	ldr	r0, [r7, #28]
 801aec8:	f7ff fea6 	bl	801ac18 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801aecc:	4b15      	ldr	r3, [pc, #84]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d00d      	beq.n	801aef0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801aed4:	4b13      	ldr	r3, [pc, #76]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d0d7      	beq.n	801ae8e <UTIL_TIMER_IRQ_Handler+0x66>
 801aede:	4b11      	ldr	r3, [pc, #68]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	681c      	ldr	r4, [r3, #0]
 801aee4:	4b0e      	ldr	r3, [pc, #56]	@ (801af20 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aee6:	699b      	ldr	r3, [r3, #24]
 801aee8:	4798      	blx	r3
 801aeea:	4603      	mov	r3, r0
 801aeec:	429c      	cmp	r4, r3
 801aeee:	d3ce      	bcc.n	801ae8e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801aef0:	4b0c      	ldr	r3, [pc, #48]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d009      	beq.n	801af0c <UTIL_TIMER_IRQ_Handler+0xe4>
 801aef8:	4b0a      	ldr	r3, [pc, #40]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	7a1b      	ldrb	r3, [r3, #8]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d104      	bne.n	801af0c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801af02:	4b08      	ldr	r3, [pc, #32]	@ (801af24 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	4618      	mov	r0, r3
 801af08:	f000 f858 	bl	801afbc <TimerSetTimeout>
 801af0c:	69bb      	ldr	r3, [r7, #24]
 801af0e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	f383 8810 	msr	PRIMASK, r3
}
 801af16:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801af18:	bf00      	nop
 801af1a:	3724      	adds	r7, #36	@ 0x24
 801af1c:	46bd      	mov	sp, r7
 801af1e:	bd90      	pop	{r4, r7, pc}
 801af20:	0801c580 	.word	0x0801c580
 801af24:	20001584 	.word	0x20001584

0801af28 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b082      	sub	sp, #8
 801af2c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801af2e:	4b06      	ldr	r3, [pc, #24]	@ (801af48 <UTIL_TIMER_GetCurrentTime+0x20>)
 801af30:	69db      	ldr	r3, [r3, #28]
 801af32:	4798      	blx	r3
 801af34:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801af36:	4b04      	ldr	r3, [pc, #16]	@ (801af48 <UTIL_TIMER_GetCurrentTime+0x20>)
 801af38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	4798      	blx	r3
 801af3e:	4603      	mov	r3, r0
}
 801af40:	4618      	mov	r0, r3
 801af42:	3708      	adds	r7, #8
 801af44:	46bd      	mov	sp, r7
 801af46:	bd80      	pop	{r7, pc}
 801af48:	0801c580 	.word	0x0801c580

0801af4c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b084      	sub	sp, #16
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801af54:	4b0a      	ldr	r3, [pc, #40]	@ (801af80 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af56:	69db      	ldr	r3, [r3, #28]
 801af58:	4798      	blx	r3
 801af5a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801af5c:	4b08      	ldr	r3, [pc, #32]	@ (801af80 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af60:	6878      	ldr	r0, [r7, #4]
 801af62:	4798      	blx	r3
 801af64:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801af66:	4b06      	ldr	r3, [pc, #24]	@ (801af80 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af6a:	68f9      	ldr	r1, [r7, #12]
 801af6c:	68ba      	ldr	r2, [r7, #8]
 801af6e:	1a8a      	subs	r2, r1, r2
 801af70:	4610      	mov	r0, r2
 801af72:	4798      	blx	r3
 801af74:	4603      	mov	r3, r0
}
 801af76:	4618      	mov	r0, r3
 801af78:	3710      	adds	r7, #16
 801af7a:	46bd      	mov	sp, r7
 801af7c:	bd80      	pop	{r7, pc}
 801af7e:	bf00      	nop
 801af80:	0801c580 	.word	0x0801c580

0801af84 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801af84:	b480      	push	{r7}
 801af86:	b085      	sub	sp, #20
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801af8c:	4b0a      	ldr	r3, [pc, #40]	@ (801afb8 <TimerExists+0x34>)
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801af92:	e008      	b.n	801afa6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801af94:	68fa      	ldr	r2, [r7, #12]
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	429a      	cmp	r2, r3
 801af9a:	d101      	bne.n	801afa0 <TimerExists+0x1c>
    {
      return true;
 801af9c:	2301      	movs	r3, #1
 801af9e:	e006      	b.n	801afae <TimerExists+0x2a>
    }
    cur = cur->Next;
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	695b      	ldr	r3, [r3, #20]
 801afa4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d1f3      	bne.n	801af94 <TimerExists+0x10>
  }
  return false;
 801afac:	2300      	movs	r3, #0
}
 801afae:	4618      	mov	r0, r3
 801afb0:	3714      	adds	r7, #20
 801afb2:	46bd      	mov	sp, r7
 801afb4:	bc80      	pop	{r7}
 801afb6:	4770      	bx	lr
 801afb8:	20001584 	.word	0x20001584

0801afbc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801afbc:	b590      	push	{r4, r7, lr}
 801afbe:	b085      	sub	sp, #20
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801afc4:	4b11      	ldr	r3, [pc, #68]	@ (801b00c <TimerSetTimeout+0x50>)
 801afc6:	6a1b      	ldr	r3, [r3, #32]
 801afc8:	4798      	blx	r3
 801afca:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	2201      	movs	r2, #1
 801afd0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681c      	ldr	r4, [r3, #0]
 801afd6:	4b0d      	ldr	r3, [pc, #52]	@ (801b00c <TimerSetTimeout+0x50>)
 801afd8:	699b      	ldr	r3, [r3, #24]
 801afda:	4798      	blx	r3
 801afdc:	4602      	mov	r2, r0
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	4413      	add	r3, r2
 801afe2:	429c      	cmp	r4, r3
 801afe4:	d207      	bcs.n	801aff6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801afe6:	4b09      	ldr	r3, [pc, #36]	@ (801b00c <TimerSetTimeout+0x50>)
 801afe8:	699b      	ldr	r3, [r3, #24]
 801afea:	4798      	blx	r3
 801afec:	4602      	mov	r2, r0
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	441a      	add	r2, r3
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801aff6:	4b05      	ldr	r3, [pc, #20]	@ (801b00c <TimerSetTimeout+0x50>)
 801aff8:	689b      	ldr	r3, [r3, #8]
 801affa:	687a      	ldr	r2, [r7, #4]
 801affc:	6812      	ldr	r2, [r2, #0]
 801affe:	4610      	mov	r0, r2
 801b000:	4798      	blx	r3
}
 801b002:	bf00      	nop
 801b004:	3714      	adds	r7, #20
 801b006:	46bd      	mov	sp, r7
 801b008:	bd90      	pop	{r4, r7, pc}
 801b00a:	bf00      	nop
 801b00c:	0801c580 	.word	0x0801c580

0801b010 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b010:	b480      	push	{r7}
 801b012:	b085      	sub	sp, #20
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b018:	4b14      	ldr	r3, [pc, #80]	@ (801b06c <TimerInsertTimer+0x5c>)
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b01e:	4b13      	ldr	r3, [pc, #76]	@ (801b06c <TimerInsertTimer+0x5c>)
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	695b      	ldr	r3, [r3, #20]
 801b024:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b026:	e012      	b.n	801b04e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681a      	ldr	r2, [r3, #0]
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	429a      	cmp	r2, r3
 801b032:	d905      	bls.n	801b040 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b034:	68bb      	ldr	r3, [r7, #8]
 801b036:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b038:	68bb      	ldr	r3, [r7, #8]
 801b03a:	695b      	ldr	r3, [r3, #20]
 801b03c:	60bb      	str	r3, [r7, #8]
 801b03e:	e006      	b.n	801b04e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	687a      	ldr	r2, [r7, #4]
 801b044:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	68ba      	ldr	r2, [r7, #8]
 801b04a:	615a      	str	r2, [r3, #20]
        return;
 801b04c:	e009      	b.n	801b062 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	695b      	ldr	r3, [r3, #20]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d1e8      	bne.n	801b028 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	687a      	ldr	r2, [r7, #4]
 801b05a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2200      	movs	r2, #0
 801b060:	615a      	str	r2, [r3, #20]
}
 801b062:	3714      	adds	r7, #20
 801b064:	46bd      	mov	sp, r7
 801b066:	bc80      	pop	{r7}
 801b068:	4770      	bx	lr
 801b06a:	bf00      	nop
 801b06c:	20001584 	.word	0x20001584

0801b070 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b084      	sub	sp, #16
 801b074:	af00      	add	r7, sp, #0
 801b076:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b078:	4b0b      	ldr	r3, [pc, #44]	@ (801b0a8 <TimerInsertNewHeadTimer+0x38>)
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d002      	beq.n	801b08a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	2200      	movs	r2, #0
 801b088:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	68fa      	ldr	r2, [r7, #12]
 801b08e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b090:	4a05      	ldr	r2, [pc, #20]	@ (801b0a8 <TimerInsertNewHeadTimer+0x38>)
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b096:	4b04      	ldr	r3, [pc, #16]	@ (801b0a8 <TimerInsertNewHeadTimer+0x38>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	4618      	mov	r0, r3
 801b09c:	f7ff ff8e 	bl	801afbc <TimerSetTimeout>
}
 801b0a0:	bf00      	nop
 801b0a2:	3710      	adds	r7, #16
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bd80      	pop	{r7, pc}
 801b0a8:	20001584 	.word	0x20001584

0801b0ac <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b0b0:	2218      	movs	r2, #24
 801b0b2:	2100      	movs	r1, #0
 801b0b4:	4807      	ldr	r0, [pc, #28]	@ (801b0d4 <UTIL_ADV_TRACE_Init+0x28>)
 801b0b6:	f7ff f862 	bl	801a17e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b0ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b0be:	2100      	movs	r1, #0
 801b0c0:	4805      	ldr	r0, [pc, #20]	@ (801b0d8 <UTIL_ADV_TRACE_Init+0x2c>)
 801b0c2:	f7ff f85c 	bl	801a17e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b0c6:	4b05      	ldr	r3, [pc, #20]	@ (801b0dc <UTIL_ADV_TRACE_Init+0x30>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	4805      	ldr	r0, [pc, #20]	@ (801b0e0 <UTIL_ADV_TRACE_Init+0x34>)
 801b0cc:	4798      	blx	r3
 801b0ce:	4603      	mov	r3, r0
}
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	bd80      	pop	{r7, pc}
 801b0d4:	20001588 	.word	0x20001588
 801b0d8:	200015a0 	.word	0x200015a0
 801b0dc:	0801c5c0 	.word	0x0801c5c0
 801b0e0:	0801b34d 	.word	0x0801b34d

0801b0e4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b0e4:	b480      	push	{r7}
 801b0e6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b0e8:	4b06      	ldr	r3, [pc, #24]	@ (801b104 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b0ea:	8a5a      	ldrh	r2, [r3, #18]
 801b0ec:	4b05      	ldr	r3, [pc, #20]	@ (801b104 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b0ee:	8a1b      	ldrh	r3, [r3, #16]
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	d101      	bne.n	801b0f8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b0f4:	2301      	movs	r3, #1
 801b0f6:	e000      	b.n	801b0fa <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b0f8:	2300      	movs	r3, #0
}
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	bc80      	pop	{r7}
 801b100:	4770      	bx	lr
 801b102:	bf00      	nop
 801b104:	20001588 	.word	0x20001588

0801b108 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b108:	b408      	push	{r3}
 801b10a:	b580      	push	{r7, lr}
 801b10c:	b08d      	sub	sp, #52	@ 0x34
 801b10e:	af00      	add	r7, sp, #0
 801b110:	60f8      	str	r0, [r7, #12]
 801b112:	60b9      	str	r1, [r7, #8]
 801b114:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b116:	2300      	movs	r3, #0
 801b118:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b11a:	2300      	movs	r3, #0
 801b11c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b11e:	4b37      	ldr	r3, [pc, #220]	@ (801b1fc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b120:	7a1b      	ldrb	r3, [r3, #8]
 801b122:	461a      	mov	r2, r3
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	4293      	cmp	r3, r2
 801b128:	d902      	bls.n	801b130 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b12a:	f06f 0304 	mvn.w	r3, #4
 801b12e:	e05e      	b.n	801b1ee <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b130:	4b32      	ldr	r3, [pc, #200]	@ (801b1fc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b132:	68da      	ldr	r2, [r3, #12]
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	4013      	ands	r3, r2
 801b138:	68ba      	ldr	r2, [r7, #8]
 801b13a:	429a      	cmp	r2, r3
 801b13c:	d002      	beq.n	801b144 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b13e:	f06f 0305 	mvn.w	r3, #5
 801b142:	e054      	b.n	801b1ee <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b144:	4b2d      	ldr	r3, [pc, #180]	@ (801b1fc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d00a      	beq.n	801b162 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d007      	beq.n	801b162 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b152:	4b2a      	ldr	r3, [pc, #168]	@ (801b1fc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b154:	685b      	ldr	r3, [r3, #4]
 801b156:	f107 0116 	add.w	r1, r7, #22
 801b15a:	f107 0218 	add.w	r2, r7, #24
 801b15e:	4610      	mov	r0, r2
 801b160:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b162:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b166:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b16a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b16c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b170:	4823      	ldr	r0, [pc, #140]	@ (801b200 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b172:	f7ff fa2b 	bl	801a5cc <tiny_vsnprintf_like>
 801b176:	4603      	mov	r3, r0
 801b178:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b17a:	f000 f9f1 	bl	801b560 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b17e:	8afa      	ldrh	r2, [r7, #22]
 801b180:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b182:	4413      	add	r3, r2
 801b184:	b29b      	uxth	r3, r3
 801b186:	f107 0214 	add.w	r2, r7, #20
 801b18a:	4611      	mov	r1, r2
 801b18c:	4618      	mov	r0, r3
 801b18e:	f000 f969 	bl	801b464 <TRACE_AllocateBufer>
 801b192:	4603      	mov	r3, r0
 801b194:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b198:	d025      	beq.n	801b1e6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b19a:	2300      	movs	r3, #0
 801b19c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b19e:	e00e      	b.n	801b1be <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b1a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b1a2:	8aba      	ldrh	r2, [r7, #20]
 801b1a4:	3330      	adds	r3, #48	@ 0x30
 801b1a6:	443b      	add	r3, r7
 801b1a8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b1ac:	4b15      	ldr	r3, [pc, #84]	@ (801b204 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b1ae:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b1b0:	8abb      	ldrh	r3, [r7, #20]
 801b1b2:	3301      	adds	r3, #1
 801b1b4:	b29b      	uxth	r3, r3
 801b1b6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b1b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b1ba:	3301      	adds	r3, #1
 801b1bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b1be:	8afb      	ldrh	r3, [r7, #22]
 801b1c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	d3ec      	bcc.n	801b1a0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b1c6:	8abb      	ldrh	r3, [r7, #20]
 801b1c8:	461a      	mov	r2, r3
 801b1ca:	4b0e      	ldr	r3, [pc, #56]	@ (801b204 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b1cc:	18d0      	adds	r0, r2, r3
 801b1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b1d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b1d6:	f7ff f9f9 	bl	801a5cc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b1da:	f000 f9df 	bl	801b59c <TRACE_UnLock>

    return TRACE_Send();
 801b1de:	f000 f831 	bl	801b244 <TRACE_Send>
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	e003      	b.n	801b1ee <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b1e6:	f000 f9d9 	bl	801b59c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b1ea:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	3734      	adds	r7, #52	@ 0x34
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b1f8:	b001      	add	sp, #4
 801b1fa:	4770      	bx	lr
 801b1fc:	20001588 	.word	0x20001588
 801b200:	200019a0 	.word	0x200019a0
 801b204:	200015a0 	.word	0x200015a0

0801b208 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b208:	b480      	push	{r7}
 801b20a:	b083      	sub	sp, #12
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b210:	4a03      	ldr	r2, [pc, #12]	@ (801b220 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	6053      	str	r3, [r2, #4]
}
 801b216:	bf00      	nop
 801b218:	370c      	adds	r7, #12
 801b21a:	46bd      	mov	sp, r7
 801b21c:	bc80      	pop	{r7}
 801b21e:	4770      	bx	lr
 801b220:	20001588 	.word	0x20001588

0801b224 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b224:	b480      	push	{r7}
 801b226:	b083      	sub	sp, #12
 801b228:	af00      	add	r7, sp, #0
 801b22a:	4603      	mov	r3, r0
 801b22c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b22e:	4a04      	ldr	r2, [pc, #16]	@ (801b240 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b230:	79fb      	ldrb	r3, [r7, #7]
 801b232:	7213      	strb	r3, [r2, #8]
}
 801b234:	bf00      	nop
 801b236:	370c      	adds	r7, #12
 801b238:	46bd      	mov	sp, r7
 801b23a:	bc80      	pop	{r7}
 801b23c:	4770      	bx	lr
 801b23e:	bf00      	nop
 801b240:	20001588 	.word	0x20001588

0801b244 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b244:	b580      	push	{r7, lr}
 801b246:	b088      	sub	sp, #32
 801b248:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b24a:	2300      	movs	r3, #0
 801b24c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b24e:	2300      	movs	r3, #0
 801b250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b252:	f3ef 8310 	mrs	r3, PRIMASK
 801b256:	613b      	str	r3, [r7, #16]
  return(result);
 801b258:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b25a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b25c:	b672      	cpsid	i
}
 801b25e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b260:	f000 f9ba 	bl	801b5d8 <TRACE_IsLocked>
 801b264:	4603      	mov	r3, r0
 801b266:	2b00      	cmp	r3, #0
 801b268:	d15d      	bne.n	801b326 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b26a:	f000 f979 	bl	801b560 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b26e:	4b34      	ldr	r3, [pc, #208]	@ (801b340 <TRACE_Send+0xfc>)
 801b270:	8a1a      	ldrh	r2, [r3, #16]
 801b272:	4b33      	ldr	r3, [pc, #204]	@ (801b340 <TRACE_Send+0xfc>)
 801b274:	8a5b      	ldrh	r3, [r3, #18]
 801b276:	429a      	cmp	r2, r3
 801b278:	d04d      	beq.n	801b316 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b27a:	4b31      	ldr	r3, [pc, #196]	@ (801b340 <TRACE_Send+0xfc>)
 801b27c:	789b      	ldrb	r3, [r3, #2]
 801b27e:	2b01      	cmp	r3, #1
 801b280:	d117      	bne.n	801b2b2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b282:	4b2f      	ldr	r3, [pc, #188]	@ (801b340 <TRACE_Send+0xfc>)
 801b284:	881a      	ldrh	r2, [r3, #0]
 801b286:	4b2e      	ldr	r3, [pc, #184]	@ (801b340 <TRACE_Send+0xfc>)
 801b288:	8a1b      	ldrh	r3, [r3, #16]
 801b28a:	1ad3      	subs	r3, r2, r3
 801b28c:	b29a      	uxth	r2, r3
 801b28e:	4b2c      	ldr	r3, [pc, #176]	@ (801b340 <TRACE_Send+0xfc>)
 801b290:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b292:	4b2b      	ldr	r3, [pc, #172]	@ (801b340 <TRACE_Send+0xfc>)
 801b294:	2202      	movs	r2, #2
 801b296:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b298:	4b29      	ldr	r3, [pc, #164]	@ (801b340 <TRACE_Send+0xfc>)
 801b29a:	2200      	movs	r2, #0
 801b29c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b29e:	4b28      	ldr	r3, [pc, #160]	@ (801b340 <TRACE_Send+0xfc>)
 801b2a0:	8a9b      	ldrh	r3, [r3, #20]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d105      	bne.n	801b2b2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b2a6:	4b26      	ldr	r3, [pc, #152]	@ (801b340 <TRACE_Send+0xfc>)
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b2ac:	4b24      	ldr	r3, [pc, #144]	@ (801b340 <TRACE_Send+0xfc>)
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b2b2:	4b23      	ldr	r3, [pc, #140]	@ (801b340 <TRACE_Send+0xfc>)
 801b2b4:	789b      	ldrb	r3, [r3, #2]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d115      	bne.n	801b2e6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b2ba:	4b21      	ldr	r3, [pc, #132]	@ (801b340 <TRACE_Send+0xfc>)
 801b2bc:	8a5a      	ldrh	r2, [r3, #18]
 801b2be:	4b20      	ldr	r3, [pc, #128]	@ (801b340 <TRACE_Send+0xfc>)
 801b2c0:	8a1b      	ldrh	r3, [r3, #16]
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	d908      	bls.n	801b2d8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b2c6:	4b1e      	ldr	r3, [pc, #120]	@ (801b340 <TRACE_Send+0xfc>)
 801b2c8:	8a5a      	ldrh	r2, [r3, #18]
 801b2ca:	4b1d      	ldr	r3, [pc, #116]	@ (801b340 <TRACE_Send+0xfc>)
 801b2cc:	8a1b      	ldrh	r3, [r3, #16]
 801b2ce:	1ad3      	subs	r3, r2, r3
 801b2d0:	b29a      	uxth	r2, r3
 801b2d2:	4b1b      	ldr	r3, [pc, #108]	@ (801b340 <TRACE_Send+0xfc>)
 801b2d4:	829a      	strh	r2, [r3, #20]
 801b2d6:	e006      	b.n	801b2e6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b2d8:	4b19      	ldr	r3, [pc, #100]	@ (801b340 <TRACE_Send+0xfc>)
 801b2da:	8a1b      	ldrh	r3, [r3, #16]
 801b2dc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b2e0:	b29a      	uxth	r2, r3
 801b2e2:	4b17      	ldr	r3, [pc, #92]	@ (801b340 <TRACE_Send+0xfc>)
 801b2e4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b2e6:	4b16      	ldr	r3, [pc, #88]	@ (801b340 <TRACE_Send+0xfc>)
 801b2e8:	8a1b      	ldrh	r3, [r3, #16]
 801b2ea:	461a      	mov	r2, r3
 801b2ec:	4b15      	ldr	r3, [pc, #84]	@ (801b344 <TRACE_Send+0x100>)
 801b2ee:	4413      	add	r3, r2
 801b2f0:	61bb      	str	r3, [r7, #24]
 801b2f2:	697b      	ldr	r3, [r7, #20]
 801b2f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	f383 8810 	msr	PRIMASK, r3
}
 801b2fc:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b2fe:	f7e6 fed1 	bl	80020a4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b302:	4b11      	ldr	r3, [pc, #68]	@ (801b348 <TRACE_Send+0x104>)
 801b304:	68db      	ldr	r3, [r3, #12]
 801b306:	4a0e      	ldr	r2, [pc, #56]	@ (801b340 <TRACE_Send+0xfc>)
 801b308:	8a92      	ldrh	r2, [r2, #20]
 801b30a:	4611      	mov	r1, r2
 801b30c:	69b8      	ldr	r0, [r7, #24]
 801b30e:	4798      	blx	r3
 801b310:	4603      	mov	r3, r0
 801b312:	77fb      	strb	r3, [r7, #31]
 801b314:	e00d      	b.n	801b332 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b316:	f000 f941 	bl	801b59c <TRACE_UnLock>
 801b31a:	697b      	ldr	r3, [r7, #20]
 801b31c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b31e:	68bb      	ldr	r3, [r7, #8]
 801b320:	f383 8810 	msr	PRIMASK, r3
}
 801b324:	e005      	b.n	801b332 <TRACE_Send+0xee>
 801b326:	697b      	ldr	r3, [r7, #20]
 801b328:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	f383 8810 	msr	PRIMASK, r3
}
 801b330:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b332:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b336:	4618      	mov	r0, r3
 801b338:	3720      	adds	r7, #32
 801b33a:	46bd      	mov	sp, r7
 801b33c:	bd80      	pop	{r7, pc}
 801b33e:	bf00      	nop
 801b340:	20001588 	.word	0x20001588
 801b344:	200015a0 	.word	0x200015a0
 801b348:	0801c5c0 	.word	0x0801c5c0

0801b34c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b34c:	b580      	push	{r7, lr}
 801b34e:	b088      	sub	sp, #32
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b354:	2300      	movs	r3, #0
 801b356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b358:	f3ef 8310 	mrs	r3, PRIMASK
 801b35c:	617b      	str	r3, [r7, #20]
  return(result);
 801b35e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b360:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b362:	b672      	cpsid	i
}
 801b364:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b366:	4b3c      	ldr	r3, [pc, #240]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b368:	789b      	ldrb	r3, [r3, #2]
 801b36a:	2b02      	cmp	r3, #2
 801b36c:	d106      	bne.n	801b37c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b36e:	4b3a      	ldr	r3, [pc, #232]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b370:	2200      	movs	r2, #0
 801b372:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b374:	4b38      	ldr	r3, [pc, #224]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b376:	2200      	movs	r2, #0
 801b378:	821a      	strh	r2, [r3, #16]
 801b37a:	e00a      	b.n	801b392 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b37c:	4b36      	ldr	r3, [pc, #216]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b37e:	8a1a      	ldrh	r2, [r3, #16]
 801b380:	4b35      	ldr	r3, [pc, #212]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b382:	8a9b      	ldrh	r3, [r3, #20]
 801b384:	4413      	add	r3, r2
 801b386:	b29b      	uxth	r3, r3
 801b388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b38c:	b29a      	uxth	r2, r3
 801b38e:	4b32      	ldr	r3, [pc, #200]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b390:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b392:	4b31      	ldr	r3, [pc, #196]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b394:	8a1a      	ldrh	r2, [r3, #16]
 801b396:	4b30      	ldr	r3, [pc, #192]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b398:	8a5b      	ldrh	r3, [r3, #18]
 801b39a:	429a      	cmp	r2, r3
 801b39c:	d04d      	beq.n	801b43a <TRACE_TxCpltCallback+0xee>
 801b39e:	4b2e      	ldr	r3, [pc, #184]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3a0:	8adb      	ldrh	r3, [r3, #22]
 801b3a2:	2b01      	cmp	r3, #1
 801b3a4:	d149      	bne.n	801b43a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b3a6:	4b2c      	ldr	r3, [pc, #176]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3a8:	789b      	ldrb	r3, [r3, #2]
 801b3aa:	2b01      	cmp	r3, #1
 801b3ac:	d117      	bne.n	801b3de <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b3ae:	4b2a      	ldr	r3, [pc, #168]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3b0:	881a      	ldrh	r2, [r3, #0]
 801b3b2:	4b29      	ldr	r3, [pc, #164]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3b4:	8a1b      	ldrh	r3, [r3, #16]
 801b3b6:	1ad3      	subs	r3, r2, r3
 801b3b8:	b29a      	uxth	r2, r3
 801b3ba:	4b27      	ldr	r3, [pc, #156]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3bc:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b3be:	4b26      	ldr	r3, [pc, #152]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3c0:	2202      	movs	r2, #2
 801b3c2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b3c4:	4b24      	ldr	r3, [pc, #144]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b3ca:	4b23      	ldr	r3, [pc, #140]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3cc:	8a9b      	ldrh	r3, [r3, #20]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d105      	bne.n	801b3de <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b3d2:	4b21      	ldr	r3, [pc, #132]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3d4:	2200      	movs	r2, #0
 801b3d6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b3d8:	4b1f      	ldr	r3, [pc, #124]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3da:	2200      	movs	r2, #0
 801b3dc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b3de:	4b1e      	ldr	r3, [pc, #120]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3e0:	789b      	ldrb	r3, [r3, #2]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d115      	bne.n	801b412 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b3e6:	4b1c      	ldr	r3, [pc, #112]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3e8:	8a5a      	ldrh	r2, [r3, #18]
 801b3ea:	4b1b      	ldr	r3, [pc, #108]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3ec:	8a1b      	ldrh	r3, [r3, #16]
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	d908      	bls.n	801b404 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b3f2:	4b19      	ldr	r3, [pc, #100]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3f4:	8a5a      	ldrh	r2, [r3, #18]
 801b3f6:	4b18      	ldr	r3, [pc, #96]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b3f8:	8a1b      	ldrh	r3, [r3, #16]
 801b3fa:	1ad3      	subs	r3, r2, r3
 801b3fc:	b29a      	uxth	r2, r3
 801b3fe:	4b16      	ldr	r3, [pc, #88]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b400:	829a      	strh	r2, [r3, #20]
 801b402:	e006      	b.n	801b412 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b404:	4b14      	ldr	r3, [pc, #80]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b406:	8a1b      	ldrh	r3, [r3, #16]
 801b408:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b40c:	b29a      	uxth	r2, r3
 801b40e:	4b12      	ldr	r3, [pc, #72]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b410:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b412:	4b11      	ldr	r3, [pc, #68]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b414:	8a1b      	ldrh	r3, [r3, #16]
 801b416:	461a      	mov	r2, r3
 801b418:	4b10      	ldr	r3, [pc, #64]	@ (801b45c <TRACE_TxCpltCallback+0x110>)
 801b41a:	4413      	add	r3, r2
 801b41c:	61fb      	str	r3, [r7, #28]
 801b41e:	69bb      	ldr	r3, [r7, #24]
 801b420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b422:	693b      	ldr	r3, [r7, #16]
 801b424:	f383 8810 	msr	PRIMASK, r3
}
 801b428:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b42a:	4b0d      	ldr	r3, [pc, #52]	@ (801b460 <TRACE_TxCpltCallback+0x114>)
 801b42c:	68db      	ldr	r3, [r3, #12]
 801b42e:	4a0a      	ldr	r2, [pc, #40]	@ (801b458 <TRACE_TxCpltCallback+0x10c>)
 801b430:	8a92      	ldrh	r2, [r2, #20]
 801b432:	4611      	mov	r1, r2
 801b434:	69f8      	ldr	r0, [r7, #28]
 801b436:	4798      	blx	r3
 801b438:	e00a      	b.n	801b450 <TRACE_TxCpltCallback+0x104>
 801b43a:	69bb      	ldr	r3, [r7, #24]
 801b43c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	f383 8810 	msr	PRIMASK, r3
}
 801b444:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b446:	f7e6 fe35 	bl	80020b4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b44a:	f000 f8a7 	bl	801b59c <TRACE_UnLock>
  }
}
 801b44e:	bf00      	nop
 801b450:	bf00      	nop
 801b452:	3720      	adds	r7, #32
 801b454:	46bd      	mov	sp, r7
 801b456:	bd80      	pop	{r7, pc}
 801b458:	20001588 	.word	0x20001588
 801b45c:	200015a0 	.word	0x200015a0
 801b460:	0801c5c0 	.word	0x0801c5c0

0801b464 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b464:	b480      	push	{r7}
 801b466:	b087      	sub	sp, #28
 801b468:	af00      	add	r7, sp, #0
 801b46a:	4603      	mov	r3, r0
 801b46c:	6039      	str	r1, [r7, #0]
 801b46e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b474:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b476:	f3ef 8310 	mrs	r3, PRIMASK
 801b47a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b47c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b47e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b480:	b672      	cpsid	i
}
 801b482:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b484:	4b35      	ldr	r3, [pc, #212]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b486:	8a5a      	ldrh	r2, [r3, #18]
 801b488:	4b34      	ldr	r3, [pc, #208]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b48a:	8a1b      	ldrh	r3, [r3, #16]
 801b48c:	429a      	cmp	r2, r3
 801b48e:	d11b      	bne.n	801b4c8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b490:	4b32      	ldr	r3, [pc, #200]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b492:	8a5b      	ldrh	r3, [r3, #18]
 801b494:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b498:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b49a:	88fa      	ldrh	r2, [r7, #6]
 801b49c:	8afb      	ldrh	r3, [r7, #22]
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	d33a      	bcc.n	801b518 <TRACE_AllocateBufer+0xb4>
 801b4a2:	4b2e      	ldr	r3, [pc, #184]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4a4:	8a1b      	ldrh	r3, [r3, #16]
 801b4a6:	88fa      	ldrh	r2, [r7, #6]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d235      	bcs.n	801b518 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b4ac:	4b2b      	ldr	r3, [pc, #172]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4ae:	2201      	movs	r2, #1
 801b4b0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b4b2:	4b2a      	ldr	r3, [pc, #168]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4b4:	8a5a      	ldrh	r2, [r3, #18]
 801b4b6:	4b29      	ldr	r3, [pc, #164]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4b8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b4ba:	4b28      	ldr	r3, [pc, #160]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4bc:	8a1b      	ldrh	r3, [r3, #16]
 801b4be:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b4c0:	4b26      	ldr	r3, [pc, #152]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4c2:	2200      	movs	r2, #0
 801b4c4:	825a      	strh	r2, [r3, #18]
 801b4c6:	e027      	b.n	801b518 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b4c8:	4b24      	ldr	r3, [pc, #144]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4ca:	8a5a      	ldrh	r2, [r3, #18]
 801b4cc:	4b23      	ldr	r3, [pc, #140]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4ce:	8a1b      	ldrh	r3, [r3, #16]
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	d91b      	bls.n	801b50c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b4d4:	4b21      	ldr	r3, [pc, #132]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4d6:	8a5b      	ldrh	r3, [r3, #18]
 801b4d8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b4dc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b4de:	88fa      	ldrh	r2, [r7, #6]
 801b4e0:	8afb      	ldrh	r3, [r7, #22]
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	d318      	bcc.n	801b518 <TRACE_AllocateBufer+0xb4>
 801b4e6:	4b1d      	ldr	r3, [pc, #116]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4e8:	8a1b      	ldrh	r3, [r3, #16]
 801b4ea:	88fa      	ldrh	r2, [r7, #6]
 801b4ec:	429a      	cmp	r2, r3
 801b4ee:	d213      	bcs.n	801b518 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b4f0:	4b1a      	ldr	r3, [pc, #104]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4f2:	2201      	movs	r2, #1
 801b4f4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b4f6:	4b19      	ldr	r3, [pc, #100]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4f8:	8a5a      	ldrh	r2, [r3, #18]
 801b4fa:	4b18      	ldr	r3, [pc, #96]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b4fc:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b4fe:	4b17      	ldr	r3, [pc, #92]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b500:	8a1b      	ldrh	r3, [r3, #16]
 801b502:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b504:	4b15      	ldr	r3, [pc, #84]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b506:	2200      	movs	r2, #0
 801b508:	825a      	strh	r2, [r3, #18]
 801b50a:	e005      	b.n	801b518 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b50c:	4b13      	ldr	r3, [pc, #76]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b50e:	8a1a      	ldrh	r2, [r3, #16]
 801b510:	4b12      	ldr	r3, [pc, #72]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b512:	8a5b      	ldrh	r3, [r3, #18]
 801b514:	1ad3      	subs	r3, r2, r3
 801b516:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b518:	8afa      	ldrh	r2, [r7, #22]
 801b51a:	88fb      	ldrh	r3, [r7, #6]
 801b51c:	429a      	cmp	r2, r3
 801b51e:	d90f      	bls.n	801b540 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b520:	4b0e      	ldr	r3, [pc, #56]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b522:	8a5a      	ldrh	r2, [r3, #18]
 801b524:	683b      	ldr	r3, [r7, #0]
 801b526:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b528:	4b0c      	ldr	r3, [pc, #48]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b52a:	8a5a      	ldrh	r2, [r3, #18]
 801b52c:	88fb      	ldrh	r3, [r7, #6]
 801b52e:	4413      	add	r3, r2
 801b530:	b29b      	uxth	r3, r3
 801b532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b536:	b29a      	uxth	r2, r3
 801b538:	4b08      	ldr	r3, [pc, #32]	@ (801b55c <TRACE_AllocateBufer+0xf8>)
 801b53a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b53c:	2300      	movs	r3, #0
 801b53e:	82bb      	strh	r3, [r7, #20]
 801b540:	693b      	ldr	r3, [r7, #16]
 801b542:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b544:	68bb      	ldr	r3, [r7, #8]
 801b546:	f383 8810 	msr	PRIMASK, r3
}
 801b54a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b54c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b550:	4618      	mov	r0, r3
 801b552:	371c      	adds	r7, #28
 801b554:	46bd      	mov	sp, r7
 801b556:	bc80      	pop	{r7}
 801b558:	4770      	bx	lr
 801b55a:	bf00      	nop
 801b55c:	20001588 	.word	0x20001588

0801b560 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b560:	b480      	push	{r7}
 801b562:	b085      	sub	sp, #20
 801b564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b566:	f3ef 8310 	mrs	r3, PRIMASK
 801b56a:	607b      	str	r3, [r7, #4]
  return(result);
 801b56c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b56e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b570:	b672      	cpsid	i
}
 801b572:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b574:	4b08      	ldr	r3, [pc, #32]	@ (801b598 <TRACE_Lock+0x38>)
 801b576:	8adb      	ldrh	r3, [r3, #22]
 801b578:	3301      	adds	r3, #1
 801b57a:	b29a      	uxth	r2, r3
 801b57c:	4b06      	ldr	r3, [pc, #24]	@ (801b598 <TRACE_Lock+0x38>)
 801b57e:	82da      	strh	r2, [r3, #22]
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b584:	68bb      	ldr	r3, [r7, #8]
 801b586:	f383 8810 	msr	PRIMASK, r3
}
 801b58a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b58c:	bf00      	nop
 801b58e:	3714      	adds	r7, #20
 801b590:	46bd      	mov	sp, r7
 801b592:	bc80      	pop	{r7}
 801b594:	4770      	bx	lr
 801b596:	bf00      	nop
 801b598:	20001588 	.word	0x20001588

0801b59c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b59c:	b480      	push	{r7}
 801b59e:	b085      	sub	sp, #20
 801b5a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5a2:	f3ef 8310 	mrs	r3, PRIMASK
 801b5a6:	607b      	str	r3, [r7, #4]
  return(result);
 801b5a8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b5aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5ac:	b672      	cpsid	i
}
 801b5ae:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b5b0:	4b08      	ldr	r3, [pc, #32]	@ (801b5d4 <TRACE_UnLock+0x38>)
 801b5b2:	8adb      	ldrh	r3, [r3, #22]
 801b5b4:	3b01      	subs	r3, #1
 801b5b6:	b29a      	uxth	r2, r3
 801b5b8:	4b06      	ldr	r3, [pc, #24]	@ (801b5d4 <TRACE_UnLock+0x38>)
 801b5ba:	82da      	strh	r2, [r3, #22]
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5c0:	68bb      	ldr	r3, [r7, #8]
 801b5c2:	f383 8810 	msr	PRIMASK, r3
}
 801b5c6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b5c8:	bf00      	nop
 801b5ca:	3714      	adds	r7, #20
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bc80      	pop	{r7}
 801b5d0:	4770      	bx	lr
 801b5d2:	bf00      	nop
 801b5d4:	20001588 	.word	0x20001588

0801b5d8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b5d8:	b480      	push	{r7}
 801b5da:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b5dc:	4b05      	ldr	r3, [pc, #20]	@ (801b5f4 <TRACE_IsLocked+0x1c>)
 801b5de:	8adb      	ldrh	r3, [r3, #22]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	bf14      	ite	ne
 801b5e4:	2301      	movne	r3, #1
 801b5e6:	2300      	moveq	r3, #0
 801b5e8:	b2db      	uxtb	r3, r3
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	bc80      	pop	{r7}
 801b5f0:	4770      	bx	lr
 801b5f2:	bf00      	nop
 801b5f4:	20001588 	.word	0x20001588

0801b5f8 <siprintf>:
 801b5f8:	b40e      	push	{r1, r2, r3}
 801b5fa:	b510      	push	{r4, lr}
 801b5fc:	b09d      	sub	sp, #116	@ 0x74
 801b5fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b600:	9002      	str	r0, [sp, #8]
 801b602:	9006      	str	r0, [sp, #24]
 801b604:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b608:	480a      	ldr	r0, [pc, #40]	@ (801b634 <siprintf+0x3c>)
 801b60a:	9107      	str	r1, [sp, #28]
 801b60c:	9104      	str	r1, [sp, #16]
 801b60e:	490a      	ldr	r1, [pc, #40]	@ (801b638 <siprintf+0x40>)
 801b610:	f853 2b04 	ldr.w	r2, [r3], #4
 801b614:	9105      	str	r1, [sp, #20]
 801b616:	2400      	movs	r4, #0
 801b618:	a902      	add	r1, sp, #8
 801b61a:	6800      	ldr	r0, [r0, #0]
 801b61c:	9301      	str	r3, [sp, #4]
 801b61e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b620:	f000 f994 	bl	801b94c <_svfiprintf_r>
 801b624:	9b02      	ldr	r3, [sp, #8]
 801b626:	701c      	strb	r4, [r3, #0]
 801b628:	b01d      	add	sp, #116	@ 0x74
 801b62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b62e:	b003      	add	sp, #12
 801b630:	4770      	bx	lr
 801b632:	bf00      	nop
 801b634:	20000128 	.word	0x20000128
 801b638:	ffff0208 	.word	0xffff0208

0801b63c <memset>:
 801b63c:	4402      	add	r2, r0
 801b63e:	4603      	mov	r3, r0
 801b640:	4293      	cmp	r3, r2
 801b642:	d100      	bne.n	801b646 <memset+0xa>
 801b644:	4770      	bx	lr
 801b646:	f803 1b01 	strb.w	r1, [r3], #1
 801b64a:	e7f9      	b.n	801b640 <memset+0x4>

0801b64c <__errno>:
 801b64c:	4b01      	ldr	r3, [pc, #4]	@ (801b654 <__errno+0x8>)
 801b64e:	6818      	ldr	r0, [r3, #0]
 801b650:	4770      	bx	lr
 801b652:	bf00      	nop
 801b654:	20000128 	.word	0x20000128

0801b658 <__libc_init_array>:
 801b658:	b570      	push	{r4, r5, r6, lr}
 801b65a:	4d0d      	ldr	r5, [pc, #52]	@ (801b690 <__libc_init_array+0x38>)
 801b65c:	4c0d      	ldr	r4, [pc, #52]	@ (801b694 <__libc_init_array+0x3c>)
 801b65e:	1b64      	subs	r4, r4, r5
 801b660:	10a4      	asrs	r4, r4, #2
 801b662:	2600      	movs	r6, #0
 801b664:	42a6      	cmp	r6, r4
 801b666:	d109      	bne.n	801b67c <__libc_init_array+0x24>
 801b668:	4d0b      	ldr	r5, [pc, #44]	@ (801b698 <__libc_init_array+0x40>)
 801b66a:	4c0c      	ldr	r4, [pc, #48]	@ (801b69c <__libc_init_array+0x44>)
 801b66c:	f000 fce4 	bl	801c038 <_init>
 801b670:	1b64      	subs	r4, r4, r5
 801b672:	10a4      	asrs	r4, r4, #2
 801b674:	2600      	movs	r6, #0
 801b676:	42a6      	cmp	r6, r4
 801b678:	d105      	bne.n	801b686 <__libc_init_array+0x2e>
 801b67a:	bd70      	pop	{r4, r5, r6, pc}
 801b67c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b680:	4798      	blx	r3
 801b682:	3601      	adds	r6, #1
 801b684:	e7ee      	b.n	801b664 <__libc_init_array+0xc>
 801b686:	f855 3b04 	ldr.w	r3, [r5], #4
 801b68a:	4798      	blx	r3
 801b68c:	3601      	adds	r6, #1
 801b68e:	e7f2      	b.n	801b676 <__libc_init_array+0x1e>
 801b690:	0801cc28 	.word	0x0801cc28
 801b694:	0801cc28 	.word	0x0801cc28
 801b698:	0801cc28 	.word	0x0801cc28
 801b69c:	0801cc2c 	.word	0x0801cc2c

0801b6a0 <__retarget_lock_acquire_recursive>:
 801b6a0:	4770      	bx	lr

0801b6a2 <__retarget_lock_release_recursive>:
 801b6a2:	4770      	bx	lr

0801b6a4 <_free_r>:
 801b6a4:	b538      	push	{r3, r4, r5, lr}
 801b6a6:	4605      	mov	r5, r0
 801b6a8:	2900      	cmp	r1, #0
 801b6aa:	d041      	beq.n	801b730 <_free_r+0x8c>
 801b6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6b0:	1f0c      	subs	r4, r1, #4
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	bfb8      	it	lt
 801b6b6:	18e4      	addlt	r4, r4, r3
 801b6b8:	f000 f8e0 	bl	801b87c <__malloc_lock>
 801b6bc:	4a1d      	ldr	r2, [pc, #116]	@ (801b734 <_free_r+0x90>)
 801b6be:	6813      	ldr	r3, [r2, #0]
 801b6c0:	b933      	cbnz	r3, 801b6d0 <_free_r+0x2c>
 801b6c2:	6063      	str	r3, [r4, #4]
 801b6c4:	6014      	str	r4, [r2, #0]
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b6cc:	f000 b8dc 	b.w	801b888 <__malloc_unlock>
 801b6d0:	42a3      	cmp	r3, r4
 801b6d2:	d908      	bls.n	801b6e6 <_free_r+0x42>
 801b6d4:	6820      	ldr	r0, [r4, #0]
 801b6d6:	1821      	adds	r1, r4, r0
 801b6d8:	428b      	cmp	r3, r1
 801b6da:	bf01      	itttt	eq
 801b6dc:	6819      	ldreq	r1, [r3, #0]
 801b6de:	685b      	ldreq	r3, [r3, #4]
 801b6e0:	1809      	addeq	r1, r1, r0
 801b6e2:	6021      	streq	r1, [r4, #0]
 801b6e4:	e7ed      	b.n	801b6c2 <_free_r+0x1e>
 801b6e6:	461a      	mov	r2, r3
 801b6e8:	685b      	ldr	r3, [r3, #4]
 801b6ea:	b10b      	cbz	r3, 801b6f0 <_free_r+0x4c>
 801b6ec:	42a3      	cmp	r3, r4
 801b6ee:	d9fa      	bls.n	801b6e6 <_free_r+0x42>
 801b6f0:	6811      	ldr	r1, [r2, #0]
 801b6f2:	1850      	adds	r0, r2, r1
 801b6f4:	42a0      	cmp	r0, r4
 801b6f6:	d10b      	bne.n	801b710 <_free_r+0x6c>
 801b6f8:	6820      	ldr	r0, [r4, #0]
 801b6fa:	4401      	add	r1, r0
 801b6fc:	1850      	adds	r0, r2, r1
 801b6fe:	4283      	cmp	r3, r0
 801b700:	6011      	str	r1, [r2, #0]
 801b702:	d1e0      	bne.n	801b6c6 <_free_r+0x22>
 801b704:	6818      	ldr	r0, [r3, #0]
 801b706:	685b      	ldr	r3, [r3, #4]
 801b708:	6053      	str	r3, [r2, #4]
 801b70a:	4408      	add	r0, r1
 801b70c:	6010      	str	r0, [r2, #0]
 801b70e:	e7da      	b.n	801b6c6 <_free_r+0x22>
 801b710:	d902      	bls.n	801b718 <_free_r+0x74>
 801b712:	230c      	movs	r3, #12
 801b714:	602b      	str	r3, [r5, #0]
 801b716:	e7d6      	b.n	801b6c6 <_free_r+0x22>
 801b718:	6820      	ldr	r0, [r4, #0]
 801b71a:	1821      	adds	r1, r4, r0
 801b71c:	428b      	cmp	r3, r1
 801b71e:	bf04      	itt	eq
 801b720:	6819      	ldreq	r1, [r3, #0]
 801b722:	685b      	ldreq	r3, [r3, #4]
 801b724:	6063      	str	r3, [r4, #4]
 801b726:	bf04      	itt	eq
 801b728:	1809      	addeq	r1, r1, r0
 801b72a:	6021      	streq	r1, [r4, #0]
 801b72c:	6054      	str	r4, [r2, #4]
 801b72e:	e7ca      	b.n	801b6c6 <_free_r+0x22>
 801b730:	bd38      	pop	{r3, r4, r5, pc}
 801b732:	bf00      	nop
 801b734:	20001ce4 	.word	0x20001ce4

0801b738 <sbrk_aligned>:
 801b738:	b570      	push	{r4, r5, r6, lr}
 801b73a:	4e0f      	ldr	r6, [pc, #60]	@ (801b778 <sbrk_aligned+0x40>)
 801b73c:	460c      	mov	r4, r1
 801b73e:	6831      	ldr	r1, [r6, #0]
 801b740:	4605      	mov	r5, r0
 801b742:	b911      	cbnz	r1, 801b74a <sbrk_aligned+0x12>
 801b744:	f000 fba4 	bl	801be90 <_sbrk_r>
 801b748:	6030      	str	r0, [r6, #0]
 801b74a:	4621      	mov	r1, r4
 801b74c:	4628      	mov	r0, r5
 801b74e:	f000 fb9f 	bl	801be90 <_sbrk_r>
 801b752:	1c43      	adds	r3, r0, #1
 801b754:	d103      	bne.n	801b75e <sbrk_aligned+0x26>
 801b756:	f04f 34ff 	mov.w	r4, #4294967295
 801b75a:	4620      	mov	r0, r4
 801b75c:	bd70      	pop	{r4, r5, r6, pc}
 801b75e:	1cc4      	adds	r4, r0, #3
 801b760:	f024 0403 	bic.w	r4, r4, #3
 801b764:	42a0      	cmp	r0, r4
 801b766:	d0f8      	beq.n	801b75a <sbrk_aligned+0x22>
 801b768:	1a21      	subs	r1, r4, r0
 801b76a:	4628      	mov	r0, r5
 801b76c:	f000 fb90 	bl	801be90 <_sbrk_r>
 801b770:	3001      	adds	r0, #1
 801b772:	d1f2      	bne.n	801b75a <sbrk_aligned+0x22>
 801b774:	e7ef      	b.n	801b756 <sbrk_aligned+0x1e>
 801b776:	bf00      	nop
 801b778:	20001ce0 	.word	0x20001ce0

0801b77c <_malloc_r>:
 801b77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b780:	1ccd      	adds	r5, r1, #3
 801b782:	f025 0503 	bic.w	r5, r5, #3
 801b786:	3508      	adds	r5, #8
 801b788:	2d0c      	cmp	r5, #12
 801b78a:	bf38      	it	cc
 801b78c:	250c      	movcc	r5, #12
 801b78e:	2d00      	cmp	r5, #0
 801b790:	4606      	mov	r6, r0
 801b792:	db01      	blt.n	801b798 <_malloc_r+0x1c>
 801b794:	42a9      	cmp	r1, r5
 801b796:	d904      	bls.n	801b7a2 <_malloc_r+0x26>
 801b798:	230c      	movs	r3, #12
 801b79a:	6033      	str	r3, [r6, #0]
 801b79c:	2000      	movs	r0, #0
 801b79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b7a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b878 <_malloc_r+0xfc>
 801b7a6:	f000 f869 	bl	801b87c <__malloc_lock>
 801b7aa:	f8d8 3000 	ldr.w	r3, [r8]
 801b7ae:	461c      	mov	r4, r3
 801b7b0:	bb44      	cbnz	r4, 801b804 <_malloc_r+0x88>
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	4630      	mov	r0, r6
 801b7b6:	f7ff ffbf 	bl	801b738 <sbrk_aligned>
 801b7ba:	1c43      	adds	r3, r0, #1
 801b7bc:	4604      	mov	r4, r0
 801b7be:	d158      	bne.n	801b872 <_malloc_r+0xf6>
 801b7c0:	f8d8 4000 	ldr.w	r4, [r8]
 801b7c4:	4627      	mov	r7, r4
 801b7c6:	2f00      	cmp	r7, #0
 801b7c8:	d143      	bne.n	801b852 <_malloc_r+0xd6>
 801b7ca:	2c00      	cmp	r4, #0
 801b7cc:	d04b      	beq.n	801b866 <_malloc_r+0xea>
 801b7ce:	6823      	ldr	r3, [r4, #0]
 801b7d0:	4639      	mov	r1, r7
 801b7d2:	4630      	mov	r0, r6
 801b7d4:	eb04 0903 	add.w	r9, r4, r3
 801b7d8:	f000 fb5a 	bl	801be90 <_sbrk_r>
 801b7dc:	4581      	cmp	r9, r0
 801b7de:	d142      	bne.n	801b866 <_malloc_r+0xea>
 801b7e0:	6821      	ldr	r1, [r4, #0]
 801b7e2:	1a6d      	subs	r5, r5, r1
 801b7e4:	4629      	mov	r1, r5
 801b7e6:	4630      	mov	r0, r6
 801b7e8:	f7ff ffa6 	bl	801b738 <sbrk_aligned>
 801b7ec:	3001      	adds	r0, #1
 801b7ee:	d03a      	beq.n	801b866 <_malloc_r+0xea>
 801b7f0:	6823      	ldr	r3, [r4, #0]
 801b7f2:	442b      	add	r3, r5
 801b7f4:	6023      	str	r3, [r4, #0]
 801b7f6:	f8d8 3000 	ldr.w	r3, [r8]
 801b7fa:	685a      	ldr	r2, [r3, #4]
 801b7fc:	bb62      	cbnz	r2, 801b858 <_malloc_r+0xdc>
 801b7fe:	f8c8 7000 	str.w	r7, [r8]
 801b802:	e00f      	b.n	801b824 <_malloc_r+0xa8>
 801b804:	6822      	ldr	r2, [r4, #0]
 801b806:	1b52      	subs	r2, r2, r5
 801b808:	d420      	bmi.n	801b84c <_malloc_r+0xd0>
 801b80a:	2a0b      	cmp	r2, #11
 801b80c:	d917      	bls.n	801b83e <_malloc_r+0xc2>
 801b80e:	1961      	adds	r1, r4, r5
 801b810:	42a3      	cmp	r3, r4
 801b812:	6025      	str	r5, [r4, #0]
 801b814:	bf18      	it	ne
 801b816:	6059      	strne	r1, [r3, #4]
 801b818:	6863      	ldr	r3, [r4, #4]
 801b81a:	bf08      	it	eq
 801b81c:	f8c8 1000 	streq.w	r1, [r8]
 801b820:	5162      	str	r2, [r4, r5]
 801b822:	604b      	str	r3, [r1, #4]
 801b824:	4630      	mov	r0, r6
 801b826:	f000 f82f 	bl	801b888 <__malloc_unlock>
 801b82a:	f104 000b 	add.w	r0, r4, #11
 801b82e:	1d23      	adds	r3, r4, #4
 801b830:	f020 0007 	bic.w	r0, r0, #7
 801b834:	1ac2      	subs	r2, r0, r3
 801b836:	bf1c      	itt	ne
 801b838:	1a1b      	subne	r3, r3, r0
 801b83a:	50a3      	strne	r3, [r4, r2]
 801b83c:	e7af      	b.n	801b79e <_malloc_r+0x22>
 801b83e:	6862      	ldr	r2, [r4, #4]
 801b840:	42a3      	cmp	r3, r4
 801b842:	bf0c      	ite	eq
 801b844:	f8c8 2000 	streq.w	r2, [r8]
 801b848:	605a      	strne	r2, [r3, #4]
 801b84a:	e7eb      	b.n	801b824 <_malloc_r+0xa8>
 801b84c:	4623      	mov	r3, r4
 801b84e:	6864      	ldr	r4, [r4, #4]
 801b850:	e7ae      	b.n	801b7b0 <_malloc_r+0x34>
 801b852:	463c      	mov	r4, r7
 801b854:	687f      	ldr	r7, [r7, #4]
 801b856:	e7b6      	b.n	801b7c6 <_malloc_r+0x4a>
 801b858:	461a      	mov	r2, r3
 801b85a:	685b      	ldr	r3, [r3, #4]
 801b85c:	42a3      	cmp	r3, r4
 801b85e:	d1fb      	bne.n	801b858 <_malloc_r+0xdc>
 801b860:	2300      	movs	r3, #0
 801b862:	6053      	str	r3, [r2, #4]
 801b864:	e7de      	b.n	801b824 <_malloc_r+0xa8>
 801b866:	230c      	movs	r3, #12
 801b868:	6033      	str	r3, [r6, #0]
 801b86a:	4630      	mov	r0, r6
 801b86c:	f000 f80c 	bl	801b888 <__malloc_unlock>
 801b870:	e794      	b.n	801b79c <_malloc_r+0x20>
 801b872:	6005      	str	r5, [r0, #0]
 801b874:	e7d6      	b.n	801b824 <_malloc_r+0xa8>
 801b876:	bf00      	nop
 801b878:	20001ce4 	.word	0x20001ce4

0801b87c <__malloc_lock>:
 801b87c:	4801      	ldr	r0, [pc, #4]	@ (801b884 <__malloc_lock+0x8>)
 801b87e:	f7ff bf0f 	b.w	801b6a0 <__retarget_lock_acquire_recursive>
 801b882:	bf00      	nop
 801b884:	20001cdc 	.word	0x20001cdc

0801b888 <__malloc_unlock>:
 801b888:	4801      	ldr	r0, [pc, #4]	@ (801b890 <__malloc_unlock+0x8>)
 801b88a:	f7ff bf0a 	b.w	801b6a2 <__retarget_lock_release_recursive>
 801b88e:	bf00      	nop
 801b890:	20001cdc 	.word	0x20001cdc

0801b894 <__ssputs_r>:
 801b894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b898:	688e      	ldr	r6, [r1, #8]
 801b89a:	461f      	mov	r7, r3
 801b89c:	42be      	cmp	r6, r7
 801b89e:	680b      	ldr	r3, [r1, #0]
 801b8a0:	4682      	mov	sl, r0
 801b8a2:	460c      	mov	r4, r1
 801b8a4:	4690      	mov	r8, r2
 801b8a6:	d82d      	bhi.n	801b904 <__ssputs_r+0x70>
 801b8a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b8ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b8b0:	d026      	beq.n	801b900 <__ssputs_r+0x6c>
 801b8b2:	6965      	ldr	r5, [r4, #20]
 801b8b4:	6909      	ldr	r1, [r1, #16]
 801b8b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8ba:	eba3 0901 	sub.w	r9, r3, r1
 801b8be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b8c2:	1c7b      	adds	r3, r7, #1
 801b8c4:	444b      	add	r3, r9
 801b8c6:	106d      	asrs	r5, r5, #1
 801b8c8:	429d      	cmp	r5, r3
 801b8ca:	bf38      	it	cc
 801b8cc:	461d      	movcc	r5, r3
 801b8ce:	0553      	lsls	r3, r2, #21
 801b8d0:	d527      	bpl.n	801b922 <__ssputs_r+0x8e>
 801b8d2:	4629      	mov	r1, r5
 801b8d4:	f7ff ff52 	bl	801b77c <_malloc_r>
 801b8d8:	4606      	mov	r6, r0
 801b8da:	b360      	cbz	r0, 801b936 <__ssputs_r+0xa2>
 801b8dc:	6921      	ldr	r1, [r4, #16]
 801b8de:	464a      	mov	r2, r9
 801b8e0:	f000 fae6 	bl	801beb0 <memcpy>
 801b8e4:	89a3      	ldrh	r3, [r4, #12]
 801b8e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b8ee:	81a3      	strh	r3, [r4, #12]
 801b8f0:	6126      	str	r6, [r4, #16]
 801b8f2:	6165      	str	r5, [r4, #20]
 801b8f4:	444e      	add	r6, r9
 801b8f6:	eba5 0509 	sub.w	r5, r5, r9
 801b8fa:	6026      	str	r6, [r4, #0]
 801b8fc:	60a5      	str	r5, [r4, #8]
 801b8fe:	463e      	mov	r6, r7
 801b900:	42be      	cmp	r6, r7
 801b902:	d900      	bls.n	801b906 <__ssputs_r+0x72>
 801b904:	463e      	mov	r6, r7
 801b906:	6820      	ldr	r0, [r4, #0]
 801b908:	4632      	mov	r2, r6
 801b90a:	4641      	mov	r1, r8
 801b90c:	f000 faa6 	bl	801be5c <memmove>
 801b910:	68a3      	ldr	r3, [r4, #8]
 801b912:	1b9b      	subs	r3, r3, r6
 801b914:	60a3      	str	r3, [r4, #8]
 801b916:	6823      	ldr	r3, [r4, #0]
 801b918:	4433      	add	r3, r6
 801b91a:	6023      	str	r3, [r4, #0]
 801b91c:	2000      	movs	r0, #0
 801b91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b922:	462a      	mov	r2, r5
 801b924:	f000 fad2 	bl	801becc <_realloc_r>
 801b928:	4606      	mov	r6, r0
 801b92a:	2800      	cmp	r0, #0
 801b92c:	d1e0      	bne.n	801b8f0 <__ssputs_r+0x5c>
 801b92e:	6921      	ldr	r1, [r4, #16]
 801b930:	4650      	mov	r0, sl
 801b932:	f7ff feb7 	bl	801b6a4 <_free_r>
 801b936:	230c      	movs	r3, #12
 801b938:	f8ca 3000 	str.w	r3, [sl]
 801b93c:	89a3      	ldrh	r3, [r4, #12]
 801b93e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b942:	81a3      	strh	r3, [r4, #12]
 801b944:	f04f 30ff 	mov.w	r0, #4294967295
 801b948:	e7e9      	b.n	801b91e <__ssputs_r+0x8a>
	...

0801b94c <_svfiprintf_r>:
 801b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b950:	4698      	mov	r8, r3
 801b952:	898b      	ldrh	r3, [r1, #12]
 801b954:	061b      	lsls	r3, r3, #24
 801b956:	b09d      	sub	sp, #116	@ 0x74
 801b958:	4607      	mov	r7, r0
 801b95a:	460d      	mov	r5, r1
 801b95c:	4614      	mov	r4, r2
 801b95e:	d510      	bpl.n	801b982 <_svfiprintf_r+0x36>
 801b960:	690b      	ldr	r3, [r1, #16]
 801b962:	b973      	cbnz	r3, 801b982 <_svfiprintf_r+0x36>
 801b964:	2140      	movs	r1, #64	@ 0x40
 801b966:	f7ff ff09 	bl	801b77c <_malloc_r>
 801b96a:	6028      	str	r0, [r5, #0]
 801b96c:	6128      	str	r0, [r5, #16]
 801b96e:	b930      	cbnz	r0, 801b97e <_svfiprintf_r+0x32>
 801b970:	230c      	movs	r3, #12
 801b972:	603b      	str	r3, [r7, #0]
 801b974:	f04f 30ff 	mov.w	r0, #4294967295
 801b978:	b01d      	add	sp, #116	@ 0x74
 801b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b97e:	2340      	movs	r3, #64	@ 0x40
 801b980:	616b      	str	r3, [r5, #20]
 801b982:	2300      	movs	r3, #0
 801b984:	9309      	str	r3, [sp, #36]	@ 0x24
 801b986:	2320      	movs	r3, #32
 801b988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b98c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b990:	2330      	movs	r3, #48	@ 0x30
 801b992:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bb30 <_svfiprintf_r+0x1e4>
 801b996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b99a:	f04f 0901 	mov.w	r9, #1
 801b99e:	4623      	mov	r3, r4
 801b9a0:	469a      	mov	sl, r3
 801b9a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9a6:	b10a      	cbz	r2, 801b9ac <_svfiprintf_r+0x60>
 801b9a8:	2a25      	cmp	r2, #37	@ 0x25
 801b9aa:	d1f9      	bne.n	801b9a0 <_svfiprintf_r+0x54>
 801b9ac:	ebba 0b04 	subs.w	fp, sl, r4
 801b9b0:	d00b      	beq.n	801b9ca <_svfiprintf_r+0x7e>
 801b9b2:	465b      	mov	r3, fp
 801b9b4:	4622      	mov	r2, r4
 801b9b6:	4629      	mov	r1, r5
 801b9b8:	4638      	mov	r0, r7
 801b9ba:	f7ff ff6b 	bl	801b894 <__ssputs_r>
 801b9be:	3001      	adds	r0, #1
 801b9c0:	f000 80a7 	beq.w	801bb12 <_svfiprintf_r+0x1c6>
 801b9c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9c6:	445a      	add	r2, fp
 801b9c8:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9ca:	f89a 3000 	ldrb.w	r3, [sl]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	f000 809f 	beq.w	801bb12 <_svfiprintf_r+0x1c6>
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	f04f 32ff 	mov.w	r2, #4294967295
 801b9da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9de:	f10a 0a01 	add.w	sl, sl, #1
 801b9e2:	9304      	str	r3, [sp, #16]
 801b9e4:	9307      	str	r3, [sp, #28]
 801b9e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9ea:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9ec:	4654      	mov	r4, sl
 801b9ee:	2205      	movs	r2, #5
 801b9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9f4:	484e      	ldr	r0, [pc, #312]	@ (801bb30 <_svfiprintf_r+0x1e4>)
 801b9f6:	f7e4 fbcb 	bl	8000190 <memchr>
 801b9fa:	9a04      	ldr	r2, [sp, #16]
 801b9fc:	b9d8      	cbnz	r0, 801ba36 <_svfiprintf_r+0xea>
 801b9fe:	06d0      	lsls	r0, r2, #27
 801ba00:	bf44      	itt	mi
 801ba02:	2320      	movmi	r3, #32
 801ba04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba08:	0711      	lsls	r1, r2, #28
 801ba0a:	bf44      	itt	mi
 801ba0c:	232b      	movmi	r3, #43	@ 0x2b
 801ba0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba12:	f89a 3000 	ldrb.w	r3, [sl]
 801ba16:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba18:	d015      	beq.n	801ba46 <_svfiprintf_r+0xfa>
 801ba1a:	9a07      	ldr	r2, [sp, #28]
 801ba1c:	4654      	mov	r4, sl
 801ba1e:	2000      	movs	r0, #0
 801ba20:	f04f 0c0a 	mov.w	ip, #10
 801ba24:	4621      	mov	r1, r4
 801ba26:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba2a:	3b30      	subs	r3, #48	@ 0x30
 801ba2c:	2b09      	cmp	r3, #9
 801ba2e:	d94b      	bls.n	801bac8 <_svfiprintf_r+0x17c>
 801ba30:	b1b0      	cbz	r0, 801ba60 <_svfiprintf_r+0x114>
 801ba32:	9207      	str	r2, [sp, #28]
 801ba34:	e014      	b.n	801ba60 <_svfiprintf_r+0x114>
 801ba36:	eba0 0308 	sub.w	r3, r0, r8
 801ba3a:	fa09 f303 	lsl.w	r3, r9, r3
 801ba3e:	4313      	orrs	r3, r2
 801ba40:	9304      	str	r3, [sp, #16]
 801ba42:	46a2      	mov	sl, r4
 801ba44:	e7d2      	b.n	801b9ec <_svfiprintf_r+0xa0>
 801ba46:	9b03      	ldr	r3, [sp, #12]
 801ba48:	1d19      	adds	r1, r3, #4
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	9103      	str	r1, [sp, #12]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	bfbb      	ittet	lt
 801ba52:	425b      	neglt	r3, r3
 801ba54:	f042 0202 	orrlt.w	r2, r2, #2
 801ba58:	9307      	strge	r3, [sp, #28]
 801ba5a:	9307      	strlt	r3, [sp, #28]
 801ba5c:	bfb8      	it	lt
 801ba5e:	9204      	strlt	r2, [sp, #16]
 801ba60:	7823      	ldrb	r3, [r4, #0]
 801ba62:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba64:	d10a      	bne.n	801ba7c <_svfiprintf_r+0x130>
 801ba66:	7863      	ldrb	r3, [r4, #1]
 801ba68:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba6a:	d132      	bne.n	801bad2 <_svfiprintf_r+0x186>
 801ba6c:	9b03      	ldr	r3, [sp, #12]
 801ba6e:	1d1a      	adds	r2, r3, #4
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	9203      	str	r2, [sp, #12]
 801ba74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba78:	3402      	adds	r4, #2
 801ba7a:	9305      	str	r3, [sp, #20]
 801ba7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 801bb34 <_svfiprintf_r+0x1e8>
 801ba80:	7821      	ldrb	r1, [r4, #0]
 801ba82:	2203      	movs	r2, #3
 801ba84:	4650      	mov	r0, sl
 801ba86:	f7e4 fb83 	bl	8000190 <memchr>
 801ba8a:	b138      	cbz	r0, 801ba9c <_svfiprintf_r+0x150>
 801ba8c:	9b04      	ldr	r3, [sp, #16]
 801ba8e:	eba0 000a 	sub.w	r0, r0, sl
 801ba92:	2240      	movs	r2, #64	@ 0x40
 801ba94:	4082      	lsls	r2, r0
 801ba96:	4313      	orrs	r3, r2
 801ba98:	3401      	adds	r4, #1
 801ba9a:	9304      	str	r3, [sp, #16]
 801ba9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801baa0:	4825      	ldr	r0, [pc, #148]	@ (801bb38 <_svfiprintf_r+0x1ec>)
 801baa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801baa6:	2206      	movs	r2, #6
 801baa8:	f7e4 fb72 	bl	8000190 <memchr>
 801baac:	2800      	cmp	r0, #0
 801baae:	d036      	beq.n	801bb1e <_svfiprintf_r+0x1d2>
 801bab0:	4b22      	ldr	r3, [pc, #136]	@ (801bb3c <_svfiprintf_r+0x1f0>)
 801bab2:	bb1b      	cbnz	r3, 801bafc <_svfiprintf_r+0x1b0>
 801bab4:	9b03      	ldr	r3, [sp, #12]
 801bab6:	3307      	adds	r3, #7
 801bab8:	f023 0307 	bic.w	r3, r3, #7
 801babc:	3308      	adds	r3, #8
 801babe:	9303      	str	r3, [sp, #12]
 801bac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bac2:	4433      	add	r3, r6
 801bac4:	9309      	str	r3, [sp, #36]	@ 0x24
 801bac6:	e76a      	b.n	801b99e <_svfiprintf_r+0x52>
 801bac8:	fb0c 3202 	mla	r2, ip, r2, r3
 801bacc:	460c      	mov	r4, r1
 801bace:	2001      	movs	r0, #1
 801bad0:	e7a8      	b.n	801ba24 <_svfiprintf_r+0xd8>
 801bad2:	2300      	movs	r3, #0
 801bad4:	3401      	adds	r4, #1
 801bad6:	9305      	str	r3, [sp, #20]
 801bad8:	4619      	mov	r1, r3
 801bada:	f04f 0c0a 	mov.w	ip, #10
 801bade:	4620      	mov	r0, r4
 801bae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bae4:	3a30      	subs	r2, #48	@ 0x30
 801bae6:	2a09      	cmp	r2, #9
 801bae8:	d903      	bls.n	801baf2 <_svfiprintf_r+0x1a6>
 801baea:	2b00      	cmp	r3, #0
 801baec:	d0c6      	beq.n	801ba7c <_svfiprintf_r+0x130>
 801baee:	9105      	str	r1, [sp, #20]
 801baf0:	e7c4      	b.n	801ba7c <_svfiprintf_r+0x130>
 801baf2:	fb0c 2101 	mla	r1, ip, r1, r2
 801baf6:	4604      	mov	r4, r0
 801baf8:	2301      	movs	r3, #1
 801bafa:	e7f0      	b.n	801bade <_svfiprintf_r+0x192>
 801bafc:	ab03      	add	r3, sp, #12
 801bafe:	9300      	str	r3, [sp, #0]
 801bb00:	462a      	mov	r2, r5
 801bb02:	4b0f      	ldr	r3, [pc, #60]	@ (801bb40 <_svfiprintf_r+0x1f4>)
 801bb04:	a904      	add	r1, sp, #16
 801bb06:	4638      	mov	r0, r7
 801bb08:	f3af 8000 	nop.w
 801bb0c:	1c42      	adds	r2, r0, #1
 801bb0e:	4606      	mov	r6, r0
 801bb10:	d1d6      	bne.n	801bac0 <_svfiprintf_r+0x174>
 801bb12:	89ab      	ldrh	r3, [r5, #12]
 801bb14:	065b      	lsls	r3, r3, #25
 801bb16:	f53f af2d 	bmi.w	801b974 <_svfiprintf_r+0x28>
 801bb1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb1c:	e72c      	b.n	801b978 <_svfiprintf_r+0x2c>
 801bb1e:	ab03      	add	r3, sp, #12
 801bb20:	9300      	str	r3, [sp, #0]
 801bb22:	462a      	mov	r2, r5
 801bb24:	4b06      	ldr	r3, [pc, #24]	@ (801bb40 <_svfiprintf_r+0x1f4>)
 801bb26:	a904      	add	r1, sp, #16
 801bb28:	4638      	mov	r0, r7
 801bb2a:	f000 f879 	bl	801bc20 <_printf_i>
 801bb2e:	e7ed      	b.n	801bb0c <_svfiprintf_r+0x1c0>
 801bb30:	0801cb14 	.word	0x0801cb14
 801bb34:	0801cb1a 	.word	0x0801cb1a
 801bb38:	0801cb1e 	.word	0x0801cb1e
 801bb3c:	00000000 	.word	0x00000000
 801bb40:	0801b895 	.word	0x0801b895

0801bb44 <_printf_common>:
 801bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb48:	4616      	mov	r6, r2
 801bb4a:	4698      	mov	r8, r3
 801bb4c:	688a      	ldr	r2, [r1, #8]
 801bb4e:	690b      	ldr	r3, [r1, #16]
 801bb50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bb54:	4293      	cmp	r3, r2
 801bb56:	bfb8      	it	lt
 801bb58:	4613      	movlt	r3, r2
 801bb5a:	6033      	str	r3, [r6, #0]
 801bb5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bb60:	4607      	mov	r7, r0
 801bb62:	460c      	mov	r4, r1
 801bb64:	b10a      	cbz	r2, 801bb6a <_printf_common+0x26>
 801bb66:	3301      	adds	r3, #1
 801bb68:	6033      	str	r3, [r6, #0]
 801bb6a:	6823      	ldr	r3, [r4, #0]
 801bb6c:	0699      	lsls	r1, r3, #26
 801bb6e:	bf42      	ittt	mi
 801bb70:	6833      	ldrmi	r3, [r6, #0]
 801bb72:	3302      	addmi	r3, #2
 801bb74:	6033      	strmi	r3, [r6, #0]
 801bb76:	6825      	ldr	r5, [r4, #0]
 801bb78:	f015 0506 	ands.w	r5, r5, #6
 801bb7c:	d106      	bne.n	801bb8c <_printf_common+0x48>
 801bb7e:	f104 0a19 	add.w	sl, r4, #25
 801bb82:	68e3      	ldr	r3, [r4, #12]
 801bb84:	6832      	ldr	r2, [r6, #0]
 801bb86:	1a9b      	subs	r3, r3, r2
 801bb88:	42ab      	cmp	r3, r5
 801bb8a:	dc26      	bgt.n	801bbda <_printf_common+0x96>
 801bb8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bb90:	6822      	ldr	r2, [r4, #0]
 801bb92:	3b00      	subs	r3, #0
 801bb94:	bf18      	it	ne
 801bb96:	2301      	movne	r3, #1
 801bb98:	0692      	lsls	r2, r2, #26
 801bb9a:	d42b      	bmi.n	801bbf4 <_printf_common+0xb0>
 801bb9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bba0:	4641      	mov	r1, r8
 801bba2:	4638      	mov	r0, r7
 801bba4:	47c8      	blx	r9
 801bba6:	3001      	adds	r0, #1
 801bba8:	d01e      	beq.n	801bbe8 <_printf_common+0xa4>
 801bbaa:	6823      	ldr	r3, [r4, #0]
 801bbac:	6922      	ldr	r2, [r4, #16]
 801bbae:	f003 0306 	and.w	r3, r3, #6
 801bbb2:	2b04      	cmp	r3, #4
 801bbb4:	bf02      	ittt	eq
 801bbb6:	68e5      	ldreq	r5, [r4, #12]
 801bbb8:	6833      	ldreq	r3, [r6, #0]
 801bbba:	1aed      	subeq	r5, r5, r3
 801bbbc:	68a3      	ldr	r3, [r4, #8]
 801bbbe:	bf0c      	ite	eq
 801bbc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bbc4:	2500      	movne	r5, #0
 801bbc6:	4293      	cmp	r3, r2
 801bbc8:	bfc4      	itt	gt
 801bbca:	1a9b      	subgt	r3, r3, r2
 801bbcc:	18ed      	addgt	r5, r5, r3
 801bbce:	2600      	movs	r6, #0
 801bbd0:	341a      	adds	r4, #26
 801bbd2:	42b5      	cmp	r5, r6
 801bbd4:	d11a      	bne.n	801bc0c <_printf_common+0xc8>
 801bbd6:	2000      	movs	r0, #0
 801bbd8:	e008      	b.n	801bbec <_printf_common+0xa8>
 801bbda:	2301      	movs	r3, #1
 801bbdc:	4652      	mov	r2, sl
 801bbde:	4641      	mov	r1, r8
 801bbe0:	4638      	mov	r0, r7
 801bbe2:	47c8      	blx	r9
 801bbe4:	3001      	adds	r0, #1
 801bbe6:	d103      	bne.n	801bbf0 <_printf_common+0xac>
 801bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 801bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbf0:	3501      	adds	r5, #1
 801bbf2:	e7c6      	b.n	801bb82 <_printf_common+0x3e>
 801bbf4:	18e1      	adds	r1, r4, r3
 801bbf6:	1c5a      	adds	r2, r3, #1
 801bbf8:	2030      	movs	r0, #48	@ 0x30
 801bbfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bbfe:	4422      	add	r2, r4
 801bc00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bc04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bc08:	3302      	adds	r3, #2
 801bc0a:	e7c7      	b.n	801bb9c <_printf_common+0x58>
 801bc0c:	2301      	movs	r3, #1
 801bc0e:	4622      	mov	r2, r4
 801bc10:	4641      	mov	r1, r8
 801bc12:	4638      	mov	r0, r7
 801bc14:	47c8      	blx	r9
 801bc16:	3001      	adds	r0, #1
 801bc18:	d0e6      	beq.n	801bbe8 <_printf_common+0xa4>
 801bc1a:	3601      	adds	r6, #1
 801bc1c:	e7d9      	b.n	801bbd2 <_printf_common+0x8e>
	...

0801bc20 <_printf_i>:
 801bc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc24:	7e0f      	ldrb	r7, [r1, #24]
 801bc26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bc28:	2f78      	cmp	r7, #120	@ 0x78
 801bc2a:	4691      	mov	r9, r2
 801bc2c:	4680      	mov	r8, r0
 801bc2e:	460c      	mov	r4, r1
 801bc30:	469a      	mov	sl, r3
 801bc32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bc36:	d807      	bhi.n	801bc48 <_printf_i+0x28>
 801bc38:	2f62      	cmp	r7, #98	@ 0x62
 801bc3a:	d80a      	bhi.n	801bc52 <_printf_i+0x32>
 801bc3c:	2f00      	cmp	r7, #0
 801bc3e:	f000 80d1 	beq.w	801bde4 <_printf_i+0x1c4>
 801bc42:	2f58      	cmp	r7, #88	@ 0x58
 801bc44:	f000 80b8 	beq.w	801bdb8 <_printf_i+0x198>
 801bc48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bc4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bc50:	e03a      	b.n	801bcc8 <_printf_i+0xa8>
 801bc52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bc56:	2b15      	cmp	r3, #21
 801bc58:	d8f6      	bhi.n	801bc48 <_printf_i+0x28>
 801bc5a:	a101      	add	r1, pc, #4	@ (adr r1, 801bc60 <_printf_i+0x40>)
 801bc5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bc60:	0801bcb9 	.word	0x0801bcb9
 801bc64:	0801bccd 	.word	0x0801bccd
 801bc68:	0801bc49 	.word	0x0801bc49
 801bc6c:	0801bc49 	.word	0x0801bc49
 801bc70:	0801bc49 	.word	0x0801bc49
 801bc74:	0801bc49 	.word	0x0801bc49
 801bc78:	0801bccd 	.word	0x0801bccd
 801bc7c:	0801bc49 	.word	0x0801bc49
 801bc80:	0801bc49 	.word	0x0801bc49
 801bc84:	0801bc49 	.word	0x0801bc49
 801bc88:	0801bc49 	.word	0x0801bc49
 801bc8c:	0801bdcb 	.word	0x0801bdcb
 801bc90:	0801bcf7 	.word	0x0801bcf7
 801bc94:	0801bd85 	.word	0x0801bd85
 801bc98:	0801bc49 	.word	0x0801bc49
 801bc9c:	0801bc49 	.word	0x0801bc49
 801bca0:	0801bded 	.word	0x0801bded
 801bca4:	0801bc49 	.word	0x0801bc49
 801bca8:	0801bcf7 	.word	0x0801bcf7
 801bcac:	0801bc49 	.word	0x0801bc49
 801bcb0:	0801bc49 	.word	0x0801bc49
 801bcb4:	0801bd8d 	.word	0x0801bd8d
 801bcb8:	6833      	ldr	r3, [r6, #0]
 801bcba:	1d1a      	adds	r2, r3, #4
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	6032      	str	r2, [r6, #0]
 801bcc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bcc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bcc8:	2301      	movs	r3, #1
 801bcca:	e09c      	b.n	801be06 <_printf_i+0x1e6>
 801bccc:	6833      	ldr	r3, [r6, #0]
 801bcce:	6820      	ldr	r0, [r4, #0]
 801bcd0:	1d19      	adds	r1, r3, #4
 801bcd2:	6031      	str	r1, [r6, #0]
 801bcd4:	0606      	lsls	r6, r0, #24
 801bcd6:	d501      	bpl.n	801bcdc <_printf_i+0xbc>
 801bcd8:	681d      	ldr	r5, [r3, #0]
 801bcda:	e003      	b.n	801bce4 <_printf_i+0xc4>
 801bcdc:	0645      	lsls	r5, r0, #25
 801bcde:	d5fb      	bpl.n	801bcd8 <_printf_i+0xb8>
 801bce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bce4:	2d00      	cmp	r5, #0
 801bce6:	da03      	bge.n	801bcf0 <_printf_i+0xd0>
 801bce8:	232d      	movs	r3, #45	@ 0x2d
 801bcea:	426d      	negs	r5, r5
 801bcec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bcf0:	4858      	ldr	r0, [pc, #352]	@ (801be54 <_printf_i+0x234>)
 801bcf2:	230a      	movs	r3, #10
 801bcf4:	e011      	b.n	801bd1a <_printf_i+0xfa>
 801bcf6:	6821      	ldr	r1, [r4, #0]
 801bcf8:	6833      	ldr	r3, [r6, #0]
 801bcfa:	0608      	lsls	r0, r1, #24
 801bcfc:	f853 5b04 	ldr.w	r5, [r3], #4
 801bd00:	d402      	bmi.n	801bd08 <_printf_i+0xe8>
 801bd02:	0649      	lsls	r1, r1, #25
 801bd04:	bf48      	it	mi
 801bd06:	b2ad      	uxthmi	r5, r5
 801bd08:	2f6f      	cmp	r7, #111	@ 0x6f
 801bd0a:	4852      	ldr	r0, [pc, #328]	@ (801be54 <_printf_i+0x234>)
 801bd0c:	6033      	str	r3, [r6, #0]
 801bd0e:	bf14      	ite	ne
 801bd10:	230a      	movne	r3, #10
 801bd12:	2308      	moveq	r3, #8
 801bd14:	2100      	movs	r1, #0
 801bd16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bd1a:	6866      	ldr	r6, [r4, #4]
 801bd1c:	60a6      	str	r6, [r4, #8]
 801bd1e:	2e00      	cmp	r6, #0
 801bd20:	db05      	blt.n	801bd2e <_printf_i+0x10e>
 801bd22:	6821      	ldr	r1, [r4, #0]
 801bd24:	432e      	orrs	r6, r5
 801bd26:	f021 0104 	bic.w	r1, r1, #4
 801bd2a:	6021      	str	r1, [r4, #0]
 801bd2c:	d04b      	beq.n	801bdc6 <_printf_i+0x1a6>
 801bd2e:	4616      	mov	r6, r2
 801bd30:	fbb5 f1f3 	udiv	r1, r5, r3
 801bd34:	fb03 5711 	mls	r7, r3, r1, r5
 801bd38:	5dc7      	ldrb	r7, [r0, r7]
 801bd3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bd3e:	462f      	mov	r7, r5
 801bd40:	42bb      	cmp	r3, r7
 801bd42:	460d      	mov	r5, r1
 801bd44:	d9f4      	bls.n	801bd30 <_printf_i+0x110>
 801bd46:	2b08      	cmp	r3, #8
 801bd48:	d10b      	bne.n	801bd62 <_printf_i+0x142>
 801bd4a:	6823      	ldr	r3, [r4, #0]
 801bd4c:	07df      	lsls	r7, r3, #31
 801bd4e:	d508      	bpl.n	801bd62 <_printf_i+0x142>
 801bd50:	6923      	ldr	r3, [r4, #16]
 801bd52:	6861      	ldr	r1, [r4, #4]
 801bd54:	4299      	cmp	r1, r3
 801bd56:	bfde      	ittt	le
 801bd58:	2330      	movle	r3, #48	@ 0x30
 801bd5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bd5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bd62:	1b92      	subs	r2, r2, r6
 801bd64:	6122      	str	r2, [r4, #16]
 801bd66:	f8cd a000 	str.w	sl, [sp]
 801bd6a:	464b      	mov	r3, r9
 801bd6c:	aa03      	add	r2, sp, #12
 801bd6e:	4621      	mov	r1, r4
 801bd70:	4640      	mov	r0, r8
 801bd72:	f7ff fee7 	bl	801bb44 <_printf_common>
 801bd76:	3001      	adds	r0, #1
 801bd78:	d14a      	bne.n	801be10 <_printf_i+0x1f0>
 801bd7a:	f04f 30ff 	mov.w	r0, #4294967295
 801bd7e:	b004      	add	sp, #16
 801bd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd84:	6823      	ldr	r3, [r4, #0]
 801bd86:	f043 0320 	orr.w	r3, r3, #32
 801bd8a:	6023      	str	r3, [r4, #0]
 801bd8c:	4832      	ldr	r0, [pc, #200]	@ (801be58 <_printf_i+0x238>)
 801bd8e:	2778      	movs	r7, #120	@ 0x78
 801bd90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bd94:	6823      	ldr	r3, [r4, #0]
 801bd96:	6831      	ldr	r1, [r6, #0]
 801bd98:	061f      	lsls	r7, r3, #24
 801bd9a:	f851 5b04 	ldr.w	r5, [r1], #4
 801bd9e:	d402      	bmi.n	801bda6 <_printf_i+0x186>
 801bda0:	065f      	lsls	r7, r3, #25
 801bda2:	bf48      	it	mi
 801bda4:	b2ad      	uxthmi	r5, r5
 801bda6:	6031      	str	r1, [r6, #0]
 801bda8:	07d9      	lsls	r1, r3, #31
 801bdaa:	bf44      	itt	mi
 801bdac:	f043 0320 	orrmi.w	r3, r3, #32
 801bdb0:	6023      	strmi	r3, [r4, #0]
 801bdb2:	b11d      	cbz	r5, 801bdbc <_printf_i+0x19c>
 801bdb4:	2310      	movs	r3, #16
 801bdb6:	e7ad      	b.n	801bd14 <_printf_i+0xf4>
 801bdb8:	4826      	ldr	r0, [pc, #152]	@ (801be54 <_printf_i+0x234>)
 801bdba:	e7e9      	b.n	801bd90 <_printf_i+0x170>
 801bdbc:	6823      	ldr	r3, [r4, #0]
 801bdbe:	f023 0320 	bic.w	r3, r3, #32
 801bdc2:	6023      	str	r3, [r4, #0]
 801bdc4:	e7f6      	b.n	801bdb4 <_printf_i+0x194>
 801bdc6:	4616      	mov	r6, r2
 801bdc8:	e7bd      	b.n	801bd46 <_printf_i+0x126>
 801bdca:	6833      	ldr	r3, [r6, #0]
 801bdcc:	6825      	ldr	r5, [r4, #0]
 801bdce:	6961      	ldr	r1, [r4, #20]
 801bdd0:	1d18      	adds	r0, r3, #4
 801bdd2:	6030      	str	r0, [r6, #0]
 801bdd4:	062e      	lsls	r6, r5, #24
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	d501      	bpl.n	801bdde <_printf_i+0x1be>
 801bdda:	6019      	str	r1, [r3, #0]
 801bddc:	e002      	b.n	801bde4 <_printf_i+0x1c4>
 801bdde:	0668      	lsls	r0, r5, #25
 801bde0:	d5fb      	bpl.n	801bdda <_printf_i+0x1ba>
 801bde2:	8019      	strh	r1, [r3, #0]
 801bde4:	2300      	movs	r3, #0
 801bde6:	6123      	str	r3, [r4, #16]
 801bde8:	4616      	mov	r6, r2
 801bdea:	e7bc      	b.n	801bd66 <_printf_i+0x146>
 801bdec:	6833      	ldr	r3, [r6, #0]
 801bdee:	1d1a      	adds	r2, r3, #4
 801bdf0:	6032      	str	r2, [r6, #0]
 801bdf2:	681e      	ldr	r6, [r3, #0]
 801bdf4:	6862      	ldr	r2, [r4, #4]
 801bdf6:	2100      	movs	r1, #0
 801bdf8:	4630      	mov	r0, r6
 801bdfa:	f7e4 f9c9 	bl	8000190 <memchr>
 801bdfe:	b108      	cbz	r0, 801be04 <_printf_i+0x1e4>
 801be00:	1b80      	subs	r0, r0, r6
 801be02:	6060      	str	r0, [r4, #4]
 801be04:	6863      	ldr	r3, [r4, #4]
 801be06:	6123      	str	r3, [r4, #16]
 801be08:	2300      	movs	r3, #0
 801be0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be0e:	e7aa      	b.n	801bd66 <_printf_i+0x146>
 801be10:	6923      	ldr	r3, [r4, #16]
 801be12:	4632      	mov	r2, r6
 801be14:	4649      	mov	r1, r9
 801be16:	4640      	mov	r0, r8
 801be18:	47d0      	blx	sl
 801be1a:	3001      	adds	r0, #1
 801be1c:	d0ad      	beq.n	801bd7a <_printf_i+0x15a>
 801be1e:	6823      	ldr	r3, [r4, #0]
 801be20:	079b      	lsls	r3, r3, #30
 801be22:	d413      	bmi.n	801be4c <_printf_i+0x22c>
 801be24:	68e0      	ldr	r0, [r4, #12]
 801be26:	9b03      	ldr	r3, [sp, #12]
 801be28:	4298      	cmp	r0, r3
 801be2a:	bfb8      	it	lt
 801be2c:	4618      	movlt	r0, r3
 801be2e:	e7a6      	b.n	801bd7e <_printf_i+0x15e>
 801be30:	2301      	movs	r3, #1
 801be32:	4632      	mov	r2, r6
 801be34:	4649      	mov	r1, r9
 801be36:	4640      	mov	r0, r8
 801be38:	47d0      	blx	sl
 801be3a:	3001      	adds	r0, #1
 801be3c:	d09d      	beq.n	801bd7a <_printf_i+0x15a>
 801be3e:	3501      	adds	r5, #1
 801be40:	68e3      	ldr	r3, [r4, #12]
 801be42:	9903      	ldr	r1, [sp, #12]
 801be44:	1a5b      	subs	r3, r3, r1
 801be46:	42ab      	cmp	r3, r5
 801be48:	dcf2      	bgt.n	801be30 <_printf_i+0x210>
 801be4a:	e7eb      	b.n	801be24 <_printf_i+0x204>
 801be4c:	2500      	movs	r5, #0
 801be4e:	f104 0619 	add.w	r6, r4, #25
 801be52:	e7f5      	b.n	801be40 <_printf_i+0x220>
 801be54:	0801cb25 	.word	0x0801cb25
 801be58:	0801cb36 	.word	0x0801cb36

0801be5c <memmove>:
 801be5c:	4288      	cmp	r0, r1
 801be5e:	b510      	push	{r4, lr}
 801be60:	eb01 0402 	add.w	r4, r1, r2
 801be64:	d902      	bls.n	801be6c <memmove+0x10>
 801be66:	4284      	cmp	r4, r0
 801be68:	4623      	mov	r3, r4
 801be6a:	d807      	bhi.n	801be7c <memmove+0x20>
 801be6c:	1e43      	subs	r3, r0, #1
 801be6e:	42a1      	cmp	r1, r4
 801be70:	d008      	beq.n	801be84 <memmove+0x28>
 801be72:	f811 2b01 	ldrb.w	r2, [r1], #1
 801be76:	f803 2f01 	strb.w	r2, [r3, #1]!
 801be7a:	e7f8      	b.n	801be6e <memmove+0x12>
 801be7c:	4402      	add	r2, r0
 801be7e:	4601      	mov	r1, r0
 801be80:	428a      	cmp	r2, r1
 801be82:	d100      	bne.n	801be86 <memmove+0x2a>
 801be84:	bd10      	pop	{r4, pc}
 801be86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801be8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801be8e:	e7f7      	b.n	801be80 <memmove+0x24>

0801be90 <_sbrk_r>:
 801be90:	b538      	push	{r3, r4, r5, lr}
 801be92:	4d06      	ldr	r5, [pc, #24]	@ (801beac <_sbrk_r+0x1c>)
 801be94:	2300      	movs	r3, #0
 801be96:	4604      	mov	r4, r0
 801be98:	4608      	mov	r0, r1
 801be9a:	602b      	str	r3, [r5, #0]
 801be9c:	f7e6 f9a8 	bl	80021f0 <_sbrk>
 801bea0:	1c43      	adds	r3, r0, #1
 801bea2:	d102      	bne.n	801beaa <_sbrk_r+0x1a>
 801bea4:	682b      	ldr	r3, [r5, #0]
 801bea6:	b103      	cbz	r3, 801beaa <_sbrk_r+0x1a>
 801bea8:	6023      	str	r3, [r4, #0]
 801beaa:	bd38      	pop	{r3, r4, r5, pc}
 801beac:	20001cd8 	.word	0x20001cd8

0801beb0 <memcpy>:
 801beb0:	440a      	add	r2, r1
 801beb2:	4291      	cmp	r1, r2
 801beb4:	f100 33ff 	add.w	r3, r0, #4294967295
 801beb8:	d100      	bne.n	801bebc <memcpy+0xc>
 801beba:	4770      	bx	lr
 801bebc:	b510      	push	{r4, lr}
 801bebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bec6:	4291      	cmp	r1, r2
 801bec8:	d1f9      	bne.n	801bebe <memcpy+0xe>
 801beca:	bd10      	pop	{r4, pc}

0801becc <_realloc_r>:
 801becc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bed0:	4607      	mov	r7, r0
 801bed2:	4614      	mov	r4, r2
 801bed4:	460d      	mov	r5, r1
 801bed6:	b921      	cbnz	r1, 801bee2 <_realloc_r+0x16>
 801bed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bedc:	4611      	mov	r1, r2
 801bede:	f7ff bc4d 	b.w	801b77c <_malloc_r>
 801bee2:	b92a      	cbnz	r2, 801bef0 <_realloc_r+0x24>
 801bee4:	f7ff fbde 	bl	801b6a4 <_free_r>
 801bee8:	4625      	mov	r5, r4
 801beea:	4628      	mov	r0, r5
 801beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bef0:	f000 f81a 	bl	801bf28 <_malloc_usable_size_r>
 801bef4:	4284      	cmp	r4, r0
 801bef6:	4606      	mov	r6, r0
 801bef8:	d802      	bhi.n	801bf00 <_realloc_r+0x34>
 801befa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801befe:	d8f4      	bhi.n	801beea <_realloc_r+0x1e>
 801bf00:	4621      	mov	r1, r4
 801bf02:	4638      	mov	r0, r7
 801bf04:	f7ff fc3a 	bl	801b77c <_malloc_r>
 801bf08:	4680      	mov	r8, r0
 801bf0a:	b908      	cbnz	r0, 801bf10 <_realloc_r+0x44>
 801bf0c:	4645      	mov	r5, r8
 801bf0e:	e7ec      	b.n	801beea <_realloc_r+0x1e>
 801bf10:	42b4      	cmp	r4, r6
 801bf12:	4622      	mov	r2, r4
 801bf14:	4629      	mov	r1, r5
 801bf16:	bf28      	it	cs
 801bf18:	4632      	movcs	r2, r6
 801bf1a:	f7ff ffc9 	bl	801beb0 <memcpy>
 801bf1e:	4629      	mov	r1, r5
 801bf20:	4638      	mov	r0, r7
 801bf22:	f7ff fbbf 	bl	801b6a4 <_free_r>
 801bf26:	e7f1      	b.n	801bf0c <_realloc_r+0x40>

0801bf28 <_malloc_usable_size_r>:
 801bf28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf2c:	1f18      	subs	r0, r3, #4
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	bfbc      	itt	lt
 801bf32:	580b      	ldrlt	r3, [r1, r0]
 801bf34:	18c0      	addlt	r0, r0, r3
 801bf36:	4770      	bx	lr

0801bf38 <floor>:
 801bf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf3c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801bf40:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801bf44:	2e13      	cmp	r6, #19
 801bf46:	4602      	mov	r2, r0
 801bf48:	460b      	mov	r3, r1
 801bf4a:	460c      	mov	r4, r1
 801bf4c:	4605      	mov	r5, r0
 801bf4e:	4680      	mov	r8, r0
 801bf50:	dc35      	bgt.n	801bfbe <floor+0x86>
 801bf52:	2e00      	cmp	r6, #0
 801bf54:	da17      	bge.n	801bf86 <floor+0x4e>
 801bf56:	a334      	add	r3, pc, #208	@ (adr r3, 801c028 <floor+0xf0>)
 801bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf5c:	f7e4 f96e 	bl	800023c <__adddf3>
 801bf60:	2200      	movs	r2, #0
 801bf62:	2300      	movs	r3, #0
 801bf64:	f7e4 fb9e 	bl	80006a4 <__aeabi_dcmpgt>
 801bf68:	b150      	cbz	r0, 801bf80 <floor+0x48>
 801bf6a:	2c00      	cmp	r4, #0
 801bf6c:	da57      	bge.n	801c01e <floor+0xe6>
 801bf6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801bf72:	432c      	orrs	r4, r5
 801bf74:	2500      	movs	r5, #0
 801bf76:	42ac      	cmp	r4, r5
 801bf78:	4c2d      	ldr	r4, [pc, #180]	@ (801c030 <floor+0xf8>)
 801bf7a:	bf08      	it	eq
 801bf7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801bf80:	4623      	mov	r3, r4
 801bf82:	462a      	mov	r2, r5
 801bf84:	e024      	b.n	801bfd0 <floor+0x98>
 801bf86:	4f2b      	ldr	r7, [pc, #172]	@ (801c034 <floor+0xfc>)
 801bf88:	4137      	asrs	r7, r6
 801bf8a:	ea01 0c07 	and.w	ip, r1, r7
 801bf8e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801bf92:	d01d      	beq.n	801bfd0 <floor+0x98>
 801bf94:	a324      	add	r3, pc, #144	@ (adr r3, 801c028 <floor+0xf0>)
 801bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf9a:	f7e4 f94f 	bl	800023c <__adddf3>
 801bf9e:	2200      	movs	r2, #0
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	f7e4 fb7f 	bl	80006a4 <__aeabi_dcmpgt>
 801bfa6:	2800      	cmp	r0, #0
 801bfa8:	d0ea      	beq.n	801bf80 <floor+0x48>
 801bfaa:	2c00      	cmp	r4, #0
 801bfac:	bfbe      	ittt	lt
 801bfae:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801bfb2:	4133      	asrlt	r3, r6
 801bfb4:	18e4      	addlt	r4, r4, r3
 801bfb6:	ea24 0407 	bic.w	r4, r4, r7
 801bfba:	2500      	movs	r5, #0
 801bfbc:	e7e0      	b.n	801bf80 <floor+0x48>
 801bfbe:	2e33      	cmp	r6, #51	@ 0x33
 801bfc0:	dd0a      	ble.n	801bfd8 <floor+0xa0>
 801bfc2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801bfc6:	d103      	bne.n	801bfd0 <floor+0x98>
 801bfc8:	f7e4 f938 	bl	800023c <__adddf3>
 801bfcc:	4602      	mov	r2, r0
 801bfce:	460b      	mov	r3, r1
 801bfd0:	4610      	mov	r0, r2
 801bfd2:	4619      	mov	r1, r3
 801bfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfd8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801bfdc:	f04f 3cff 	mov.w	ip, #4294967295
 801bfe0:	fa2c f707 	lsr.w	r7, ip, r7
 801bfe4:	4207      	tst	r7, r0
 801bfe6:	d0f3      	beq.n	801bfd0 <floor+0x98>
 801bfe8:	a30f      	add	r3, pc, #60	@ (adr r3, 801c028 <floor+0xf0>)
 801bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfee:	f7e4 f925 	bl	800023c <__adddf3>
 801bff2:	2200      	movs	r2, #0
 801bff4:	2300      	movs	r3, #0
 801bff6:	f7e4 fb55 	bl	80006a4 <__aeabi_dcmpgt>
 801bffa:	2800      	cmp	r0, #0
 801bffc:	d0c0      	beq.n	801bf80 <floor+0x48>
 801bffe:	2c00      	cmp	r4, #0
 801c000:	da0a      	bge.n	801c018 <floor+0xe0>
 801c002:	2e14      	cmp	r6, #20
 801c004:	d101      	bne.n	801c00a <floor+0xd2>
 801c006:	3401      	adds	r4, #1
 801c008:	e006      	b.n	801c018 <floor+0xe0>
 801c00a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801c00e:	2301      	movs	r3, #1
 801c010:	40b3      	lsls	r3, r6
 801c012:	441d      	add	r5, r3
 801c014:	4545      	cmp	r5, r8
 801c016:	d3f6      	bcc.n	801c006 <floor+0xce>
 801c018:	ea25 0507 	bic.w	r5, r5, r7
 801c01c:	e7b0      	b.n	801bf80 <floor+0x48>
 801c01e:	2500      	movs	r5, #0
 801c020:	462c      	mov	r4, r5
 801c022:	e7ad      	b.n	801bf80 <floor+0x48>
 801c024:	f3af 8000 	nop.w
 801c028:	8800759c 	.word	0x8800759c
 801c02c:	7e37e43c 	.word	0x7e37e43c
 801c030:	bff00000 	.word	0xbff00000
 801c034:	000fffff 	.word	0x000fffff

0801c038 <_init>:
 801c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c03a:	bf00      	nop
 801c03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c03e:	bc08      	pop	{r3}
 801c040:	469e      	mov	lr, r3
 801c042:	4770      	bx	lr

0801c044 <_fini>:
 801c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c046:	bf00      	nop
 801c048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c04a:	bc08      	pop	{r3}
 801c04c:	469e      	mov	lr, r3
 801c04e:	4770      	bx	lr
